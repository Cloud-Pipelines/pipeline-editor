{"version":3,"sources":["DragNDrop/ComponentTaskNode.tsx","DragNDrop/GraphComponentSpecFlow.tsx","github.ts","DragNDrop/ComponentLibrary.tsx","DragNDrop/ComponentSearch.tsx","DragNDrop/graphComponentFromFlow.ts","DragNDrop/GraphComponentExporter.tsx","DragNDrop/vertexAiCompiler.ts","DragNDrop/GoogleCloud.tsx","DragNDrop/VertexAiExporter.tsx","DragNDrop/Sidebar.tsx","DragNDrop/samplePipelines.ts","DragNDrop/index.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["inputHandlePosition","Position","Top","outputHandlePosition","Bottom","generateHandles","ioSpecs","handleType","position","idPrefix","handleComponents","numHandles","length","i","ioSpec","id","name","positionPercentString","String","style","left","top","ioTypeName","type","toString","className","push","isConnectable","title","ComponentTaskNode","componentSpec","data","componentRef","spec","undefined","label","inputHandles","inputs","outputHandles","outputs","concat","nodeTypes","task","memo","GraphComponentSpecFlow","children","initialGraphSpec","tasks","rest","useState","reactFlowInstance","setReactFlowInstance","originalGraphSpec","setGraphSpec","graphSpec","nodes","Object","entries","map","taskId","taskSpec","x","y","annotations","layoutAnnotation","decodedPosition","JSON","parse","err","edges","flatMap","arguments","inputName","argument","taskOutput","outputName","source","sourceHandle","target","targetHandle","arrowHeadType","ArrowHeadType","ArrowClosed","replaceGraphSpec","newGraphSpec","setTaskArgument","oldTaskSpec","oldTaskSpecArguments","newTaskSpecArguments","removeTaskArgument","addConnection","connection","replace","removeEdge","edge","removeNode","node","taskIdToRemove","elements","onConnect","params","onDragOver","event","preventDefault","dataTransfer","dropEffect","onDrop","droppedData","getData","droppedDataObject","nodeType","keys","nodeData","project","clientX","clientY","newAnnotations","taskPosition","stringify","baseName","finalName","index","nodeNames","Set","has","getId","onEdgeUpdate","oldEdge","newConnection","onElementsRemove","elementsToRemove","element","isEdge","isNode","onLoad","_reactFlowInstance","SEARCH_CACHE_NAME","BLOB_CACHE_NAME","DB_NAME","HASH_TO_CONTENT_DB_TABLE_NAME","HASH_TO_COMPONENT_NAME_DB_TABLE_NAME","URL_TO_HASH_DB_TABLE_NAME","HASH_TO_URL_DB_TABLE_NAME","URL_PROCESSING_VERSION_TABLE_NAME","BAD_HASHES_TABLE_NAME","httpGetWithCache","urlOrRequest","cacheName","a","updateIfInCache","caches","open","cache","match","response","add","response2","Promise","reject","searchGitHubCodeWithCache","query","page","sort","order","encodedQuery","encodeURIComponent","encodedSort","encodedOrder","searchUrl","json","githubHtmlUrlToDownloadUrl","htmlUrl","getComponentUrlsAndHashes","users","urlsAndHashes","user","join","searchResults","items","item","url","html_url","hash","sha","resolve","setTimeout","downloadComponentDataWithCache","blob","text","componentText","yaml","load","cacheAllComponents","console","debug","urlsAndHashesIterator","urlToHashDb","localForage","createInstance","storeName","hashToUrlDb","hashToContentDb","hashToComponentNameDb","urlProcessingVersionDb","badHashesDb","toLowerCase","getItem","badHashReason","downloadUrl","endsWith","cachedHash","error","urlVersion","Number","parseInt","setItem","message","implementation","getAllComponentsAsRefs","hashToComponentRef","Map","cachePromise","iterate","iterationNumber","set","get","componentRefs","forEach","searchComponentsByName","filter","ref","includes","DraggableComponentRow","componentUrl","setComponentSpec","useEffect","then","draggable","onDragStart","setData","effectAllowed","ComponentGroupList","componentGroups","Array","from","category","componentUrls","border","borderRadius","borderWidth","padding","ComponentLibrary","paddingLeft","COMPONENT_ORGS","SearchPanel","props","setError","firstTime","setFirstTime","isLoaded","setIsLoaded","setQuery","setItems","results","componentElements","onSubmit","e","fetchData","placeholder","onChange","value","getNodePositionAnnotations","__rf","width","height","nodeOrderComparer","n1","n2","createGraphComponentSpecFromFlowElements","includePositions","includeSpecs","inputNodes","outputNodes","taskNodes","inputSpecs","outputSpecs","taskMap","reduce","accumulator","assign","graphOutputValues","sourceTaskId","sourceOutputName","targetTaskId","targetInputName","graphInput","targetTask","taskOutputArgument","graphComponent","metadata","graph","outputValues","GraphComponentExporter","pipelineName","useStoreState","store","dump","lineWidth","componentTextBlob","Blob","downloadLink","href","URL","createObjectURL","download","overflow","typeSpecToVertexPrimitiveTypeEnum","typeSpec","typeSpecToVertexParameterSpec","taskSpecToVertexTaskSpecComponentSpecAndExecutorSpec","taskArguments","Error","containerSpec","container","resolvedCommandLine","inputsConsumedAsValue","inputsConsumedAsPath","convertArg","arg","inputValue","inputPath","outputPath","if","cond","else","ifCond","ifThen","ifElse","condEvaluatesToTrue","isPresent","taskArgument","unresolvedArgs","command","args","resolveCommandLine","vertexExecutorSpec","image","inputMap","inputSpec","vertexComponentSpec","inputDefinitions","parameters","fromEntries","values","artifacts","artifactType","schemaTitle","outputDefinitions","outputSpec","executorLabel","vertexTaskSpec","taskInfo","default","optional","runtimeValue","constantValue","stringValue","componentInputParameter","taskOutputParameter","producerTask","outputParameterKey","componentInputArtifact","taskOutputArtifact","outputArtifactKey","cachingOptions","enableCache","graphComponentSpecToVertexPipelineSpec","vertexComponentInputsSpec","vertexExecutors","vertexComponents","vertexTasks","vertexExecutorId","vertexComponentId","vertexTaskId","componentName","pipelineInfo","sdkVersion","schemaVersion","deploymentSpec","executors","components","root","dag","generateVertexPipelineJobFromGraphComponent","gcsOutputDirectory","pipelineArguments","convertedPipelineArguments","key","runtimeConfig","pipelineSpec","CLIENT_ID","API_KEY","VERTEX_AI_PIPELINES_REGIONS","authorizeGoogleCloudClient","scopes","immediate","apiKey","clientId","gapi","client","setApiKey","auth","authorize","client_id","scope","authResult","ensureGoogleCloudAuthorizesScopes","cloudresourcemanagerListProjects","request","path","result","aiplatformCreatePipelineJob","projetId","region","pipelineJob","method","body","GoogleCloudSubmitter","projects","setProjects","setProject","setRegion","setGcsOutputDirectory","pipelineJobWebUrl","setPipelineJobWebUrl","vertexPipelineJobJson","vertexPipelineJobUrl","vertexPipelineJob","pipelineJobName","pipelineJobId","split","slice","htmlFor","required","list","projectId","onClick","projectIds","projectInfo","rel","VertexAiExporter","vertexPipelineSpecText","vertexPipelineSpec","vertexPipelineSpecTextBlob","vertexPipelineSpecTextBlobUrl","COMPONENT_LIBRARY","Sidebar","fontWeight","GoogleCloud","input","output","ComponentSearch","xgBoostQueryTrainPredictPipeline","dataset","Select","Where","train","training_data","predict","model","label_column","preloadComponentReferences","componentMap","taskComponentSpec","DnDFlow","pipeline","deleteKeyCode","multiSelectionKeyCode","snapToGrid","snapGrid","gap","App","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","process","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f23aa084.chunk.js","sourcesContent":["import { memo } from 'react';\r\nimport {TaskSpec, InputSpec, OutputSpec} from '../componentSpec';\r\n\r\nimport { Handle, Position, NodeProps, HandleType } from 'react-flow-renderer';\r\n\r\nconst inputHandlePosition = Position.Top;\r\nconst outputHandlePosition = Position.Bottom;\r\n\r\ntype InputOrOutputSpec = InputSpec | OutputSpec;\r\n\r\nfunction generateHandles(\r\n  ioSpecs: InputOrOutputSpec[],\r\n  handleType: HandleType,\r\n  position: Position,\r\n  idPrefix: string,\r\n): JSX.Element[] {\r\n  let handleComponents = [];\r\n  const numHandles = ioSpecs.length;\r\n  for (let i = 0; i < numHandles; i++) {\r\n    const ioSpec = ioSpecs[i];\r\n    const id = idPrefix + ioSpec.name;\r\n    const relativePosition = (i + 1) / (numHandles + 1);\r\n    const positionPercentString = String(100 * relativePosition) + \"%\";\r\n    const style =\r\n      position === Position.Top || position === Position.Bottom\r\n        ? { left: positionPercentString }\r\n        : { top: positionPercentString };\r\n    const ioTypeName = ioSpec.type?.toString() ?? \"Any\";\r\n    const className = ioTypeName; // Need to be sanitized\r\n    handleComponents.push(\r\n      <Handle\r\n        key={id}\r\n        type={handleType}\r\n        position={position}\r\n        id={id}\r\n        style={style}\r\n        isConnectable={true}\r\n        title={ioSpec.name + \" : \" + ioTypeName}\r\n        className={\"handle_\" + className}\r\n      />\r\n    );\r\n  }\r\n  return handleComponents;\r\n}\r\n\r\nfunction generateInputHandles(inputSpecs: InputSpec[]): JSX.Element[] {\r\n  return generateHandles(inputSpecs, \"target\", inputHandlePosition, \"input_\");\r\n}\r\n\r\nfunction generateOutputHandles(outputSpecs: OutputSpec[]): JSX.Element[] {\r\n  return generateHandles(outputSpecs, \"source\", outputHandlePosition, \"output_\");\r\n}\r\n\r\nconst ComponentTaskNode = ({data}: NodeProps<TaskSpec>) => {\r\n  const taskSpec = data;\r\n  const componentSpec = taskSpec.componentRef.spec;\r\n  if (componentSpec === undefined) {\r\n    return (<></>);\r\n  }\r\n\r\n  const label = componentSpec.name ?? \"<component>\";\r\n  const inputHandles = generateInputHandles(componentSpec.inputs ?? []);\r\n  const outputHandles = generateOutputHandles(componentSpec.outputs ?? []);\r\n  const handleComponents = inputHandles.concat(outputHandles);\r\n\r\n  return (\r\n    <>\r\n      {label}\r\n      {handleComponents}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(ComponentTaskNode);\r\n","import React, { DragEvent, useState } from \"react\";\r\nimport ReactFlow, {\r\n  ArrowHeadType,\r\n  Connection,\r\n  Edge,\r\n  ElementId,\r\n  Elements,\r\n  isEdge,\r\n  isNode,\r\n  Node,\r\n  OnLoadParams,\r\n  ReactFlowProps,\r\n  XYPosition,\r\n} from \"react-flow-renderer\";\r\n\r\nimport {\r\n  ArgumentType,\r\n  GraphSpec,\r\n  TaskOutputArgument,\r\n  TaskSpec,\r\n} from \"../componentSpec\";\r\nimport ComponentTaskNode from \"./ComponentTaskNode\";\r\n\r\nexport interface GraphComponentSpecFlowProps\r\n  extends Omit<ReactFlowProps, \"elements\"> {\r\n  initialGraphSpec?: GraphSpec;\r\n}\r\n\r\nconst nodeTypes = {\r\n  task: ComponentTaskNode,\r\n};\r\n\r\nconst GraphComponentSpecFlow = ({\r\n  children,\r\n  //TODO:Replace GraphSpec with the full ComponentSpec\r\n  initialGraphSpec = { tasks: {} },\r\n  ...rest\r\n}: GraphComponentSpecFlowProps) => {\r\n  const [reactFlowInstance, setReactFlowInstance] = useState<OnLoadParams>();\r\n  const [originalGraphSpec, setGraphSpec] =\r\n    useState<GraphSpec>(initialGraphSpec);\r\n  let graphSpec = originalGraphSpec;\r\n\r\n  const nodes = Object.entries(graphSpec.tasks).map<Node<TaskSpec>>(\r\n    ([taskId, taskSpec]) => {\r\n      let position: XYPosition = { x: 0, y: 0 };\r\n      if (taskSpec.annotations !== undefined) {\r\n        try {\r\n          const layoutAnnotation = taskSpec.annotations[\r\n            \"editor.position\"\r\n          ] as string;\r\n          const decodedPosition = JSON.parse(layoutAnnotation);\r\n          position = { x: decodedPosition[\"x\"], y: decodedPosition[\"y\"] };\r\n        } catch (err) {}\r\n      }\r\n\r\n      return {\r\n        id: taskId,\r\n        data: taskSpec,\r\n        position: position,\r\n        type: \"task\",\r\n      };\r\n    }\r\n  );\r\n\r\n  const edges: Edge[] = Object.entries(graphSpec.tasks).flatMap(\r\n    ([taskId, taskSpec]) => {\r\n      return Object.entries(taskSpec.arguments ?? {}).flatMap(\r\n        ([inputName, argument]) => {\r\n          // TODO: Handle graph inputs\r\n          if (typeof argument !== \"string\" && \"taskOutput\" in argument) {\r\n            const taskOutput = argument.taskOutput;\r\n            const edge: Edge = {\r\n              id: `${taskOutput.taskId}_${taskOutput.outputName}-${taskId}_${inputName}`,\r\n              source: taskOutput.taskId,\r\n              sourceHandle: `output_${taskOutput.outputName}`,\r\n              target: taskId,\r\n              targetHandle: `input_${inputName}`,\r\n              arrowHeadType: ArrowHeadType.ArrowClosed,\r\n            };\r\n            return [edge];\r\n          } else {\r\n            return [];\r\n          }\r\n        }\r\n      );\r\n    }\r\n  );\r\n  // TODO: Handle graph outputs\r\n\r\n  const replaceGraphSpec = (newGraphSpec: GraphSpec) => {\r\n    graphSpec = newGraphSpec;\r\n    setGraphSpec(newGraphSpec);\r\n  };\r\n\r\n  const setTaskArgument = (\r\n    taskId: string,\r\n    inputName: string,\r\n    argument?: ArgumentType\r\n  ) => {\r\n    const oldTaskSpec = graphSpec.tasks[taskId];\r\n    const oldTaskSpecArguments = oldTaskSpec.arguments;\r\n    let newTaskSpecArguments: Record<string, ArgumentType> = {\r\n      ...oldTaskSpecArguments,\r\n    };\r\n    if (argument === undefined) {\r\n      delete newTaskSpecArguments[inputName];\r\n    } else {\r\n      newTaskSpecArguments[inputName] = argument;\r\n    }\r\n    let newGraphSpec: GraphSpec = {\r\n      ...graphSpec,\r\n      tasks: { ...graphSpec.tasks },\r\n    };\r\n    newGraphSpec.tasks[taskId] = {\r\n      ...oldTaskSpec,\r\n      arguments: newTaskSpecArguments,\r\n    };\r\n    replaceGraphSpec(newGraphSpec);\r\n  };\r\n\r\n  const removeTaskArgument = (taskId: string, inputName: string) =>\r\n    setTaskArgument(taskId, inputName, undefined);\r\n\r\n  const addConnection = (connection: Connection | Edge) => {\r\n    if (\r\n      connection.source === null ||\r\n      connection.sourceHandle === null ||\r\n      connection.sourceHandle === undefined ||\r\n      connection.target === null ||\r\n      connection.targetHandle === null ||\r\n      connection.targetHandle === undefined\r\n    ) {\r\n      return;\r\n    }\r\n    const inputName = connection.targetHandle.replace(/^input_/, \"\");\r\n    const outputName = connection.sourceHandle.replace(/^output_/, \"\");\r\n\r\n    const argument: TaskOutputArgument = {\r\n      taskOutput: {\r\n        taskId: connection.source,\r\n        outputName: outputName,\r\n      },\r\n    };\r\n\r\n    setTaskArgument(connection.target, inputName, argument);\r\n  };\r\n\r\n  const onConnect = (params: Connection | Edge) => {\r\n    addConnection(params);\r\n  };\r\n\r\n  const removeEdge = (edge: Edge) => {\r\n    // TODO: Handle graph input and output connections\r\n    if (\r\n      edge.sourceHandle === null ||\r\n      edge.sourceHandle === undefined ||\r\n      edge.targetHandle === null ||\r\n      edge.targetHandle === undefined\r\n    ) {\r\n      return;\r\n    }\r\n    const inputName = edge.targetHandle.replace(/^input_/, \"\");\r\n\r\n    removeTaskArgument(edge.target, inputName);\r\n  };\r\n\r\n  const removeNode = (node: Node) => {\r\n    const taskIdToRemove = node.id;\r\n\r\n    // Removing the outcoming edges\r\n    for (const [taskId, taskSpec] of Object.entries(graphSpec.tasks)) {\r\n      for (const [inputName, argument] of Object.entries(\r\n        taskSpec.arguments ?? {}\r\n      )) {\r\n        if (typeof argument !== \"string\" && \"taskOutput\" in argument) {\r\n          if (argument.taskOutput.taskId === taskIdToRemove) {\r\n            removeTaskArgument(taskId, inputName);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // ! TODO: Remove outcoming edges that go to graph outputs ? Delete the outputs themselves?\r\n\r\n    // Removing the task\r\n    let newGraphSpec: GraphSpec = {\r\n      ...graphSpec,\r\n      tasks: { ...graphSpec.tasks },\r\n    };\r\n    delete newGraphSpec.tasks[taskIdToRemove];\r\n    replaceGraphSpec(newGraphSpec);\r\n  };\r\n\r\n  const onElementsRemove = (elementsToRemove: Elements) => {\r\n    for (const element of elementsToRemove) {\r\n      if (isEdge(element)) {\r\n        removeEdge(element);\r\n      }\r\n    }\r\n    for (const element of elementsToRemove) {\r\n      if (isNode(element)) {\r\n        removeNode(element);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onEdgeUpdate = (oldEdge: Edge, newConnection: Connection) => {\r\n    removeEdge(oldEdge);\r\n    addConnection(newConnection);\r\n  };\r\n\r\n  const onLoad = (_reactFlowInstance: OnLoadParams) =>\r\n    setReactFlowInstance(_reactFlowInstance);\r\n\r\n  const onDragOver = (event: DragEvent) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = \"move\";\r\n  };\r\n\r\n  const getId = (nodeType: string, nodeData: any): ElementId => {\r\n    const baseName: string = nodeData?.componentRef?.spec?.name ?? nodeType;\r\n    let finalName = baseName;\r\n    let index = 0;\r\n    const nodeNames = new Set(Object.keys(graphSpec.tasks));\r\n    while (nodeNames.has(finalName)) {\r\n      index++;\r\n      finalName = baseName + \" \" + index.toString();\r\n    }\r\n    return finalName;\r\n  };\r\n\r\n  const onDrop = (event: DragEvent) => {\r\n    event.preventDefault();\r\n\r\n    if (reactFlowInstance) {\r\n      const droppedData = event.dataTransfer.getData(\"application/reactflow\");\r\n      if (droppedData === \"\") {\r\n        return;\r\n      }\r\n      const droppedDataObject = JSON.parse(droppedData);\r\n      const nodeType = Object.keys(droppedDataObject)[0];\r\n      const nodeData = droppedDataObject[nodeType];\r\n      const position = reactFlowInstance.project({\r\n        x: event.clientX,\r\n        y: event.clientY - 40,\r\n      });\r\n\r\n      if (nodeType === \"task\") {\r\n        let taskSpec = nodeData as TaskSpec;\r\n        let newAnnotations: Record<string, unknown> = {\r\n          ...taskSpec.annotations,\r\n        };\r\n        const taskPosition = { x: position.x, y: position.y };\r\n        newAnnotations[\"editor.position\"] = JSON.stringify(taskPosition);\r\n        taskSpec.annotations = newAnnotations;\r\n        const taskId = getId(nodeType, nodeData);\r\n        graphSpec = { ...graphSpec, tasks: { ...graphSpec.tasks } };\r\n        graphSpec.tasks[taskId] = taskSpec;\r\n        replaceGraphSpec(graphSpec);\r\n      } else if (nodeType === \"input\") {\r\n        // TODO: Implement\r\n      } else if (nodeType === \"output\") {\r\n        // TODO: Implement\r\n      }\r\n    }\r\n  };\r\n\r\n  const elements = (nodes as Elements).concat(edges);\r\n\r\n  return (\r\n    <ReactFlow\r\n      {...rest}\r\n      elements={elements}\r\n      nodeTypes={nodeTypes}\r\n      onConnect={onConnect}\r\n      onDragOver={onDragOver}\r\n      onDrop={onDrop}\r\n      onEdgeUpdate={onEdgeUpdate}\r\n      onElementsRemove={onElementsRemove}\r\n      onLoad={onLoad}\r\n    >\r\n      {children}\r\n    </ReactFlow>\r\n  );\r\n};\r\n\r\nexport default GraphComponentSpecFlow;\r\n","import yaml from \"js-yaml\";\r\nimport localForage from \"localforage\";\r\nimport { ComponentSpec, ComponentReference } from \"./componentSpec\";\r\n\r\n// const COMPONENT_FILE_NAME_SUFFIX = \"component.yaml\";\r\n// const COMPONENT_FILE_MAX_SIZE = 100000;\r\nconst SEARCH_CACHE_NAME = \"https://api.github.com/search\";\r\nconst BLOB_CACHE_NAME = \"raw.githubusercontent.com/.../component.yaml\";\r\n\r\n// IndexedDB: DB and table names\r\nconst DB_NAME = \"components\";\r\nconst HASH_TO_CONTENT_DB_TABLE_NAME = \"hash_to_data\";\r\nconst HASH_TO_COMPONENT_NAME_DB_TABLE_NAME = \"hash_to_component_name\";\r\nconst URL_TO_HASH_DB_TABLE_NAME = \"url_to_hash\";\r\nconst HASH_TO_URL_DB_TABLE_NAME = \"hash_to_url\";\r\nconst URL_PROCESSING_VERSION_TABLE_NAME = \"url_version\";\r\nconst CURRENT_URL_PROCESSING_VERSION = 1;\r\nconst BAD_HASHES_TABLE_NAME = \"bad_hashes\";\r\n\r\n\r\nexport const httpGetWithCache = async (\r\n  urlOrRequest: string | RequestInfo,\r\n  cacheName: string,\r\n  updateIfInCache: boolean = false\r\n): Promise<Response> => {\r\n  const cache = await caches.open(cacheName);\r\n  const response = await cache.match(urlOrRequest);\r\n  if (response !== undefined) {\r\n    if (updateIfInCache) {\r\n      cache.add(urlOrRequest);\r\n    }\r\n    return response;\r\n  }\r\n  await cache.add(urlOrRequest);\r\n  const response2 = await cache.match(urlOrRequest);\r\n  if (response2 === undefined) {\r\n    return Promise.reject(\"Added object to cache, but counld not find it\");\r\n  }\r\n  return response2;\r\n};\r\n\r\n\r\nexport const searchGitHubCodeWithCache = async (\r\n  query: string,\r\n  page = 1,\r\n  sort = \"indexed\",\r\n  order = \"desc\",\r\n): Promise<any> => {\r\n  // TODO: Paging\r\n  const encodedQuery = encodeURIComponent(query);\r\n  const encodedSort = encodeURIComponent(sort);\r\n  const encodedOrder = encodeURIComponent(order);\r\n  const searchUrl = `https://api.github.com/search/code?q=${encodedQuery}&sort=${encodedSort}&order=${encodedOrder}&per_page=100&page=${page}`;\r\n  const response = await httpGetWithCache(searchUrl, SEARCH_CACHE_NAME, true);\r\n  return response.json();\r\n};\r\n\r\n\r\nconst githubHtmlUrlToDownloadUrl = (htmlUrl: string): string => {\r\n  // https://github.com/               kubeflow/pipelines/blob/24bc9162a56c2fe3c50947d655ef280f71ba058f/components/gcp/dataflow/launch_flex_template/component.yaml\r\n  // https://raw.githubusercontent.com/kubeflow/pipelines     /24bc9162a56c2fe3c50947d655ef280f71ba058f/components/gcp/dataflow/launch_flex_template/component.yaml\r\n  return htmlUrl\r\n    .replace(\"https://github.com/\", \"https://raw.githubusercontent.com/\")\r\n    .replace(\"/blob/\", \"/\");\r\n};\r\n\r\n\r\ntype UrlAndHash = {\r\n  url: string;\r\n  hash: string;\r\n};\r\n\r\n\r\nexport async function * getComponentUrlsAndHashes(\r\n  users = [\"kubeflow\", \"Ark-kun\"]\r\n) {\r\n  let urlsAndHashes: UrlAndHash[] = [];\r\n  const query =\r\n    \"filename:component.yaml \" + users.map((user) => \"user:\" + user).join(\" \");\r\n  for (let page = 1; page < 100; page++) {\r\n    const searchResults = await searchGitHubCodeWithCache(query, page);\r\n    // \"total_count\": 512,\r\n    // \"incomplete_results\": false,\r\n    // \"items\": [\r\n    const items: any[] = searchResults.items;\r\n    if (items.length === 0) {\r\n      break;\r\n    }\r\n    for (let item of items) {\r\n      yield { url: githubHtmlUrlToDownloadUrl(item.html_url), hash: item.sha as string };\r\n    }\r\n    await new Promise( resolve => setTimeout(resolve, (60 * 1000 / 10) * (1 + 0.1)));\r\n  }\r\n  return urlsAndHashes;\r\n};\r\n\r\n\r\nexport const cacheComponentCandidateBlobs = async (\r\n  users = [\"kubeflow\", \"Ark-kun\"]\r\n): Promise<any[]> => {\r\n  let urlsAndHashes: UrlAndHash[] = [];\r\n  let urls = [];\r\n  for await (const urlAndHash of getComponentUrlsAndHashes(users)) {\r\n    urlsAndHashes.push(urlAndHash);\r\n    urls.push(urlAndHash.url);\r\n  }\r\n  const cache = await caches.open(BLOB_CACHE_NAME);\r\n  await cache.addAll(urls);\r\n  return urlsAndHashes;\r\n};\r\n\r\nexport const downloadComponentDataWithCache = async (url: string) => {\r\n  const response = await httpGetWithCache(url, BLOB_CACHE_NAME)\r\n  const data = await response.blob();\r\n  const componentText = await data.text();\r\n  const componentSpec = yaml.load(componentText) as ComponentSpec;\r\n  return componentSpec;\r\n}\r\n\r\nexport const cacheAllComponents = async (users = [\"kubeflow\", \"Ark-kun\"]) => {\r\n  console.debug(\"Starting cacheAllComponents\");\r\n  const urlsAndHashesIterator = getComponentUrlsAndHashes(users);\r\n\r\n  // const cache = await caches.open(BLOB_CACHE_NAME);\r\n  const urlToHashDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_TO_HASH_DB_TABLE_NAME,\r\n  });\r\n  const hashToUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_URL_DB_TABLE_NAME,\r\n  });\r\n  const hashToContentDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_CONTENT_DB_TABLE_NAME,\r\n  });\r\n  const hashToComponentNameDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_COMPONENT_NAME_DB_TABLE_NAME,\r\n  });\r\n  const urlProcessingVersionDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_PROCESSING_VERSION_TABLE_NAME,\r\n  });\r\n  const badHashesDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: BAD_HASHES_TABLE_NAME,\r\n  });\r\n  for await (const item of urlsAndHashesIterator) {\r\n    const hash = item.hash.toLowerCase();\r\n    const htmlUrl = item.url;\r\n    const badHashReason = await badHashesDb.getItem<string>(hash);\r\n    if (badHashReason !== null) {\r\n      console.debug(`Skipping url ${htmlUrl} with hash ${hash} due to error: \"${badHashReason}\"`);\r\n      continue;\r\n    }\r\n    try {\r\n      const downloadUrl: string = githubHtmlUrlToDownloadUrl(htmlUrl);\r\n      if (!downloadUrl.endsWith(\"component.yaml\")) {\r\n        console.debug(`Skipping url ${downloadUrl} since it does not end with \"component.yaml\"`);\r\n        continue;\r\n      }\r\n      // Sanity check\r\n      const cachedHash = await urlToHashDb.getItem<string>(downloadUrl);\r\n      if (cachedHash !== null && cachedHash !== hash) {\r\n        console.error(\r\n          `Component cache is broken. Stored hash for ${downloadUrl}: ${cachedHash} != ${hash}.`\r\n        );\r\n      }\r\n      // Check whether the processing is complete\r\n      const urlVersion = await urlProcessingVersionDb.getItem<string>(\r\n        downloadUrl\r\n      );\r\n\r\n      if (\r\n        cachedHash !== null && // Not sure we should check this, but it improves the sanity\r\n        urlVersion !== null &&\r\n        Number.parseInt(urlVersion) >= CURRENT_URL_PROCESSING_VERSION\r\n      ) {\r\n        continue;\r\n      }\r\n\r\n      console.debug(`Processing new component candidate: ${downloadUrl}.`);\r\n      const response = await httpGetWithCache(downloadUrl, BLOB_CACHE_NAME);\r\n      let componentSpec: ComponentSpec;\r\n      let componentText: string;\r\n      try {\r\n        const data = await response.blob();\r\n        componentText = await data.text();\r\n        componentSpec = yaml.load(componentText) as ComponentSpec;\r\n      } catch(err) {\r\n        badHashesDb.setItem(hash, err.name + \": \" + err.message);\r\n        continue;\r\n      }\r\n      if (componentSpec.implementation === undefined) {\r\n        badHashesDb.setItem(hash, 'Component lacks the \"impelmentation\" section.');\r\n        continue;\r\n      }\r\n\r\n      // Blobs are cumbersome (need await to get text) - store text instead\r\n      // await hashToContentDb.setItem(hash, data);\r\n      await hashToContentDb.setItem(hash, componentText);\r\n\r\n      // Only adding hash -> URL once\r\n      const urlForHash = await hashToUrlDb.getItem<string>(hash);\r\n      if (urlForHash === null) {\r\n        await hashToUrlDb.setItem(hash, downloadUrl);\r\n      }\r\n\r\n      // Only storing names when they exist\r\n      if (componentSpec.name) {\r\n        await hashToComponentNameDb.setItem(hash, componentSpec.name);\r\n      }\r\n\r\n      await urlToHashDb.setItem(downloadUrl, hash);\r\n\r\n      // Marking the processing as completed\r\n      await urlProcessingVersionDb.setItem(\r\n        downloadUrl,\r\n        CURRENT_URL_PROCESSING_VERSION\r\n      );\r\n    } catch (err) {\r\n      console.error(\r\n        `Error when processing component candidate ${htmlUrl} Error: ${err}.`\r\n      );\r\n    }\r\n  }\r\n  console.debug(\"Finished cacheAllComponents\");\r\n};\r\n\r\n\r\nexport const getAllComponentsAsRefs = async (users = [\"kubeflow\", \"Ark-kun\"]) => {\r\n  // Perhaps use urlProcessingVersionDb as source of truth. Hmm. It is URL-based\r\n  const hashToUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_URL_DB_TABLE_NAME,\r\n  });\r\n  const hashToContentDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_CONTENT_DB_TABLE_NAME,\r\n  });\r\n  let hashToComponentRef = new Map<string, ComponentReference>();\r\n\r\n  const cachePromise = cacheAllComponents(users);\r\n  if ((await hashToContentDb.length()) === 0) {\r\n    await cachePromise;\r\n  }\r\n\r\n  // !!! Iterating using hashToContentDb.iterate<string, void> causes all values to be `[object Blob]`\r\n  //await hashToContentDb.iterate<Blob, void>(\r\n  await hashToContentDb.iterate<string, void>(\r\n    // !!! async processor causes only 1 item to be processed since it returns Promise instead of undefined.\r\n    //async (componentData, hash, iterationNumber) => {\r\n    (componentText, hash, iterationNumber) => {\r\n      //const componentText = await componentData.text();\r\n      try {\r\n        const componentSpec = yaml.load(componentText) as ComponentSpec;\r\n        hashToComponentRef.set(hash, {\r\n          spec: componentSpec,\r\n        });\r\n      } catch (err) {\r\n        console.error(\r\n          `Error when parsing cached component. Hash: ${hash}. Error: ${err}. Component text: ${componentText}`\r\n        );\r\n      }\r\n    }\r\n  );\r\n  await hashToUrlDb.iterate<string, void>((url, hash, iterationNumber) => {\r\n    let componentRef = hashToComponentRef.get(hash);\r\n    if (componentRef === undefined) {\r\n      console.error(\r\n        `Component db corrupted: Component with url ${url} and hash ${hash} has no content in the DB.`\r\n      );\r\n    } else {\r\n      componentRef.url = url;\r\n    }\r\n  });\r\n  let componentRefs: ComponentReference[] = [];\r\n  // TODO: Improve the iteration onve TypeScript propertly supports it\r\n  hashToComponentRef.forEach((componentRef, hash) => {\r\n    if (componentRef.url === undefined) {\r\n      console.error(\r\n        `Component db corrupted: Component with hash ${hash} has content, but no URL in the DB.`\r\n      );\r\n    } else {\r\n      componentRefs.push(componentRef);\r\n    }\r\n  });\r\n  return componentRefs;\r\n};\r\n\r\n\r\nexport const searchComponentsByName = async (name: string, users = [\"kubeflow\", \"Ark-kun\"]) => {\r\n  const componentRefs = await getAllComponentsAsRefs(users);\r\n  return componentRefs.filter((ref) => ref.spec?.name?.toLowerCase().includes(name.toLowerCase()) ?? false);\r\n};\r\n","import { DragEvent, useEffect, useState } from 'react';\r\n\r\nimport {downloadComponentDataWithCache} from '../github'\r\nimport {ComponentSpec, TaskSpec} from '../componentSpec'\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  event.dataTransfer.setData('application/reactflow', JSON.stringify(nodeData));\r\n  event.dataTransfer.effectAllowed = 'move';\r\n};\r\n\r\ntype ComponentGroup = {\r\n  category: string;\r\n  componentUrls: string[];\r\n};\r\n\r\nconst DraggableComponentRow = ({componentUrl}: {componentUrl: string}) => {\r\n  const [componentSpec, setComponentSpec] = useState<ComponentSpec | undefined>(undefined);\r\n  useEffect(() => {\r\n    downloadComponentDataWithCache(componentUrl).then(setComponentSpec);\r\n  }, [componentUrl]);\r\n\r\n  if (componentSpec === undefined) {\r\n    return <span>Loading...</span>\r\n  } else {\r\n    return (\r\n      <div\r\n        className=\"react-flow__node react-flow__node-task\"\r\n        draggable\r\n        onDragStart={(event: DragEvent) => {\r\n          const taskSpec: TaskSpec = {\r\n            componentRef: {\r\n              url: componentUrl,\r\n              spec: componentSpec,\r\n            },\r\n          };\r\n          return onDragStart(event, { task: taskSpec });\r\n        }}\r\n      >\r\n        {componentSpec.name}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst ComponentGroupList = ({ componentGroups }: { componentGroups: ComponentGroup[] }) => {\r\n  return (\r\n    <>\r\n      {Array.from(componentGroups).map(\r\n        ({ category, componentUrls }, index) => (\r\n          <details key={category} open={index === 0} style={{ border: \"1px solid #aaa\", borderRadius: \"4px\" }}>\r\n            <summary style={{ borderWidth: \"1px\", padding: \"8px\" }}>\r\n              <strong>{category}</strong>\r\n            </summary>\r\n            {componentUrls.map((componentUrl) => (\r\n              <DraggableComponentRow key={componentUrl} componentUrl={componentUrl} />\r\n            ))}\r\n          </details>\r\n        )\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst ComponentLibrary = ({ componentGroups }: { componentGroups: ComponentGroup[] }) => {\r\n  return (\r\n    <details open>\r\n      <summary style={{ border: \"1px solid #aaa\", padding: \"5px\", borderRadius: \"8px\" }}>\r\n        <strong>Component library</strong>\r\n      </summary>\r\n      <div style={{ paddingLeft: \"10px\" }}>\r\n        <ComponentGroupList componentGroups={componentGroups}/>\r\n      </div>\r\n    </details>\r\n  );\r\n};\r\n\r\nexport default ComponentLibrary;\r\n","import React, { DragEvent } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { ComponentReference, TaskSpec } from \"../componentSpec\";\r\nimport { searchComponentsByName } from \"../github\";\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  event.dataTransfer.setData(\"application/reactflow\", JSON.stringify(nodeData));\r\n  event.dataTransfer.effectAllowed = \"move\";\r\n};\r\n\r\nconst COMPONENT_ORGS = [\"kubeflow\", \"Ark-kun\"];\r\n\r\nconst SearchPanel = (props: any) => {\r\n  const [error, setError] = useState<string | undefined>(undefined);\r\n  const [firstTime, setFirstTime] = useState(true);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [items, setItems] = useState<ComponentReference[]>([]);\r\n\r\n  const onQueryChange = (e: any) => {\r\n    setQuery(e.target.value);\r\n  };\r\n\r\n  async function fetchData(query: string) {\r\n    searchComponentsByName(query, COMPONENT_ORGS).then(\r\n      (componentRefs) => {\r\n        setIsLoaded(true);\r\n        setItems(componentRefs);\r\n      },\r\n      (error) => {\r\n        setIsLoaded(true);\r\n        setError(error.message);\r\n      }\r\n    );\r\n  }\r\n\r\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (query !== \"\") {\r\n      setFirstTime(false);\r\n      fetchData(query);\r\n    }\r\n  };\r\n\r\n  let results = <span></span>;\r\n  if (firstTime) {\r\n    results = <div>Enter search query</div>;\r\n  } else if (error !== undefined) {\r\n    results = <div>Error: {error}</div>;\r\n  } else if (!firstTime && !isLoaded) {\r\n    results = <div>Searching...</div>;\r\n  } else if (items !== undefined) {\r\n    const componentElements = items.map((item) => (\r\n      <div\r\n        key={item.url}\r\n        title={item.url}\r\n        className=\"react-flow__node react-flow__node-multihandle\"\r\n        draggable\r\n        onDragStart={(event: DragEvent) => {\r\n          const taskSpec: TaskSpec = {\r\n            componentRef: item,\r\n          };\r\n          return onDragStart(event, { task: taskSpec });\r\n        }}\r\n      >\r\n        {item.spec?.name}\r\n      </div>\r\n    ));\r\n    results = <>{componentElements}</>;\r\n  }\r\n  return (\r\n    <div className=\"nodeList\">\r\n      <form onSubmit={onSubmit}>\r\n        <input type=\"search\" placeholder=\"XGBoost\" onChange={onQueryChange} />\r\n        <input type=\"submit\" />\r\n      </form>\r\n      <div>{results}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPanel;\r\n","import {\r\n  Node,\r\n  Edge,\r\n} from \"react-flow-renderer\";\r\n\r\nimport {\r\n  ComponentSpec,\r\n  TaskSpec,\r\n  InputSpec,\r\n  OutputSpec,\r\n  ArgumentType,\r\n  GraphInputArgument,\r\n  TaskOutputArgument,\r\n  GraphImplementation,\r\n} from \"../componentSpec\";\r\n\r\nconst getNodePositionAnnotations = (node: Node): { [k: string]: string } => ({\r\n  \"editor.position\": JSON.stringify({\r\n    // node.position cannot be used since set at 1st drop and never updated\r\n    x: node.__rf.position.x,\r\n    y: node.__rf.position.y,\r\n    width: node.__rf.width,\r\n    height: node.__rf.height,\r\n  }),\r\n});\r\n\r\nconst nodeOrderComparer = (n1: Node, n2: Node) =>\r\n  n1.__rf.position.x - n2.__rf.position.x;\r\n\r\nconst createGraphComponentSpecFromFlowElements = (\r\n  nodes: Node[],\r\n  edges: Edge[],\r\n  name = \"Component\",\r\n  annotations: Record<string, string> = {},\r\n  includePositions: boolean = true,\r\n  includeSpecs: boolean = false\r\n): ComponentSpec => {\r\n  // Input and output nodes\r\n  // Sorting them by horisontal position to make reordering inputs and outputs easy.\r\n  const inputNodes = nodes.filter((node) => node.type === \"input\").sort(nodeOrderComparer);\r\n  const outputNodes = nodes.filter((node) => node.type === \"output\").sort(nodeOrderComparer);\r\n  // Task nodes. They should all be ComponentTaskNode components\r\n  const taskNodes = nodes\r\n    .filter((node) => node.type === \"task\")\r\n    .map((node) => node as Node<TaskSpec>);\r\n  \r\n  const inputSpecs = inputNodes.map<InputSpec>((node) => {\r\n    let spec: InputSpec = { name: node.id };\r\n    if (includePositions) {\r\n      spec.annotations = getNodePositionAnnotations(node);\r\n    }\r\n    return spec;\r\n  });\r\n\r\n  const outputSpecs = outputNodes.map<OutputSpec>((node) => {\r\n    let spec: OutputSpec = { name: node.id };\r\n    if (includePositions) {\r\n      spec.annotations = spec.annotations = getNodePositionAnnotations(node);\r\n    }\r\n    return spec;\r\n  });\r\n\r\n  // const originalTaskMap = taskNodes.reduce((map, node) => {\r\n  //   const taskSpec = node.data;\r\n  //   if (taskSpec !== undefined) {\r\n  //     map.set(node.id, taskSpec);\r\n  //   }\r\n  //   return map;\r\n  // }, new Map<string, TaskSpec>());\r\n\r\n  const taskMap = taskNodes.reduce((accumulator, node) => {\r\n    let taskSpec = node.data;\r\n    if (taskSpec !== undefined) {\r\n      // Cloning the spec to modify it\r\n      taskSpec = Object.assign({}, taskSpec);\r\n      if (!includeSpecs) {\r\n        taskSpec.componentRef = Object.assign({}, taskSpec.componentRef);\r\n        delete taskSpec.componentRef.spec;\r\n      }\r\n      if (includePositions) {\r\n        taskSpec.annotations = getNodePositionAnnotations(node);\r\n      }\r\n      accumulator[node.id] = taskSpec;\r\n    }\r\n    return accumulator;\r\n  }, {} as Record<string, TaskSpec>);\r\n\r\n  let graphOutputValues: Record<string, TaskOutputArgument> = {};\r\n\r\n  for (const edge of edges) {\r\n    const sourceTaskId = edge.source;\r\n    const sourceOutputName = edge.sourceHandle?.replace(/^output_/, '');\r\n    const targetTaskId = edge.target;\r\n    const targetInputName = edge.targetHandle?.replace(/^input_/, '');\r\n\r\n    // if (!sourceOutputName || !targetInputName) {\r\n    //   console.error(\"Enexpected edge without a source or target handle:\", edge);\r\n    //   continue;\r\n    // }\r\n\r\n    // Checking the source task for sanity\r\n    if (!!sourceOutputName && taskMap[sourceTaskId] === undefined) {\r\n      console.error(\"Task node is connected to unknown node type:\", edge);\r\n      continue;\r\n    }\r\n\r\n    // FIX: For now, detecting the graph inputs and outputs by sourceOutputName or targetInputName being null\r\n    const argument: ArgumentType =\r\n      !!sourceOutputName\r\n        ? ({\r\n            taskOutput: { taskId: sourceTaskId, outputName: sourceOutputName },\r\n          } as TaskOutputArgument)\r\n        : ({\r\n            // Using input node ID as graph input name\r\n            graphInput: { inputName: sourceTaskId },\r\n          } as GraphInputArgument);\r\n    if (!!targetInputName) {\r\n      let targetTask = taskMap[targetTaskId];\r\n      if (targetTask === undefined) {\r\n        console.error(\"Task node is connected to unknown node type:\", edge);\r\n        continue;\r\n      }\r\n      if (targetTask.arguments === undefined) {\r\n        targetTask.arguments = {};\r\n      }\r\n      targetTask.arguments[targetInputName] = argument;\r\n    } else {\r\n      // graph output\r\n      // Using output node ID as graph output name\r\n      const taskOutputArgument = argument as TaskOutputArgument;\r\n      // FIX BUG This check does not work to guard against incompatible arguments\r\n      if (!!taskOutputArgument) {\r\n        graphOutputValues[targetTaskId] = taskOutputArgument;\r\n      } else {\r\n        console.error(\"Graph outputs can only come from task outputs.\")\r\n      }\r\n    }\r\n  }\r\n\r\n  // // Verify arguments\r\n  // // TODO: Also sort them\r\n  // for (const [taskId, taskSpec] of Object.entries(taskMap)) {\r\n    \r\n  // }\r\n\r\n  const graphComponent: ComponentSpec = {\r\n    name: name,\r\n    inputs: inputSpecs,\r\n    outputs: outputSpecs,\r\n    metadata: {\r\n      annotations: annotations\r\n    },\r\n    implementation: {\r\n      graph: {\r\n        tasks: taskMap,\r\n        outputValues: graphOutputValues,\r\n      },\r\n    },\r\n  };\r\n\r\n  // Cleanup.\r\n  // I could have prevented these attributes from being added, but then the attribute serialization ordering will be ugly\r\n  // (the first attribute would be \"implementation\" since it's required).\r\n  if (inputSpecs.length === 0) {\r\n    delete graphComponent.inputs;\r\n  }\r\n  if (outputSpecs.length === 0) {\r\n    delete graphComponent.outputs;\r\n  }\r\n  if (Object.keys(annotations).length === 0) {\r\n    delete graphComponent.metadata;\r\n  }\r\n  if (Object.keys(graphOutputValues).length === 0) {\r\n    delete (graphComponent.implementation as GraphImplementation).graph.outputValues;\r\n  }\r\n  return graphComponent;\r\n};\r\n\r\nexport { createGraphComponentSpecFromFlowElements };\r\n","import {\r\n  useStoreState,\r\n} from \"react-flow-renderer\";\r\nimport yaml from \"js-yaml\";\r\n\r\nimport {createGraphComponentSpecFromFlowElements} from './graphComponentFromFlow'\r\n\r\nconst GraphComponentExporter = ({pipelineName}: {pipelineName?: string}) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n  const edges = useStoreState((store) => store.edges);\r\n\r\n  pipelineName = pipelineName ?? \"Pipeline\";\r\n\r\n  const graphComponent = createGraphComponentSpecFromFlowElements(nodes, edges, pipelineName);\r\n  const componentText = yaml.dump(graphComponent, { lineWidth: 10000 });\r\n\r\n  const componentTextBlob = new Blob([componentText], { type: \"text/yaml\" }); // Or application/x-yaml (which leads to downloading)\r\n  const downloadLink = <a href={URL.createObjectURL(componentTextBlob)} download={\"component.yaml\"}>component.yaml</a>\r\n\r\n  return (\r\n    <details>\r\n      <summary>Graph {downloadLink}</summary>\r\n      <pre style={{overflow: \"auto\"}}>{componentText}</pre>\r\n    </details>\r\n  );\r\n};\r\n\r\nexport default GraphComponentExporter;\r\n","import { ComponentSpec, ContainerImplementation, ImplementationType, StringOrPlaceholder, ArgumentType, TypeSpecType } from \"../componentSpec\";\r\n\r\n// # How to handle I/O:\r\n// output = output artifact\r\n// inputValue => input parameter\r\n// inputPath => input artifact\r\n// [ ] downstream input parameter => spread \"parameterness\" upstream - add output parameters when needed (AFAIK, the paths are the same - required)\r\n// [ ] const argument or pipeline parameter + artifact input => need to insert uploader task\r\n\r\nconst sanitizePipelineInfoName = (componentName: string) => {\r\n    return componentName.toLowerCase().replace(/\\W/, '-')\r\n}\r\n\r\ntype ResolvedCommandLineAndArgs = {\r\n    command?: string[],\r\n    args?: string[],\r\n    inputsConsumedAsValue: Set<string>,\r\n    inputsConsumedAsPath: Set<string>,\r\n};\r\n\r\nconst resolveCommandLine = (componentSpec: ComponentSpec, taskArguments: Record<string, ArgumentType>): ResolvedCommandLineAndArgs => {\r\n    if (! ('container' in componentSpec.implementation)) {\r\n      throw Error(\"resolveCommandLine only supports container components\");\r\n    }\r\n    const containerSpec = componentSpec.implementation.container;\r\n\r\n    const inputsConsumedAsValue = new Set<string>();\r\n    const inputsConsumedAsPath = new Set<string>();\r\n    const convertArg = (arg: StringOrPlaceholder): string[] => {\r\n        if (typeof arg == \"string\") {\r\n            return [arg];\r\n        } else if ('inputValue' in arg) {\r\n            const inputName = arg.inputValue;\r\n            inputsConsumedAsValue.add(inputName);\r\n            return [`{{$.inputs.parameters['${inputName}']}}`];\r\n        } else if ('inputPath' in arg) {\r\n            const inputName = arg.inputPath;\r\n            inputsConsumedAsPath.add(inputName);\r\n            return [`{{$.inputs.artifacts['${inputName}'].path}}`];\r\n        } else if ('outputPath' in arg) {\r\n            const outputName = arg.outputPath;\r\n            return [`{{$.outputs.artifacts['${outputName}'].path}}`];\r\n        } else if ('if' in arg) {\r\n            const [ifCond, ifThen, ifElse] = [arg.if.cond, arg.if.then, arg.if.else];\r\n            // TODO: Check false values, not just check for true\r\n            let condEvaluatesToTrue = false;\r\n            if (typeof ifCond === \"string\") {\r\n              condEvaluatesToTrue = ifCond.toLowerCase() === \"true\";\r\n            } else if (typeof ifCond === \"boolean\") {\r\n              condEvaluatesToTrue = ifCond;\r\n            } else if (\"isPresent\" in ifCond) {\r\n              const inputName = ifCond.isPresent;\r\n              condEvaluatesToTrue = inputName in taskArguments;\r\n            } else if (\"inputValue\" in ifCond) {\r\n              const inputName = ifCond.inputValue;\r\n              if (! (inputName in taskArguments)) {\r\n                condEvaluatesToTrue = false;\r\n              } else {\r\n                const taskArgument = taskArguments[inputName];\r\n                if (typeof taskArgument === \"string\") {\r\n                    condEvaluatesToTrue = taskArgument.toLowerCase() === \"true\";\r\n                } else {\r\n                    throw Error(\"Using runtime conditions in component command line placeholders is not supported yet.\")\r\n                }\r\n              }\r\n            } else {\r\n                throw Error(\"Unexpected contition kind: \" + ifCond);\r\n            }\r\n            const unresolvedArgs = condEvaluatesToTrue ? ifThen : ifElse;\r\n            if (unresolvedArgs === undefined) {\r\n                return [];\r\n            }\r\n            return unresolvedArgs.flatMap(convertArg);\r\n        } else if ('concat' in arg) {\r\n            const concatArgs = arg.concat;\r\n            return concatArgs.flatMap(convertArg);\r\n        } else {\r\n            throw Error(`Unknown kind of command-line argument: ${arg}`);\r\n        }\r\n    };\r\n\r\n    const result = {\r\n        command: containerSpec.command?.flatMap(convertArg),\r\n        args: containerSpec.args?.flatMap(convertArg),\r\n        inputsConsumedAsValue: inputsConsumedAsValue,\r\n        inputsConsumedAsPath: inputsConsumedAsPath,\r\n    };\r\n    return result;\r\n}\r\n\r\nfunction isContainerImplementation(implementationType: ImplementationType): implementationType is ContainerImplementation {\r\n    return 'container' in implementationType;\r\n}\r\n\r\nconst typeSpecToVertexPrimitiveTypeEnum = (typeSpec: TypeSpecType | undefined) => {\r\n    if (typeof typeSpec === \"string\") {\r\n        if ([\"integer\"].includes(typeSpec.toLowerCase())) {\r\n            return \"INT\";\r\n        }\r\n        if ([\"float\", \"double\"].includes(typeSpec.toLowerCase())) {\r\n            return \"DOUBLE\";\r\n        }\r\n    }\r\n    return \"STRING\";\r\n}\r\n\r\nconst typeSpecToVertexParameterSpec = (typeSpec: TypeSpecType | undefined) => {\r\n    return {\r\n        type: typeSpecToVertexPrimitiveTypeEnum(typeSpec)\r\n    }\r\n}\r\n\r\nconst typeSpecToVertexArtifactTypeSchema = (typeSpec: TypeSpecType | undefined) => {\r\n    // TODO: Implement better mapping\r\n    const artifactTypeSchema = {\r\n        schemaTitle: \"system.Artifact\"\r\n    }\r\n    return artifactTypeSchema\r\n}\r\n\r\nconst typeSpecToVertexArtifactSpec = (typeSpec: TypeSpecType | undefined) => {\r\n    return {\r\n        artifactType: typeSpecToVertexArtifactTypeSchema(typeSpec)\r\n    }\r\n}\r\n// const typeSpecToVertexArtifactType(typeSpec: TypeSpecType) => {\r\n//     return typeof typeSpec === \"string\" && [\"String\", \"Integer\", \"Float\", \"Double\", \"Boolean\", ]\r\n// }\r\n\r\n\r\nconst taskSpecToVertexTaskSpecComponentSpecAndExecutorSpec = (\r\n    componentSpec: ComponentSpec,\r\n    //passedArgumentNames: string[],\r\n    taskArguments: Record<string, ArgumentType>\r\n) => {\r\n    // TODO: Investigate how to properly narrow the ImplementationTyppe union type\r\n    // Type guard!\r\n\r\n    if (!isContainerImplementation(componentSpec.implementation)) {\r\n        throw Error(\"Nested graph components are not supported yet\");\r\n    }\r\n    // Also works\r\n    // if ('container' in componentSpec.implementation) {\r\n    //     componentSpec.implementation\r\n    // }\r\n\r\n    const containerSpec = componentSpec.implementation.container;\r\n\r\n\r\n    const resolvedCommandLine = resolveCommandLine(componentSpec, taskArguments);\r\n\r\n    const vertexExecutorSpec = {\r\n        container: {\r\n            image: containerSpec.image,\r\n            command: resolvedCommandLine.command,\r\n            args: resolvedCommandLine.args,\r\n        }\r\n    };\r\n\r\n    // resolvedCommandLine.inputsConsumedAsPath\r\n\r\n    const inputMap = new Map((componentSpec.inputs ?? []).map(inputSpec => [inputSpec.name, inputSpec]));\r\n\r\n    // Array.from(inputMap.keys()).filter(resolvedCommandLine.inputsConsumedAsValue.has)\r\n\r\n    const vertexComponentInputsSpec = {\r\n      parameters: Object.fromEntries(\r\n        Array.from(resolvedCommandLine.inputsConsumedAsValue.values()).map(\r\n          (inputName) => [\r\n            inputName,\r\n            typeSpecToVertexParameterSpec(inputMap.get(inputName)?.type),\r\n          ]\r\n        )\r\n      ),\r\n      artifacts: Object.fromEntries(\r\n        Array.from(resolvedCommandLine.inputsConsumedAsPath.values()).map(\r\n          (inputName) => [\r\n            inputName,\r\n            typeSpecToVertexArtifactSpec(inputMap.get(inputName)?.type)\r\n          ]\r\n        )\r\n      ),\r\n    };\r\n\r\n    const vertexComponentOutputsSpec = {\r\n      parameters: {}, // Parameters will be added later as needed\r\n      artifacts: Object.fromEntries(\r\n        (componentSpec.outputs ?? []).map((outputSpec) => [\r\n          outputSpec.name,\r\n          typeSpecToVertexArtifactSpec(outputSpec.type)\r\n        ])\r\n      ),\r\n    };\r\n\r\n    const vertexComponentSpec = {\r\n        inputDefinitions: vertexComponentInputsSpec,\r\n        outputDefinitions: vertexComponentOutputsSpec,\r\n        // dag\r\n        executorLabel: \"<set later>\",\r\n    };\r\n\r\n    const vertexTaskParameterArguments = Object.fromEntries(Array.from(resolvedCommandLine.inputsConsumedAsValue.values()).map(inputName => [inputName, (inputName => {\r\n        // TODO: Check that this works\r\n        let taskArgument = taskArguments[inputName];\r\n        //if (! (inputName in taskArguments)) {\r\n        if (taskArgument === undefined) {\r\n            // Checking for default value\r\n            const inputSpec = inputMap.get(inputName);\r\n            if (inputSpec === undefined) {\r\n                throw Error(`Cannot happen: vertexTaskParameterArguments - inputMap.get(${inputName}) === undefined`)\r\n            }\r\n            if (inputSpec.default !== undefined) {\r\n                taskArgument = inputSpec.default;\r\n            } else {\r\n                if (inputSpec.optional === true) {\r\n                    // TODO: Decide what the behavior should be\r\n                    // throw Error(`Input \"${inputName}\" is optional, but command-line still uses it when when it's not present.`);\r\n                    console.error(`Input \"${inputName}\" is optional, but command-line still uses it when when it's not present.`);\r\n                    taskArgument = \"\";\r\n                } else {\r\n                    throw Error(`Argument was not provided for required input \"${inputName}\"`);\r\n                }\r\n            }\r\n        }\r\n        if (typeof taskArgument === \"string\" ) {\r\n            return {\r\n                runtimeValue: {\r\n                    constantValue: {\r\n                        // TODO: Fix constant arguments for non-string inputs\r\n                        stringValue: taskArgument,\r\n                    }\r\n                }\r\n            }\r\n        } else if ('graphInput' in taskArgument) {\r\n            return {\r\n                componentInputParameter: taskArgument.graphInput.inputName,\r\n            }\r\n        } else if ('taskOutput' in taskArgument) {\r\n            return {\r\n                taskOutputParameter: {\r\n                    producerTask: taskArgument.taskOutput.taskId,\r\n                    outputParameterKey: taskArgument.taskOutput.outputName,\r\n                }\r\n            };\r\n        } else {\r\n            throw Error(`Unknown kind of task argument: \"${taskArgument}\"`);\r\n        }\r\n    })(inputName)]));\r\n\r\n    const vertexTaskArtifactArguments = Object.fromEntries(Array.from(resolvedCommandLine.inputsConsumedAsPath.values()).map(inputName => [inputName, (inputName => {\r\n        // TODO: Check that this works\r\n        let taskArgument = taskArguments[inputName];\r\n        //if (! (inputName in taskArguments)) {\r\n        if (taskArgument === undefined) {\r\n            // Checking for default value\r\n            const inputSpec = inputMap.get(inputName);\r\n            if (inputSpec === undefined) {\r\n                throw Error(`Cannot happen: vertexTaskParameterArguments - inputMap.get(${inputName}) === undefined`)\r\n            }\r\n            if (inputSpec.default !== undefined) {\r\n                taskArgument = inputSpec.default;\r\n            } else {\r\n                if (inputSpec.optional === true) {\r\n                    // TODO: Decide what the behavior should be\r\n                    // throw Error(`Input \"${inputName}\" is optional, but command-line still uses it when when it's not present.`);\r\n                    console.error(`Input \"${inputName}\" is optional, but command-line still uses it when when it's not present.`);\r\n                    taskArgument = \"\";\r\n                } else {\r\n                    throw Error(`Argument was not provided for required input \"${inputName}\"`);\r\n                }\r\n            }\r\n        }\r\n        if (typeof taskArgument === \"string\" ) {\r\n            // TODO: Work around and make this possible\r\n            throw Error(\"Constant arguments for artifact inputs are not supported yet.\");\r\n        } else if ('graphInput' in taskArgument) {\r\n            return {\r\n                componentInputArtifact: taskArgument.graphInput.inputName,\r\n            }\r\n        } else if ('taskOutput' in taskArgument) {\r\n            return {\r\n                taskOutputArtifact: {\r\n                    producerTask: taskArgument.taskOutput.taskId,\r\n                    outputArtifactKey: taskArgument.taskOutput.outputName,\r\n                }\r\n            };\r\n        } else {\r\n            throw Error(`Unknown kind of task argument: \"${taskArgument}\"`);\r\n        }\r\n    })(inputName)]));\r\n    \r\n    const vertexTaskSpec = {\r\n        taskInfo: {\r\n            name: \"<set later>\",\r\n        },\r\n        inputs: {\r\n            parameters: vertexTaskParameterArguments,\r\n            artifacts: vertexTaskArtifactArguments,\r\n        },\r\n        // dependent_tasks: [],\r\n        cachingOptions: {\r\n            enableCache: true,\r\n        },\r\n        componentRef: {\r\n          name: \"<set later>\"\r\n        },\r\n        // triggerPolicy: {\r\n        //     condition: \"...\",\r\n        //     strategy: \"ALL_UPSTREAM_TASKS_SUCCEEDED\",\r\n        // },\r\n        // iterator: {\r\n        //     artifactIterator: {...},\r\n        //     parameterIterator: {...},\r\n        // },\r\n    }\r\n    \r\n    return { vertexTaskSpec, vertexComponentSpec, vertexExecutorSpec };\r\n}\r\n\r\nconst graphComponentSpecToVertexPipelineSpec = (componentSpec: ComponentSpec) => {\r\n    if (! ('graph' in componentSpec.implementation)) {\r\n        throw Error(\"Only graph components are supported for now\")\r\n    }\r\n\r\n    // TODO: Fix case when these inputs are passed to tasks as artifacts\r\n    const vertexComponentInputsSpec = {\r\n        parameters: Object.fromEntries(\r\n          (componentSpec.inputs ?? []).map(\r\n            (inputSpec) => [inputSpec.name, typeSpecToVertexParameterSpec(inputSpec.type)]\r\n          )\r\n        ),\r\n        // Pipeline does not support artifact inputs\r\n        // artifacts: {},\r\n    };\r\n\r\n    const graphSpec = componentSpec.implementation.graph;\r\n\r\n    let vertexExecutors: Record<string, any> = {};\r\n    let vertexComponents: Record<string, any> = {};\r\n    let vertexTasks: Record<string, any> = {};\r\n\r\n    for (const [taskId, taskSpec] of Object.entries(graphSpec.tasks)) {\r\n        if (taskSpec.componentRef.spec === undefined) {\r\n            throw Error(`Task \"${taskId}\" does not have taskSpec.componentRef.spec.`)\r\n        }\r\n        const {vertexTaskSpec, vertexComponentSpec, vertexExecutorSpec} = taskSpecToVertexTaskSpecComponentSpecAndExecutorSpec(taskSpec.componentRef.spec, taskSpec.arguments ?? {});\r\n        // task IDs are expected to be unique\r\n        // TODO: Fix  this to work for multi-dag pipelines where task IDs are not globally unique\r\n        const vertexExecutorId = taskId + \"_executor\";\r\n        const vertexComponentId = taskId + \"_component\";\r\n        const vertexTaskId = taskId; // + \"_task\";\r\n        vertexExecutors[vertexExecutorId] = vertexExecutorSpec;\r\n        vertexComponentSpec.executorLabel = vertexExecutorId;\r\n        vertexComponents[vertexComponentId] = vertexComponentSpec;\r\n        vertexTaskSpec.componentRef.name = vertexComponentId;\r\n        vertexTaskSpec.taskInfo.name = vertexTaskId;\r\n        vertexTasks[vertexTaskId] = vertexTaskSpec;\r\n    }\r\n\r\n    const pipelineName = componentSpec.name ?? \"pipeline\";\r\n\r\n    const vertexPipelineSpec = {\r\n        pipelineInfo: {\r\n            name: sanitizePipelineInfoName(pipelineName)\r\n        },\r\n        sdkVersion: \"Cloud-Pipelines\",\r\n        schemaVersion: \"2.0.0\",\r\n        deploymentSpec: {\r\n            executors: vertexExecutors,\r\n        },\r\n        components: vertexComponents,\r\n        root: {\r\n          inputDefinitions: vertexComponentInputsSpec,\r\n          dag: {\r\n            tasks: vertexTasks,\r\n          }\r\n        },\r\n    };\r\n    return vertexPipelineSpec;\r\n};\r\n\r\nconst generateVertexPipelineJobFromGraphComponent = (\r\n  componentSpec: ComponentSpec,\r\n  gcsOutputDirectory: string,\r\n  pipelineArguments?: Map<string, string>\r\n) => {\r\n  // TODO: FIX: Do proper conversion of integers\r\n  //let convertedPipelineArguments = new Map<String, object>(Array.from(pipelineArguments.entries()).map((key, value) => [key, value]));\r\n  let convertedPipelineArguments: Record<string, any> = {};\r\n  if (pipelineArguments !== undefined) {\r\n    for (const [key, value] of Array.from(pipelineArguments.entries())) {\r\n      convertedPipelineArguments[key] = {\r\n        stringValue: value,\r\n        //intValue\r\n        //doubleValue\r\n      };\r\n    }\r\n  }\r\n\r\n  const pipelineSpec = graphComponentSpecToVertexPipelineSpec(componentSpec);\r\n\r\n  const pipelineJob = {\r\n    // name: \"<>\",\r\n    // displayName: \"<>\",\r\n    // labels: {},\r\n    runtimeConfig: {\r\n      parameters: convertedPipelineArguments,\r\n      gcsOutputDirectory: gcsOutputDirectory,\r\n    },\r\n    pipelineSpec: pipelineSpec,\r\n    // encryptionSpec: {},\r\n    // serviceAccount: \"<>\",\r\n    // network: {},\r\n  };\r\n  return pipelineJob;\r\n};\r\n\r\nexport { graphComponentSpecToVertexPipelineSpec, generateVertexPipelineJobFromGraphComponent };\r\n","/* global gapi */\r\n\r\nimport { useState } from 'react';\r\n\r\nimport {\r\n  useStoreState,\r\n} from \"react-flow-renderer\";\r\n\r\nimport {createGraphComponentSpecFromFlowElements} from './graphComponentFromFlow'\r\nimport {generateVertexPipelineJobFromGraphComponent} from './vertexAiCompiler'\r\n\r\nvar CLIENT_ID = '640001104961-2m8hs192tmd9f9nssbr5thr5o3uhmita.apps.googleusercontent.com';\r\nvar API_KEY = 'AIzaSyCDPTffgYGXoit-jKsj1_1WWbSxvU7aEdQ';\r\n     \r\nconst VERTEX_AI_PIPELINES_REGIONS = [\r\n  'us-central1',\r\n  'europe-west4',\r\n  'asia-east1',\r\n];\r\n\r\nconst VERTEX_AI_PIPELINES_DEFAULT_REGION = 'us-central1';\r\n\r\nconst authorizeGoogleCloudClient = async (\r\n  scopes: string[],\r\n  immediate = false, // Setting immediate to true prevents auth window showing every time. But it needs to be false the first time (when cookies are not set).\r\n  apiKey: string = API_KEY,\r\n  clientId: string = CLIENT_ID,\r\n) => {\r\n  return new Promise<GoogleApiOAuth2TokenObject>(\r\n    (resolve, reject) => {\r\n      gapi.client.setApiKey(apiKey);\r\n      gapi.auth.authorize(\r\n        {\r\n          client_id: clientId,\r\n          scope: scopes,\r\n          immediate: immediate,\r\n        },\r\n        (authResult) => {\r\n          // console.debug(\"authorizeGoogleCloudClient: called back\");\r\n          if (authResult === undefined) {\r\n            console.error(\"authorizeGoogleCloudClient failed\");\r\n            reject(\"gapi.auth.authorize result is undefined\");\r\n          } else if (authResult.error) {\r\n            console.error(\r\n              \"authorizeGoogleCloudClient failed\",\r\n              authResult.error\r\n            );\r\n            reject(authResult.error);\r\n          } else {\r\n            resolve(authResult);\r\n            // console.debug(\"authorizeGoogleCloudClient: Success\");\r\n          }\r\n        }\r\n      );\r\n    }\r\n  );\r\n};\r\n\r\nconst ensureGoogleCloudAuthorizesScopes = async (scopes: string[]) => {\r\n  // try {\r\n  //   // console.debug('Before ensureGoogleCloudAuthorizesScopes(immediate=true)');\r\n  //   await authorizeGoogleCloudClient(scopes, true);\r\n  //   // console.debug('After ensureGoogleCloudAuthorizesScopes(immediate=true)');\r\n  // } catch (err) {\r\n    // console.error('ensureGoogleCloudAuthorizesScopes(immediate=true)', err);\r\n    try {\r\n      await authorizeGoogleCloudClient(scopes, false);\r\n    } catch (err) {\r\n      // console.error('ensureGoogleCloudAuthorizesScopes(immediate=false)', err);\r\n    }\r\n  // }\r\n};\r\n\r\nconst cloudresourcemanagerListProjects = async (isAuthenticated = false) => {\r\n  await ensureGoogleCloudAuthorizesScopes(\r\n    [\"https://www.googleapis.com/auth/cloud-platform\"]\r\n  );\r\n  const response = await gapi.client.request({\r\n    path: \"https://cloudresourcemanager.googleapis.com/v1/projects/\",\r\n  });\r\n  return response.result;\r\n}\r\n\r\nconst aiplatformCreatePipelineJob = async (projetId: string, region='us-central1', pipelineJob: Record<string, any>) => {\r\n  await ensureGoogleCloudAuthorizesScopes(\r\n    [\"https://www.googleapis.com/auth/cloud-platform\"]\r\n  );\r\n  const response = await gapi.client.request({\r\n    path: `https://${region}-aiplatform.googleapis.com/v1beta1/projects/${projetId}/locations/${region}/pipelineJobs`,\r\n    method: \"POST\",\r\n    body: JSON.stringify(pipelineJob),\r\n  });\r\n  return response.result;\r\n}\r\n\r\nconst GoogleCloudSubmitter = () => {\r\n  const [projects, setProjects] = useState<string[]>([]);\r\n  const [project, setProject] = useState<string>(\"\"); // undefined causes error: https://reactjs.org/docs/forms.html#controlled-components https://stackoverflow.com/a/47012342\r\n  const [region, setRegion] = useState(VERTEX_AI_PIPELINES_DEFAULT_REGION);\r\n  const [error, setError] = useState(\"\");\r\n  const [gcsOutputDirectory, setGcsOutputDirectory] = useState(\"\");\r\n  const [pipelineJobWebUrl, setPipelineJobWebUrl] = useState(\"\");\r\n\r\n  const nodes = useStoreState((store) => store.nodes);\r\n  const edges = useStoreState((store) => store.edges);\r\n\r\n  let vertexPipelineJobJson: string | undefined = undefined;\r\n  let vertexPipelineJobUrl: string | undefined = undefined;\r\n  try {\r\n    const pipelineName = \"Pipeline\";\r\n  \r\n    const graphComponent = createGraphComponentSpecFromFlowElements(nodes, edges, pipelineName, undefined, false, true);\r\n    const vertexPipelineJob = generateVertexPipelineJobFromGraphComponent(graphComponent, gcsOutputDirectory);\r\n    vertexPipelineJobJson = JSON.stringify(vertexPipelineJob, undefined, 4);\r\n    vertexPipelineJobUrl = URL.createObjectURL(\r\n      new Blob([vertexPipelineJobJson], { type: \"application/json\" })\r\n    );\r\n  } catch(err) {\r\n  }\r\n\r\n  return (\r\n    <form\r\n      onSubmit={async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n          const pipelineName = \"Pipeline\";\r\n\r\n          const graphComponent = createGraphComponentSpecFromFlowElements(nodes, edges, pipelineName, undefined, false, true);\r\n          const vertexPipelineJob = generateVertexPipelineJobFromGraphComponent(graphComponent, gcsOutputDirectory);\r\n          const result = await aiplatformCreatePipelineJob(project, region, vertexPipelineJob);\r\n          const pipelineJobName: string = result.name;\r\n          const pipelineJobId = pipelineJobName.split('/').slice(-1)[0];\r\n          const pipelineJobWebUrl = `https://console.cloud.google.com/vertex-ai/locations/${region}/pipelines/runs/${pipelineJobId}?project=${project}`;\r\n          setPipelineJobWebUrl(pipelineJobWebUrl);\r\n        } catch (err) {\r\n          console.error(err);\r\n          setPipelineJobWebUrl(\"\");\r\n          setError(err?.result?.error?.message ?? \"Error\");\r\n        }\r\n      }}\r\n    >\r\n      <div>\r\n        <label htmlFor=\"project\">Project: </label>\r\n        <input\r\n          id=\"project\"\r\n          required\r\n          type=\"text\"\r\n          list=\"projects\"\r\n          placeholder=\"<my-project-id>\"\r\n          value={project}\r\n          onChange={(e) => setProject(e.target.value)}\r\n        />\r\n        <datalist id=\"projects\">\r\n          {projects.map((projectId) => (\r\n            <option key={projectId} value={projectId} />\r\n          ))}\r\n        </datalist>\r\n        <button\r\n          type=\"button\" // The default button type is \"submit\", not \"button\". WTF!?\r\n          onClick={async (e) => {\r\n            try {\r\n              const result = await cloudresourcemanagerListProjects();\r\n              const projectIds = (result.projects as any[]).map<string>(\r\n                (projectInfo) => projectInfo.projectId\r\n              );\r\n              setProjects(projectIds);\r\n              setError(\"\");\r\n            } catch (err) {\r\n              setError(err?.result?.error?.message ?? \"Error\");\r\n            }\r\n          }}\r\n        >\r\n          ⟳{/* 🗘⭯ ⭮ ↺ ↻ ⟲ ⟳ 🔃🔄 */}\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"region\">Region: </label>\r\n        <input\r\n          id=\"region\"\r\n          required\r\n          type=\"text\"\r\n          list=\"regions\"\r\n          value={region}\r\n          onChange={(e) => setRegion(e.target.value)}\r\n        />\r\n        <datalist id=\"regions\">\r\n          {VERTEX_AI_PIPELINES_REGIONS.map((region) => (\r\n            <option key={region} value={region} />\r\n          ))}\r\n        </datalist>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"region\">GCS dir: </label>\r\n        <input\r\n          id=\"gcsOutputDirectory\"\r\n          required\r\n          type=\"text\"\r\n          value={gcsOutputDirectory}\r\n          onChange={(e) => setGcsOutputDirectory(e.target.value)}\r\n        />\r\n      </div>\r\n      <input type=\"submit\" value=\"Submit pipeline job\" />\r\n      {pipelineJobWebUrl !== \"\" && <div><a href={pipelineJobWebUrl} target=\"_blank\" rel=\"noreferrer\">Job</a></div>}\r\n      {vertexPipelineJobUrl !== undefined && (\r\n        <div>\r\n          Download <a\r\n            href={vertexPipelineJobUrl}\r\n            download={\"vertex_pipeline_job.json\"}\r\n          >\r\n            vertex_pipeline_job.json\r\n          </a>\r\n        </div>\r\n      )}\r\n      {error !== \"\" && <div>Error: {error}</div>}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default GoogleCloudSubmitter;\r\n","import {\r\n  useStoreState,\r\n} from \"react-flow-renderer\";\r\n\r\nimport {createGraphComponentSpecFromFlowElements} from './graphComponentFromFlow'\r\nimport {graphComponentSpecToVertexPipelineSpec} from './vertexAiCompiler'\r\n\r\nconst VertexAiExporter = ({pipelineName}: {pipelineName?: string}) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n  const edges = useStoreState((store) => store.edges);\r\n\r\n  pipelineName = pipelineName ?? \"Pipeline\";\r\n\r\n  let vertexPipelineSpecText = \"\";\r\n  try {\r\n    const graphComponent = createGraphComponentSpecFromFlowElements(nodes, edges, pipelineName, undefined, false, true);\r\n    const vertexPipelineSpec = graphComponentSpecToVertexPipelineSpec(graphComponent);\r\n    vertexPipelineSpecText = JSON.stringify(vertexPipelineSpec, undefined, 2);\r\n  } catch(err) {\r\n    vertexPipelineSpecText = String(err);\r\n  }\r\n\r\n  const vertexPipelineSpecTextBlob = new Blob([vertexPipelineSpecText], { type: \"application/json\" }); // Or application/x-yaml (which leads to downloading)\r\n  // TODO: Call vertexPipelineSpecTextBlobUrl.revokeObjectURL in the future\r\n  const vertexPipelineSpecTextBlobUrl = URL.createObjectURL(vertexPipelineSpecTextBlob);\r\n\r\n  return (\r\n    <details open>\r\n      <summary>\r\n        Cloud IR <a\r\n          href={vertexPipelineSpecTextBlobUrl}\r\n          download={\"vertex_pipeline_spec.json\"}\r\n        >\r\n          vertex_pipeline_spec.json\r\n        </a>\r\n      </summary>\r\n      <pre style={{ overflow: \"auto\" }}>{vertexPipelineSpecText}</pre>\r\n    </details>\r\n  );\r\n};\r\n\r\nexport default VertexAiExporter;\r\n","import { DragEvent } from 'react';\r\n\r\nimport Draggable, { DraggableCore, DraggableData, DraggableEvent } from 'react-draggable';\r\n\r\nimport ComponentLibrary from './ComponentLibrary'\r\nimport ComponentSearch from './ComponentSearch'\r\nimport GraphComponentExporter from './GraphComponentExporter'\r\nimport GoogleCloudSubmitter from './GoogleCloud'\r\nimport VertexAiExporter from './VertexAiExporter'\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  event.dataTransfer.setData('application/reactflow', JSON.stringify(nodeData));\r\n  event.dataTransfer.effectAllowed = 'move';\r\n};\r\n\r\nconst COMPONENT_LIBRARY = [\r\n  {\r\n    category: \"Quick start\",\r\n    componentUrls: [\r\n      // 'https://raw.githubusercontent.com/Ark-kun/pipelines/60a2612541ec08c6a85c237d2ec7525b12543a43/components/datasets/Chicago_Taxi_Trips/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/2463ecda532517462590d75e6e14a8af6b55869a/components/datasets/Chicago_Taxi_Trips/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/567c04c51ff00a1ee525b3458425b17adbe3df61/components/XGBoost/Train/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/567c04c51ff00a1ee525b3458425b17adbe3df61/components/XGBoost/Predict/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"Datasets\", componentUrls: [\r\n      // 'https://raw.githubusercontent.com/Ark-kun/pipelines/60a2612541ec08c6a85c237d2ec7525b12543a43/components/datasets/Chicago_Taxi_Trips/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/2463ecda532517462590d75e6e14a8af6b55869a/components/datasets/Chicago_Taxi_Trips/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"Data manipulation\",\r\n    componentUrls: [\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/6162d55998b176b50267d351241100bb0ee715bc/components/pandas/Transform_DataFrame/in_CSV_format/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"Upload/Download\",\r\n    componentUrls: [\r\n    'https://raw.githubusercontent.com/Ark-kun/pipelines/54ac9a6a7173aecbbb30a043b2077e790cac6953/components/web/Download/component.yaml',\r\n    'https://raw.githubusercontent.com/Ark-kun/pipelines/2dac60c400ad8767b452649d08f328dfaf230f96/components/google-cloud/storage/download/component.yaml',\r\n    'https://raw.githubusercontent.com/Ark-kun/pipelines/2dac60c400ad8767b452649d08f328dfaf230f96/components/google-cloud/storage/upload_to_unique_uri/component.yaml',\r\n    'https://raw.githubusercontent.com/Ark-kun/pipelines/2dac60c400ad8767b452649d08f328dfaf230f96/components/google-cloud/storage/upload_to_explicit_uri/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"XGBoost\",\r\n    componentUrls: [\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/567c04c51ff00a1ee525b3458425b17adbe3df61/components/XGBoost/Train/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/567c04c51ff00a1ee525b3458425b17adbe3df61/components/XGBoost/Predict/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"PyTorch\",\r\n    componentUrls: [\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/4e1facea1a270535b515a9e8cc59422d1ad76a9e/components/PyTorch/Create_fully_connected_network/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/603342c4b88fe2d69ff07682f702cd3601e883bb/components/PyTorch/Train_PyTorch_model/from_CSV/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/e011e4affa85542ef2b24d63fdac27f8d939bbee/components/PyTorch/Convert_to_OnnxModel_from_PyTorchScriptModule/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"TFX\",\r\n    componentUrls: [\r\n    ]\r\n  },\r\n];\r\n\r\nconst Sidebar = () => {\r\n  return (\r\n    <aside className=\"nodeList\">\r\n      <details open style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary style={{ borderWidth: \"1px\", padding: \"8px\", fontWeight: \"bold\" }}>Submit to Google Cloud</summary>\r\n        <GoogleCloudSubmitter/>\r\n      </details>\r\n      <div className=\"description\">You can drag these nodes to the pane on the right.</div>\r\n      <Draggable>\r\n        <div className=\"react-flow__node-input\" onDragStart={(event: DragEvent) => onDragStart(event, { input: { label: \"Input Node\" } })} draggable>\r\n          Dr Input Node\r\n        </div>\r\n      </Draggable>\r\n      <div className=\"react-flow__node-output\" onDragStart={(event: DragEvent) => onDragStart(event, { output: { label: \"Output Node\" } })} draggable>\r\n        Output Node\r\n      </div>\r\n      <ComponentLibrary componentGroups={COMPONENT_LIBRARY}/>\r\n      <details open style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary style={{ borderWidth: \"1px\", padding: \"8px\", fontWeight: \"bold\" }}>Component search</summary>\r\n        <ComponentSearch />\r\n      </details>\r\n      <GraphComponentExporter/>\r\n      <VertexAiExporter/>\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import { ComponentSpec } from \"../componentSpec\";\r\nimport { downloadComponentDataWithCache } from \"../github\";\r\n\r\nlet xgBoostQueryTrainPredictPipeline = {\r\n  name: \"XGBoost query train predict pipeline\",\r\n  inputs: [],\r\n  outputs: [],\r\n  implementation: {\r\n    graph: {\r\n      tasks: {\r\n        dataset: {\r\n          componentRef: {\r\n            url: \"https://raw.githubusercontent.com/Ark-kun/pipelines/60a2612541ec08c6a85c237d2ec7525b12543a43/components/datasets/Chicago_Taxi_Trips/component.yaml\",\r\n          },\r\n          annotations: {\r\n            \"editor.position\": '{\"x\":100,\"y\":100,\"width\":180,\"height\":40}',\r\n          },\r\n          arguments: {\r\n            Select: 'tips,trip_seconds,trip_miles,pickup_community_area,dropoff_community_area,fare,tolls,extras,trip_total',\r\n            Where: 'trip_start_timestamp >= \"2019-01-01\" AND trip_start_timestamp < \"2019-02-01\"'\r\n          }\r\n        },\r\n        train: {\r\n          componentRef: {\r\n            url: \"https://raw.githubusercontent.com/Ark-kun/pipelines/567c04c51ff00a1ee525b3458425b17adbe3df61/components/XGBoost/Train/component.yaml\",\r\n          },\r\n          annotations: {\r\n            \"editor.position\": '{\"x\":100,\"y\":200,\"width\":180,\"height\":40}',\r\n          },\r\n          arguments: {\r\n            training_data: {\r\n              taskOutput: {\r\n                taskId: \"dataset\",\r\n                outputName: \"Table\",\r\n              },\r\n            },\r\n          },\r\n        },\r\n        predict: {\r\n          componentRef: {\r\n            url: \"https://raw.githubusercontent.com/Ark-kun/pipelines/567c04c51ff00a1ee525b3458425b17adbe3df61/components/XGBoost/Predict/component.yaml\",\r\n          },\r\n          annotations: {\r\n            \"editor.position\": '{\"x\":100,\"y\":300,\"width\":180,\"height\":40}',\r\n          },\r\n          arguments: {\r\n            data: {\r\n              taskOutput: {\r\n                taskId: \"dataset\",\r\n                outputName: \"Table\",\r\n              },\r\n            },\r\n            model: {\r\n              taskOutput: {\r\n                taskId: \"train\",\r\n                outputName: \"model\",\r\n              },\r\n            },\r\n            label_column: \"0\",\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst preloadComponentReferences = async (\r\n  componentSpec: ComponentSpec,\r\n  componentMap?: Map<string, ComponentSpec>\r\n) => {\r\n  // This map is needed to improve efficiency and handle recursive components.\r\n  if (componentMap === undefined) {\r\n    componentMap = new Map<string, ComponentSpec>();\r\n  }\r\n  if (\"graph\" in componentSpec.implementation) {\r\n    for (const taskSpec of Object.values(\r\n      componentSpec.implementation.graph.tasks\r\n    )) {\r\n      const componentUrl = taskSpec.componentRef.url;\r\n      if (\r\n        taskSpec.componentRef.spec === undefined &&\r\n        componentUrl !== undefined\r\n      ) {\r\n        let taskComponentSpec = componentMap.get(componentUrl);\r\n        if (taskComponentSpec === undefined) {\r\n          taskComponentSpec = await downloadComponentDataWithCache(\r\n            componentUrl\r\n          );\r\n          componentMap.set(componentUrl, taskComponentSpec);\r\n        }\r\n        taskSpec.componentRef.spec = taskComponentSpec;\r\n        await preloadComponentReferences(taskComponentSpec, componentMap);\r\n      }\r\n    }\r\n  }\r\n  return componentSpec;\r\n};\r\n\r\nexport { preloadComponentReferences, xgBoostQueryTrainPredictPipeline };\r\n","import { useState } from 'react';\r\nimport {\r\n  ReactFlowProvider,\r\n  Controls,\r\n  Background,\r\n  MiniMap,\r\n} from 'react-flow-renderer';\r\n\r\nimport { GraphSpec } from '../componentSpec';\r\nimport GraphComponentSpecFlow from './GraphComponentSpecFlow';\r\nimport Sidebar from './Sidebar';\r\nimport { preloadComponentReferences, xgBoostQueryTrainPredictPipeline } from \"./samplePipelines\";\r\n\r\nimport './dnd.css';\r\n\r\nconst GRID_SIZE = 10;\r\n\r\nconst DnDFlow = () => {\r\n  const [graphSpec, setGraphSpec] = useState<GraphSpec | undefined>();\r\n\r\n  if (graphSpec === undefined) {\r\n    try {\r\n      (async () => {\r\n        const pipeline = await preloadComponentReferences(xgBoostQueryTrainPredictPipeline);\r\n        if (\"graph\" in pipeline.implementation) {\r\n          setGraphSpec(pipeline.implementation.graph);\r\n        }\r\n      })();\r\n    } catch {\r\n    }\r\n  };\r\n\r\n  if (graphSpec === undefined) {\r\n    return (<></>);\r\n  }\r\n\r\n  return (\r\n    <div className=\"dndflow\">\r\n      <ReactFlowProvider>\r\n        <div className=\"reactflow-wrapper\">\r\n          <GraphComponentSpecFlow\r\n            initialGraphSpec={graphSpec}\r\n            deleteKeyCode='Delete'\r\n            multiSelectionKeyCode='Control'\r\n            snapToGrid={true}\r\n            snapGrid={[GRID_SIZE, GRID_SIZE]}\r\n          >\r\n            <MiniMap/>\r\n            <Controls />\r\n            <Background gap={GRID_SIZE}/>\r\n          </GraphComponentSpecFlow>\r\n        </div>\r\n        <Sidebar />\r\n      </ReactFlowProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DnDFlow;\r\n","import './App.css';\r\nimport DnDFlow from './DragNDrop/index';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" style={{width: \"100%\", height: \"100%\"}}>\r\n      <DnDFlow/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}