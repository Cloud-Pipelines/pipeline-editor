{"version":3,"sources":["DragNDrop/ArgumentsEditor.tsx","DragNDrop/ComponentTaskNode.tsx","DragNDrop/GraphComponentSpecFlow.tsx","github.ts","DragNDrop/vertexPipelineSpec.ts","DragNDrop/vertexAiCompiler.ts","DragNDrop/Sidebar.tsx","DragNDrop/ComponentLibrary.tsx","DragNDrop/ComponentSearch.tsx","DragNDrop/GraphComponentExporter.tsx","DragNDrop/GoogleCloud.tsx","DragNDrop/VertexAiExporter.tsx","DragNDrop/GraphComponentLink.tsx","DragNDrop/KubeflowPipelines.tsx","DragNDrop/index.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx","DragNDrop/samplePipelines.ts"],"names":["ArgumentsEditor","taskSpec","closeEditor","setArguments","useState","arguments","currentArguments","setCurrentArguments","componentSpec","componentRef","spec","undefined","console","error","inputSpecs","inputs","onSubmit","e","a","preventDefault","style","position","display","borderSpacing","background","border","borderRadius","padding","name","map","inputSpec","inputName","value","placeholder","argument","default","taskOutput","taskId","outputName","graphInput","typeSpec","argumentIsRequiredButMissing","optional","typeSpecString","type","JSON","stringify","textAlign","whiteSpace","textOverflow","overflow","maxWidth","verticalAlign","title","required","pattern","onChange","target","onClick","disabled","inputHandlePosition","Position","Top","outputHandlePosition","Bottom","isComponentTaskNode","node","data","generateHandles","ioSpecs","handleType","idPrefix","inputsWithMissingArguments","handleComponents","numHandles","length","i","ioSpec","id","positionPercentString","String","left","top","ioTypeName","toString","classNames","replace","includes","push","className","generateLabelStyle","labelClasses","labelStyle","isConnectable","join","maxLabelWidthPx","ComponentTaskNode","isArgumentsEditorOpen","setIsArgumentsEditorOpen","label","inputsWithInvalidArguments","filter","inputHandles","generateInputHandles","outputHandles","outputs","concat","onDoubleClick","augmentComponentSpec","nodes","includeSpecs","includePositions","getNodePositionAnnotation","x","__rf","y","width","height","nodeXPositionComparer","n1","n2","deltaX","deltaY","nodeYPositionComparer","inputNodes","sort","outputNodes","taskNodes","inputPositionMap","Map","inputOrderMap","index","inputOrderComparer","b","get","Infinity","outputPositionMap","outputOrderMap","outputOrderComparer","taskPositionMap","taskOrderMap","taskOrderComparer","pairA","pairB","has","Error","newAnnotations","annotations","NODE_LAYOUT_ANNOTATION_KEY","newInputSpec","Object","keys","outputSpec","newOutputSpec","implementation","graphSpec","graph","newTasks","fromEntries","entries","tasks","newTaskSpec","url","rebuildComponentSpec","description","metadata","rest","nodeTypes","task","memo","GraphComponentSpecFlow","children","setComponentSpec","reactFlowInstance","setReactFlowInstance","layoutAnnotation","decodedPosition","parse","err","args","setTaskArguments","edges","flatMap","source","sourceHandle","targetHandle","arrowHeadType","ArrowHeadType","ArrowClosed","outputEdges","outputValues","elements","replaceComponentSpec","newComponentSpec","replaceGraphSpec","newGraphSpec","taskArguments","setTaskArgument","oldTaskSpecArguments","newTaskSpecArguments","removeTaskArgument","setGraphOutputValue","outputValue","newGraphOutputValues","removeGraphOutputValue","addConnection","connection","targetTaskInputName","sourceTaskOutputName","taskOutputArgument","graphInputArgument","removeEdge","edge","removeNode","newInputs","removeComponentInput","newOutputs","removeComponentOutput","removeTask","log","makeNameUniqueByAddingIndex","existingNames","finalName","onConnect","params","onDragOver","event","dataTransfer","dropEffect","onDrop","droppedData","getData","droppedDataObject","nodeType","nodeData","dragOffsetX","dragOffsetY","dragStartOffsetData","dragStartOffset","offsetX","offsetY","project","clientX","clientY","nodePosition","positionAnnotations","mergedAnnotations","taskSpecWithAnnotation","Set","getUniqueTaskName","getUniqueInputName","getUniqueOutputName","onEdgeUpdate","oldEdge","newConnection","onElementsRemove","elementsToRemove","element","isEdge","isNode","onLoad","_reactFlowInstance","SEARCH_CACHE_NAME","BLOB_CACHE_NAME","DB_NAME","HASH_TO_CONTENT_DB_TABLE_NAME","HASH_TO_COMPONENT_NAME_DB_TABLE_NAME","URL_TO_HASH_DB_TABLE_NAME","HASH_TO_URL_DB_TABLE_NAME","URL_PROCESSING_VERSION_TABLE_NAME","BAD_HASHES_TABLE_NAME","httpGetWithCache","urlOrRequest","cacheName","updateIfInCache","caches","open","cache","match","response","add","response2","Promise","reject","searchGitHubCodeWithCache","query","page","order","encodedQuery","encodeURIComponent","encodedSort","encodedOrder","searchUrl","json","githubHtmlUrlToDownloadUrl","htmlUrl","getComponentUrlsAndHashes","users","urlsAndHashes","user","searchResults","items","item","html_url","hash","sha","resolve","setTimeout","downloadComponentDataWithCache","blob","text","componentText","yaml","load","cacheAllComponents","debug","urlsAndHashesIterator","urlToHashDb","localForage","createInstance","storeName","hashToUrlDb","hashToContentDb","hashToComponentNameDb","urlProcessingVersionDb","badHashesDb","toLowerCase","getItem","badHashReason","downloadUrl","endsWith","cachedHash","urlVersion","Number","parseInt","setItem","message","getAllComponentsAsRefs","hashToComponentRef","cachePromise","iterate","iterationNumber","set","componentRefs","forEach","searchComponentsByName","ref","PrimitiveTypeEnum","TriggerStrategy","sanitizePipelineInfoName","pipelineContextName","resolveCommandLine","containerSpec","container","inputsConsumedAsValue","inputsConsumedAsPath","convertArg","arg","inputValue","inputPath","outputPath","if","cond","then","else","ifCond","ifThen","ifElse","condEvaluatesToTrue","isPresent","taskArgument","unresolvedArgs","command","isContainerImplementation","implementationType","typeSpecToVertexPrimitiveTypeEnum","vertex","INT","DOUBLE","STRING","typeSpecToVertexParameterSpec","MAKE_ARTIFACT_COMPONENT_ID","MAKE_ARTIFACT_EXECUTOR_ID","MAKE_ARTIFACT_INPUT_NAME","MAKE_ARTIFACT_OUTPUT_NAME","makeArtifactTaskSpecTemplate","taskInfo","parameters","cachingOptions","enableCache","makeArtifactComponentSpec","executorLabel","inputDefinitions","outputDefinitions","artifacts","artifactType","schemaTitle","makeArtifactExecutorSpec","image","taskSpecToVertexTaskSpecComponentSpecAndExecutorSpec","generateTaskID","isRoot","resolvedCommandLine","vertexExecutorSpec","inputMap","vertexComponentInputsSpec","Array","from","values","vertexComponentOutputsSpec","vertexComponentSpec","vertexTaskParameterArguments","runtimeValue","constantValue","stringValue","componentInputParameter","taskOutputParameter","producerTask","outputParameterKey","vertexMakeArtifactTaskSpecs","vertexTaskArtifactArguments","result","makeArtifactTaskId","makeArtifactTaskSpec","taskOutputArtifact","outputArtifactKey","componentInputArtifact","vertexTaskSpec","graphComponentSpecToVertexPipelineSpec","vertexExecutors","vertexComponents","vertexTasks","usedTaskIds","generateTaskId","prefix","vertexExecutorId","vertexComponentId","vertexTaskId","additionalTaskId","additionalTaskSpec","vertexPipelineSpec","pipelineInfo","sdkVersion","schemaVersion","deploymentSpec","executors","components","root","dag","generateVertexPipelineJobFromGraphComponent","gcsOutputDirectory","pipelineArguments","convertedPipelineArguments","key","pipelineSpec","pipelineJob","displayName","runtimeConfig","onDragStart","setData","nativeEvent","effectAllowed","COMPONENT_LIBRARY","category","componentUrls","Sidebar","borderWidth","fontWeight","loadComponentFromUrl","TFX_PIPELINE_URL","XGBOOST_PIPELINE_URL","PYTORCH_PIPELINE_URL","input","draggable","output","componentGroups","DATA_PASSING_PIPELINE_URL","process","NODE_ENV","DraggableComponentRow","componentUrl","useEffect","ComponentGroupList","ComponentLibrary","paddingLeft","COMPONENT_ORGS","SearchPanel","props","setError","firstTime","setFirstTime","isLoaded","setIsLoaded","setQuery","setItems","results","componentElements","fetchData","GraphComponentExporter","useStoreState","store","graphComponent","dump","lineWidth","componentTextBlob","Blob","downloadLink","href","URL","createObjectURL","download","LOCAL_STORAGE_GCS_OUTPUT_DIRECTORY_KEY","LOCAL_STORAGE_PROJECT_ID_KEY","LOCAL_STORAGE_REGION_KEY","LOCAL_STORAGE_PROJECT_IDS_KEY","CLIENT_ID","API_KEY","VERTEX_AI_PIPELINES_REGIONS","authorizeGoogleCloudClient","scopes","immediate","apiKey","clientId","gapi","client","setApiKey","auth","authorize","client_id","scope","authResult","receivedScopesString","receivedScopes","split","every","errorMessage","ensureGoogleCloudAuthorizesScopes","cloudresourcemanagerListProjects","request","path","aiplatformCreatePipelineJob","projetId","region","method","body","GoogleCloudSubmitter","window","localStorage","projects","setProjects","setProject","setRegion","setGcsOutputDirectory","pipelineJobWebUrl","setPipelineJobWebUrl","compilationError","setCompilationError","vertexPipelineJobJson","vertexPipelineJob","defaultInputValues","vertexPipelineJobUrl","readyToSubmit","pipelineJobName","pipelineJobId","slice","htmlFor","list","projectId","projectIds","projectInfo","rel","VertexAiExporter","vertexPipelineSpecText","vertexPipelineSpecTextBlob","vertexPipelineSpecTextBlobUrl","GraphComponentLink","downloadFileName","linkText","KubeflowPipelinesSubmitter","setMessage","fetch","headers","Headers","responseText","SAVED_COMPONENT_SPEC_KEY","ComponentSpecAutoSaver","warn","sessionStorage","saveComponentSpec","DnDFlow","restoredComponentSpec","loadedYaml","loadComponentSpec","deleteKeyCode","multiSelectionKeyCode","snapToGrid","snapGrid","gap","App","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","origin","addEventListener","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","preloadComponentReferences","componentMap","taskComponentSpec","preloadChildComponentSpecs"],"mappings":"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","file":"static/js/main.54bbc6af.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport { ArgumentType, TaskSpec, TypeSpecType } from \"../componentSpec\";\r\n\r\ninterface ArgumentsEditorProps {\r\n  taskSpec: TaskSpec;\r\n  closeEditor?: () => void;\r\n  setArguments?: (args: Record<string, ArgumentType>) => void;\r\n}\r\n\r\nconst getPatternForTypeSpec = (typeSpec?: TypeSpecType) => {\r\n  // TODO: Implement\r\n  return undefined;\r\n};\r\n\r\nconst typeSpecToString = (typeSpec?: TypeSpecType): string => {\r\n  if (typeSpec === undefined) {\r\n    return \"Any\";\r\n  }\r\n  if (typeof typeSpec === \"string\") {\r\n    return typeSpec\r\n  }\r\n  return JSON.stringify(typeSpec);\r\n};\r\n\r\nconst ArgumentsEditor = ({\r\n  taskSpec,\r\n  closeEditor,\r\n  setArguments,\r\n}: ArgumentsEditorProps) => {\r\n  const [currentArguments, setCurrentArguments] = useState<\r\n    Record<string, ArgumentType>\r\n  >({ ...taskSpec.arguments });\r\n\r\n  const componentSpec = taskSpec.componentRef.spec;\r\n  if (componentSpec === undefined) {\r\n    console.error(\r\n      \"ArgumentsEditor called with missing taskSpec.componentRef.spec\",\r\n      taskSpec\r\n    );\r\n    return <></>;\r\n  }\r\n\r\n  const inputSpecs = componentSpec.inputs ?? [];\r\n\r\n  return (\r\n    <form\r\n      onSubmit={async (e) => {\r\n        e.preventDefault();\r\n      }}\r\n      // Does not work\r\n      // draggable={false}\r\n      style={{\r\n        position: \"fixed\",\r\n        display: \"table\",\r\n        borderSpacing: \"5px\",\r\n        background: \"white\",\r\n        border: \"1px solid black\",\r\n        borderRadius: \"4px\",\r\n        padding: \"15px\",\r\n        // Does not work\r\n        // zIndex: 11,\r\n      }}\r\n    >\r\n      <legend>Input arguments for {componentSpec.name}</legend>\r\n      <div>\r\n        {inputSpecs.map((inputSpec) => {\r\n          const inputName = inputSpec.name;\r\n          let value: string | undefined = undefined;\r\n          let placeholder: string | undefined = undefined;\r\n          const argument = currentArguments[inputName];\r\n          if (argument === undefined) {\r\n            value = inputSpec.default;\r\n          } else {\r\n            if (typeof argument === \"string\") {\r\n              value = argument;\r\n            } else if (\"taskOutput\" in argument) {\r\n              placeholder = `<from task ${argument.taskOutput.taskId} / ${argument.taskOutput.outputName}>`;\r\n            } else if (\"graphInput\" in argument) {\r\n              placeholder = `<from graph input ${argument.graphInput.inputName}>`;\r\n            } else {\r\n              placeholder = \"<reference>\";\r\n            }\r\n          }\r\n\r\n          const argumentIsRequiredButMissing =\r\n            !(inputName in currentArguments) &&\r\n            inputSpec.optional !== true &&\r\n            inputSpec.default === undefined;\r\n          \r\n          const typeSpecString = typeSpecToString(inputSpec.type);\r\n\r\n          return (\r\n            <div\r\n              key={inputName}\r\n              style={{\r\n                display: \"table-row\",\r\n              }}\r\n            >\r\n              <label\r\n                style={{\r\n                  textAlign: \"right\",\r\n                  display: \"table-cell\",\r\n                  whiteSpace: \"nowrap\",\r\n                }}\r\n              >\r\n                <span>\r\n                  {inputName} (\r\n                  <span\r\n                    style={{\r\n                      textOverflow: \"ellipsis\",\r\n                      overflow: \"hidden\",\r\n                      maxWidth: \"90px\",\r\n                      display: \"inline-block\",\r\n                      verticalAlign: \"bottom\",\r\n                    }}\r\n                    title={typeSpecString}\r\n                  >\r\n                    {typeSpecString}\r\n                  </span>\r\n                  )\r\n                </span>\r\n              </label>\r\n              <input\r\n                style={{\r\n                  display: \"table-cell\",\r\n                }}\r\n                placeholder={placeholder}\r\n                required={argumentIsRequiredButMissing}\r\n                value={value ?? \"\"}\r\n                pattern={getPatternForTypeSpec(inputSpec.type)}\r\n                onChange={(e) => {\r\n                  currentArguments[inputName] = e.target.value;\r\n                  setCurrentArguments({ ...currentArguments });\r\n                }}\r\n              />\r\n              <div\r\n                style={{\r\n                  display: \"table-cell\",\r\n                }}\r\n              >\r\n                <button\r\n                  type=\"button\"\r\n                  title=\"Reset to default\"\r\n                  onClick={(e) => {\r\n                    delete currentArguments[inputName];\r\n                    setCurrentArguments({ ...currentArguments });\r\n                  }}\r\n                  disabled={!(inputName in currentArguments)}\r\n                >\r\n                  ⌧\r\n                </button>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <button type=\"button\" onClick={closeEditor}>\r\n        Close\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        onClick={(e) => {\r\n          setArguments?.(currentArguments);\r\n          closeEditor?.();\r\n        }}\r\n      >\r\n        Apply\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\n//export default memo(ArgumentsEditor);\r\nexport default ArgumentsEditor;\r\n","import { CSSProperties, memo, useState } from 'react';\r\nimport {\r\n  ArgumentType,\r\n  InputSpec,\r\n  OutputSpec,\r\n  TaskSpec,\r\n} from '../componentSpec';\r\n\r\nimport { Handle, Position, Node, NodeProps, HandleType } from 'react-flow-renderer';\r\n\r\nimport ArgumentsEditor from './ArgumentsEditor';\r\n\r\nconst inputHandlePosition = Position.Top;\r\nconst outputHandlePosition = Position.Bottom;\r\n\r\ntype InputOrOutputSpec = InputSpec | OutputSpec;\r\n\r\nconst MISSING_ARGUMENT_CLASS_NAME = \"missing-argument\";\r\n\r\nconst NODE_WIDTH_IN_PX = 180;\r\n\r\nexport const isComponentTaskNode = (node: Node): node is Node<ComponentTaskNodeProps> =>\r\n  node.type === \"task\" && node.data !== undefined && \"taskSpec\" in node.data;\r\n\r\nfunction generateHandles(\r\n  ioSpecs: InputOrOutputSpec[],\r\n  handleType: HandleType,\r\n  position: Position,\r\n  idPrefix: string,\r\n  inputsWithMissingArguments?: string[],\r\n): JSX.Element[] {\r\n  let handleComponents = [];\r\n  const numHandles = ioSpecs.length;\r\n  for (let i = 0; i < numHandles; i++) {\r\n    const ioSpec = ioSpecs[i];\r\n    const id = idPrefix + ioSpec.name;\r\n    const relativePosition = (i + 1) / (numHandles + 1);\r\n    const positionPercentString = String(100 * relativePosition) + \"%\";\r\n    const style =\r\n      position === Position.Top || position === Position.Bottom\r\n        ? { left: positionPercentString }\r\n        : { top: positionPercentString };\r\n    // TODO: Handle complex type specs\r\n    const ioTypeName = ioSpec.type?.toString() ?? \"Any\";\r\n    let classNames = [`handle_${idPrefix}${ioTypeName}`.replace(\" \", \"_\")];\r\n    const isInvalid = (inputsWithMissingArguments ?? []).includes(ioSpec.name);\r\n    if (isInvalid) {\r\n      classNames.push(MISSING_ARGUMENT_CLASS_NAME);\r\n    }\r\n    classNames = classNames.map((className) => className.replace(\" \", \"_\"));\r\n\r\n    const [labelClasses, labelStyle] = generateLabelStyle(position, numHandles);\r\n    handleComponents.push(\r\n      <Handle\r\n        key={id}\r\n        type={handleType}\r\n        position={position}\r\n        id={id}\r\n        style={style}\r\n        isConnectable={true}\r\n        title={ioSpec.name + \" : \" + ioTypeName}\r\n        className={classNames.join(\" \")}\r\n      >\r\n        <div className={labelClasses} style={labelStyle}>\r\n          {ioSpec.name}\r\n        </div>\r\n      </Handle>\r\n    );\r\n  }\r\n  return handleComponents;\r\n}\r\n\r\n\r\nfunction generateLabelStyle(\r\n  position: Position,\r\n  numHandles: number\r\n): [string, CSSProperties] {\r\n  let maxLabelWidthPx = NODE_WIDTH_IN_PX;\r\n  // By default, we want to place the label on the same side of the handle as the handle is on the side of the node.\r\n  let labelClasses = \"label\";\r\n  // When there are too many inputs/outputs, we need to move the label so it starts from the handle.\r\n  // Based on my tests, we always want this for >4 handles (top/bottom), so the rotated default placement is never used at all.\r\n\r\n  if (position === Position.Top || position === Position.Bottom) {\r\n    if (numHandles > 1) {\r\n      // For single handle max width is the node width, while the formula would give half of that\r\n      maxLabelWidthPx = NODE_WIDTH_IN_PX / (numHandles + 1);\r\n    }\r\n    //if (numHandles > 4) {\r\n    if (maxLabelWidthPx < 35) {\r\n      maxLabelWidthPx = 50;\r\n      labelClasses += \" label-angled\";\r\n    }\r\n  } else {\r\n    maxLabelWidthPx = 60;\r\n  }\r\n\r\n  const labelStyle: CSSProperties = { maxWidth: `${maxLabelWidthPx}px` };\r\n  return [labelClasses, labelStyle];\r\n}\r\n\r\nfunction generateInputHandles(inputSpecs: InputSpec[], inputsWithInvalidArguments?: string[]): JSX.Element[] {\r\n  return generateHandles(inputSpecs, \"target\", inputHandlePosition, \"input_\", inputsWithInvalidArguments);\r\n}\r\n\r\nfunction generateOutputHandles(outputSpecs: OutputSpec[]): JSX.Element[] {\r\n  return generateHandles(outputSpecs, \"source\", outputHandlePosition, \"output_\");\r\n}\r\n\r\nexport interface ComponentTaskNodeProps {\r\n  taskSpec: TaskSpec,\r\n  taskId?: string,\r\n  setArguments?: (args: Record<string, ArgumentType>) => void;\r\n};\r\n\r\nconst ComponentTaskNode = ({ data }: NodeProps<ComponentTaskNodeProps>) => {\r\n  const [isArgumentsEditorOpen, setIsArgumentsEditorOpen] = useState(false);\r\n\r\n  const taskSpec = data.taskSpec;\r\n  const componentSpec = taskSpec.componentRef.spec;\r\n  if (componentSpec === undefined) {\r\n    return (<></>);\r\n  }\r\n\r\n  const label = componentSpec.name ?? \"<component>\";\r\n  const inputsWithInvalidArguments = (componentSpec.inputs ?? [])\r\n    .filter(\r\n      (inputSpec) =>\r\n        inputSpec.optional !== true &&\r\n        inputSpec.default === undefined &&\r\n        !(inputSpec.name in (taskSpec.arguments ?? {}))\r\n    )\r\n    .map((inputSpec) => inputSpec.name);\r\n  const inputHandles = generateInputHandles(componentSpec.inputs ?? [], inputsWithInvalidArguments);\r\n  const outputHandles = generateOutputHandles(componentSpec.outputs ?? []);\r\n  const handleComponents = inputHandles.concat(outputHandles);\r\n\r\n  const closeArgumentsEditor = () => {\r\n    setIsArgumentsEditorOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      onDoubleClick={() => {\r\n        setIsArgumentsEditorOpen(!isArgumentsEditorOpen);\r\n      }}\r\n      title={data.taskId}\r\n    >\r\n      {label}\r\n      {handleComponents}\r\n      {isArgumentsEditorOpen && (\r\n        <ArgumentsEditor\r\n          taskSpec={taskSpec}\r\n          closeEditor={closeArgumentsEditor}\r\n          setArguments={data.setArguments}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(ComponentTaskNode);\r\n","import React, { DragEvent, useState } from \"react\";\r\nimport ReactFlow, {\r\n  ArrowHeadType,\r\n  Connection,\r\n  Edge,\r\n  ElementId,\r\n  Elements,\r\n  isEdge,\r\n  isNode,\r\n  Node,\r\n  OnLoadParams,\r\n  ReactFlowProps,\r\n  XYPosition,\r\n} from \"react-flow-renderer\";\r\n\r\nimport {\r\n  ArgumentType,\r\n  ComponentSpec,\r\n  GraphInputArgument,\r\n  GraphSpec,\r\n  InputSpec,\r\n  OutputSpec,\r\n  TaskOutputArgument,\r\n  TaskSpec,\r\n} from \"../componentSpec\";\r\nimport ComponentTaskNode, { ComponentTaskNodeProps, isComponentTaskNode } from \"./ComponentTaskNode\";\r\n\r\n\r\nconst NODE_LAYOUT_ANNOTATION_KEY = \"editor.position\";\r\n\r\nexport const augmentComponentSpec = (\r\n  componentSpec: ComponentSpec,\r\n  nodes: Node[],\r\n  includeSpecs = false,\r\n  includePositions = true\r\n) => {\r\n  componentSpec = { ...componentSpec };\r\n\r\n  const getNodePositionAnnotation = (node: Node) =>\r\n    JSON.stringify({\r\n      // node.position cannot be used since set at 1st drop and never updated\r\n      x: node.__rf.position.x,\r\n      y: node.__rf.position.y,\r\n      width: node.__rf.width,\r\n      height: node.__rf.height,\r\n    });\r\n\r\n  const nodeXPositionComparer = (n1: Node, n2: Node) => {\r\n    const deltaX = n1.__rf.position.x - n2.__rf.position.x;\r\n    const deltaY = n1.__rf.position.y - n2.__rf.position.y;\r\n    return deltaX !== 0 ? deltaX : deltaY;\r\n  };\r\n  const nodeYPositionComparer = (n1: Node, n2: Node) => {\r\n    const deltaX = n1.__rf.position.x - n2.__rf.position.x;\r\n    const deltaY = n1.__rf.position.y - n2.__rf.position.y;\r\n    return deltaY !== 0 ? deltaY : deltaX;\r\n  };\r\n\r\n  // Input and output nodes\r\n  // Sorting them by horisontal position to make reordering inputs and outputs easy.\r\n  const inputNodes = nodes\r\n    .filter((node) => node.type === \"input\")\r\n    .sort(nodeXPositionComparer);\r\n  const outputNodes = nodes\r\n    .filter((node) => node.type === \"output\")\r\n    .sort(nodeXPositionComparer);\r\n  const taskNodes = nodes\r\n    .filter(isComponentTaskNode)\r\n    .sort(nodeYPositionComparer);\r\n\r\n  // TODO: Remove \"input_\" prefixes\r\n  const inputPositionMap = new Map<string, string>(\r\n    inputNodes.map((node) => [node.id, getNodePositionAnnotation(node)])\r\n  );\r\n  const inputOrderMap = new Map<string, number>(\r\n    inputNodes.map((node, index) => [node.id, index])\r\n  );\r\n  const inputOrderComparer = (a: InputSpec, b: InputSpec) =>\r\n    (inputOrderMap.get(a.name) ?? Infinity) -\r\n    (inputOrderMap.get(b.name) ?? Infinity);\r\n  // TODO: Remove \"output_\" prefixes\r\n  const outputPositionMap = new Map<string, string>(\r\n    outputNodes.map((node) => [node.id, getNodePositionAnnotation(node)])\r\n  );\r\n  const outputOrderMap = new Map<string, number>(\r\n    outputNodes.map((node, index) => [node.id, index])\r\n  );\r\n  const outputOrderComparer = (a: OutputSpec, b: OutputSpec) =>\r\n    (outputOrderMap.get(a.name) ?? Infinity) -\r\n    (outputOrderMap.get(b.name) ?? Infinity);\r\n  // TODO: Remove \"task_\" prefixes\r\n  const taskPositionMap = new Map<string, string>(\r\n    taskNodes.map((node) => [node.id, getNodePositionAnnotation(node)])\r\n  );\r\n  const taskOrderMap = new Map<string, number>(\r\n    taskNodes.map((node, index) => [node.id, index])\r\n  );\r\n  const taskOrderComparer = (\r\n    pairA: [string, TaskSpec],\r\n    pairB: [string, TaskSpec]\r\n  ) =>\r\n    (taskOrderMap.get(pairA[0]) ?? Infinity) -\r\n    (taskOrderMap.get(pairB[0]) ?? Infinity);\r\n\r\n  componentSpec.inputs = componentSpec.inputs\r\n    ?.map((inputSpec) => {\r\n      if (!inputPositionMap.has(inputSpec.name) || !inputOrderMap.has(inputSpec.name)) {\r\n        throw Error(`The nodes array does not have input node ${inputSpec.name}`);\r\n      }\r\n      let newAnnotations = { ...inputSpec.annotations };\r\n      if (includePositions) {\r\n        newAnnotations[NODE_LAYOUT_ANNOTATION_KEY] = inputPositionMap.get(\r\n          inputSpec.name\r\n        );\r\n      } else {\r\n        delete newAnnotations[NODE_LAYOUT_ANNOTATION_KEY];\r\n      }\r\n      let newInputSpec: InputSpec = {\r\n        ...inputSpec,\r\n        annotations: newAnnotations,\r\n      };\r\n      if (Object.keys(newAnnotations).length === 0) {\r\n        delete newInputSpec.annotations;\r\n      }\r\n      return newInputSpec;\r\n    })\r\n    .sort(inputOrderComparer);\r\n\r\n  componentSpec.outputs = componentSpec.outputs\r\n    ?.map((outputSpec) => {\r\n      if (!outputPositionMap.has(outputSpec.name) || !outputOrderMap.has(outputSpec.name)) {\r\n        throw Error(`The nodes array does not have output node ${outputSpec.name}`);\r\n      }\r\n      let newAnnotations = { ...outputSpec.annotations };\r\n      if (includePositions) {\r\n        newAnnotations[NODE_LAYOUT_ANNOTATION_KEY] = outputPositionMap.get(\r\n          outputSpec.name\r\n        );\r\n      } else {\r\n        delete newAnnotations[NODE_LAYOUT_ANNOTATION_KEY];\r\n      }\r\n      let newOutputSpec: OutputSpec = {\r\n        ...outputSpec,\r\n        annotations: newAnnotations,\r\n      };\r\n      if (\r\n        newAnnotations === undefined ||\r\n        Object.keys(newAnnotations).length === 0\r\n      ) {\r\n        delete newOutputSpec.annotations;\r\n      }\r\n      return newOutputSpec;\r\n    })\r\n    .sort(outputOrderComparer);\r\n\r\n  if (!(\"graph\" in componentSpec.implementation)) {\r\n    return componentSpec;\r\n  }\r\n\r\n  let graphSpec: GraphSpec = { ...componentSpec.implementation.graph };\r\n  const newTasks = Object.fromEntries(\r\n    Object.entries(graphSpec.tasks || {})\r\n      .map(([taskId, taskSpec]) => {\r\n        if (!taskPositionMap.has(taskId) || !taskOrderMap.has(taskId)) {\r\n          throw Error(`The nodes array does not have task node ${taskId}`);\r\n        }\r\n        let newAnnotations = { ...taskSpec.annotations };\r\n        if (includePositions) {\r\n          newAnnotations[NODE_LAYOUT_ANNOTATION_KEY] =\r\n            taskPositionMap.get(taskId);\r\n        } else {\r\n          delete newAnnotations[NODE_LAYOUT_ANNOTATION_KEY];\r\n        }\r\n        let newTaskSpec: TaskSpec = {\r\n          ...taskSpec,\r\n          annotations: newAnnotations,\r\n        };\r\n        if (\r\n          newAnnotations === undefined ||\r\n          Object.keys(newAnnotations).length === 0\r\n        ) {\r\n          delete newTaskSpec.annotations;\r\n        }\r\n        // TODO: Sort the arguments based on the ordering of the component inputs.\r\n        if (\r\n          !includeSpecs &&\r\n          newTaskSpec.componentRef.spec !== undefined &&\r\n          newTaskSpec.componentRef.url !== undefined\r\n        ) {\r\n          newTaskSpec.componentRef = { ...newTaskSpec.componentRef };\r\n          delete newTaskSpec.componentRef.spec;\r\n        }\r\n        return [taskId, newTaskSpec] as [string, TaskSpec];\r\n      })\r\n      .sort(taskOrderComparer)\r\n  );\r\n  if (newTasks !== undefined) {\r\n    graphSpec.tasks = newTasks;\r\n  }\r\n  componentSpec = {\r\n    ...componentSpec,\r\n    implementation: { ...componentSpec.implementation, graph: graphSpec },\r\n  };\r\n\r\n  // Reordering the attributes and removing the undefined ones\r\n  const rebuildComponentSpec = ({\r\n    name,\r\n    description,\r\n    metadata,\r\n    inputs,\r\n    outputs,\r\n    implementation,\r\n    ...rest\r\n  }: ComponentSpec): ComponentSpec => ({\r\n    ...(name && { name: name }),\r\n    ...(description && { description: description }),\r\n    ...(metadata && { metadata: metadata }),\r\n    ...(inputs && { inputs: inputs }),\r\n    ...(outputs && { outputs: outputs }),\r\n    implementation: implementation,\r\n    ...rest,\r\n  });\r\n  componentSpec = rebuildComponentSpec(componentSpec);\r\n\r\n  return componentSpec;\r\n};\r\n\r\nexport interface GraphComponentSpecFlowProps\r\n  extends Omit<ReactFlowProps, \"elements\"> {\r\n  componentSpec: ComponentSpec,\r\n  setComponentSpec: (componentSpec: ComponentSpec) => void,\r\n}\r\n\r\nconst nodeTypes = {\r\n  task: ComponentTaskNode,\r\n};\r\n\r\nconst GraphComponentSpecFlow = ({\r\n  children,\r\n  componentSpec = { implementation: { graph: { tasks: {} } } },\r\n  setComponentSpec,\r\n  ...rest\r\n}: GraphComponentSpecFlowProps) => {\r\n  const [reactFlowInstance, setReactFlowInstance] = useState<OnLoadParams>();\r\n\r\n  if (! ('graph' in componentSpec.implementation)) {\r\n    // Only graph components are supported\r\n    return <></>;\r\n  }\r\n  let graphSpec = componentSpec.implementation.graph;\r\n\r\n  const nodes = Object.entries(graphSpec.tasks).map<Node<ComponentTaskNodeProps>>(\r\n    ([taskId, taskSpec]) => {\r\n      let position: XYPosition = { x: 0, y: 0 };\r\n      if (taskSpec.annotations !== undefined) {\r\n        try {\r\n          const layoutAnnotation = taskSpec.annotations[\r\n            \"editor.position\"\r\n          ] as string;\r\n          const decodedPosition = JSON.parse(layoutAnnotation);\r\n          position = { x: decodedPosition[\"x\"], y: decodedPosition[\"y\"] };\r\n        } catch (err) {}\r\n      }\r\n\r\n      return {\r\n        id: taskId,\r\n        data: {\r\n          taskSpec: taskSpec,\r\n          taskId: taskId,\r\n          setArguments: (args) => setTaskArguments(taskId, args),\r\n        },\r\n        position: position,\r\n        type: \"task\",\r\n      };\r\n    }\r\n  );\r\n\r\n  const inputNodes = (componentSpec.inputs ?? []).map<Node>(\r\n    (inputSpec) => {\r\n      let position: XYPosition = { x: 0, y: 0 };\r\n      if (inputSpec.annotations !== undefined) {\r\n        try {\r\n          const layoutAnnotation = inputSpec.annotations[\r\n            \"editor.position\"\r\n          ] as string;\r\n          const decodedPosition = JSON.parse(layoutAnnotation);\r\n          position = { x: decodedPosition[\"x\"], y: decodedPosition[\"y\"] };\r\n        } catch (err) {}\r\n      }\r\n      return {\r\n        id: inputSpec.name,\r\n        data: { label: inputSpec.name },\r\n        position: position,\r\n        type: \"input\",\r\n      };\r\n    }\r\n  );\r\n\r\n  const outputNodes = (componentSpec.outputs ?? []).map<Node>(\r\n    (outputSpec) => {\r\n      let position: XYPosition = { x: 0, y: 0 };\r\n      if (outputSpec.annotations !== undefined) {\r\n        try {\r\n          const layoutAnnotation = outputSpec.annotations[\r\n            \"editor.position\"\r\n          ] as string;\r\n          const decodedPosition = JSON.parse(layoutAnnotation);\r\n          position = { x: decodedPosition[\"x\"], y: decodedPosition[\"y\"] };\r\n        } catch (err) {}\r\n      }\r\n      return {\r\n        id: outputSpec.name,\r\n        data: { label: outputSpec.name },\r\n        position: position,\r\n        type: \"output\",\r\n      };\r\n    }\r\n  );\r\n\r\n  const edges: Edge[] = Object.entries(graphSpec.tasks).flatMap(\r\n    ([taskId, taskSpec]) => {\r\n      return Object.entries(taskSpec.arguments ?? {}).flatMap(\r\n        ([inputName, argument]) => {\r\n          if (typeof argument === \"string\") {\r\n            return [];\r\n          }\r\n          if (\"taskOutput\" in argument) {\r\n            const taskOutput = argument.taskOutput;\r\n            const edge: Edge = {\r\n              id: `${taskOutput.taskId}_${taskOutput.outputName}-${taskId}_${inputName}`,\r\n              source: taskOutput.taskId,\r\n              sourceHandle: `output_${taskOutput.outputName}`,\r\n              target: taskId,\r\n              targetHandle: `input_${inputName}`,\r\n              arrowHeadType: ArrowHeadType.ArrowClosed,\r\n            };\r\n            return [edge];\r\n          } else if (\"graphInput\" in argument) {\r\n            const graphInput = argument.graphInput;\r\n            const edge: Edge = {\r\n              id: `Input_${graphInput.inputName}-${taskId}_${inputName}`,\r\n              source: graphInput.inputName,\r\n              //sourceHandle: undefined,\r\n              //sourceHandle: \"Input\",\r\n              sourceHandle: null,\r\n              target: taskId,\r\n              targetHandle: `input_${inputName}`,\r\n              arrowHeadType: ArrowHeadType.ArrowClosed,\r\n            };\r\n            return [edge];\r\n          } else {\r\n            console.error(\"Impossible task input argument kind: \", argument);\r\n            return [];\r\n          }\r\n        }\r\n      );\r\n    }\r\n  );\r\n\r\n  const outputEdges: Edge[] = Object.entries(graphSpec.outputValues ?? {}).map(\r\n    ([outputName, argument]) => {\r\n      const taskOutput = argument.taskOutput;\r\n      const edge: Edge = {\r\n        id: `${taskOutput.taskId}_${taskOutput.outputName}-Output_${outputName}`,\r\n        source: taskOutput.taskId,\r\n        sourceHandle: `output_${taskOutput.outputName}`,\r\n        target: outputName,\r\n        //targetHandle: undefined,\r\n        //targetHandle: \"Output\",\r\n        targetHandle: null,\r\n        arrowHeadType: ArrowHeadType.ArrowClosed,\r\n      };\r\n      return edge;\r\n    }\r\n  );\r\n\r\n  const elements = (nodes as Elements).concat(inputNodes).concat(outputNodes).concat(edges).concat(outputEdges);\r\n  \r\n  const replaceComponentSpec = (newComponentSpec: ComponentSpec) => {\r\n    componentSpec = newComponentSpec;\r\n    setComponentSpec(newComponentSpec);\r\n  };\r\n\r\n  const replaceGraphSpec = (newGraphSpec: GraphSpec) => {\r\n    graphSpec = newGraphSpec;\r\n    replaceComponentSpec({ ...componentSpec, implementation: { graph: graphSpec } });\r\n  };\r\n\r\n  const setTaskArguments = (\r\n    taskId: string,\r\n    taskArguments?: Record<string, ArgumentType>,\r\n  ) => {\r\n    let newGraphSpec: GraphSpec = {\r\n      ...graphSpec,\r\n      tasks: { ...graphSpec.tasks },\r\n    };\r\n    newGraphSpec.tasks[taskId] = {\r\n      ...graphSpec.tasks[taskId],\r\n      arguments: taskArguments,\r\n    };\r\n    replaceGraphSpec(newGraphSpec);\r\n  };\r\n\r\n  const setTaskArgument = (\r\n    taskId: string,\r\n    inputName: string,\r\n    argument?: ArgumentType\r\n  ) => {\r\n    const oldTaskSpec = graphSpec.tasks[taskId];\r\n    const oldTaskSpecArguments = oldTaskSpec.arguments;\r\n    let newTaskSpecArguments: Record<string, ArgumentType> = {\r\n      ...oldTaskSpecArguments,\r\n    };\r\n    if (argument === undefined) {\r\n      delete newTaskSpecArguments[inputName];\r\n    } else {\r\n      newTaskSpecArguments[inputName] = argument;\r\n    }\r\n    setTaskArguments(taskId, newTaskSpecArguments);\r\n  };\r\n\r\n  const removeTaskArgument = (taskId: string, inputName: string) =>\r\n    setTaskArgument(taskId, inputName, undefined);\r\n\r\n  const setGraphOutputValue = (\r\n    outputName: string,\r\n    outputValue?: TaskOutputArgument\r\n  ) => {\r\n    let newGraphOutputValues = { ...graphSpec.outputValues };\r\n    if (outputValue === undefined) {\r\n      delete newGraphOutputValues[outputName];\r\n    } else {\r\n      newGraphOutputValues[outputName] = outputValue;\r\n    }\r\n    graphSpec = { ...graphSpec, outputValues: newGraphOutputValues };\r\n    replaceGraphSpec(graphSpec);\r\n  };\r\n\r\n  const removeGraphOutputValue = (outputName: string) =>\r\n    setGraphOutputValue(outputName);\r\n\r\n  const addConnection = (connection: Connection | Edge) => {\r\n    if (connection.source === null || connection.target === null) {\r\n      console.error(\r\n        \"addConnection called with missing source or target: \",\r\n        connection\r\n      );\r\n      return;\r\n    }\r\n\r\n    const targetTaskInputName = connection.targetHandle?.replace(/^input_/, \"\");\r\n    const sourceTaskOutputName = connection.sourceHandle?.replace(/^output_/, \"\");\r\n\r\n    if (sourceTaskOutputName !== undefined) {\r\n      // Source is task output\r\n      const taskOutputArgument: TaskOutputArgument = {\r\n        taskOutput: {\r\n          taskId: connection.source,\r\n          outputName: sourceTaskOutputName,\r\n        },\r\n      };\r\n\r\n      if (targetTaskInputName !== undefined) {\r\n        // Target is task input\r\n        setTaskArgument(\r\n          connection.target,\r\n          targetTaskInputName,\r\n          taskOutputArgument\r\n        );\r\n      } else {\r\n        // Target is graph output\r\n        setGraphOutputValue(connection.target, taskOutputArgument);\r\n        // TODO: Perhaps propagate type information\r\n      }\r\n    } else {\r\n      // Source is graph input\r\n      const graphInputName = connection.source;\r\n      const graphInputArgument: GraphInputArgument = {\r\n        graphInput: {\r\n          inputName: graphInputName,\r\n        },\r\n      };\r\n      if (targetTaskInputName !== undefined) {\r\n        // Target is task input\r\n        setTaskArgument(\r\n          connection.target,\r\n          targetTaskInputName,\r\n          graphInputArgument\r\n        );\r\n        // TODO: Perhaps propagate type information\r\n      } else {\r\n        // Target is graph output\r\n        console.error(\r\n          \"addConnection: Cannot directly connect graph input to graph output: \",\r\n          connection\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const onConnect = (params: Connection | Edge) => {\r\n    addConnection(params);\r\n  };\r\n\r\n  const removeEdge = (edge: Edge) => {\r\n    const inputName = edge.targetHandle?.replace(/^input_/, \"\");\r\n\r\n    if (inputName !== undefined) {\r\n      removeTaskArgument(edge.target, inputName);\r\n    } else {\r\n      removeGraphOutputValue(edge.target);\r\n    }\r\n  };\r\n\r\n  const removeComponentInput = (inputName: string) => {\r\n    // Removing the outcoming edges\r\n    for (const [taskId, taskSpec] of Object.entries(graphSpec.tasks)) {\r\n      for (const [inputName, argument] of Object.entries(\r\n        taskSpec.arguments ?? {}\r\n      )) {\r\n        if (typeof argument !== \"string\" && \"graphInput\" in argument) {\r\n          if (argument.graphInput.inputName === inputName) {\r\n            removeTaskArgument(taskId, inputName);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // Not checking the sources of graph outputs, since they cannot be directly connected to the graph inputs\r\n\r\n    // Removing the input itself\r\n    const newInputs = (componentSpec.inputs ?? []).filter(\r\n      (inputSpec) => inputSpec.name !== inputName\r\n    );\r\n    componentSpec = { ...componentSpec, inputs: newInputs };\r\n    replaceComponentSpec(componentSpec);\r\n  };\r\n\r\n  const removeComponentOutput = (outputName: string) => {\r\n    removeGraphOutputValue(outputName);\r\n    // Removing the output itself\r\n    const newOutputs = (componentSpec.outputs ?? []).filter(\r\n      (outputSpec) => outputSpec.name !== outputName\r\n    );\r\n    componentSpec = { ...componentSpec, outputs: newOutputs };\r\n    replaceComponentSpec(componentSpec);\r\n  };\r\n\r\n  const removeTask = (taskId: string) => {\r\n    // Removing the outcoming edges\r\n    for (const [taskId, taskSpec] of Object.entries(graphSpec.tasks)) {\r\n      for (const [inputName, argument] of Object.entries(\r\n        taskSpec.arguments ?? {}\r\n      )) {\r\n        if (typeof argument !== \"string\" && \"taskOutput\" in argument) {\r\n          if (argument.taskOutput.taskId === taskId) {\r\n            removeTaskArgument(taskId, inputName);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Removing outcoming edges that go to graph outputs.\r\n    // ? Should we delete the outputs themselves\r\n    const newGraphOutputValues = Object.fromEntries(\r\n      Object.entries(graphSpec.outputValues ?? {}).filter(\r\n        ([_, argument]) => argument.taskOutput.taskId !== taskId\r\n      )\r\n    );\r\n    graphSpec = { ...graphSpec, outputValues: newGraphOutputValues };\r\n\r\n    // Removing the task\r\n    let newGraphSpec: GraphSpec = {\r\n      ...graphSpec,\r\n      tasks: { ...graphSpec.tasks },\r\n    };\r\n    delete newGraphSpec.tasks[taskId];\r\n    replaceGraphSpec(newGraphSpec);\r\n  };\r\n\r\n  const removeNode = (node: Node) => {\r\n    // TODO: Use global constants for node types\r\n    if (node.type === \"input\") {\r\n      const inputName = node.id;\r\n      removeComponentInput(inputName);\r\n    } else if (node.type === \"output\") {\r\n      const outputName = node.id;\r\n      removeComponentOutput(outputName);\r\n    } else if (node.type === \"task\") {\r\n      const taskId = node.id;\r\n      removeTask(taskId);\r\n    } else {\r\n      console.log(\"removeNode: Unexpected note type: \", node);\r\n    }\r\n  };\r\n\r\n  const onElementsRemove = (elementsToRemove: Elements) => {\r\n    for (const element of elementsToRemove) {\r\n      if (isEdge(element)) {\r\n        removeEdge(element);\r\n      }\r\n    }\r\n    for (const element of elementsToRemove) {\r\n      if (isNode(element)) {\r\n        removeNode(element);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onEdgeUpdate = (oldEdge: Edge, newConnection: Connection) => {\r\n    removeEdge(oldEdge);\r\n    addConnection(newConnection);\r\n  };\r\n\r\n  const onLoad = (_reactFlowInstance: OnLoadParams) =>\r\n    setReactFlowInstance(_reactFlowInstance);\r\n\r\n  const onDragOver = (event: DragEvent) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = \"move\";\r\n  };\r\n\r\n  const makeNameUniqueByAddingIndex = (name: string, existingNames: Set<string>): ElementId => {\r\n    let finalName = name;\r\n    let index = 1;\r\n    while (existingNames.has(finalName)) {\r\n      index++;\r\n      finalName = name + \" \" + index.toString();\r\n    }\r\n    return finalName;\r\n  };\r\n\r\n  const getUniqueInputName = (name: string = \"Input\") => {\r\n    return makeNameUniqueByAddingIndex(\r\n      name,\r\n      new Set(componentSpec.inputs?.map((inputSpec) => inputSpec.name))\r\n    );\r\n  };\r\n\r\n  const getUniqueOutputName = (name: string = \"Output\") => {\r\n    return makeNameUniqueByAddingIndex(\r\n      name,\r\n      new Set(componentSpec.outputs?.map((outputSpec) => outputSpec.name))\r\n    );\r\n  };\r\n\r\n  const getUniqueTaskName = (name: string = \"Task\") => {\r\n    return makeNameUniqueByAddingIndex(\r\n      name,\r\n      new Set(Object.keys(graphSpec.tasks))\r\n    );\r\n  };\r\n\r\n  const onDrop = (event: DragEvent) => {\r\n    event.preventDefault();\r\n\r\n    if (reactFlowInstance) {\r\n      const droppedData = event.dataTransfer.getData(\"application/reactflow\");\r\n      if (droppedData === \"\") {\r\n        return;\r\n      }\r\n      const droppedDataObject = JSON.parse(droppedData);\r\n      const nodeType = Object.keys(droppedDataObject)[0];\r\n      const nodeData = droppedDataObject[nodeType];\r\n      \r\n      // Correcting the position using the drag point location information\r\n      let dragOffsetX = 0;\r\n      let dragOffsetY = 0;\r\n      const dragStartOffsetData = event.dataTransfer.getData(\"DragStart.offset\");\r\n      if (dragStartOffsetData !== \"\") {\r\n        const dragStartOffset = JSON.parse(dragStartOffsetData);\r\n        // Hack to work around Chrome's draggable anchor bug. TODO: Remove once Chrome is fixed\r\n        dragOffsetX = dragStartOffset.offsetX * 0.68 ?? 0;\r\n        dragOffsetY = dragStartOffset.offsetY * 0.64 ?? 0;\r\n      }\r\n\r\n      // Node position. Offsets should be included in projection, so that they snap to the grid.\r\n      // Otherwise the dropped nodes will be out of phase with the rest of the nodes even when snapping.\r\n      let position = reactFlowInstance.project({\r\n        x: event.clientX - dragOffsetX,\r\n        y: event.clientY - dragOffsetY,\r\n      });\r\n\r\n      const nodePosition = { x: position.x, y: position.y };\r\n      const positionAnnotations = {\r\n        \"editor.position\": JSON.stringify(nodePosition),\r\n      }\r\n      if (nodeType === \"task\") {\r\n        const taskSpec = nodeData as TaskSpec;\r\n        const mergedAnnotations = {\r\n          ...taskSpec.annotations,\r\n          ...positionAnnotations,\r\n        };\r\n        taskSpec.annotations = mergedAnnotations;\r\n        const taskSpecWithAnnotation: TaskSpec = {\r\n          ...taskSpec,\r\n          annotations: mergedAnnotations,\r\n        };\r\n        const taskId = getUniqueTaskName(taskSpec.componentRef.spec?.name ?? \"Task\");\r\n        graphSpec = { ...graphSpec, tasks: { ...graphSpec.tasks } };\r\n        graphSpec.tasks[taskId] = taskSpecWithAnnotation;\r\n        replaceGraphSpec(graphSpec);\r\n      } else if (nodeType === \"input\") {\r\n        const inputId = getUniqueInputName();\r\n        const inputSpec: InputSpec = {\r\n          name: inputId,\r\n          annotations: positionAnnotations,\r\n        };\r\n        const inputs = (componentSpec.inputs ?? []).concat([inputSpec]);\r\n        componentSpec = { ...componentSpec, inputs: inputs };\r\n        replaceComponentSpec(componentSpec);\r\n      } else if (nodeType === \"output\") {\r\n        const outputId = getUniqueOutputName();\r\n        const outputSpec: OutputSpec = {\r\n          name: outputId,\r\n          annotations: positionAnnotations,\r\n        };\r\n        const outputs = (componentSpec.outputs ?? []).concat([outputSpec]);\r\n        componentSpec = { ...componentSpec, outputs: outputs };\r\n        replaceComponentSpec(componentSpec);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ReactFlow\r\n      {...rest}\r\n      elements={elements}\r\n      nodeTypes={nodeTypes}\r\n      onConnect={onConnect}\r\n      onDragOver={onDragOver}\r\n      onDrop={onDrop}\r\n      onEdgeUpdate={onEdgeUpdate}\r\n      onElementsRemove={onElementsRemove}\r\n      onLoad={onLoad}\r\n    >\r\n      {children}\r\n    </ReactFlow>\r\n  );\r\n};\r\n\r\nexport default GraphComponentSpecFlow;\r\n","import yaml from \"js-yaml\";\r\nimport localForage from \"localforage\";\r\nimport { ComponentSpec, ComponentReference } from \"./componentSpec\";\r\n\r\n// const COMPONENT_FILE_NAME_SUFFIX = \"component.yaml\";\r\n// const COMPONENT_FILE_MAX_SIZE = 100000;\r\nconst SEARCH_CACHE_NAME = \"https://api.github.com/search\";\r\nconst BLOB_CACHE_NAME = \"raw.githubusercontent.com/.../component.yaml\";\r\n\r\n// IndexedDB: DB and table names\r\nconst DB_NAME = \"components\";\r\nconst HASH_TO_CONTENT_DB_TABLE_NAME = \"hash_to_data\";\r\nconst HASH_TO_COMPONENT_NAME_DB_TABLE_NAME = \"hash_to_component_name\";\r\nconst URL_TO_HASH_DB_TABLE_NAME = \"url_to_hash\";\r\nconst HASH_TO_URL_DB_TABLE_NAME = \"hash_to_url\";\r\nconst URL_PROCESSING_VERSION_TABLE_NAME = \"url_version\";\r\nconst CURRENT_URL_PROCESSING_VERSION = 1;\r\nconst BAD_HASHES_TABLE_NAME = \"bad_hashes\";\r\n\r\n\r\nexport const httpGetWithCache = async (\r\n  urlOrRequest: string | RequestInfo,\r\n  cacheName: string,\r\n  updateIfInCache: boolean = false\r\n): Promise<Response> => {\r\n  const cache = await caches.open(cacheName);\r\n  const response = await cache.match(urlOrRequest);\r\n  if (response !== undefined) {\r\n    if (updateIfInCache) {\r\n      cache.add(urlOrRequest);\r\n    }\r\n    return response;\r\n  }\r\n  await cache.add(urlOrRequest);\r\n  const response2 = await cache.match(urlOrRequest);\r\n  if (response2 === undefined) {\r\n    return Promise.reject(\"Added object to cache, but counld not find it\");\r\n  }\r\n  return response2;\r\n};\r\n\r\n\r\nexport const searchGitHubCodeWithCache = async (\r\n  query: string,\r\n  page = 1,\r\n  sort = \"indexed\",\r\n  order = \"desc\",\r\n): Promise<any> => {\r\n  // TODO: Paging\r\n  const encodedQuery = encodeURIComponent(query);\r\n  const encodedSort = encodeURIComponent(sort);\r\n  const encodedOrder = encodeURIComponent(order);\r\n  const searchUrl = `https://api.github.com/search/code?q=${encodedQuery}&sort=${encodedSort}&order=${encodedOrder}&per_page=100&page=${page}`;\r\n  const response = await httpGetWithCache(searchUrl, SEARCH_CACHE_NAME, true);\r\n  return response.json();\r\n};\r\n\r\n\r\nconst githubHtmlUrlToDownloadUrl = (htmlUrl: string): string => {\r\n  // https://github.com/               kubeflow/pipelines/blob/24bc9162a56c2fe3c50947d655ef280f71ba058f/components/gcp/dataflow/launch_flex_template/component.yaml\r\n  // https://raw.githubusercontent.com/kubeflow/pipelines     /24bc9162a56c2fe3c50947d655ef280f71ba058f/components/gcp/dataflow/launch_flex_template/component.yaml\r\n  return htmlUrl\r\n    .replace(\"https://github.com/\", \"https://raw.githubusercontent.com/\")\r\n    .replace(\"/blob/\", \"/\");\r\n};\r\n\r\n\r\ntype UrlAndHash = {\r\n  url: string;\r\n  hash: string;\r\n};\r\n\r\n\r\nexport async function * getComponentUrlsAndHashes(\r\n  users = [\"kubeflow\", \"Ark-kun\"]\r\n) {\r\n  let urlsAndHashes: UrlAndHash[] = [];\r\n  const query =\r\n    \"filename:component.yaml \" + users.map((user) => \"user:\" + user).join(\" \");\r\n  for (let page = 1; page < 100; page++) {\r\n    const searchResults = await searchGitHubCodeWithCache(query, page);\r\n    // \"total_count\": 512,\r\n    // \"incomplete_results\": false,\r\n    // \"items\": [\r\n    const items: any[] = searchResults.items;\r\n    if (items.length === 0) {\r\n      break;\r\n    }\r\n    for (let item of items) {\r\n      yield { url: githubHtmlUrlToDownloadUrl(item.html_url), hash: item.sha as string };\r\n    }\r\n    await new Promise( resolve => setTimeout(resolve, (60 * 1000 / 10) * (1 + 0.1)));\r\n  }\r\n  return urlsAndHashes;\r\n};\r\n\r\n\r\nexport const cacheComponentCandidateBlobs = async (\r\n  users = [\"kubeflow\", \"Ark-kun\"]\r\n): Promise<any[]> => {\r\n  let urlsAndHashes: UrlAndHash[] = [];\r\n  let urls = [];\r\n  for await (const urlAndHash of getComponentUrlsAndHashes(users)) {\r\n    urlsAndHashes.push(urlAndHash);\r\n    urls.push(urlAndHash.url);\r\n  }\r\n  const cache = await caches.open(BLOB_CACHE_NAME);\r\n  await cache.addAll(urls);\r\n  return urlsAndHashes;\r\n};\r\n\r\nexport const downloadComponentDataWithCache = async (url: string) => {\r\n  const response = await httpGetWithCache(url, BLOB_CACHE_NAME)\r\n  const data = await response.blob();\r\n  const componentText = await data.text();\r\n  const componentSpec = yaml.load(componentText) as ComponentSpec;\r\n  return componentSpec;\r\n}\r\n\r\nexport const cacheAllComponents = async (users = [\"kubeflow\", \"Ark-kun\"]) => {\r\n  console.debug(\"Starting cacheAllComponents\");\r\n  const urlsAndHashesIterator = getComponentUrlsAndHashes(users);\r\n\r\n  // const cache = await caches.open(BLOB_CACHE_NAME);\r\n  const urlToHashDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_TO_HASH_DB_TABLE_NAME,\r\n  });\r\n  const hashToUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_URL_DB_TABLE_NAME,\r\n  });\r\n  const hashToContentDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_CONTENT_DB_TABLE_NAME,\r\n  });\r\n  const hashToComponentNameDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_COMPONENT_NAME_DB_TABLE_NAME,\r\n  });\r\n  const urlProcessingVersionDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_PROCESSING_VERSION_TABLE_NAME,\r\n  });\r\n  const badHashesDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: BAD_HASHES_TABLE_NAME,\r\n  });\r\n  for await (const item of urlsAndHashesIterator) {\r\n    const hash = item.hash.toLowerCase();\r\n    const htmlUrl = item.url;\r\n    const badHashReason = await badHashesDb.getItem<string>(hash);\r\n    if (badHashReason !== null) {\r\n      console.debug(`Skipping url ${htmlUrl} with hash ${hash} due to error: \"${badHashReason}\"`);\r\n      continue;\r\n    }\r\n    try {\r\n      const downloadUrl: string = githubHtmlUrlToDownloadUrl(htmlUrl);\r\n      if (!downloadUrl.endsWith(\"component.yaml\")) {\r\n        console.debug(`Skipping url ${downloadUrl} since it does not end with \"component.yaml\"`);\r\n        continue;\r\n      }\r\n      // Sanity check\r\n      const cachedHash = await urlToHashDb.getItem<string>(downloadUrl);\r\n      if (cachedHash !== null && cachedHash !== hash) {\r\n        console.error(\r\n          `Component cache is broken. Stored hash for ${downloadUrl}: ${cachedHash} != ${hash}.`\r\n        );\r\n      }\r\n      // Check whether the processing is complete\r\n      const urlVersion = await urlProcessingVersionDb.getItem<string>(\r\n        downloadUrl\r\n      );\r\n\r\n      if (\r\n        cachedHash !== null && // Not sure we should check this, but it improves the sanity\r\n        urlVersion !== null &&\r\n        Number.parseInt(urlVersion) >= CURRENT_URL_PROCESSING_VERSION\r\n      ) {\r\n        continue;\r\n      }\r\n\r\n      console.debug(`Processing new component candidate: ${downloadUrl}.`);\r\n      const response = await httpGetWithCache(downloadUrl, BLOB_CACHE_NAME);\r\n      let componentSpec: ComponentSpec;\r\n      let componentText: string;\r\n      try {\r\n        const data = await response.blob();\r\n        componentText = await data.text();\r\n        componentSpec = yaml.load(componentText) as ComponentSpec;\r\n      } catch(err) {\r\n        badHashesDb.setItem(hash, err.name + \": \" + err.message);\r\n        continue;\r\n      }\r\n      if (componentSpec.implementation === undefined) {\r\n        badHashesDb.setItem(hash, 'Component lacks the \"impelmentation\" section.');\r\n        continue;\r\n      }\r\n\r\n      // Blobs are cumbersome (need await to get text) - store text instead\r\n      // await hashToContentDb.setItem(hash, data);\r\n      await hashToContentDb.setItem(hash, componentText);\r\n\r\n      // Only adding hash -> URL once\r\n      const urlForHash = await hashToUrlDb.getItem<string>(hash);\r\n      if (urlForHash === null) {\r\n        await hashToUrlDb.setItem(hash, downloadUrl);\r\n      }\r\n\r\n      // Only storing names when they exist\r\n      if (componentSpec.name) {\r\n        await hashToComponentNameDb.setItem(hash, componentSpec.name);\r\n      }\r\n\r\n      await urlToHashDb.setItem(downloadUrl, hash);\r\n\r\n      // Marking the processing as completed\r\n      await urlProcessingVersionDb.setItem(\r\n        downloadUrl,\r\n        CURRENT_URL_PROCESSING_VERSION\r\n      );\r\n    } catch (err) {\r\n      console.error(\r\n        `Error when processing component candidate ${htmlUrl} Error: ${err}.`\r\n      );\r\n    }\r\n  }\r\n  console.debug(\"Finished cacheAllComponents\");\r\n};\r\n\r\n\r\nexport const getAllComponentsAsRefs = async (users = [\"kubeflow\", \"Ark-kun\"]) => {\r\n  // Perhaps use urlProcessingVersionDb as source of truth. Hmm. It is URL-based\r\n  const hashToUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_URL_DB_TABLE_NAME,\r\n  });\r\n  const hashToContentDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_CONTENT_DB_TABLE_NAME,\r\n  });\r\n  let hashToComponentRef = new Map<string, ComponentReference>();\r\n\r\n  const cachePromise = cacheAllComponents(users);\r\n  if ((await hashToContentDb.length()) === 0) {\r\n    await cachePromise;\r\n  }\r\n\r\n  // !!! Iterating using hashToContentDb.iterate<string, void> causes all values to be `[object Blob]`\r\n  //await hashToContentDb.iterate<Blob, void>(\r\n  await hashToContentDb.iterate<string, void>(\r\n    // !!! async processor causes only 1 item to be processed since it returns Promise instead of undefined.\r\n    //async (componentData, hash, iterationNumber) => {\r\n    (componentText, hash, iterationNumber) => {\r\n      //const componentText = await componentData.text();\r\n      try {\r\n        const componentSpec = yaml.load(componentText) as ComponentSpec;\r\n        hashToComponentRef.set(hash, {\r\n          spec: componentSpec,\r\n        });\r\n      } catch (err) {\r\n        console.error(\r\n          `Error when parsing cached component. Hash: ${hash}. Error: ${err}. Component text: ${componentText}`\r\n        );\r\n      }\r\n    }\r\n  );\r\n  await hashToUrlDb.iterate<string, void>((url, hash, iterationNumber) => {\r\n    let componentRef = hashToComponentRef.get(hash);\r\n    if (componentRef === undefined) {\r\n      console.error(\r\n        `Component db corrupted: Component with url ${url} and hash ${hash} has no content in the DB.`\r\n      );\r\n    } else {\r\n      componentRef.url = url;\r\n    }\r\n  });\r\n  let componentRefs: ComponentReference[] = [];\r\n  // TODO: Improve the iteration onve TypeScript propertly supports it\r\n  hashToComponentRef.forEach((componentRef, hash) => {\r\n    if (componentRef.url === undefined) {\r\n      console.error(\r\n        `Component db corrupted: Component with hash ${hash} has content, but no URL in the DB.`\r\n      );\r\n    } else {\r\n      componentRefs.push(componentRef);\r\n    }\r\n  });\r\n  return componentRefs;\r\n};\r\n\r\n\r\nexport const searchComponentsByName = async (name: string, users = [\"kubeflow\", \"Ark-kun\"]) => {\r\n  const componentRefs = await getAllComponentsAsRefs(users);\r\n  return componentRefs.filter((ref) => ref.spec?.name?.toLowerCase().includes(name.toLowerCase()) ?? false);\r\n};\r\n","// Manually converted from https://github.com/kubeflow/pipelines/blob/master/api/v2alpha1/pipeline_spec.proto\r\n\r\n// The spec of a pipeline job.\r\nexport interface PipelineJob {\r\n  // Name of the job.\r\n  name?: string;\r\n\r\n  // User friendly display name\r\n  displayName?: string;\r\n  // Definition of the pipeline that is being executed.\r\n  pipelineSpec: PipelineSpec;\r\n\r\n  // The labels with user-defined metadata to organize PipelineJob.\r\n  labels?: { [k: string]: string };\r\n\r\n  // Runtime config of the pipeline.\r\n  runtimeConfig: RuntimeConfig;\r\n}\r\n\r\n// The runtime config of a PipelineJob.\r\nexport interface RuntimeConfig {\r\n  // The runtime parameters of the PipelineJob. The parameters will be\r\n  // passed into [PipelineJob.pipeline_spec][] to replace the placeholders\r\n  // at runtime.\r\n  parameters?: { [k: string]: MlmdValue };\r\n\r\n  // A path in a Cloud Storage bucket which will be treated as the root\r\n  // output directory of the pipeline. It is used by the system to\r\n  // generate the paths of output artifacts.\r\n  // This is a GCP-specific optimization.\r\n  gcsOutputDirectory: string;\r\n}\r\n\r\n// The spec of a pipeline.\r\nexport interface PipelineSpec {\r\n  // The metadata of the pipeline.\r\n  pipelineInfo?: PipelineInfo;\r\n\r\n  // The deployment config of the pipeline.\r\n  // The deployment config can be extended to provide platform specific configs.\r\n  deploymentSpec: PipelineDeploymentConfig;\r\n\r\n  // The version of the sdk, which compiles the spec.\r\n  sdkVersion?: string;\r\n\r\n  // The version of the schema.\r\n  schemaVersion?: string;\r\n\r\n  // The map of name to definition of all components used in this pipeline.\r\n  components: { [k: string]: ComponentSpec };\r\n\r\n  // The definition of the main pipeline.  Execution of the pipeline is\r\n  // completed upon the completion of this component.\r\n  root: ComponentSpec;\r\n}\r\n\r\n// Definition of a component.\r\nexport interface ComponentSpec {\r\n  // Definition of the input parameters and artifacts of the component.\r\n  inputDefinitions?: ComponentInputsSpec;\r\n\r\n  // Definition of the output parameters and artifacts of the component.\r\n  outputDefinitions?: ComponentOutputsSpec;\r\n\r\n  // Either a DAG or a single execution.\r\n  //oneof implementation {\r\n  dag?: DagSpec;\r\n  executorLabel?: string;\r\n  //}\r\n}\r\n\r\n// A DAG contains multiple tasks.\r\nexport interface DagSpec {\r\n  // The tasks inside the dag.\r\n  tasks: { [k: string]: PipelineTaskSpec };\r\n\r\n  // Defines how the outputs of the dag are linked to the sub tasks.\r\n  outputs?: DagOutputsSpec;\r\n}\r\n\r\n// Definition of the output artifacts and parameters of the DAG component.\r\nexport interface DagOutputsSpec {\r\n  // Name to the output artifact channel of the DAG.\r\n  artifacts?: { [k: string]: DagOutputArtifactSpec };\r\n\r\n  // The name to the output parameter.\r\n  parameters?: { [k: string]: DagOutputParameterSpec };\r\n}\r\n\r\n// Selects a defined output artifact from a sub task of the DAG.\r\nexport interface ArtifactSelectorSpec {\r\n  // The name of the sub task which produces the output that matches with\r\n  // the `output_artifact_key`.\r\n  producerSubtask: string;\r\n\r\n  // The key of [ComponentOutputsSpec.artifacts][] map of the producer task.\r\n  outputArtifactKey: string;\r\n}\r\n\r\n// Selects a list of output artifacts that will be aggregated to the single\r\n// output artifact channel of the DAG.\r\nexport interface DagOutputArtifactSpec {\r\n  // The selected artifacts will be aggregated as output as a single\r\n  // output channel of the DAG.\r\n  artifactSelectors: ArtifactSelectorSpec[];\r\n}\r\n\r\n// Selects a defined output parameter from a sub task of the DAG.\r\nexport interface ParameterSelectorSpec {\r\n  // The name of the sub task which produces the output that matches with\r\n  // the `output_parameter_key`.\r\n  producerSubtask: string;\r\n\r\n  // The key of [ComponentOutputsSpec.parameters][] map of the producer task.\r\n  outputParameterKey: string;\r\n}\r\n\r\n// Aggregate output parameters from sub tasks into a list object.\r\nexport interface ParameterSelectorsSpec {\r\n  parameterSelectors: ParameterSelectorSpec[];\r\n}\r\n\r\n// Aggregates output parameters from sub tasks into a map object.\r\nexport interface MapParameterSelectorsSpec {\r\n  mappedParameters: { [k: string]: ParameterSelectorSpec };\r\n}\r\n\r\n// We support four ways to fan-in output parameters from sub tasks to the DAG\r\n// parent task.\r\n// 1. Directly expose a single output parameter from a sub task,\r\n// 2. (Conditional flow) Expose a list of output from multiple tasks\r\n// (some might be skipped) but allows only one of the output being generated.\r\n// 3. Expose a list of outputs from multiple tasks (e.g. iterator flow).\r\n// 4. Expose the aggregation of output parameters as a name-value map.\r\nexport type DagOutputParameterSpec =\r\n  // Returns the sub-task parameter as a DAG parameter.  The selected\r\n  // parameter must have the same type as the DAG parameter type.\r\n  | { valueFromParameter: ParameterSelectorSpec }\r\n  // Returns one of the sub-task parameters as a DAG parameter. If there are\r\n  // multiple values are available to select, the DAG will fail. All the\r\n  // selected parameters must have the same type as the DAG parameter type.\r\n  | { valueFromOneof: ParameterSelectorsSpec };\r\n\r\n// Definition specification of the component input parameters and artifacts.\r\nexport interface ComponentInputsSpec {\r\n  // Name to artifact input.\r\n  artifacts?: { [k: string]: InputArtifactSpec };\r\n\r\n  // Name to parameter input.\r\n  parameters?: { [k: string]: InputParameterSpec };\r\n}\r\n\r\n// Definition of an artifact input.\r\nexport interface InputArtifactSpec {\r\n  artifactType: ArtifactTypeSchema;\r\n}\r\n\r\n// Definition of a parameter input.\r\nexport interface InputParameterSpec {\r\n  type: PrimitiveTypeEnum;\r\n}\r\n\r\n// Definition specification of the component output parameters and artifacts.\r\nexport interface ComponentOutputsSpec {\r\n  // Name to artifact output.\r\n  artifacts?: { [k: string]: OutputArtifactSpec };\r\n\r\n  // Name to parameter output.\r\n  parameters?: { [k: string]: OutputParameterSpec };\r\n}\r\n\r\n// Definition of an artifact output.\r\nexport interface OutputArtifactSpec {\r\n  artifactType: ArtifactTypeSchema;\r\n\r\n  // Properties of the Artifact.\r\n  metadata?: { [k: string]: any };\r\n}\r\n\r\n// Definition of a parameter output.\r\nexport interface OutputParameterSpec {\r\n  type: PrimitiveTypeEnum;\r\n}\r\n\r\n// The spec of task inputs.\r\n//export interface TaskInputsSpec {\r\nexport interface TaskArgumentsSpec {\r\n  // A map of input parameters which are small values, stored by the system and\r\n  // can be queriable.\r\n  parameters?: { [k: string]: ParameterArgumentSpec };\r\n  // A map of input artifacts.\r\n  artifacts?: { [k: string]: ArtifactArgumentSpec };\r\n}\r\n\r\n// The specification of a task input artifact.\r\n//export type InputArtifactSpec =\r\nexport type ArtifactArgumentSpec =\r\n  // Pass the input artifact from another task within the same parent\r\n  // component.\r\n  | { taskOutputArtifact: TaskOutputArtifactSpec }\r\n  // Pass the input artifact from parent component input artifact.\r\n  | { componentInputArtifact: string };\r\n\r\nexport interface TaskOutputArtifactSpec {\r\n  // The name of the upstream task which produces the output that matches\r\n  // with the `output_artifact_key`.\r\n  producerTask: string;\r\n\r\n  // The key of [TaskOutputsSpec.artifacts][] map of the producer task.\r\n  outputArtifactKey: string;\r\n}\r\n\r\n// Represents an input parameter. The value can be taken from an upstream\r\n// task's output parameter (if specifying `producer_task` and\r\n// `output_parameter_key`, or it can be a runtime value, which can either be\r\n// determined at compile-time, or from a pipeline parameter.\r\n//export interface InputParameterSpec {\r\nexport interface ParameterArgumentSpec {\r\n  //oneof kind {\r\n  // Output parameter from an upstream task.\r\n  taskOutputParameter?: TaskOutputParameterSpec;\r\n  // A constant value or runtime parameter.\r\n  runtimeValue?: ValueOrRuntimeParameter;\r\n  // Pass the input parameter from parent component input parameter.\r\n  componentInputParameter?: string;\r\n  // The final status of an uptream task.\r\n  taskFinalStatus?: TaskFinalStatus;\r\n  //}\r\n\r\n  // Selector expression of Common Expression Language (CEL)\r\n  // that applies to the parameter found from above kind.\r\n  //\r\n  // The expression is applied to the Value type\r\n  // [Value][].  For example,\r\n  // 'size(string_value)' will return the size of the Value.string_value.\r\n  //\r\n  // After applying the selection, the parameter will be returned as a\r\n  // [Value][].  The type of the Value is either deferred from the input\r\n  // definition in the corresponding\r\n  // [ComponentSpec.input_definitions.parameters][], or if not found,\r\n  // automatically deferred as either string value or double value.\r\n  //\r\n  // In addition to the builtin functions in CEL, The value.string_value can\r\n  // be treated as a json string and parsed to the [google.protobuf.Value][]\r\n  // proto message. Then, the CEL expression provided in this field will be\r\n  // used to get the requested field. For examples,\r\n  //  - if Value.string_value is a json array of \"[1.1, 2.2, 3.3]\",\r\n  //  'parseJson(string_value)[i]' will pass the ith parameter from the list\r\n  //  to the current task, or\r\n  //  - if the Value.string_value is a json map of \"{\"a\": 1.1, \"b\": 2.2,\r\n  //  \"c\": 3.3}, 'parseJson(string_value)[key]' will pass the map value from\r\n  //  the struct map to the current task.\r\n  //\r\n  // If unset, the value will be passed directly to the current task.\r\n  parameterExpressionSelector?: string;\r\n}\r\n\r\n// Represents an upstream task's output parameter.\r\nexport interface TaskOutputParameterSpec {\r\n  // The name of the upstream task which produces the output parameter that\r\n  // matches with the `output_parameter_key`.\r\n  producerTask: string;\r\n\r\n  // The key of [TaskOutputsSpec.parameters][] map of the producer task.\r\n  outputParameterKey: string;\r\n}\r\n\r\n// Represents an upstream task's final status. The field can only be set if\r\n// the schema version is `2.0.0`. The resolved input parameter will be a\r\n// json payload in string type.\r\nexport interface TaskFinalStatus {\r\n  // The name of the upsteram task where the final status is coming from.\r\n  producerTask: string;\r\n}\r\n\r\n// The spec of task outputs.\r\nexport interface TaskOutputsSpec {\r\n  // A map of output parameters which are small values, stored by the system and\r\n  // can be queriable. The output key is used\r\n  // by [TaskInputsSpec.InputParameterSpec][] of the downstream task to specify\r\n  // the data dependency. The same key will also be used by\r\n  // [ExecutorInput.Inputs][] to reference the output parameter.\r\n  parameters?: { [k: string]: OutputParameterSpec };\r\n  // A map of output artifacts. Keyed by output key. The output key is used\r\n  // by [TaskInputsSpec.InputArtifactSpec][] of the downstream task to specify\r\n  // the data dependency. The same key will also be used by\r\n  // [ExecutorInput.Inputs][] to reference the output artifact.\r\n  artifacts?: { [k: string]: OutputArtifactSpec };\r\n}\r\n\r\n// The specification of a task output artifact.\r\nexport interface OutputArtifactSpec {\r\n  // The type of the artifact.\r\n  artifactType: ArtifactTypeSchema;\r\n\r\n  // The properties of the artifact, which are determined either at\r\n  // compile-time, or at pipeline submission time through runtime parameters\r\n  properties?: { [k: string]: ValueOrRuntimeParameter };\r\n\r\n  // The custom properties of the artifact, which are determined either at\r\n  // compile-time, or at pipeline submission time through runtime parameters\r\n  customProperties?: { [k: string]: ValueOrRuntimeParameter };\r\n}\r\n\r\n// Specification for output parameters produced by the task.\r\nexport interface OutputParameterSpec {\r\n  // Required field. The type of the output parameter.\r\n  type: PrimitiveTypeEnum;\r\n}\r\n\r\n// Represent primitive types.\r\nexport enum PrimitiveTypeEnum {\r\n  PRIMITIVE_TYPE_UNSPECIFIED = \"PRIMITIVE_TYPE_UNSPECIFIED\",\r\n  INT = \"INT\",\r\n  DOUBLE = \"DOUBLE\",\r\n  STRING = \"STRING\",\r\n}\r\n\r\n// The spec of a pipeline task.\r\nexport interface PipelineTaskSpec {\r\n  // Basic info of a pipeline task.\r\n  taskInfo?: PipelineTaskInfo;\r\n\r\n  // Specification for task inputs which contains parameters and artifacts.\r\n  // <Alexey Volkov>: This should have been named: `arguments: TaskArguments`\r\n  inputs?: TaskArgumentsSpec;\r\n\r\n  // A list of names of upstream tasks that do not provide input\r\n  // artifacts for this task, but nonetheless whose completion this task depends\r\n  // on.\r\n  dependentTasks?: string[];\r\n\r\n  cachingOptions?: CachingOptions;\r\n\r\n  // Reference to a component.  Use this field to define either a DAG or an\r\n  // executor.\r\n  componentRef: ComponentRef;\r\n\r\n  // Trigger policy of the task.\r\n  triggerPolicy?: TriggerPolicy;\r\n\r\n  // Iterator supports fanning out the task into multiple sub-tasks based on the\r\n  // values of input artifact or parameter. The current task will become the\r\n  // parent of all the fan-out tasks. The output of the current task follows\r\n  // the following conventions:\r\n  // * Output artifacts with the same name of each iteration will be merged\r\n  //   into one output artifact channel of the parent iterator task.\r\n  // * Output parameters with the same name of each iteration will be merged\r\n  //   into a string output parameter with the same name with content being a\r\n  //   JSON array.\r\n  //\r\n  // For example, if an iterator starts two sub-tasks (t1 and t2) with the\r\n  // following outputs.\r\n  //\r\n  // t1.outputs.parameters = { 'p': 'v1' }\r\n  // t1.outputs.artifacts = { 'a': [a1] }\r\n  // t2.outputs.parameters = { 'p': 'v2' }\r\n  // t2.outputs.artifacts = { 'a': [a2] }\r\n  // parent_task.outputs.parameters = { 'p': '[\"v1\", \"v2\"]' }\r\n  // parent_task.outputs.aritfacts = { 'a': [a1, a2] }\r\n  //oneof iterator {\r\n  // Iterator to iterate over an artifact input.\r\n  artifactIterator?: ArtifactIteratorSpec;\r\n  // Iterator to iterate over a parameter input.\r\n  parameterIterator?: ParameterIteratorSpec;\r\n  //}\r\n}\r\n\r\nexport interface CachingOptions {\r\n  // Whether or not to enable cache for this task. Defaults to false.\r\n  enableCache: boolean;\r\n}\r\n\r\n// Trigger policy defines how the task gets triggered. If a task is not\r\n// triggered, it will run into SKIPPED state.\r\nexport interface TriggerPolicy {\r\n  // An expression which will be evaluated into a boolean value. True to\r\n  // trigger the task to run. The expression follows the language of\r\n  // [CEL Spec][https://github.com/google/cel-spec]. It can access the data\r\n  // from [ExecutorInput][] message of the task.\r\n  // For example:\r\n  // - `inputs.artifacts['model'][0].properties['accuracy']*100 > 90`\r\n  // - `inputs.parameters['type'] == 'foo' && inputs.parameters['num'] == 1`\r\n  condition: string;\r\n\r\n  // The trigger strategy of this task.  The `strategy` and `condition` are\r\n  // in logic \"AND\", as a task will only be tested for the `condition` when\r\n  // the `strategy` is meet.\r\n  // Unset or set to default value of TRIGGER_STATEGY_UNDEFINED behaves the\r\n  // same as ALL_UPSTREAM_TASKS_SUCCEEDED.\r\n  strategy: TriggerStrategy;\r\n}\r\n\r\n// An enum defines the trigger strategy of when the task will be ready to be\r\n// triggered.\r\n// ALL_UPSTREAM_TASKS_SUCCEEDED - all upstream tasks in succeeded state.\r\n// ALL_UPSTREAM_TASKS_COMPLETED - all upstream tasks in any final state.\r\n// (Note that CANCELLED is also a final state but job will not trigger new\r\n// tasks when job is in CANCELLING state, so that the task with the trigger\r\n// policy at ALL_UPSTREAM_TASKS_COMPLETED will not start when job\r\n// cancellation is in progress.)\r\nenum TriggerStrategy {\r\n  // Unspecified.  Behave the same as ALL_UPSTREAM_TASKS_SUCCEEDED.\r\n  TRIGGER_STRATEGY_UNSPECIFIED = \"TRIGGER_STRATEGY_UNSPECIFIED\",\r\n  // Specifies that all upstream tasks are in succeeded state.\r\n  ALL_UPSTREAM_TASKS_SUCCEEDED = \"ALL_UPSTREAM_TASKS_SUCCEEDED\",\r\n  // Specifies that all upstream tasks are in any final state.\r\n  ALL_UPSTREAM_TASKS_COMPLETED = \"ALL_UPSTREAM_TASKS_COMPLETED\",\r\n}\r\n\r\n// The spec of an artifact iterator. It supports fan-out a workflow from a list\r\n// of artifacts.\r\nexport interface ArtifactIteratorSpec {\r\n  // The items to iterate.\r\n  items: ArtifactItemsSpec;\r\n  // The name of the input artifact channel which has the artifact item from the\r\n  // [items][] collection.\r\n  itemInput: string;\r\n}\r\n// Specifies the name of the artifact channel which contains the collection of\r\n// items to iterate. The iterator will create a sub-task for each item of\r\n// the collection and pass the item as a new input artifact channel as\r\n// specified by [item_input][].\r\nexport interface ArtifactItemsSpec {\r\n  // The name of the input artifact.\r\n  inputArtifact: string;\r\n}\r\n\r\n// The spec of a parameter iterator. It supports fan-out a workflow from a\r\n// string parameter which contains a JSON array.\r\nexport interface ParameterIteratorSpec {\r\n  // The items to iterate.\r\n  items: ParameterItemsSpec;\r\n  // The name of the input parameter which has the item value from the\r\n  // [items][] collection.\r\n  itemInput: string;\r\n}\r\n\r\n// Specifies the spec to decribe the parameter items to iterate.\r\nexport type ParameterItemsSpec =\r\n  // Specifies where to get the collection of items to iterate. The iterator\r\n  // will create a sub-task for each item of the collection and pass the item\r\n  // as a new input parameter as specified by [item_input][].\r\n  // The raw JSON array.\r\n  | { raw: string }\r\n  // The name of the input parameter whose value has the items collection.\r\n  // The parameter must be in STRING type and its content can be parsed\r\n  // as a JSON array.\r\n  | { input_parameter: string };\r\n\r\nexport interface ComponentRef {\r\n  // The name of a component. Refer to the key of the\r\n  // [PipelineSpec.components][] map.\r\n  name: string;\r\n}\r\n\r\n// Basic info of a pipeline.\r\nexport interface PipelineInfo {\r\n  // Required field. The name of the pipeline.\r\n  // The name will be used to create or find pipeline context in MLMD.\r\n  name: string;\r\n}\r\n\r\n// The definition of a artifact type in MLMD.\r\nexport type ArtifactTypeSchema =\r\n  // The name of the type. The format of the title must be:\r\n  // `<namespace>.<title>.<version>`.\r\n  // Examples:\r\n  //  - `aiplatform.Model.v1`\r\n  //  - `acme.CustomModel.v2`\r\n  // When this field is set, the export type must be pre-registered in the MLMD\r\n  // store.\r\n  | { schemaTitle: string }\r\n\r\n  // Points to a YAML file stored on Google Cloud Storage describing the\r\n  // format.\r\n  | { schemaUri: string }\r\n\r\n  // Contains a raw YAML string, describing the format of\r\n  // the properties of the type.\r\n  | { instanceSchema: string };\r\n\r\n// The basic info of a task.\r\nexport interface PipelineTaskInfo {\r\n  // The unique name of the task within the pipeline definition. This name\r\n  // will be used in downstream tasks to indicate task and data dependencies.\r\n  // <Alexey Volkov>: This ^^^ does not seem to be true. This name seems to be used only as display name.\r\n  name: string;\r\n}\r\n\r\n// Definition for a value or reference to a runtime parameter. A\r\n// ValueOrRuntimeParameter instance can be either a field value that is\r\n// determined during compilation time, or a runtime parameter which will be\r\n// determined during runtime.\r\nexport type ValueOrRuntimeParameter =\r\n  // Constant value which is determined in compile time.\r\n  | { constantValue: MlmdValue }\r\n  // The runtime parameter refers to the parent component input parameter.\r\n  | { runtimeParameter: string };\r\n\r\nexport type MlmdValue =\r\n  | {\r\n      stringValue: string;\r\n    }\r\n  | {\r\n      intValue: number;\r\n    }\r\n  | {\r\n      doubleValue: number;\r\n    };\r\n\r\n// The definition of the deployment config of the pipeline. It contains the\r\n// the platform specific executor configs for KFP OSS.\r\nexport interface PipelineDeploymentConfig {\r\n  // Map from executor label to executor spec.\r\n  executors: { [k: string]: ExecutorSpec };\r\n}\r\n\r\n// The specification on a container invocation.\r\n// The string fields of the message support string based placeholder contract\r\n// defined in [ExecutorInput](). The output of the container follows the\r\n// contract of [ExecutorOutput]().\r\nexport interface PipelineContainerSpec {\r\n  // The image uri of the container.\r\n  image: string;\r\n  // The main entrypoint commands of the container to run. If not provided,\r\n  // fallback to use the entry point command defined in the container image.\r\n  command?: string[];\r\n  // The arguments to pass into the main entrypoint of the container.\r\n  args?: string[];\r\n\r\n  // The lifecycle hooks of the container executor.\r\n  // lifecycle: Lifecycle;\r\n\r\n  resources?: ResourceSpec;\r\n}\r\n\r\n// The specification on the resource requirements of a container execution.\r\n// This can include specification of vCPU, memory requirements, as well as\r\n// accelerator types and counts.\r\nexport interface ResourceSpec {\r\n  // The limit of the number of vCPU cores. This container execution needs\r\n  // at most cpu_limit vCPU to run.\r\n  cpuLimit: number;\r\n\r\n  // The memory limit in GB. This container execution needs at most\r\n  // memory_limit RAM to run.\r\n  memoryLimit: number;\r\n\r\n  accelerator: AcceleratorConfig;\r\n}\r\n\r\n// The specification of the executor.\r\nexport type ExecutorSpec =\r\n  // Starts a container.\r\n  { container: PipelineContainerSpec };\r\n// Import an artifact.\r\n//| { importer: ImporterSpec }\r\n// Resolves an existing artifact.\r\n//| { resolver: ResolverSpec }\r\n// Starts a Google Cloud AI Platform CustomJob.\r\n//| { custom_job: AIPlatformCustomJobSpec };\r\n\r\n// The specification on the accelerators being attached to this container.\r\nexport interface AcceleratorConfig {\r\n  // The type of accelerators.\r\n  type: string;\r\n  // The number of accelerators.\r\n  count: number;\r\n}\r\n\r\n// Missing: Lifecycle\r\n// Missing: ImporterSpec\r\n// Missing: ResolverSpec\r\n// Missing: RuntimeArtifact\r\n// Missing: ArtifactList\r\n// Missing: ExecutorInput\r\n// Missing: ExecutorOutput\r\n","import { ComponentSpec, ContainerImplementation, ImplementationType, StringOrPlaceholder, ArgumentType, TypeSpecType } from \"../componentSpec\";\r\n\r\nimport * as vertex from \"./vertexPipelineSpec\";\r\n\r\n// # How to handle I/O:\r\n// Rules (might have exceptions)\r\n// output = output artifact\r\n// inputValue => input parameter\r\n// inputPath => input artifact\r\n// # Fixing conflicts:\r\n// 1) Artifact (may only come from task output) is consumed as value.\r\n//   Solution 1) (implemented): Change input from parameter to artifact and use the input.artifact.value placeholder.\r\n//      Cons: The downstream component input definitions depend on arguments. (Some inputs are changed from parameter to artifact.)\r\n//   Solution 2): Add parameter output (with the same name as the artifact output) to the upstream component. The paths should be the same, so a single file will be treated as both parameter and output.\r\n//      Cons: The upstream component output definitions depend on downstream consumption style. (Although parameter outputs are added, not changed.)\r\n//   Solution 3): Insert a \"Downloader\" task between upstream and downstream.\r\n//      Cons: Extra container task\r\n// 2) Parameter (pipeline input or constant value) is consumed as artifact (as file).\r\n//   Solution 1): Insert a \"Uploader\" task to convert parameter to artifact.\r\n//      Cons: Extra container task\r\n\r\nconst sanitizePipelineInfoName = (pipelineContextName: string) => {\r\n    return pipelineContextName.toLowerCase().replace(/\\W/, '-')\r\n}\r\n\r\ntype ResolvedCommandLineAndArgs = {\r\n    command?: string[],\r\n    args?: string[],\r\n    inputsConsumedAsValue: Set<string>,\r\n    inputsConsumedAsPath: Set<string>,\r\n};\r\n\r\nconst resolveCommandLine = (componentSpec: ComponentSpec, taskArguments: Record<string, ArgumentType>): ResolvedCommandLineAndArgs => {\r\n    if (! ('container' in componentSpec.implementation)) {\r\n      throw Error(\"resolveCommandLine only supports container components\");\r\n    }\r\n    const containerSpec = componentSpec.implementation.container;\r\n\r\n    const inputsConsumedAsValue = new Set<string>();\r\n    const inputsConsumedAsPath = new Set<string>();\r\n    const convertArg = (arg: StringOrPlaceholder): string[] => {\r\n        if (typeof arg == \"string\") {\r\n            return [arg];\r\n        } else if ('inputValue' in arg) {\r\n            const inputName = arg.inputValue;\r\n            const argument = taskArguments[inputName];\r\n            if (argument !== undefined && typeof argument != \"string\" && \"taskOutput\" in argument) {\r\n                // ! Important details:\r\n                // In this branch, the argument comes from task output.\r\n                // All outputs are artifacts by default, so this argument is an artifact argument.\r\n                // We can either try to change the argument to parameter or make the input to be an artifact to solve the conflict.\r\n                // I choose to make the input to be artifact.\r\n                // Adding input name to inputsConsumedAsPath to make the input rendered as an artifact input.\r\n                inputsConsumedAsPath.add(inputName);\r\n                return [`{{$.inputs.artifacts['${inputName}'].value}}`];\r\n            } else {\r\n                inputsConsumedAsValue.add(inputName);\r\n                return [`{{$.inputs.parameters['${inputName}']}}`];\r\n            }\r\n        } else if ('inputPath' in arg) {\r\n            const inputName = arg.inputPath;\r\n            inputsConsumedAsPath.add(inputName);\r\n            return [`{{$.inputs.artifacts['${inputName}'].path}}`];\r\n        } else if ('outputPath' in arg) {\r\n            const outputName = arg.outputPath;\r\n            return [`{{$.outputs.artifacts['${outputName}'].path}}`];\r\n        } else if ('if' in arg) {\r\n            const [ifCond, ifThen, ifElse] = [arg.if.cond, arg.if.then, arg.if.else];\r\n            // TODO: Check false values, not just check for true\r\n            let condEvaluatesToTrue = false;\r\n            if (typeof ifCond === \"string\") {\r\n              condEvaluatesToTrue = ifCond.toLowerCase() === \"true\";\r\n            } else if (typeof ifCond === \"boolean\") {\r\n              condEvaluatesToTrue = ifCond;\r\n            } else if (\"isPresent\" in ifCond) {\r\n              const inputName = ifCond.isPresent;\r\n              condEvaluatesToTrue = inputName in taskArguments;\r\n            } else if (\"inputValue\" in ifCond) {\r\n              const inputName = ifCond.inputValue;\r\n              if (! (inputName in taskArguments)) {\r\n                condEvaluatesToTrue = false;\r\n              } else {\r\n                const taskArgument = taskArguments[inputName];\r\n                if (typeof taskArgument === \"string\") {\r\n                    condEvaluatesToTrue = taskArgument.toLowerCase() === \"true\";\r\n                } else {\r\n                    throw Error(\"Using runtime conditions in component command line placeholders is not supported yet.\")\r\n                }\r\n              }\r\n            } else {\r\n                throw Error(\"Unexpected contition kind: \" + ifCond);\r\n            }\r\n            const unresolvedArgs = condEvaluatesToTrue ? ifThen : ifElse;\r\n            if (unresolvedArgs === undefined) {\r\n                return [];\r\n            }\r\n            return unresolvedArgs.flatMap(convertArg);\r\n        } else if ('concat' in arg) {\r\n            const concatArgs = arg.concat;\r\n            return concatArgs.flatMap(convertArg);\r\n        } else {\r\n            throw Error(`Unknown kind of command-line argument: ${arg}`);\r\n        }\r\n    };\r\n\r\n    const result = {\r\n        command: containerSpec.command?.flatMap(convertArg),\r\n        args: containerSpec.args?.flatMap(convertArg),\r\n        inputsConsumedAsValue: inputsConsumedAsValue,\r\n        inputsConsumedAsPath: inputsConsumedAsPath,\r\n    };\r\n    return result;\r\n}\r\n\r\nfunction isContainerImplementation(implementationType: ImplementationType): implementationType is ContainerImplementation {\r\n    return 'container' in implementationType;\r\n}\r\n\r\nconst typeSpecToVertexPrimitiveTypeEnum = (typeSpec: TypeSpecType | undefined): vertex.PrimitiveTypeEnum => {\r\n    if (typeof typeSpec === \"string\") {\r\n        if ([\"integer\"].includes(typeSpec.toLowerCase())) {\r\n            return vertex.PrimitiveTypeEnum.INT;\r\n        }\r\n        if ([\"float\", \"double\"].includes(typeSpec.toLowerCase())) {\r\n            return vertex.PrimitiveTypeEnum.DOUBLE;\r\n        }\r\n    }\r\n    return vertex.PrimitiveTypeEnum.STRING;\r\n}\r\n\r\nconst typeSpecToVertexParameterSpec = (typeSpec: TypeSpecType | undefined): vertex.InputParameterSpec => {\r\n    return {\r\n        type: typeSpecToVertexPrimitiveTypeEnum(typeSpec)\r\n    }\r\n}\r\n\r\nconst typeSpecToVertexArtifactTypeSchema = (typeSpec: TypeSpecType | undefined): vertex.ArtifactTypeSchema => {\r\n    // TODO: Implement better mapping\r\n    const artifactTypeSchema = {\r\n        schemaTitle: \"system.Artifact\"\r\n    }\r\n    return artifactTypeSchema\r\n}\r\n\r\nconst typeSpecToVertexArtifactSpec = (typeSpec: TypeSpecType | undefined): vertex.InputArtifactSpec => {\r\n    return {\r\n        artifactType: typeSpecToVertexArtifactTypeSchema(typeSpec)\r\n    }\r\n}\r\n// const typeSpecToVertexArtifactType(typeSpec: TypeSpecType) => {\r\n//     return typeof typeSpec === \"string\" && [\"String\", \"Integer\", \"Float\", \"Double\", \"Boolean\", ]\r\n// }\r\n\r\nconst MAKE_ARTIFACT_COMPONENT_ID = \"_make_artifact\";\r\nconst MAKE_ARTIFACT_EXECUTOR_ID = \"_make_artifact\";\r\nconst MAKE_ARTIFACT_INPUT_NAME = \"parameter\";\r\nconst MAKE_ARTIFACT_OUTPUT_NAME = \"artifact\";\r\n\r\nconst makeArtifactTaskSpecTemplate: vertex.PipelineTaskSpec = {\r\n    componentRef: {\r\n        name: MAKE_ARTIFACT_COMPONENT_ID\r\n    },\r\n    taskInfo: {\r\n        name: \"Make artifact\"\r\n    },\r\n    inputs: {\r\n        parameters: {}\r\n    },\r\n    cachingOptions: {\r\n        enableCache: true\r\n    }\r\n};\r\n\r\nconst makeArtifactComponentSpec: vertex.ComponentSpec = {\r\n    executorLabel: MAKE_ARTIFACT_EXECUTOR_ID,\r\n    inputDefinitions: {\r\n        parameters: {\r\n            [MAKE_ARTIFACT_INPUT_NAME]: {\r\n                type: vertex.PrimitiveTypeEnum.STRING\r\n            }\r\n        }\r\n    },\r\n    outputDefinitions: {\r\n        artifacts: {\r\n            [MAKE_ARTIFACT_OUTPUT_NAME]: {\r\n                artifactType: {\r\n                    schemaTitle: \"system.Artifact\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nconst makeArtifactExecutorSpec: vertex.ExecutorSpec = {\r\n    container: {\r\n        image: \"alpine\",\r\n        command: [\r\n            \"sh\", \"-ec\", 'mkdir -p \"$(dirname \"$1\")\"; printf \"%s\" \"$0\" > \"$1\"',\r\n            `{{$.inputs.parameters['${MAKE_ARTIFACT_INPUT_NAME}']}}`,\r\n            `{{$.outputs.artifacts['${MAKE_ARTIFACT_OUTPUT_NAME}'].path}}`\r\n        ]\r\n    }\r\n}\r\n\r\nconst taskSpecToVertexTaskSpecComponentSpecAndExecutorSpec = (\r\n    componentSpec: ComponentSpec,\r\n    //passedArgumentNames: string[],\r\n    taskArguments: Record<string, ArgumentType>,\r\n    generateTaskID: (prefix: string) => string,\r\n    isRoot = false,\r\n) => {\r\n    // TODO: Investigate how to properly narrow the ImplementationTyppe union type\r\n    // Type guard!\r\n\r\n    if (!isContainerImplementation(componentSpec.implementation)) {\r\n        throw Error(\"Nested graph components are not supported yet\");\r\n    }\r\n    // Also works\r\n    // if ('container' in componentSpec.implementation) {\r\n    //     componentSpec.implementation\r\n    // }\r\n\r\n    const containerSpec = componentSpec.implementation.container;\r\n\r\n\r\n    const resolvedCommandLine = resolveCommandLine(componentSpec, taskArguments);\r\n\r\n    const vertexExecutorSpec: vertex.ExecutorSpec = {\r\n        container: {\r\n            image: containerSpec.image,\r\n            command: resolvedCommandLine.command,\r\n            args: resolvedCommandLine.args,\r\n        }\r\n    };\r\n\r\n    // resolvedCommandLine.inputsConsumedAsPath\r\n\r\n    const inputMap = new Map((componentSpec.inputs ?? []).map(inputSpec => [inputSpec.name, inputSpec]));\r\n\r\n    // Array.from(inputMap.keys()).filter(resolvedCommandLine.inputsConsumedAsValue.has)\r\n\r\n    const vertexComponentInputsSpec: vertex.ComponentInputsSpec = {\r\n      parameters: Object.fromEntries(\r\n        Array.from(resolvedCommandLine.inputsConsumedAsValue.values()).map(\r\n          (inputName) => [\r\n            inputName,\r\n            typeSpecToVertexParameterSpec(inputMap.get(inputName)?.type),\r\n          ]\r\n        )\r\n      ),\r\n      artifacts: Object.fromEntries(\r\n        Array.from(resolvedCommandLine.inputsConsumedAsPath.values()).map(\r\n          (inputName) => [\r\n            inputName,\r\n            typeSpecToVertexArtifactSpec(inputMap.get(inputName)?.type)\r\n          ]\r\n        )\r\n      ),\r\n    };\r\n\r\n    const vertexComponentOutputsSpec: vertex.ComponentOutputsSpec = {\r\n      parameters: {}, // Parameters will be added later as needed\r\n      artifacts: Object.fromEntries(\r\n        (componentSpec.outputs ?? []).map((outputSpec) => [\r\n          outputSpec.name,\r\n          typeSpecToVertexArtifactSpec(outputSpec.type)\r\n        ])\r\n      ),\r\n    };\r\n\r\n    const vertexComponentSpec: vertex.ComponentSpec = {\r\n        inputDefinitions: vertexComponentInputsSpec,\r\n        outputDefinitions: vertexComponentOutputsSpec,\r\n        // dag\r\n        executorLabel: \"<set later>\",\r\n    };\r\n\r\n    const vertexTaskParameterArguments: Record<string, vertex.ParameterArgumentSpec> = Object.fromEntries(Array.from(resolvedCommandLine.inputsConsumedAsValue.values()).map(inputName => [inputName, (inputName => {\r\n        // TODO: Check that this works\r\n        let taskArgument = taskArguments[inputName];\r\n        //if (! (inputName in taskArguments)) {\r\n        if (taskArgument === undefined) {\r\n            // Checking for default value\r\n            const inputSpec = inputMap.get(inputName);\r\n            if (inputSpec === undefined) {\r\n                throw Error(`Cannot happen: vertexTaskParameterArguments - inputMap.get(${inputName}) === undefined`)\r\n            }\r\n            if (inputSpec.default !== undefined) {\r\n                taskArgument = inputSpec.default;\r\n            } else {\r\n                if (inputSpec.optional === true) {\r\n                    // TODO: Decide what the behavior should be\r\n                    // throw Error(`Input \"${inputName}\" is optional, but command-line still uses it when when it's not present.`);\r\n                    console.error(`Input \"${inputName}\" is optional, but command-line still uses it when when it's not present.`);\r\n                    taskArgument = \"\";\r\n                } else {\r\n                    throw Error(`Argument was not provided for required input \"${inputName}\"`);\r\n                }\r\n            }\r\n        }\r\n        let result: vertex.ParameterArgumentSpec;\r\n        if (typeof taskArgument === \"string\" ) {\r\n            result = {\r\n                runtimeValue: {\r\n                    constantValue: {\r\n                        // TODO: Fix constant arguments for non-string inputs\r\n                        stringValue: taskArgument,\r\n                    }\r\n                }\r\n            };\r\n            return result;\r\n        } else if ('graphInput' in taskArgument) {\r\n            result = {\r\n                componentInputParameter: taskArgument.graphInput.inputName,\r\n            };\r\n            return result;\r\n        } else if ('taskOutput' in taskArgument) {\r\n            result = {\r\n                taskOutputParameter: {\r\n                    producerTask: taskArgument.taskOutput.taskId,\r\n                    outputParameterKey: taskArgument.taskOutput.outputName,\r\n                }\r\n            };\r\n            return result;\r\n        } else {\r\n            throw Error(`Unknown kind of task argument: \"${taskArgument}\"`);\r\n        }\r\n    })(inputName)]));\r\n\r\n    let vertexMakeArtifactTaskSpecs: Record<string, vertex.PipelineTaskSpec> = {};\r\n\r\n    const vertexTaskArtifactArguments: Record<string, vertex.ArtifactArgumentSpec> = Object.fromEntries(Array.from(resolvedCommandLine.inputsConsumedAsPath.values()).map(inputName => [inputName, (inputName => {\r\n        // TODO: Check that this works\r\n        let taskArgument = taskArguments[inputName];\r\n        //if (! (inputName in taskArguments)) {\r\n        if (taskArgument === undefined) {\r\n            // Checking for default value\r\n            const inputSpec = inputMap.get(inputName);\r\n            if (inputSpec === undefined) {\r\n                throw Error(`Cannot happen: vertexTaskParameterArguments - inputMap.get(${inputName}) === undefined`)\r\n            }\r\n            if (inputSpec.default !== undefined) {\r\n                taskArgument = inputSpec.default;\r\n            } else {\r\n                if (inputSpec.optional === true) {\r\n                    // TODO: Decide what the behavior should be\r\n                    // throw Error(`Input \"${inputName}\" is optional, but command-line still uses it when when it's not present.`);\r\n                    console.error(`Input \"${inputName}\" is optional, but command-line still uses it when when it's not present.`);\r\n                    taskArgument = \"\";\r\n                } else {\r\n                    throw Error(`Argument was not provided for required input \"${inputName}\"`);\r\n                }\r\n            }\r\n        }\r\n        let result: vertex.ArtifactArgumentSpec;\r\n        if (typeof taskArgument === \"string\" ) {\r\n            const makeArtifactTaskId = generateTaskID(\"Make artifact\");\r\n            const makeArtifactTaskSpec: vertex.PipelineTaskSpec = {\r\n                ...makeArtifactTaskSpecTemplate,\r\n                inputs: {\r\n                    parameters: {\r\n                        [MAKE_ARTIFACT_INPUT_NAME]: {\r\n                            runtimeValue: {\r\n                                constantValue: {\r\n                                    stringValue: taskArgument\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            vertexMakeArtifactTaskSpecs[makeArtifactTaskId] = makeArtifactTaskSpec;\r\n            result = {\r\n                taskOutputArtifact: {\r\n                    producerTask: makeArtifactTaskId,\r\n                    outputArtifactKey: MAKE_ARTIFACT_OUTPUT_NAME\r\n                }\r\n            };\r\n            return result;\r\n        } else if ('graphInput' in taskArgument) {\r\n            // Workaround for root DAG where all inputs must be parameters\r\n            if (isRoot) {\r\n                // We only need one task for each pipeline input parameter\r\n                //const makeArtifactTaskId = generateTaskID(\"Make artifact\");\r\n                const makeArtifactTaskId = \"Make artifact for \" + taskArgument.graphInput.inputName;\r\n                const makeArtifactTaskSpec: vertex.PipelineTaskSpec = {\r\n                    ...makeArtifactTaskSpecTemplate,\r\n                    inputs: {\r\n                        parameters: {\r\n                            [MAKE_ARTIFACT_INPUT_NAME]: {\r\n                                componentInputParameter: taskArgument.graphInput.inputName\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n                vertexMakeArtifactTaskSpecs[makeArtifactTaskId] = makeArtifactTaskSpec;\r\n                result = {\r\n                    taskOutputArtifact: {\r\n                        producerTask: makeArtifactTaskId,\r\n                        outputArtifactKey: MAKE_ARTIFACT_OUTPUT_NAME\r\n                    }\r\n                };\r\n            } else {\r\n                result = {\r\n                    componentInputArtifact: taskArgument.graphInput.inputName,\r\n                };\r\n            }\r\n            return result;\r\n        } else if ('taskOutput' in taskArgument) {\r\n            result = {\r\n                taskOutputArtifact: {\r\n                    producerTask: taskArgument.taskOutput.taskId,\r\n                    outputArtifactKey: taskArgument.taskOutput.outputName,\r\n                }\r\n            };\r\n            return result;\r\n        } else {\r\n            throw Error(`Unknown kind of task argument: \"${taskArgument}\"`);\r\n        }\r\n    })(inputName)]));\r\n    \r\n    const vertexTaskSpec: vertex.PipelineTaskSpec = {\r\n        taskInfo: {\r\n            // This is the task display name, not an ID\r\n            name: componentSpec.name ?? \"Component\",\r\n        },\r\n        inputs: {\r\n            parameters: vertexTaskParameterArguments,\r\n            artifacts: vertexTaskArtifactArguments,\r\n        },\r\n        // dependent_tasks: [],\r\n        cachingOptions: {\r\n            enableCache: true,\r\n        },\r\n        componentRef: {\r\n          name: \"<set later>\"\r\n        },\r\n        // triggerPolicy: {\r\n        //     condition: \"...\",\r\n        //     strategy: \"ALL_UPSTREAM_TASKS_SUCCEEDED\",\r\n        // },\r\n        // iterator: {\r\n        //     artifactIterator: {...},\r\n        //     parameterIterator: {...},\r\n        // },\r\n    }\r\n    \r\n    return { vertexTaskSpec, vertexComponentSpec, vertexExecutorSpec, vertexMakeArtifactTaskSpecs };\r\n}\r\n\r\nconst makeNameUniqueByAddingIndex = (name: string, existingNames: Set<string>): string => {\r\n    let finalName = name;\r\n    let index = 1;\r\n    while (existingNames.has(finalName)) {\r\n      index++;\r\n      finalName = name + \" \" + index.toString();\r\n    }\r\n    return finalName;\r\n  };\r\n\r\nconst graphComponentSpecToVertexPipelineSpec = (componentSpec: ComponentSpec, pipelineContextName = \"pipeline\") => {\r\n    if (! ('graph' in componentSpec.implementation)) {\r\n        throw Error(\"Only graph components are supported for now\")\r\n    }\r\n\r\n    // TODO: Fix case when these inputs are passed to tasks as artifacts\r\n    const vertexComponentInputsSpec = {\r\n        parameters: Object.fromEntries(\r\n          (componentSpec.inputs ?? []).map(\r\n            (inputSpec) => [inputSpec.name, typeSpecToVertexParameterSpec(inputSpec.type)]\r\n          )\r\n        ),\r\n        // Pipeline does not support artifact inputs\r\n        // artifacts: {},\r\n    };\r\n\r\n    const graphSpec = componentSpec.implementation.graph;\r\n\r\n    let vertexExecutors: Record<string, vertex.ExecutorSpec> = {};\r\n    let vertexComponents: Record<string, vertex.ComponentSpec> = {};\r\n    let vertexTasks: Record<string, vertex.PipelineTaskSpec> = {};\r\n\r\n    let usedTaskIds = new Set<string>(Object.keys(graphSpec.tasks));\r\n    const generateTaskId = (prefix: string) => {\r\n        const taskId = makeNameUniqueByAddingIndex(prefix, usedTaskIds);\r\n        usedTaskIds.add(taskId);\r\n        return taskId;\r\n    };\r\n\r\n    for (const [taskId, taskSpec] of Object.entries(graphSpec.tasks)) {\r\n        if (taskSpec.componentRef.spec === undefined) {\r\n            throw Error(`Task \"${taskId}\" does not have taskSpec.componentRef.spec.`)\r\n        }\r\n        try {\r\n            const { vertexTaskSpec, vertexComponentSpec, vertexExecutorSpec, vertexMakeArtifactTaskSpecs } = taskSpecToVertexTaskSpecComponentSpecAndExecutorSpec(taskSpec.componentRef.spec, taskSpec.arguments ?? {}, generateTaskId, true);\r\n            // task IDs are expected to be unique\r\n            // TODO: Fix  this to work for multi-dag pipelines where task IDs are not globally unique\r\n            const vertexExecutorId = taskId + \"_executor\";\r\n            const vertexComponentId = taskId + \"_component\";\r\n            const vertexTaskId = taskId; // + \"_task\";\r\n            usedTaskIds.add(vertexTaskId);\r\n            vertexExecutors[vertexExecutorId] = vertexExecutorSpec;\r\n            vertexComponentSpec.executorLabel = vertexExecutorId;\r\n            vertexComponents[vertexComponentId] = vertexComponentSpec;\r\n            vertexTaskSpec.componentRef.name = vertexComponentId;\r\n            // This is the task display name, not an ID. It's already set to the component name\r\n            //vertexTaskSpec.taskInfo.name = vertexTaskId;\r\n            vertexTasks[vertexTaskId] = vertexTaskSpec;\r\n            // Processing the additional MakeArtifact tasks\r\n            for (const [additionalTaskId, additionalTaskSpec] of Object.entries(vertexMakeArtifactTaskSpecs)) {\r\n                usedTaskIds.add(additionalTaskId);\r\n                vertexExecutors[MAKE_ARTIFACT_EXECUTOR_ID] = makeArtifactExecutorSpec;\r\n                vertexComponents[MAKE_ARTIFACT_COMPONENT_ID] = makeArtifactComponentSpec;\r\n                vertexTasks[additionalTaskId] = additionalTaskSpec;\r\n            }\r\n        } catch(err) {\r\n            throw Error(`Error compiling task ${taskId}: ` + err.toString());\r\n        }\r\n    }\r\n\r\n    const vertexPipelineSpec: vertex.PipelineSpec = {\r\n        pipelineInfo: {\r\n            name: sanitizePipelineInfoName(pipelineContextName)\r\n        },\r\n        sdkVersion: \"Cloud-Pipelines\",\r\n        schemaVersion: \"2.0.0\",\r\n        deploymentSpec: {\r\n            executors: vertexExecutors,\r\n        },\r\n        components: vertexComponents,\r\n        root: {\r\n          inputDefinitions: vertexComponentInputsSpec,\r\n          dag: {\r\n            tasks: vertexTasks,\r\n          }\r\n        },\r\n    };\r\n    return vertexPipelineSpec;\r\n};\r\n\r\nconst generateVertexPipelineJobFromGraphComponent = (\r\n  componentSpec: ComponentSpec,\r\n  gcsOutputDirectory: string,\r\n  pipelineArguments?: Map<string, string>,\r\n  pipelineContextName = \"pipeline\",\r\n) => {\r\n  // The pipelineContextName affects caching\r\n\r\n  // TODO: FIX: Do proper conversion of integers\r\n  //let convertedPipelineArguments = new Map<String, object>(Array.from(pipelineArguments.entries()).map((key, value) => [key, value]));\r\n  let convertedPipelineArguments: Record<string, any> = {};\r\n  if (pipelineArguments !== undefined) {\r\n    for (const [key, value] of Array.from(pipelineArguments.entries())) {\r\n      convertedPipelineArguments[key] = {\r\n        stringValue: value,\r\n        //intValue\r\n        //doubleValue\r\n      };\r\n    }\r\n  }\r\n\r\n  const pipelineSpec = graphComponentSpecToVertexPipelineSpec(componentSpec, pipelineContextName);\r\n\r\n  const pipelineJob: vertex.PipelineJob = {\r\n    // name: \"<>\",\r\n    // Does not show up in the UX\r\n    displayName: componentSpec.name ?? \"Pipeline\",\r\n    // labels: {},\r\n    runtimeConfig: {\r\n      parameters: convertedPipelineArguments,\r\n      gcsOutputDirectory: gcsOutputDirectory,\r\n    },\r\n    pipelineSpec: pipelineSpec,\r\n    // encryptionSpec: {},\r\n    // serviceAccount: \"<>\",\r\n    // network: {},\r\n  };\r\n  return pipelineJob;\r\n};\r\n\r\nexport { graphComponentSpecToVertexPipelineSpec, generateVertexPipelineJobFromGraphComponent };\r\n","import { DragEvent } from 'react';\r\n\r\nimport ComponentLibrary from './ComponentLibrary'\r\nimport ComponentSearch from './ComponentSearch'\r\nimport GraphComponentExporter from './GraphComponentExporter'\r\nimport GoogleCloudSubmitter from './GoogleCloud'\r\nimport VertexAiExporter from './VertexAiExporter'\r\nimport { ComponentSpec } from '../componentSpec';\r\nimport { loadComponentFromUrl, XGBOOST_PIPELINE_URL, PYTORCH_PIPELINE_URL, TFX_PIPELINE_URL, DATA_PASSING_PIPELINE_URL } from './samplePipelines';\r\nimport GraphComponentLink from './GraphComponentLink';\r\nimport KubeflowPipelinesSubmitter from \"./KubeflowPipelines\";\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  event.dataTransfer.setData('application/reactflow', JSON.stringify(nodeData));\r\n  event.dataTransfer.setData(\r\n    \"DragStart.offset\",\r\n    JSON.stringify({\r\n      offsetX: event.nativeEvent.offsetX,\r\n      offsetY: event.nativeEvent.offsetY,\r\n    })\r\n  );\r\n  event.dataTransfer.effectAllowed = 'move';\r\n};\r\n\r\nconst COMPONENT_LIBRARY = [\r\n  {\r\n    category: \"Quick start\",\r\n    componentUrls: [\r\n      // 'https://raw.githubusercontent.com/Ark-kun/pipelines/60a2612541ec08c6a85c237d2ec7525b12543a43/components/datasets/Chicago_Taxi_Trips/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/2463ecda532517462590d75e6e14a8af6b55869a/components/datasets/Chicago_Taxi_Trips/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/567c04c51ff00a1ee525b3458425b17adbe3df61/components/XGBoost/Train/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/567c04c51ff00a1ee525b3458425b17adbe3df61/components/XGBoost/Predict/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"Datasets\", componentUrls: [\r\n      // 'https://raw.githubusercontent.com/Ark-kun/pipelines/60a2612541ec08c6a85c237d2ec7525b12543a43/components/datasets/Chicago_Taxi_Trips/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/2463ecda532517462590d75e6e14a8af6b55869a/components/datasets/Chicago_Taxi_Trips/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"Data manipulation\",\r\n    componentUrls: [\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/6162d55998b176b50267d351241100bb0ee715bc/components/pandas/Transform_DataFrame/in_CSV_format/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"Upload/Download\",\r\n    componentUrls: [\r\n    'https://raw.githubusercontent.com/Ark-kun/pipelines/54ac9a6a7173aecbbb30a043b2077e790cac6953/components/web/Download/component.yaml',\r\n    'https://raw.githubusercontent.com/Ark-kun/pipelines/2dac60c400ad8767b452649d08f328dfaf230f96/components/google-cloud/storage/download/component.yaml',\r\n    'https://raw.githubusercontent.com/Ark-kun/pipelines/2dac60c400ad8767b452649d08f328dfaf230f96/components/google-cloud/storage/upload_to_unique_uri/component.yaml',\r\n    'https://raw.githubusercontent.com/Ark-kun/pipelines/2dac60c400ad8767b452649d08f328dfaf230f96/components/google-cloud/storage/upload_to_explicit_uri/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"XGBoost\",\r\n    componentUrls: [\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/567c04c51ff00a1ee525b3458425b17adbe3df61/components/XGBoost/Train/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/567c04c51ff00a1ee525b3458425b17adbe3df61/components/XGBoost/Predict/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"PyTorch\",\r\n    componentUrls: [\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/4e1facea1a270535b515a9e8cc59422d1ad76a9e/components/PyTorch/Create_fully_connected_network/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/603342c4b88fe2d69ff07682f702cd3601e883bb/components/PyTorch/Train_PyTorch_model/from_CSV/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/e011e4affa85542ef2b24d63fdac27f8d939bbee/components/PyTorch/Convert_to_OnnxModel_from_PyTorchScriptModule/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"TFX\",\r\n    componentUrls: [\r\n      'https://raw.githubusercontent.com/kubeflow/pipelines/9b0d47a226c61f96e1ebe7a8ba427df38f8734e1/components/deprecated/tfx/ExampleGen/CsvExampleGen/component.yaml',\r\n      'https://raw.githubusercontent.com/kubeflow/pipelines/9b0d47a226c61f96e1ebe7a8ba427df38f8734e1/components/deprecated/tfx/StatisticsGen/component.yaml',\r\n      'https://raw.githubusercontent.com/kubeflow/pipelines/9b0d47a226c61f96e1ebe7a8ba427df38f8734e1/components/deprecated/tfx/SchemaGen/component.yaml',\r\n      'https://raw.githubusercontent.com/kubeflow/pipelines/9b0d47a226c61f96e1ebe7a8ba427df38f8734e1/components/deprecated/tfx/ExampleValidator/component.yaml',\r\n      'https://raw.githubusercontent.com/kubeflow/pipelines/9b0d47a226c61f96e1ebe7a8ba427df38f8734e1/components/deprecated/tfx/Transform/component.yaml',\r\n      'https://raw.githubusercontent.com/kubeflow/pipelines/9b0d47a226c61f96e1ebe7a8ba427df38f8734e1/components/deprecated/tfx/Trainer/component.yaml',\r\n      'https://raw.githubusercontent.com/kubeflow/pipelines/9b0d47a226c61f96e1ebe7a8ba427df38f8734e1/components/deprecated/tfx/Evaluator/component.yaml',\r\n    ]\r\n  },\r\n];\r\n\r\ninterface SidebarProps {\r\n  componentSpec?: ComponentSpec,\r\n  setComponentSpec?: (componentSpec: ComponentSpec) => void,\r\n}\r\n\r\nconst Sidebar = ({\r\n  componentSpec,\r\n  setComponentSpec\r\n}: SidebarProps) => {\r\n  return (\r\n    <aside className=\"nodeList\">\r\n      <details style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary style={{ borderWidth: \"1px\", padding: \"4px\", fontWeight: \"bold\" }}>Save/Load pipeline</summary>\r\n        <button\r\n          type=\"button\"\r\n          onClick={(e) => {\r\n            loadComponentFromUrl(TFX_PIPELINE_URL).then(setComponentSpec)\r\n          }}\r\n        >\r\n          Load TFX pipeline\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={(e) => {\r\n            loadComponentFromUrl(XGBOOST_PIPELINE_URL).then(setComponentSpec)\r\n          }}\r\n        >\r\n          Load XGBoost pipeline\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={(e) => {\r\n            loadComponentFromUrl(PYTORCH_PIPELINE_URL).then(setComponentSpec)\r\n          }}\r\n        >\r\n          Load PyTorch pipeline\r\n        </button>\r\n        <div>\r\n          Save as {componentSpec && <GraphComponentLink componentSpec={componentSpec}/>}\r\n        </div>\r\n      </details>\r\n      <details style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary style={{ borderWidth: \"1px\", padding: \"4px\", fontWeight: \"bold\" }}>Submit to Google Cloud</summary>\r\n        <GoogleCloudSubmitter componentSpec={componentSpec}/>\r\n      </details>\r\n      <h3>Drag components to the canvas:</h3>\r\n      <details style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary><strong>Special</strong></summary>\r\n        <div className=\"react-flow__node react-flow__node-input\" onDragStart={(event: DragEvent) => onDragStart(event, { input: { label: \"Input\" } })} draggable>\r\n          Input\r\n        </div>\r\n        <div className=\"react-flow__node react-flow__node-output\" onDragStart={(event: DragEvent) => onDragStart(event, { output: { label: \"Output\" } })} draggable>\r\n          Output\r\n        </div>\r\n      </details>\r\n      <ComponentLibrary componentGroups={COMPONENT_LIBRARY}/>\r\n      <details open style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary style={{ borderWidth: \"1px\", padding: \"4px\", fontWeight: \"bold\" }}>Component search</summary>\r\n        <ComponentSearch />\r\n      </details>\r\n      <details>\r\n        <summary>Debug</summary>\r\n        {componentSpec && <GraphComponentExporter componentSpec={componentSpec}/>}\r\n        {componentSpec && <VertexAiExporter componentSpec={componentSpec}/>}\r\n        <button\r\n          type=\"button\"\r\n          onClick={(e) => {\r\n            loadComponentFromUrl(DATA_PASSING_PIPELINE_URL).then(setComponentSpec);\r\n          }}\r\n        >\r\n          Load Data Passing pipeline\r\n        </button>\r\n        {process?.env?.NODE_ENV === \"development\" ? (\r\n          <KubeflowPipelinesSubmitter componentSpec={componentSpec}/>\r\n        ) : undefined}\r\n      </details>\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import { DragEvent, useEffect, useState } from 'react';\r\n\r\nimport {downloadComponentDataWithCache} from '../github'\r\nimport {ComponentSpec, TaskSpec} from '../componentSpec'\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  event.dataTransfer.setData('application/reactflow', JSON.stringify(nodeData));\r\n  event.dataTransfer.setData(\r\n    \"DragStart.offset\",\r\n    JSON.stringify({\r\n      offsetX: event.nativeEvent.offsetX,\r\n      offsetY: event.nativeEvent.offsetY,\r\n    })\r\n  );\r\n  event.dataTransfer.effectAllowed = 'move';\r\n};\r\n\r\ntype ComponentGroup = {\r\n  category: string;\r\n  componentUrls: string[];\r\n};\r\n\r\nconst DraggableComponentRow = ({componentUrl}: {componentUrl: string}) => {\r\n  const [componentSpec, setComponentSpec] = useState<ComponentSpec | undefined>(undefined);\r\n  useEffect(() => {\r\n    downloadComponentDataWithCache(componentUrl).then(setComponentSpec);\r\n  }, [componentUrl]);\r\n\r\n  if (componentSpec === undefined) {\r\n    return <span>Loading...</span>\r\n  } else {\r\n    return (\r\n      <div\r\n        className=\"react-flow__node react-flow__node-task\"\r\n        draggable\r\n        onDragStart={(event: DragEvent) => {\r\n          const taskSpec: TaskSpec = {\r\n            componentRef: {\r\n              url: componentUrl,\r\n              spec: componentSpec,\r\n            },\r\n          };\r\n          return onDragStart(event, { task: taskSpec });\r\n        }}\r\n      >\r\n        {componentSpec.name}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst ComponentGroupList = ({ componentGroups }: { componentGroups: ComponentGroup[] }) => {\r\n  return (\r\n    <>\r\n      {Array.from(componentGroups).map(\r\n        ({ category, componentUrls }, index) => (\r\n          <details key={category} open={index === 0} style={{ border: \"1px solid #aaa\", borderRadius: \"4px\" }}>\r\n            <summary style={{ borderWidth: \"1px\", padding: \"8px\" }}>\r\n              <strong>{category}</strong>\r\n            </summary>\r\n            {componentUrls.map((componentUrl) => (\r\n              <DraggableComponentRow key={componentUrl} componentUrl={componentUrl} />\r\n            ))}\r\n          </details>\r\n        )\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst ComponentLibrary = ({ componentGroups }: { componentGroups: ComponentGroup[] }) => {\r\n  return (\r\n    <details open>\r\n      <summary style={{ border: \"1px solid #aaa\", padding: \"4px\", borderRadius: \"4px\" }}>\r\n        <strong>Component library</strong>\r\n      </summary>\r\n      <div style={{ paddingLeft: \"10px\" }}>\r\n        <ComponentGroupList componentGroups={componentGroups}/>\r\n      </div>\r\n    </details>\r\n  );\r\n};\r\n\r\nexport default ComponentLibrary;\r\n","import React, { DragEvent } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { ComponentReference, TaskSpec } from \"../componentSpec\";\r\nimport { searchComponentsByName } from \"../github\";\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  event.dataTransfer.setData(\"application/reactflow\", JSON.stringify(nodeData));\r\n  event.dataTransfer.effectAllowed = \"move\";\r\n};\r\n\r\nconst COMPONENT_ORGS = [\"kubeflow\", \"Ark-kun\"];\r\n\r\nconst SearchPanel = (props: any) => {\r\n  const [error, setError] = useState<string | undefined>(undefined);\r\n  const [firstTime, setFirstTime] = useState(true);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [items, setItems] = useState<ComponentReference[]>([]);\r\n\r\n  const onQueryChange = (e: any) => {\r\n    setQuery(e.target.value);\r\n  };\r\n\r\n  async function fetchData(query: string) {\r\n    searchComponentsByName(query, COMPONENT_ORGS).then(\r\n      (componentRefs) => {\r\n        setIsLoaded(true);\r\n        setItems(componentRefs);\r\n      },\r\n      (error) => {\r\n        setIsLoaded(true);\r\n        setError(error.message);\r\n      }\r\n    );\r\n  }\r\n\r\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (query !== \"\") {\r\n      setFirstTime(false);\r\n      fetchData(query);\r\n    }\r\n  };\r\n\r\n  let results = <span></span>;\r\n  if (firstTime) {\r\n    results = <div>Enter search query</div>;\r\n  } else if (error !== undefined) {\r\n    results = <div>Error: {error}</div>;\r\n  } else if (!firstTime && !isLoaded) {\r\n    results = <div>Searching...</div>;\r\n  } else if (items !== undefined) {\r\n    const componentElements = items.map((item) => (\r\n      <div\r\n        key={item.url}\r\n        title={item.url}\r\n        className=\"react-flow__node react-flow__node-multihandle\"\r\n        draggable\r\n        onDragStart={(event: DragEvent) => {\r\n          const taskSpec: TaskSpec = {\r\n            componentRef: item,\r\n          };\r\n          return onDragStart(event, { task: taskSpec });\r\n        }}\r\n      >\r\n        {item.spec?.name}\r\n      </div>\r\n    ));\r\n    results = <>{componentElements}</>;\r\n  }\r\n  return (\r\n    <div className=\"nodeList\">\r\n      <form onSubmit={onSubmit}>\r\n        <input type=\"search\" placeholder=\"XGBoost\" onChange={onQueryChange} />\r\n        <input type=\"submit\" />\r\n      </form>\r\n      <div>{results}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPanel;\r\n","import {\r\n  useStoreState,\r\n} from \"react-flow-renderer\";\r\nimport yaml from \"js-yaml\";\r\n\r\nimport { ComponentSpec } from \"../componentSpec\";\r\nimport { augmentComponentSpec } from './GraphComponentSpecFlow'\r\n\r\ninterface GraphComponentExporterProps {\r\n  componentSpec: ComponentSpec,\r\n}\r\n\r\nconst GraphComponentExporter = ({\r\n  componentSpec,\r\n}: GraphComponentExporterProps) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n\r\n  let componentText = \"\";\r\n  try {\r\n    const graphComponent = augmentComponentSpec(componentSpec, nodes, false, true);\r\n    componentText = yaml.dump(graphComponent, { lineWidth: 10000 });\r\n  } catch(err) {\r\n    componentText = String(err);\r\n  }\r\n\r\n  const componentTextBlob = new Blob([componentText], { type: \"text/yaml\" }); // Or application/x-yaml (which leads to downloading)\r\n  const downloadLink = <a href={URL.createObjectURL(componentTextBlob)} download={\"component.yaml\"}>component.yaml</a>\r\n\r\n  return (\r\n    <details>\r\n      <summary>Graph {downloadLink}</summary>\r\n      <pre style={{overflow: \"auto\"}}>{componentText}</pre>\r\n    </details>\r\n  );\r\n};\r\n\r\nexport default GraphComponentExporter;\r\n","/* global gapi */\r\n\r\nimport { useState } from 'react';\r\n\r\nimport { ComponentSpec } from '../componentSpec';\r\nimport {generateVertexPipelineJobFromGraphComponent} from './vertexAiCompiler'\r\n\r\nconst LOCAL_STORAGE_GCS_OUTPUT_DIRECTORY_KEY = \"GoogleCloudSubmitter/gcsOutputDirectory\";\r\nconst LOCAL_STORAGE_PROJECT_ID_KEY = \"GoogleCloudSubmitter/projectId\";\r\nconst LOCAL_STORAGE_REGION_KEY = \"GoogleCloudSubmitter/region\";\r\nconst LOCAL_STORAGE_PROJECT_IDS_KEY = \"GoogleCloudSubmitter/projectIds\";\r\n\r\nvar CLIENT_ID = '640001104961-2m8hs192tmd9f9nssbr5thr5o3uhmita.apps.googleusercontent.com';\r\nvar API_KEY = 'AIzaSyCDPTffgYGXoit-jKsj1_1WWbSxvU7aEdQ';\r\n     \r\nconst VERTEX_AI_PIPELINES_REGIONS = [\r\n  'us-central1',\r\n  'europe-west4',\r\n  'asia-east1',\r\n];\r\n\r\nconst VERTEX_AI_PIPELINES_DEFAULT_REGION = 'us-central1';\r\n\r\nconst authorizeGoogleCloudClient = async (\r\n  scopes: string[],\r\n  immediate = false, // Setting immediate to true prevents auth window showing every time. But it needs to be false the first time (when cookies are not set).\r\n  apiKey: string = API_KEY,\r\n  clientId: string = CLIENT_ID,\r\n) => {\r\n  return new Promise<GoogleApiOAuth2TokenObject>(\r\n    (resolve, reject) => {\r\n      gapi.client.setApiKey(apiKey);\r\n      gapi.auth.authorize(\r\n        {\r\n          client_id: clientId,\r\n          scope: scopes,\r\n          immediate: immediate,\r\n        },\r\n        (authResult) => {\r\n          // console.debug(\"authorizeGoogleCloudClient: called back\");\r\n          if (authResult === undefined) {\r\n            console.error(\"authorizeGoogleCloudClient failed\");\r\n            reject(\"gapi.auth.authorize result is undefined\");\r\n          } else if (authResult.error) {\r\n            console.error(\r\n              \"authorizeGoogleCloudClient failed\",\r\n              authResult.error\r\n            );\r\n            reject(authResult.error);\r\n          } else {\r\n            // console.debug(\"authorizeGoogleCloudClient: Success\");\r\n            // Working around the Google Auth bug: The request succeeds, but the returned token does not have the requested scopes.\r\n            // See https://github.com/google/google-api-javascript-client/issues/743\r\n            const receivedScopesString = (authResult as any).scope as string | undefined;\r\n            const receivedScopes = receivedScopesString?.split(\" \");\r\n            if (receivedScopes === undefined || !scopes.every((scope) => receivedScopes.includes(scope))) {\r\n              const errorMessage = `Authorization call succeeded, but the returned scopes are ${receivedScopesString}`;\r\n              console.error(errorMessage);\r\n              reject(errorMessage);\r\n            } else {\r\n              resolve(authResult);\r\n            }\r\n          }\r\n        }\r\n      );\r\n    }\r\n  );\r\n};\r\n\r\nconst ensureGoogleCloudAuthorizesScopes = async (scopes: string[]) => {\r\n  try {\r\n    // console.debug('Before ensureGoogleCloudAuthorizesScopes(immediate=true)');\r\n    await authorizeGoogleCloudClient(scopes, true);\r\n    // console.debug('After ensureGoogleCloudAuthorizesScopes(immediate=true)');\r\n  } catch (err) {\r\n    // console.error('ensureGoogleCloudAuthorizesScopes(immediate=true)', err);\r\n    try {\r\n      await authorizeGoogleCloudClient(scopes, false);\r\n    } catch (err) {\r\n      // console.error('ensureGoogleCloudAuthorizesScopes(immediate=false)', err);\r\n    }\r\n  }\r\n};\r\n\r\nconst cloudresourcemanagerListProjects = async (isAuthenticated = false) => {\r\n  await ensureGoogleCloudAuthorizesScopes(\r\n    [\"https://www.googleapis.com/auth/cloud-platform\"]\r\n  );\r\n  const response = await gapi.client.request({\r\n    path: \"https://cloudresourcemanager.googleapis.com/v1/projects/\",\r\n  });\r\n  return response.result;\r\n}\r\n\r\nconst aiplatformCreatePipelineJob = async (projetId: string, region='us-central1', pipelineJob: Record<string, any>) => {\r\n  await ensureGoogleCloudAuthorizesScopes(\r\n    [\"https://www.googleapis.com/auth/cloud-platform\"]\r\n  );\r\n  const response = await gapi.client.request({\r\n    path: `https://${region}-aiplatform.googleapis.com/v1beta1/projects/${projetId}/locations/${region}/pipelineJobs`,\r\n    method: \"POST\",\r\n    body: JSON.stringify(pipelineJob),\r\n  });\r\n  return response.result;\r\n}\r\n\r\ninterface GoogleCloudSubmitterProps {\r\n  componentSpec?: ComponentSpec,\r\n};\r\n\r\nconst GoogleCloudSubmitter = ({\r\n  componentSpec,\r\n}: GoogleCloudSubmitterProps) => {\r\n  const [projects, setProjects] = useState<string[]>(\r\n    () => JSON.parse(window.localStorage?.getItem(LOCAL_STORAGE_PROJECT_IDS_KEY) ?? \"[]\")\r\n  );\r\n  const [project, setProject] = useState<string>(\r\n    () => window.localStorage?.getItem(LOCAL_STORAGE_PROJECT_ID_KEY) ?? \"\"\r\n  ); // undefined causes error: https://reactjs.org/docs/forms.html#controlled-components https://stackoverflow.com/a/47012342\r\n  const [region, setRegion] = useState(\r\n    () => window.localStorage?.getItem(LOCAL_STORAGE_REGION_KEY) ?? VERTEX_AI_PIPELINES_DEFAULT_REGION\r\n  );\r\n  const [error, setError] = useState(\"\");\r\n  const [gcsOutputDirectory, setGcsOutputDirectory] = useState(\r\n    () => window.localStorage?.getItem(LOCAL_STORAGE_GCS_OUTPUT_DIRECTORY_KEY) ?? \"\"\r\n  );\r\n  const [pipelineJobWebUrl, setPipelineJobWebUrl] = useState(\"\");\r\n  const [compilationError, setCompilationError] = useState(\"\");\r\n\r\n  let vertexPipelineJobJson: string | undefined = undefined;\r\n  let vertexPipelineJob: Record<string, any> | undefined = undefined;\r\n\r\n  //useEffect(() => {\r\n  if (componentSpec !== undefined) {\r\n    try {\r\n      const defaultInputValues = new Map<string, string>(\r\n        (componentSpec.inputs ?? [])\r\n          .filter((inputSpec) => inputSpec.default !== undefined)\r\n          .map((inputSpec) => [inputSpec.name, inputSpec.default as string])\r\n      );\r\n      vertexPipelineJob = generateVertexPipelineJobFromGraphComponent(\r\n        componentSpec,\r\n        gcsOutputDirectory,\r\n        defaultInputValues\r\n      );\r\n      vertexPipelineJobJson = JSON.stringify(vertexPipelineJob, undefined, 2);\r\n      // Prevent inifinite re-renders\r\n      if (compilationError !== \"\") {\r\n        setCompilationError(\"\");\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err.toString();\r\n      // Prevent inifinite re-renders\r\n      if (errorMessage !== compilationError) {\r\n        setCompilationError(err.toString());\r\n      }\r\n    }\r\n  }\r\n  //}, [componentSpec, gcsOutputDirectory]);\r\n\r\n  const vertexPipelineJobUrl = vertexPipelineJobJson && URL.createObjectURL(\r\n    new Blob([vertexPipelineJobJson], { type: \"application/json\" })\r\n  );\r\n\r\n  const readyToSubmit =\r\n    project !== \"\" && region !== \"\" && vertexPipelineJob !== undefined;\r\n\r\n  return (\r\n    <form\r\n      onSubmit={async (e) => {\r\n        e.preventDefault();\r\n        if (vertexPipelineJob === undefined) {\r\n          return;\r\n        }\r\n        setPipelineJobWebUrl(\"\");\r\n        try {\r\n          // setItem might throw exception on iOS in incognito mode\r\n          try {\r\n            window.localStorage?.setItem(LOCAL_STORAGE_GCS_OUTPUT_DIRECTORY_KEY, gcsOutputDirectory);\r\n            window.localStorage?.setItem(LOCAL_STORAGE_PROJECT_ID_KEY, project);\r\n            window.localStorage?.setItem(LOCAL_STORAGE_REGION_KEY, region);\r\n          } catch(err) {\r\n            console.error(\"GoogleCloudSubmitter: Error writing properties to the localStorage\", err);\r\n          }\r\n          const result = await aiplatformCreatePipelineJob(project, region, vertexPipelineJob);\r\n          const pipelineJobName: string = result.name;\r\n          const pipelineJobId = pipelineJobName.split('/').slice(-1)[0];\r\n          const pipelineJobWebUrl = `https://console.cloud.google.com/vertex-ai/locations/${region}/pipelines/runs/${pipelineJobId}?project=${project}`;\r\n          setPipelineJobWebUrl(pipelineJobWebUrl);\r\n          setError(\"\");\r\n        } catch (err) {\r\n          console.error(err);\r\n          setError(err?.result?.error?.message ?? \"Error\");\r\n        }\r\n      }}\r\n    >\r\n      <div style={{ whiteSpace: \"nowrap\" }}>\r\n        <label htmlFor=\"project\">Project: </label>\r\n        <input\r\n          id=\"project\"\r\n          required\r\n          type=\"text\"\r\n          list=\"projects\"\r\n          placeholder=\"<my-project-id>\"\r\n          value={project}\r\n          onChange={(e) => setProject(e.target.value)}\r\n        />\r\n        <datalist id=\"projects\">\r\n          {projects.map((projectId) => (\r\n            <option key={projectId} value={projectId} />\r\n          ))}\r\n        </datalist>\r\n        <button\r\n          type=\"button\" // The default button type is \"submit\", not \"button\". WTF!?\r\n          onClick={async (e) => {\r\n            try {\r\n              const result = await cloudresourcemanagerListProjects();\r\n              const projectIds = (result.projects as any[]).map<string>(\r\n                (projectInfo) => projectInfo.projectId\r\n              );\r\n              setProjects(projectIds);\r\n              setError(\"\");\r\n              try {\r\n                window.localStorage?.setItem(LOCAL_STORAGE_PROJECT_IDS_KEY, JSON.stringify(projectIds));\r\n              } catch(err) {\r\n                console.error(\"GoogleCloudSubmitter: Error writing properties to the localStorage\", err);\r\n              }\r\n            } catch (err) {\r\n              setError(err?.result?.error?.message ?? \"Error\");\r\n            }\r\n          }}\r\n        >\r\n          ⟳{/* 🗘⭯ ⭮ ↺ ↻ ⟲ ⟳ 🔃🔄 */}\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"region\">Region: </label>\r\n        <input\r\n          id=\"region\"\r\n          required\r\n          type=\"text\"\r\n          list=\"regions\"\r\n          value={region}\r\n          onChange={(e) => setRegion(e.target.value)}\r\n        />\r\n        <datalist id=\"regions\">\r\n          {VERTEX_AI_PIPELINES_REGIONS.map((region) => (\r\n            <option key={region} value={region} />\r\n          ))}\r\n        </datalist>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"region\">GCS dir: </label>\r\n        <input\r\n          id=\"gcsOutputDirectory\"\r\n          required\r\n          type=\"text\"\r\n          value={gcsOutputDirectory}\r\n          onChange={(e) => setGcsOutputDirectory(e.target.value)}\r\n        />\r\n      </div>\r\n      <input\r\n        type=\"submit\"\r\n        disabled={!readyToSubmit}\r\n        value=\"Submit pipeline job\"\r\n      />\r\n      {pipelineJobWebUrl !== \"\" && <div><a href={pipelineJobWebUrl} target=\"_blank\" rel=\"noreferrer\">Job</a></div>}\r\n      {vertexPipelineJobUrl !== undefined && (\r\n        <div>\r\n          Download <a\r\n            href={vertexPipelineJobUrl}\r\n            download={\"vertex_pipeline_job.json\"}\r\n          >\r\n            vertex_pipeline_job.json\r\n          </a>\r\n        </div>\r\n      )}\r\n      {compilationError !== \"\" && <div>{compilationError}</div>}\r\n      {error !== \"\" && <div>Error: {error}</div>}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default GoogleCloudSubmitter;\r\n","import {\r\n  useStoreState,\r\n} from \"react-flow-renderer\";\r\n\r\nimport { ComponentSpec } from \"../componentSpec\";\r\nimport { augmentComponentSpec } from \"./GraphComponentSpecFlow\";\r\nimport {graphComponentSpecToVertexPipelineSpec} from './vertexAiCompiler'\r\n\r\ninterface VertexAiExporterProps {\r\n  componentSpec: ComponentSpec;\r\n}\r\n\r\nconst VertexAiExporter = ({componentSpec}: VertexAiExporterProps) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n\r\n  let vertexPipelineSpecText = \"\";\r\n  try {\r\n    // Augmenting the componentSpec might be useless right now, but it can stabilize the output (e.g. ordering).\r\n    // Also, in the future, the original spec might be included in the vertexPipelineSpec\r\n    componentSpec = augmentComponentSpec(componentSpec, nodes, true, true);\r\n    const vertexPipelineSpec = graphComponentSpecToVertexPipelineSpec(componentSpec);\r\n    vertexPipelineSpecText = JSON.stringify(vertexPipelineSpec, undefined, 2);\r\n  } catch(err) {\r\n    vertexPipelineSpecText = String(err);\r\n  }\r\n\r\n  const vertexPipelineSpecTextBlob = new Blob([vertexPipelineSpecText], { type: \"application/json\" }); // Or application/x-yaml (which leads to downloading)\r\n  // TODO: Call vertexPipelineSpecTextBlobUrl.revokeObjectURL in the future\r\n  const vertexPipelineSpecTextBlobUrl = URL.createObjectURL(vertexPipelineSpecTextBlob);\r\n\r\n  return (\r\n    <details>\r\n      <summary>\r\n        Cloud IR <a\r\n          href={vertexPipelineSpecTextBlobUrl}\r\n          download={\"vertex_pipeline_spec.json\"}\r\n        >\r\n          vertex_pipeline_spec.json\r\n        </a>\r\n      </summary>\r\n      <pre style={{ overflow: \"auto\" }}>{vertexPipelineSpecText}</pre>\r\n    </details>\r\n  );\r\n};\r\n\r\nexport default VertexAiExporter;\r\n","import { useStoreState } from \"react-flow-renderer\";\r\nimport yaml from \"js-yaml\";\r\n\r\nimport { createGraphComponentSpecFromFlowElements } from \"./graphComponentFromFlow\";\r\nimport { ComponentSpec } from \"../componentSpec\";\r\nimport { augmentComponentSpec } from \"./GraphComponentSpecFlow\";\r\n\r\ninterface GraphComponentLinkProps {\r\n  componentSpec: ComponentSpec;\r\n  downloadFileName?: string;\r\n  linkText?: string;\r\n}\r\n\r\nconst GraphComponentLink = ({\r\n  componentSpec,\r\n  downloadFileName = \"component.yaml\",\r\n  linkText = \"component.yaml\",\r\n}: GraphComponentLinkProps) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n\r\n\r\n  let componentText = \"\";\r\n  try {\r\n    componentSpec = augmentComponentSpec(componentSpec, nodes, false, true);\r\n    componentText = yaml.dump(componentSpec, { lineWidth: 10000 });\r\n  } catch (err) {\r\n    componentText = String(err);\r\n  }\r\n\r\n  const componentTextBlob = new Blob([componentText], { type: \"text/yaml\" }); // Or application/x-yaml (which leads to downloading)\r\n  return (\r\n    <a\r\n      href={URL.createObjectURL(componentTextBlob)}\r\n      download={\"component.yaml\"}\r\n    >\r\n      component.yaml\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default GraphComponentLink;\r\n","import { useState } from \"react\";\r\n\r\nimport { ComponentSpec } from \"../componentSpec\";\r\n\r\ninterface KubeflowPipelinesSubmitterProps {\r\n  componentSpec?: ComponentSpec;\r\n}\r\n\r\nconst KubeflowPipelinesSubmitter = ({\r\n  componentSpec,\r\n}: KubeflowPipelinesSubmitterProps) => {\r\n  const [message, setMessage] = useState(\"\");\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={async (e) => {\r\n          const response = await fetch(\r\n            \"https://704a448c0a693194-dot-us-central2.pipelines.googleusercontent.com/apis/v1beta1/runs\",\r\n            {\r\n              headers: new Headers({\r\n              }),\r\n            }\r\n          );\r\n          const responseText = await response.text();\r\n          setMessage(responseText);\r\n        }}\r\n      >\r\n        List KFP runs\r\n      </button>\r\n      <span>{message}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KubeflowPipelinesSubmitter;\r\n","import { useState } from 'react';\r\nimport {\r\n  ReactFlowProvider,\r\n  Controls,\r\n  Background,\r\n  MiniMap,\r\n  Node,\r\n  useStoreState,\r\n} from 'react-flow-renderer';\r\nimport yaml from \"js-yaml\";\r\n\r\nimport { ComponentSpec } from '../componentSpec';\r\nimport GraphComponentSpecFlow, { augmentComponentSpec } from './GraphComponentSpecFlow';\r\nimport Sidebar from './Sidebar';\r\nimport { loadComponentFromUrl, XGBOOST_PIPELINE_URL } from \"./samplePipelines\";\r\n\r\nimport './dnd.css';\r\n\r\nconst GRID_SIZE = 10;\r\nconst SAVED_COMPONENT_SPEC_KEY = \"autosaved.component.yaml\";\r\n\r\nconst saveComponentSpec = (componentSpec: ComponentSpec, nodes?: Node[]) => {\r\n  try {\r\n    if (nodes !== undefined) {\r\n      if (nodes.length === 0) {\r\n        console.warn(\"saveComponentSpec: nodes.length === 0\");\r\n      }\r\n      componentSpec = augmentComponentSpec(componentSpec, nodes, true, true);\r\n    }\r\n    const componentText = yaml.dump(componentSpec, { lineWidth: 10000 });\r\n    window.sessionStorage.setItem(SAVED_COMPONENT_SPEC_KEY, componentText);\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n}\r\n\r\nconst loadComponentSpec = () => {\r\n  try {\r\n    const componentText = window.sessionStorage.getItem(SAVED_COMPONENT_SPEC_KEY);\r\n    if (componentText !== null) {\r\n      const loadedYaml = yaml.load(componentText);\r\n      if (loadedYaml !== null && typeof loadedYaml === \"object\") {\r\n        //TODO: Validate that the spec is valid\r\n        const savedComponentSpec = loadedYaml as ComponentSpec;\r\n        return savedComponentSpec;\r\n      }\r\n    }\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n  return undefined;\r\n}\r\n\r\n// Auto-saver is extracted to its own child component since useStoreState in the parent causes inifinite re-rendering\r\n// (each render of GraphComponentSpecFlow seems to change the Redux store).\r\n// This component seems to be triggered for every node movement, so even pure layout changes are saved.\r\nconst ComponentSpecAutoSaver = ({\r\n  componentSpec,\r\n}: {\r\n  componentSpec: ComponentSpec;\r\n}) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n  // Fixing issue where a React error would cause all node positions to be recorded as undefined (`!<tag:yaml.org,2002:js/undefined>`)\r\n  // nodes should never be undefined in normal situation.\r\n  if (nodes !== undefined && nodes.length > 0) {\r\n    saveComponentSpec(componentSpec, nodes);\r\n  }\r\n  return null;\r\n};\r\n\r\nconst DnDFlow = () => {\r\n  const [componentSpec, setComponentSpec] = useState<ComponentSpec | undefined>();\r\n\r\n  if (componentSpec === undefined) {\r\n    const restoredComponentSpec = loadComponentSpec();\r\n    if (restoredComponentSpec === undefined) {\r\n      loadComponentFromUrl(XGBOOST_PIPELINE_URL).then(setComponentSpec);\r\n    } else {\r\n      setComponentSpec(restoredComponentSpec);\r\n    }\r\n  };\r\n\r\n  if (componentSpec === undefined) {\r\n    return (<></>);\r\n  }\r\n\r\n  return (\r\n    <div className=\"dndflow\">\r\n      <ReactFlowProvider>\r\n        <div className=\"reactflow-wrapper\">\r\n          <GraphComponentSpecFlow\r\n            componentSpec={componentSpec}\r\n            setComponentSpec={setComponentSpec}\r\n            deleteKeyCode='Delete'\r\n            multiSelectionKeyCode='Control'\r\n            snapToGrid={true}\r\n            snapGrid={[GRID_SIZE, GRID_SIZE]}\r\n          >\r\n            <MiniMap/>\r\n            <Controls />\r\n            <Background gap={GRID_SIZE}/>\r\n          </GraphComponentSpecFlow>\r\n        </div>\r\n        <Sidebar\r\n          componentSpec={componentSpec}\r\n          setComponentSpec={setComponentSpec}\r\n        />\r\n        <ComponentSpecAutoSaver componentSpec={componentSpec}/>\r\n      </ReactFlowProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DnDFlow;\r\n","import './App.css';\r\nimport DnDFlow from './DragNDrop/index';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" style={{width: \"100%\", height: \"100%\"}}>\r\n      <DnDFlow/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // Strict mode causes every component to be rendered twice in dev environment\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { ComponentSpec } from \"../componentSpec\";\r\nimport { downloadComponentDataWithCache } from \"../github\";\r\n\r\nconst TFX_PIPELINE_URL = \"https://raw.githubusercontent.com/Ark-kun/pipelines/2765b13699ac28de523f499eeaa9eb2ed9b8798a/components/deprecated/tfx/_samples/TFX.pipeline.component.yaml\"\r\nconst XGBOOST_PIPELINE_URL = \"https://raw.githubusercontent.com/Ark-kun/pipelines/77df9c97191a181fcd3cded83f147799d46eca20/components/XGBoost/_samples/sample_pipeline.pipeline.component.yaml\"\r\nconst PYTORCH_PIPELINE_URL = \"https://raw.githubusercontent.com/Ark-kun/pipelines/322c0c75f32d87acfd5da9c390dee0b5799bfdaf/components/PyTorch/_samples/Train_fully-connected_network.pipeline.component.yaml\"\r\nexport const DATA_PASSING_PIPELINE_URL = \"https://raw.githubusercontent.com/Ark-kun/pipelines/48cd62a5beb7ec32332711ea8aafc158ad8e12d2/samples/test/data_passing.pipeline.component.yaml\"\r\n\r\nconst preloadComponentReferences = async (\r\n  componentSpec: ComponentSpec,\r\n  componentMap?: Map<string, ComponentSpec>\r\n) => {\r\n  // This map is needed to improve efficiency and handle recursive components.\r\n  if (componentMap === undefined) {\r\n    componentMap = new Map<string, ComponentSpec>();\r\n  }\r\n  if (\"graph\" in componentSpec.implementation) {\r\n    for (const taskSpec of Object.values(\r\n      componentSpec.implementation.graph.tasks\r\n    )) {\r\n      const componentUrl = taskSpec.componentRef.url;\r\n      if (\r\n        taskSpec.componentRef.spec === undefined &&\r\n        componentUrl !== undefined\r\n      ) {\r\n        let taskComponentSpec = componentMap.get(componentUrl);\r\n        if (taskComponentSpec === undefined) {\r\n          taskComponentSpec = await downloadComponentDataWithCache(\r\n            componentUrl\r\n          );\r\n          componentMap.set(componentUrl, taskComponentSpec);\r\n        }\r\n        taskSpec.componentRef.spec = taskComponentSpec;\r\n        await preloadComponentReferences(taskComponentSpec, componentMap);\r\n      }\r\n    }\r\n  }\r\n  return componentSpec;\r\n};\r\n\r\nconst loadComponentFromUrl = async (\r\n  url: string,\r\n  preloadChildComponentSpecs = true\r\n) => {\r\n  let componentSpec = await downloadComponentDataWithCache(url);\r\n  if (preloadChildComponentSpecs) {\r\n    componentSpec = await preloadComponentReferences(componentSpec);\r\n  }\r\n  return componentSpec;\r\n};\r\n\r\nexport { loadComponentFromUrl, preloadComponentReferences, XGBOOST_PIPELINE_URL, PYTORCH_PIPELINE_URL, TFX_PIPELINE_URL };\r\n"],"sourceRoot":""}