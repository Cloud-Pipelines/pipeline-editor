{"version":3,"sources":["DragNDrop/index.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx","DragNDrop/KubeflowPipelines.tsx","DragNDrop/DebugScratch.tsx","DragNDrop/samplePipelines.ts","componentStore.ts","componentSpec.ts","DragNDrop/ArgumentsEditorDialog.tsx","DragNDrop/ComponentTaskNode.tsx","DragNDrop/GraphComponentSpecFlow.tsx","github.ts","DragNDrop/DraggableComponent.tsx","DragNDrop/ArgumentsEditor.tsx","DragNDrop/vertexPipelineSpec.ts","DragNDrop/vertexAiCompiler.ts","DragNDrop/Sidebar.tsx","DragNDrop/ComponentLibrary.tsx","DragNDrop/ComponentSearch.tsx","DragNDrop/GraphComponentExporter.tsx","DragNDrop/GoogleCloud.tsx","DragNDrop/VertexAiExporter.tsx","DragNDrop/UserComponentLibrary.tsx","DragNDrop/sampleComponentLibrary.ts","DragNDrop/GraphComponentLink.tsx","DragNDrop/SamplePipelineLibrary.tsx","DragNDrop/PipelineLibrary.tsx"],"names":["SAVED_COMPONENT_SPEC_KEY","ComponentSpecAutoSaver","componentSpec","nodes","useStoreState","store","undefined","length","console","warn","augmentComponentSpec","componentText","yaml","dump","lineWidth","window","sessionStorage","setItem","err","message","startsWith","error","saveComponentSpec","isAppleOS","navigator","platform","DnDFlow","useState","setComponentSpec","restoredComponentSpec","getItem","loadedYaml","load","loadComponentSpec","loadComponentFromUrl","XGBOOST_PIPELINE_URL","then","className","GraphComponentSpecFlow","deleteKeyCode","multiSelectionKeyCode","snapToGrid","snapGrid","gap","Sidebar","App","style","width","height","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","KubeflowPipelinesSubmitter","setMessage","onClick","e","a","Headers","text","responseText","DebugScratch","isDialogOpen","setIsDialogOpen","KubeflowPipelines","Accordion","AccordionSummary","Dialog","open","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","color","autoFocus","DATA_PASSING_PIPELINE_URL","GOOGLE_CLOUD_OPTIMIZER_PIPELINE_URL","PRELOADED_PIPELINE_URLS","preloadComponentReferences","componentMap","Map","implementation","Object","values","graph","tasks","taskSpec","componentUrl","componentRef","url","spec","taskComponentSpec","downloadComponentDataWithCache","set","preloadChildComponentSpecs","DB_NAME","DIGEST_TO_COMPONENT_SPEC_DB_TABLE_NAME","URL_TO_DIGEST_DB_TABLE_NAME","DIGEST_TO_CANONICAL_URL_DB_TABLE_NAME","FILE_STORE_DB_TABLE_NAME_PREFIX","calculateHashDigestHex","data","dataBytes","TextEncoder","encode","crypto","subtle","digest","hashBuffer","hashArray","Array","from","Uint8Array","hashHex","map","b","toString","padStart","join","storeComponentSpec","digestToComponentSpecDb","localForage","createInstance","name","storeName","digestToComponentNameDb","loadComponentAsRefFromText","componentString","TextDecoder","decode","componentBytes","loadedObj","Error","isValidComponentSpec","storeComponentText","digestToComponentTextDb","storeComponentFromUrl","setUrlAsCanonical","urlToDigestDb","existingDigest","arrayBuffer","componentData","digestToCanonicalUrlDb","existingCanonicalUrl","debug","makeNameUniqueByAddingIndex","existingNames","finalName","index","has","addComponentRefToList","listName","fileName","upgradeAllComponentListDbs","tableName","componentListDb","Set","keys","uniqueFileName","fileEntry","addComponentToListByText","defaultFileName","getAllComponentsFromList","componentRefs","iterate","iterationNumber","push","upgradeSingleComponentListDb","componentListVersionKey","componentStoreSettingsDb","componentListTableName","listFormatVersion","componentRefListsDb","componentRefList","emptyNameReplacement","add","obj","isContainerImplementation","isGraphImplementation","ArgumentsEditorDialog","closeEditor","setArguments","arguments","currentArguments","setCurrentArguments","onSubmit","preventDefault","position","background","border","borderRadius","padding","ArgumentsEditor","componentArguments","setComponentArguments","type","inputHandlePosition","Position","Top","outputHandlePosition","Bottom","isComponentTaskNode","node","generateHandles","ioSpecs","handleType","idPrefix","inputsWithMissingArguments","handleComponents","numHandles","i","ioSpec","positionPercentString","String","left","top","ioTypeName","classNames","replace","includes","generateLabelStyle","labelClasses","labelStyle","isConnectable","title","maxLabelWidthPx","maxWidth","ComponentTaskNode","isArgumentsEditorOpen","setIsArgumentsEditorOpen","label","inputsWithInvalidArguments","inputs","filter","inputSpec","optional","default","inputHandles","inputSpecs","generateInputHandles","outputHandles","outputs","concat","onDoubleClick","taskId","SDK_ANNOTATION_VALUE","includeSpecs","includePositions","getNodePositionAnnotation","JSON","stringify","x","__rf","y","nodeXPositionComparer","n1","n2","deltaX","deltaY","nodeYPositionComparer","inputNodes","sort","outputNodes","taskNodes","inputPositionMap","inputOrderMap","inputOrderComparer","Infinity","outputPositionMap","outputOrderMap","outputOrderComparer","taskPositionMap","taskOrderMap","taskOrderComparer","pairA","pairB","newAnnotations","annotations","NODE_LAYOUT_ANNOTATION_KEY","newInputSpec","outputSpec","newOutputSpec","graphSpec","newTasks","fromEntries","entries","newTaskSpec","rebuildComponentSpec","description","metadata","rest","nodeTypes","task","memo","children","reactFlowInstance","setReactFlowInstance","layoutAnnotation","decodedPosition","parse","args","setTaskArguments","edges","flatMap","inputName","argument","taskOutput","outputName","source","sourceHandle","target","targetHandle","arrowHeadType","ArrowHeadType","ArrowClosed","graphInput","outputEdges","outputValues","elements","replaceComponentSpec","newComponentSpec","replaceGraphSpec","newGraphSpec","taskArguments","setTaskArgument","oldTaskSpecArguments","newTaskSpecArguments","removeTaskArgument","setGraphOutputValue","outputValue","newGraphOutputValues","removeGraphOutputValue","addConnection","connection","targetTaskInputName","sourceTaskOutputName","taskOutputArgument","graphInputArgument","removeEdge","edge","removeNode","newInputs","removeComponentInput","newOutputs","removeComponentOutput","removeTask","onConnect","params","onDragOver","event","dataTransfer","dropEffect","onDrop","droppedData","getData","droppedDataObject","nodeType","nodeData","dragOffsetX","dragOffsetY","dragStartOffsetData","dragStartOffset","offsetX","offsetY","project","clientX","clientY","nodePosition","positionAnnotations","mergedAnnotations","taskSpecWithAnnotation","getUniqueTaskName","getUniqueInputName","getUniqueOutputName","onEdgeUpdate","oldEdge","newConnection","onElementsRemove","elementsToRemove","element","isEdge","isNode","onLoad","_reactFlowInstance","SEARCH_CACHE_NAME","BLOB_CACHE_NAME","HASH_TO_CONTENT_DB_TABLE_NAME","HASH_TO_COMPONENT_NAME_DB_TABLE_NAME","URL_TO_HASH_DB_TABLE_NAME","HASH_TO_URL_DB_TABLE_NAME","URL_PROCESSING_VERSION_TABLE_NAME","BAD_HASHES_TABLE_NAME","httpGetWithCache","urlOrRequest","cacheName","updateIfInCache","caches","cache","response2","Promise","reject","searchGitHubCodeWithCache","query","page","order","encodedQuery","encodeURIComponent","encodedSort","encodedOrder","searchUrl","json","githubHtmlUrlToDownloadUrl","htmlUrl","getComponentUrlsAndHashes","users","urlsAndHashes","user","searchResults","items","item","html_url","hash","sha","resolve","setTimeout","blob","cacheAllComponents","urlsAndHashesIterator","urlToHashDb","hashToUrlDb","hashToContentDb","hashToComponentNameDb","urlProcessingVersionDb","badHashesDb","toLowerCase","badHashReason","downloadUrl","endsWith","cachedHash","urlVersion","Number","parseInt","getAllComponentsAsRefs","hashToComponentRef","cachePromise","forEach","searchComponentsByName","ref","DraggableComponent","componentReference","draggable","onDragStart","setData","nativeEvent","effectAllowed","shrinkToWidth","display","borderSpacing","tableLayout","value","placeholder","typeSpec","argumentIsRequiredButMissing","typeSpecString","textAlign","whiteSpace","overflow","textOverflow","verticalAlign","borderWidth","minWidth","required","pattern","onChange","disabled","PrimitiveTypeEnum","TriggerStrategy","sanitizePipelineInfoName","pipelineContextName","resolveCommandLine","containerSpec","container","inputsConsumedAsValue","inputsConsumedAsPath","convertArg","arg","inputValue","inputPath","outputPath","if","cond","else","ifCond","ifThen","ifElse","condEvaluatesToTrue","isPresent","taskArgument","unresolvedArgs","command","typeSpecToVertexPrimitiveTypeEnum","vertex","INT","DOUBLE","STRING","typeSpecToVertexParameterSpec","MAKE_ARTIFACT_COMPONENT_ID","MAKE_ARTIFACT_EXECUTOR_ID","MAKE_ARTIFACT_INPUT_NAME","MAKE_ARTIFACT_OUTPUT_NAME","makeArtifactTaskSpecTemplate","taskInfo","parameters","cachingOptions","enableCache","makeArtifactComponentSpec","executorLabel","inputDefinitions","outputDefinitions","artifacts","artifactType","schemaTitle","makeArtifactExecutorSpec","image","taskSpecToVertexTaskSpecComponentSpecAndExecutorSpec","generateTaskID","isRoot","resolvedCommandLine","vertexExecutorSpec","inputMap","vertexComponentInputsSpec","vertexComponentOutputsSpec","vertexComponentSpec","vertexTaskParameterArguments","runtimeValue","constantValue","stringValue","componentInputParameter","taskOutputParameter","producerTask","outputParameterKey","vertexMakeArtifactTaskSpecs","vertexTaskArtifactArguments","result","makeArtifactTaskId","makeArtifactTaskSpec","taskOutputArtifact","outputArtifactKey","componentInputArtifact","vertexTaskSpec","graphComponentSpecToVertexPipelineSpec","vertexExecutors","vertexComponents","vertexTasks","usedTaskIds","generateTaskId","prefix","vertexExecutorId","vertexComponentId","vertexTaskId","additionalTaskId","additionalTaskSpec","vertexPipelineSpec","pipelineInfo","sdkVersion","schemaVersion","deploymentSpec","executors","components","root","dag","generateVertexPipelineJobFromGraphComponent","gcsOutputDirectory","pipelineArguments","convertedPipelineArguments","key","pipelineSpec","pipelineJob","displayName","runtimeConfig","DebugScratchElement","NODE_ENV","require","fontWeight","input","output","componentGroups","COMPONENT_LIBRARY","DraggableComponentRow","useEffect","ComponentGroupList","category","componentUrls","ComponentLibrary","paddingLeft","COMPONENT_ORGS","SearchPanel","props","setError","firstTime","setFirstTime","isLoaded","setIsLoaded","setQuery","setItems","results","componentElements","fetchData","gtag","GraphComponentExporter","graphComponent","componentTextBlob","Blob","downloadLink","createObjectURL","download","LOCAL_STORAGE_GCS_OUTPUT_DIRECTORY_KEY","LOCAL_STORAGE_PROJECT_ID_KEY","LOCAL_STORAGE_REGION_KEY","LOCAL_STORAGE_PROJECT_IDS_KEY","CLIENT_ID","API_KEY","VERTEX_AI_PIPELINES_REGIONS","authorizeGoogleCloudClient","scopes","immediate","apiKey","clientId","gapi","client","setApiKey","auth","authorize","client_id","scope","authResult","receivedScopesString","receivedScopes","split","every","errorMessage","ensureGoogleCloudAuthorizesScopes","cloudresourcemanagerListProjects","request","path","aiplatformCreatePipelineJob","projectId","region","method","body","GoogleCloudSubmitter","localStorage","projects","setProjects","setProject","setRegion","setGcsOutputDirectory","pipelineJobWebUrl","setPipelineJobWebUrl","compilationError","setCompilationError","vertexPipelineJobJson","vertexPipelineJob","defaultInputValues","pipelineArgumentMap","pair","vertexPipelineJobUrl","readyToSubmit","pipelineJobName","pipelineJobId","slice","margin","htmlFor","list","projectIds","projectInfo","rel","VertexAiExporter","vertexPipelineSpecText","vertexPipelineSpecTextBlob","vertexPipelineSpecTextBlobUrl","USER_COMPONENTS_LIST_NAME","UserComponentLibrary","setErrorMessage","setComponentRefs","useCallback","acceptedFiles","file","reader","FileReader","onabort","onerror","onload","binaryStr","allComponentRefs","readAsArrayBuffer","useDropzone","getRootProps","getInputProps","isDragActive","minHeight","GraphComponentLink","downloadFileName","linkText","linkRef","SamplePipelineLibrary","all","loadedComponentRefs","marginLeft","USER_PIPELINES_LIST_NAME","PipelineLibrary","componentRef1","fileInput","useRef","componentLink","accept","files","current","click","textDecoration"],"mappings":"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","file":"static/js/main.9a3c3d7b.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport {\r\n  ReactFlowProvider,\r\n  Controls,\r\n  Background,\r\n  MiniMap,\r\n  Node,\r\n  useStoreState,\r\n} from 'react-flow-renderer';\r\nimport yaml from \"js-yaml\";\r\n\r\nimport { ComponentSpec } from '../componentSpec';\r\nimport GraphComponentSpecFlow, { augmentComponentSpec } from './GraphComponentSpecFlow';\r\nimport Sidebar from './Sidebar';\r\nimport { loadComponentFromUrl, XGBOOST_PIPELINE_URL } from \"./samplePipelines\";\r\n//import MainAppBar from \"./MainAppBar\"\r\n\r\nimport './dnd.css';\r\n\r\nconst GRID_SIZE = 10;\r\nconst SAVED_COMPONENT_SPEC_KEY = \"autosaved.component.yaml\";\r\n\r\nconst saveComponentSpec = (componentSpec: ComponentSpec, nodes?: Node[]) => {\r\n  try {\r\n    if (nodes !== undefined) {\r\n      if (nodes.length === 0) {\r\n        console.warn(\"saveComponentSpec: nodes.length === 0\");\r\n      }\r\n      componentSpec = augmentComponentSpec(componentSpec, nodes, true, true);\r\n    }\r\n    const componentText = yaml.dump(componentSpec, { lineWidth: 10000 });\r\n    window.sessionStorage.setItem(SAVED_COMPONENT_SPEC_KEY, componentText);\r\n  } catch(err) {\r\n    // TODO: Find a way to avoid the React/Redux race conditions causing this error.\r\n    if (err?.message?.startsWith(\"The nodes array does not\") !== true) {\r\n      console.error(err);\r\n    }\r\n  }\r\n}\r\n\r\nconst loadComponentSpec = () => {\r\n  try {\r\n    const componentText = window.sessionStorage.getItem(SAVED_COMPONENT_SPEC_KEY);\r\n    if (componentText !== null) {\r\n      const loadedYaml = yaml.load(componentText);\r\n      if (loadedYaml !== null && typeof loadedYaml === \"object\") {\r\n        //TODO: Validate that the spec is valid\r\n        const savedComponentSpec = loadedYaml as ComponentSpec;\r\n        return savedComponentSpec;\r\n      }\r\n    }\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n  return undefined;\r\n}\r\n\r\n// Auto-saver is extracted to its own child component since useStoreState in the parent causes infinite re-rendering\r\n// (each render of GraphComponentSpecFlow seems to change the Redux store).\r\n// This component seems to be triggered for every node movement, so even pure layout changes are saved.\r\nconst ComponentSpecAutoSaver = ({\r\n  componentSpec,\r\n}: {\r\n  componentSpec: ComponentSpec;\r\n}) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n  // Fixing issue where a React error would cause all node positions to be recorded as undefined (`!<tag:yaml.org,2002:js/undefined>`)\r\n  // nodes should never be undefined in normal situation.\r\n  if (nodes !== undefined && nodes.length > 0) {\r\n    saveComponentSpec(componentSpec, nodes);\r\n  }\r\n  return null;\r\n};\r\n\r\nconst isAppleOS = () =>\r\n  window.navigator.platform.startsWith(\"Mac\") ||\r\n  window.navigator.platform.startsWith(\"iPhone\") ||\r\n  window.navigator.platform.startsWith(\"iPad\") ||\r\n  window.navigator.platform.startsWith(\"iPod\");\r\n\r\nconst DnDFlow = () => {\r\n  const [componentSpec, setComponentSpec] = useState<ComponentSpec | undefined>();\r\n\r\n  if (componentSpec === undefined) {\r\n    const restoredComponentSpec = loadComponentSpec();\r\n    if (restoredComponentSpec === undefined) {\r\n      loadComponentFromUrl(XGBOOST_PIPELINE_URL).then(setComponentSpec);\r\n    } else {\r\n      setComponentSpec(restoredComponentSpec);\r\n    }\r\n  };\r\n\r\n  if (componentSpec === undefined) {\r\n    return (<></>);\r\n  }\r\n\r\n  return (<>\r\n    {/* <MainAppBar/> */}\r\n    <div className=\"dndflow\">\r\n      <ReactFlowProvider>\r\n        <div className=\"reactflow-wrapper\">\r\n          <GraphComponentSpecFlow\r\n            componentSpec={componentSpec}\r\n            setComponentSpec={setComponentSpec}\r\n            deleteKeyCode={isAppleOS() ? \"Backspace\" : \"Delete\"}\r\n            multiSelectionKeyCode={isAppleOS() ? \"Command\" : \"Control\"}\r\n            snapToGrid={true}\r\n            snapGrid={[GRID_SIZE, GRID_SIZE]}\r\n          >\r\n            <MiniMap/>\r\n            <Controls />\r\n            <Background gap={GRID_SIZE}/>\r\n          </GraphComponentSpecFlow>\r\n        </div>\r\n        <Sidebar\r\n          componentSpec={componentSpec}\r\n          setComponentSpec={setComponentSpec}\r\n        />\r\n        <ComponentSpecAutoSaver componentSpec={componentSpec}/>\r\n      </ReactFlowProvider>\r\n    </div>\r\n  </>);\r\n};\r\n\r\nexport default DnDFlow;\r\n","import './App.css';\r\nimport DnDFlow from './DragNDrop/index';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" style={{width: \"100%\", height: \"100%\"}}>\r\n      <DnDFlow/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  // Strict mode causes every component to be rendered twice in dev environment\r\n  //<App />,\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import { useState } from \"react\";\r\n\r\nimport { ComponentSpec } from \"../componentSpec\";\r\n\r\ninterface KubeflowPipelinesSubmitterProps {\r\n  componentSpec?: ComponentSpec;\r\n}\r\n\r\nconst KubeflowPipelinesSubmitter = ({\r\n  componentSpec,\r\n}: KubeflowPipelinesSubmitterProps) => {\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  //npm install axios\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={async (e) => {\r\n          // ! Works !\r\n          const response = await fetch(\r\n            \"https://addr-dot-us-central2.pipelines.googleusercontent.com/apis/v1beta1/runs\",\r\n            {\r\n              headers: new Headers({\r\n                \"Authorization\": \"Bearer \"\r\n              }),\r\n            }\r\n          );\r\n          const responseText = await response.text();\r\n          setMessage(responseText);\r\n        }}\r\n      >\r\n        List KFP runs\r\n      </button>\r\n      <button\r\n        onClick={async (e) => {\r\n          // Error: net::ERR_CERT_AUTHORITY_INVALID\r\n          const response = await fetch(\r\n            \"https://IP/api/v1/pods/\",\r\n            {\r\n              headers: new Headers({\r\n                \"Authorization\": \"Bearer \",\r\n                \"Content-Type\": \"application/json; charset=utf-8\"\r\n              }),\r\n            }\r\n          );\r\n          const responseText = await response.text();\r\n          setMessage(responseText);\r\n        }}\r\n      >\r\n        List K8s cluster objects\r\n      </button>\r\n      <span>{message}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KubeflowPipelinesSubmitter;\r\n","import KubeflowPipelinesSubmitter from \"./KubeflowPipelines\";\r\nimport {\r\n  Accordion,\r\n  AccordionSummary,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n} from \"@material-ui/core\";\r\nimport { ComponentSpec } from \"../componentSpec\";\r\nimport { useState } from \"react\";\r\n\r\ninterface DebugScratchProps {\r\n  componentSpec?: ComponentSpec;\r\n  setComponentSpec?: (componentSpec: ComponentSpec) => void;\r\n}\r\n\r\nconst DebugScratch = ({\r\n  componentSpec,\r\n  setComponentSpec,\r\n}: DebugScratchProps) => {\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n\r\n\r\n  return (\r\n    <>\r\n      <KubeflowPipelinesSubmitter componentSpec={componentSpec} />\r\n      <Accordion>\r\n        <AccordionSummary>Summary</AccordionSummary>\r\n      </Accordion>\r\n      <button onClick={(e) => {setIsDialogOpen(true)}}>Show dialog</button>\r\n      <Dialog\r\n        //open={open}\r\n        open={isDialogOpen}\r\n        //onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">\r\n          {\"Do something?\"}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n              foo bar\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button color=\"primary\" onClick={(e) => setIsDialogOpen(false)}>Disagree</Button>\r\n          <Button color=\"primary\" onClick={(e) => setIsDialogOpen(false)} autoFocus>\r\n            Agree\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DebugScratch;\r\n","import { ComponentSpec } from \"../componentSpec\";\r\nimport { downloadComponentDataWithCache } from \"../github\";\r\n\r\nconst TFX_PIPELINE_URL = \"https://raw.githubusercontent.com/Ark-kun/pipelines/2765b13699ac28de523f499eeaa9eb2ed9b8798a/components/deprecated/tfx/_samples/TFX.pipeline.component.yaml\"\r\nconst XGBOOST_PIPELINE_URL = \"https://raw.githubusercontent.com/Ark-kun/pipelines/2edfd25b5ee3a4aa149c24a225a50041fbd3662d/components/XGBoost/_samples/sample_pipeline.pipeline.component.yaml\"\r\nconst PYTORCH_PIPELINE_URL = \"https://raw.githubusercontent.com/Ark-kun/pipelines/237cd6bc0b6db26f615c22897be20aad77270b50/components/PyTorch/_samples/Train_fully-connected_network.pipeline.component.yaml\"\r\nexport const DATA_PASSING_PIPELINE_URL = \"https://raw.githubusercontent.com/Ark-kun/pipelines/b45c82e42588ee0a86b8875d1908d972275bfd2f/samples/test/data_passing.pipeline.component.yaml\"\r\nexport const GOOGLE_CLOUD_OPTIMIZER_PIPELINE_URL = \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/84e782224ff79a0690e84e7d66c93cec5089e041/components/google-cloud/Optimizer/_samples/Optimization.pipeline.component.yaml\"\r\n\r\nexport const PRELOADED_PIPELINE_URLS = [\r\n  XGBOOST_PIPELINE_URL,\r\n  PYTORCH_PIPELINE_URL,\r\n  TFX_PIPELINE_URL,\r\n];\r\n\r\nconst preloadComponentReferences = async (\r\n  componentSpec: ComponentSpec,\r\n  componentMap?: Map<string, ComponentSpec>\r\n) => {\r\n  // This map is needed to improve efficiency and handle recursive components.\r\n  if (componentMap === undefined) {\r\n    componentMap = new Map<string, ComponentSpec>();\r\n  }\r\n  if (\"graph\" in componentSpec.implementation) {\r\n    for (const taskSpec of Object.values(\r\n      componentSpec.implementation.graph.tasks\r\n    )) {\r\n      const componentUrl = taskSpec.componentRef.url;\r\n      if (\r\n        taskSpec.componentRef.spec === undefined &&\r\n        componentUrl !== undefined\r\n      ) {\r\n        let taskComponentSpec = componentMap.get(componentUrl);\r\n        if (taskComponentSpec === undefined) {\r\n          taskComponentSpec = await downloadComponentDataWithCache(\r\n            componentUrl\r\n          );\r\n          componentMap.set(componentUrl, taskComponentSpec);\r\n        }\r\n        taskSpec.componentRef.spec = taskComponentSpec;\r\n        await preloadComponentReferences(taskComponentSpec, componentMap);\r\n      }\r\n    }\r\n  }\r\n  return componentSpec;\r\n};\r\n\r\nconst loadComponentFromUrl = async (\r\n  url: string,\r\n  preloadChildComponentSpecs = true\r\n) => {\r\n  let componentSpec = await downloadComponentDataWithCache(url);\r\n  if (preloadChildComponentSpecs) {\r\n    componentSpec = await preloadComponentReferences(componentSpec);\r\n  }\r\n  return componentSpec;\r\n};\r\n\r\nexport { loadComponentFromUrl, preloadComponentReferences, XGBOOST_PIPELINE_URL, PYTORCH_PIPELINE_URL, TFX_PIPELINE_URL };\r\n","import yaml from \"js-yaml\";\r\nimport localForage from \"localforage\";\r\n\r\nimport {\r\n  ComponentSpec,\r\n  ComponentReference,\r\n  isValidComponentSpec,\r\n} from \"./componentSpec\";\r\n\r\n// IndexedDB: DB and table names\r\nconst DB_NAME = \"components\";\r\nconst DIGEST_TO_DATA_DB_TABLE_NAME = \"digest_to_component_data\";\r\nconst DIGEST_TO_COMPONENT_SPEC_DB_TABLE_NAME = \"digest_to_component_spec\";\r\nconst DIGEST_TO_COMPONENT_NAME_DB_TABLE_NAME = \"digest_to_component_name\";\r\nconst URL_TO_DIGEST_DB_TABLE_NAME = \"url_to_digest\";\r\nconst DIGEST_TO_CANONICAL_URL_DB_TABLE_NAME = \"digest_to_canonical_url\";\r\nconst COMPONENT_REF_LISTS_DB_TABLE_NAME = \"component_ref_lists\";\r\nconst COMPONENT_STORE_SETTINGS_DB_TABLE_NAME = \"component_store_settings\";\r\nconst FILE_STORE_DB_TABLE_NAME_PREFIX = \"file_store_\";\r\n\r\nexport interface ComponentReferenceWithSpec extends ComponentReference {\r\n  spec: ComponentSpec;\r\n  digest: string;\r\n}\r\n\r\nconst calculateHashDigestHex = async (data: string | ArrayBuffer) => {\r\n  const dataBytes =\r\n    typeof data === \"string\" ? new TextEncoder().encode(data) : data;\r\n  const hashBuffer = await crypto.subtle.digest(\"SHA-256\", dataBytes);\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n  const hashHex = hashArray\r\n    .map((b) => b.toString(16).padStart(2, \"0\"))\r\n    .join(\"\");\r\n  return hashHex;\r\n};\r\n\r\nconst storeComponentSpec = async (\r\n  digest: string,\r\n  componentSpec: ComponentSpec\r\n) => {\r\n  const digestToComponentSpecDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: DIGEST_TO_COMPONENT_SPEC_DB_TABLE_NAME,\r\n  });\r\n  const digestToComponentNameDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: DIGEST_TO_COMPONENT_NAME_DB_TABLE_NAME,\r\n  });\r\n  await digestToComponentSpecDb.setItem(digest, componentSpec);\r\n  if (componentSpec.name !== undefined) {\r\n    await digestToComponentNameDb.setItem(digest, componentSpec.name);\r\n  }\r\n};\r\n\r\nexport const loadComponentAsRefFromText = async (\r\n  componentText: string | ArrayBuffer\r\n) => {\r\n  const componentString =\r\n    typeof componentText === \"string\"\r\n      ? componentText\r\n      : new TextDecoder().decode(componentText);\r\n  const componentBytes =\r\n    typeof componentText === \"string\"\r\n      ? new TextEncoder().encode(componentText)\r\n      : componentText;\r\n\r\n  const loadedObj = yaml.load(componentString);\r\n  if (typeof loadedObj !== \"object\" || loadedObj === null) {\r\n    throw Error(`componentText is not a YAML-encoded object: ${loadedObj}`);\r\n  }\r\n  if (!isValidComponentSpec(loadedObj)) {\r\n    throw Error(\r\n      `componentText does not encode a valid pipeline component: ${loadedObj}`\r\n    );\r\n  }\r\n  const componentSpec: ComponentSpec = loadedObj;\r\n\r\n  const digest = await calculateHashDigestHex(componentBytes);\r\n  const componentRef: ComponentReferenceWithSpec = {\r\n    spec: componentSpec,\r\n    digest: digest,\r\n  };\r\n  return componentRef;\r\n};\r\n\r\nexport const loadComponentAsRefFromUrl = async (url: string) => {\r\n  const response = await fetch(url);\r\n  const componentData = await response.arrayBuffer();\r\n  let componentRef = await loadComponentAsRefFromText(componentData);\r\n  componentRef.url = url;\r\n  return componentRef;\r\n};\r\n\r\nexport const storeComponentText = async (\r\n  componentText: string | ArrayBuffer\r\n) => {\r\n  const componentBytes =\r\n    typeof componentText === \"string\"\r\n      ? new TextEncoder().encode(componentText)\r\n      : componentText;\r\n  const componentRef = await loadComponentAsRefFromText(componentText);\r\n  const digestToComponentTextDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: DIGEST_TO_DATA_DB_TABLE_NAME,\r\n  });\r\n  await digestToComponentTextDb.setItem(componentRef.digest, componentBytes);\r\n  await storeComponentSpec(componentRef.digest, componentRef.spec);\r\n\r\n  return componentRef;\r\n};\r\n\r\nexport const getAllComponentsAsRefs = async () => {\r\n  const digestToComponentSpecDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: DIGEST_TO_COMPONENT_SPEC_DB_TABLE_NAME,\r\n  });\r\n\r\n  // TODO: Rewrite as async generator\r\n  let digestToComponentRef = new Map<string, ComponentReferenceWithSpec>();\r\n  await digestToComponentSpecDb.iterate<ComponentSpec, void>(\r\n    (componentSpec, digest, iterationNumber) => {\r\n      const componentRef: ComponentReferenceWithSpec = {\r\n        spec: componentSpec,\r\n        digest: digest,\r\n      };\r\n      digestToComponentRef.set(digest, componentRef);\r\n    }\r\n  );\r\n  await addCanonicalUrlsToComponentReferences(digestToComponentRef);\r\n\r\n  const componentRefs = Array.from(digestToComponentRef.values());\r\n  return componentRefs;\r\n};\r\n\r\nconst addCanonicalUrlsToComponentReferences = async (\r\n  digestToComponentRef: Map<string, ComponentReference>\r\n) => {\r\n  const digestToCanonicalUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: DIGEST_TO_CANONICAL_URL_DB_TABLE_NAME,\r\n  });\r\n  await digestToCanonicalUrlDb.iterate<string, void>(\r\n    (url, digest, iterationNumber) => {\r\n      let componentRef = digestToComponentRef.get(digest);\r\n      if (componentRef === undefined) {\r\n        console.error(\r\n          `Component db corrupted: Component with url ${url} and digest ${digest} has no content in the DB.`\r\n        );\r\n      } else {\r\n        componentRef.url = url;\r\n      }\r\n    }\r\n  );\r\n};\r\n\r\nexport const searchComponentsByName = async (name: string) => {\r\n  const componentRefs = await getAllComponentsAsRefs();\r\n  return componentRefs.filter(\r\n    (ref) => ref.spec.name?.toLowerCase().includes(name.toLowerCase()) ?? false\r\n  );\r\n};\r\n\r\nexport const storeComponentFromUrl = async (\r\n  url: string,\r\n  setUrlAsCanonical = false\r\n) => {\r\n  const urlToDigestDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_TO_DIGEST_DB_TABLE_NAME,\r\n  });\r\n  const digestToComponentSpecDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: DIGEST_TO_COMPONENT_SPEC_DB_TABLE_NAME,\r\n  });\r\n\r\n  const existingDigest = await urlToDigestDb.getItem<string>(url);\r\n  if (existingDigest !== null) {\r\n    const componentSpec = await digestToComponentSpecDb.getItem<ComponentSpec>(\r\n      existingDigest\r\n    );\r\n    if (componentSpec !== null) {\r\n      const componentRef: ComponentReferenceWithSpec = {\r\n        url: url,\r\n        digest: existingDigest,\r\n        spec: componentSpec,\r\n      };\r\n      return componentRef;\r\n    } else {\r\n      console.error(\r\n        `Component db is corrupted: Component with url ${url} was added before with digest ${existingDigest} but now has no content in the DB.`\r\n      );\r\n    }\r\n  }\r\n\r\n  const response = await fetch(url);\r\n  const componentData = await response.arrayBuffer();\r\n  let componentRef = await storeComponentText(componentData);\r\n  componentRef.url = url;\r\n  const digest = componentRef.digest;\r\n  if (digest === undefined) {\r\n    console.error(\r\n      `Cannot happen: storeComponentText has returned componentReference with digest === undefined.`\r\n    );\r\n    return componentRef;\r\n  }\r\n  if (existingDigest !== null && digest !== existingDigest) {\r\n    console.error(\r\n      `Component db is corrupted: Component with url ${url} previously had digest ${existingDigest} but now has digest ${digest}.`\r\n    );\r\n  }\r\n  const digestToCanonicalUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: DIGEST_TO_CANONICAL_URL_DB_TABLE_NAME,\r\n  });\r\n  const existingCanonicalUrl = await digestToCanonicalUrlDb.getItem<string>(\r\n    digest\r\n  );\r\n  if (existingCanonicalUrl === null) {\r\n    await digestToCanonicalUrlDb.setItem(digest, url);\r\n  } else {\r\n    if (url !== existingCanonicalUrl) {\r\n      console.debug(\r\n        `The component with digest \"${digest}\" is being loaded from \"${url}\", but was previously loaded from \"${existingCanonicalUrl}\".` +\r\n          (setUrlAsCanonical ? \" Changing the canonical url.\" : \"\")\r\n      );\r\n      if (setUrlAsCanonical) {\r\n        await digestToCanonicalUrlDb.setItem(digest, url);\r\n      }\r\n    }\r\n  }\r\n  // Updating the urlToDigestDb last, because it's used to check for cached entries.\r\n  // So we need to be sure that everything has been updated correctly.\r\n  await urlToDigestDb.setItem(url, digest);\r\n  return componentRef;\r\n};\r\n\r\ninterface ComponentFileEntry {\r\n  componentRef: ComponentReferenceWithSpec;\r\n}\r\n\r\nconst makeNameUniqueByAddingIndex = (\r\n  name: string,\r\n  existingNames: Set<string>\r\n): string => {\r\n  let finalName = name;\r\n  let index = 1;\r\n  while (existingNames.has(finalName)) {\r\n    index++;\r\n    finalName = name + \" \" + index.toString();\r\n  }\r\n  return finalName;\r\n};\r\n\r\nexport const addComponentRefToList = async (\r\n  listName: string,\r\n  componentRef: ComponentReferenceWithSpec,\r\n  fileName: string = \"Component\"\r\n) => {\r\n  await upgradeAllComponentListDbs();\r\n  const tableName = FILE_STORE_DB_TABLE_NAME_PREFIX + listName;\r\n  const componentListDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: tableName,\r\n  });\r\n  const existingNames = new Set<string>(await componentListDb.keys());\r\n  const uniqueFileName = makeNameUniqueByAddingIndex(fileName, existingNames);\r\n  const fileEntry: ComponentFileEntry = {\r\n    componentRef: componentRef,\r\n  };\r\n  await componentListDb.setItem(uniqueFileName, fileEntry);\r\n  return componentRef;\r\n};\r\n\r\nexport const addComponentToListByUrl = async (\r\n  listName: string,\r\n  url: string,\r\n  defaultFileName: string = \"Component\"\r\n) => {\r\n  const componentRef = await storeComponentFromUrl(url);\r\n  return addComponentRefToList(\r\n    listName,\r\n    componentRef,\r\n    componentRef.spec.name ?? defaultFileName\r\n  );\r\n};\r\n\r\nexport const addComponentToListByText = async (\r\n  listName: string,\r\n  componentText: string | ArrayBuffer,\r\n  defaultFileName: string = \"Component\"\r\n) => {\r\n  const componentRef = await storeComponentText(componentText);\r\n  return addComponentRefToList(\r\n    listName,\r\n    componentRef,\r\n    componentRef.spec.name ?? defaultFileName\r\n  );\r\n};\r\n\r\nexport const getAllComponentsFromList = async (listName: string) => {\r\n  await upgradeAllComponentListDbs();\r\n  const tableName = FILE_STORE_DB_TABLE_NAME_PREFIX + listName;\r\n  const componentListDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: tableName,\r\n  });\r\n  let componentRefs: ComponentReferenceWithSpec[] = [];\r\n  await componentListDb.iterate<ComponentFileEntry, void>(\r\n    (fileEntry, fileName, iterationNumber) => {\r\n      componentRefs.push(fileEntry.componentRef);\r\n    }\r\n  );\r\n  return componentRefs;\r\n};\r\n\r\n// TODO: Remove the upgrade code in several weeks.\r\nconst upgradeAllComponentListDbs = async () => {\r\n  for (const listName of [\"user_components\", \"user_pipelines\"]) {\r\n    await upgradeSingleComponentListDb(listName);\r\n  }\r\n};\r\n\r\nconst upgradeSingleComponentListDb = async (listName: string) => {\r\n  const componentListVersionKey = \"component_list_format_version_\" + listName;\r\n  const componentStoreSettingsDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: COMPONENT_STORE_SETTINGS_DB_TABLE_NAME,\r\n  });\r\n  const componentListTableName = FILE_STORE_DB_TABLE_NAME_PREFIX + listName;\r\n  const componentListDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: componentListTableName,\r\n  });\r\n  const listFormatVersion =\r\n    (await componentStoreSettingsDb.getItem<number>(componentListVersionKey)) ??\r\n    1;\r\n  if (listFormatVersion === 1) {\r\n    console.log(`componentStore: Upgrading the component list DB ${listName}`);\r\n    const componentRefListsDb = localForage.createInstance({\r\n      name: DB_NAME,\r\n      storeName: COMPONENT_REF_LISTS_DB_TABLE_NAME,\r\n    });\r\n    const componentRefList: ComponentReferenceWithSpec[] =\r\n      (await componentRefListsDb.getItem(listName)) ?? [];\r\n\r\n    let existingNames = new Set<string>();\r\n    const emptyNameReplacement =\r\n      listName === \"user_pipelines\" ? \"Pipeline\" : \"Component\";\r\n    for (const componentRef of componentRefList) {\r\n      const fileName = componentRef.spec.name ?? emptyNameReplacement;\r\n      const uniqueFileName = makeNameUniqueByAddingIndex(\r\n        fileName,\r\n        existingNames\r\n      );\r\n      const fileEntry: ComponentFileEntry = {\r\n        componentRef: componentRef,\r\n      };\r\n      await componentListDb.setItem(uniqueFileName, fileEntry);\r\n      existingNames.add(uniqueFileName);\r\n    }\r\n    await componentStoreSettingsDb.setItem(componentListVersionKey, 2);\r\n    console.log(`componentStore: Upgraded the component list DB ${listName}`);\r\n  } else if (listFormatVersion === 2) {\r\n    return;\r\n  } else {\r\n    throw Error(\r\n      `upgradeComponentListDb: Component list version is ${listFormatVersion} for the list ${listName}`\r\n    );\r\n  }\r\n};\r\n","export type MySchema = ComponentSpec;\r\nexport type TypeSpecType =\r\n  | string\r\n  | {\r\n      [k: string]: TypeSpecType;\r\n    };\r\nexport interface InputOutputSpec {\r\n  name: string;\r\n  type?: TypeSpecType;\r\n  description?: string;\r\n  annotations?: {\r\n    [k: string]: unknown;\r\n  };\r\n}\r\n/**\r\n * Describes the component input specification\r\n */\r\nexport interface InputSpec extends InputOutputSpec {\r\n  name: string;\r\n  type?: TypeSpecType;\r\n  description?: string;\r\n  default?: string;\r\n  optional?: boolean;\r\n  annotations?: {\r\n    [k: string]: unknown;\r\n  };\r\n}\r\n/**\r\n * Describes the component output specification\r\n */\r\nexport interface OutputSpec extends InputOutputSpec {\r\n  name: string;\r\n  type?: TypeSpecType;\r\n  description?: string;\r\n  annotations?: {\r\n    [k: string]: unknown;\r\n  };\r\n}\r\n/**\r\n * Represents the command-line argument placeholder that will be replaced at run-time by the input argument value.\r\n */\r\nexport interface InputValuePlaceholder {\r\n  /**\r\n   * Name of the input.\r\n   */\r\n  inputValue: string;\r\n}\r\n/**\r\n * Represents the command-line argument placeholder that will be replaced at run-time by a local file path pointing to a file containing the input argument value.\r\n */\r\nexport interface InputPathPlaceholder {\r\n  /**\r\n   * Name of the input.\r\n   */\r\n  inputPath: string;\r\n}\r\n/**\r\n * Represents the command-line argument placeholder that will be replaced at run-time by a local file path pointing to a file where the program should write its output data.\r\n */\r\nexport interface OutputPathPlaceholder {\r\n  /**\r\n   * Name of the output.\r\n   */\r\n  outputPath: string;\r\n}\r\nexport type StringOrPlaceholder =\r\n  | string\r\n  | InputValuePlaceholder\r\n  | InputPathPlaceholder\r\n  | OutputPathPlaceholder\r\n  | ConcatPlaceholder\r\n  | IfPlaceholder;\r\n/**\r\n * Represents the command-line argument placeholder that will be replaced at run-time by the concatenated values of its items.\r\n */\r\nexport interface ConcatPlaceholder {\r\n  /**\r\n   * Items to concatenate\r\n   */\r\n  concat: StringOrPlaceholder[];\r\n}\r\n/**\r\n * Represents the command-line argument placeholder that will be replaced at run-time by a boolean value specifying whether the caller has passed an argument for the specified optional input.\r\n */\r\nexport interface IsPresentPlaceholder {\r\n  /**\r\n   * Name of the input.\r\n   */\r\n  isPresent: string;\r\n}\r\nexport type IfConditionArgumentType =\r\n  | IsPresentPlaceholder\r\n  | boolean\r\n  | string\r\n  | InputValuePlaceholder;\r\nexport type ListOfStringsOrPlaceholders = StringOrPlaceholder[];\r\n/**\r\n * Represents the command-line argument placeholder that will be replaced at run-time by a boolean value specifying whether the caller has passed an argument for the specified optional input.\r\n */\r\nexport interface IfPlaceholder {\r\n  if: {\r\n    cond: IfConditionArgumentType;\r\n    then: ListOfStringsOrPlaceholders;\r\n    else?: ListOfStringsOrPlaceholders;\r\n  };\r\n}\r\nexport interface ContainerSpec {\r\n  /**\r\n   * Docker image name.\r\n   */\r\n  image: string;\r\n  /**\r\n   * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided.\r\n   */\r\n  command?: StringOrPlaceholder[];\r\n  /**\r\n   * Arguments to the entrypoint. The docker image's CMD is used if this is not provided.\r\n   */\r\n  args?: StringOrPlaceholder[];\r\n  /**\r\n   * List of environment variables to set in the container.\r\n   */\r\n  env?: {\r\n    [k: string]: StringOrPlaceholder;\r\n  };\r\n}\r\n/**\r\n * Represents the container component implementation.\r\n */\r\nexport interface ContainerImplementation {\r\n  container: ContainerSpec;\r\n}\r\nexport type ImplementationType = ContainerImplementation | GraphImplementation;\r\nexport interface MetadataSpec {\r\n  annotations?: {\r\n    [k: string]: unknown;\r\n  };\r\n}\r\n/**\r\n * Component specification. Describes the metadata (name, description, source), the interface (inputs and outputs) and the implementation of the component.\r\n */\r\nexport interface ComponentSpec {\r\n  name?: string;\r\n  description?: string;\r\n  inputs?: InputSpec[];\r\n  outputs?: OutputSpec[];\r\n  implementation: ImplementationType;\r\n  metadata?: MetadataSpec;\r\n}\r\n/**\r\n * Component reference. Contains information that can be used to locate and load a component by name, digest or URL\r\n */\r\nexport interface ComponentReference {\r\n  name?: string;\r\n  digest?: string;\r\n  tag?: string;\r\n  url?: string;\r\n  spec?: ComponentSpec;\r\n}\r\n/**\r\n * Represents the component argument value that comes from the graph component input.\r\n */\r\nexport interface GraphInputArgument {\r\n  /**\r\n   * References the input of the graph/pipeline.\r\n   */\r\n  graphInput: {\r\n    inputName: string;\r\n    type?: TypeSpecType;\r\n  };\r\n}\r\n/**\r\n * Represents the component argument value that comes from the output of a sibling task.\r\n */\r\nexport interface TaskOutputArgument {\r\n  /**\r\n   * References the output of a sibling task.\r\n   */\r\n  taskOutput: {\r\n    taskId: string;\r\n    outputName: string;\r\n    type?: TypeSpecType;\r\n  };\r\n}\r\nexport type ArgumentType = string | GraphInputArgument | TaskOutputArgument;\r\n/**\r\n * Pair of operands for a binary operation.\r\n */\r\nexport interface TwoArgumentOperands {\r\n  op1: ArgumentType;\r\n  op2: ArgumentType;\r\n}\r\n/**\r\n * Pair of operands for a binary logical operation.\r\n */\r\nexport interface TwoLogicalOperands {\r\n  op1: PredicateType;\r\n  op2: PredicateType;\r\n}\r\n/**\r\n * Optional configuration that specifies how the task should be executed. Can be used to set some platform-specific options.\r\n */\r\nexport type PredicateType =\r\n  | {\r\n      \"==\": TwoArgumentOperands;\r\n    }\r\n  | {\r\n      \"!=\": TwoArgumentOperands;\r\n    }\r\n  | {\r\n      \">\": TwoArgumentOperands;\r\n    }\r\n  | {\r\n      \">=\": TwoArgumentOperands;\r\n    }\r\n  | {\r\n      \"<\": TwoArgumentOperands;\r\n    }\r\n  | {\r\n      \"<=\": TwoArgumentOperands;\r\n    }\r\n  | {\r\n      and: TwoLogicalOperands;\r\n    }\r\n  | {\r\n      or: TwoLogicalOperands;\r\n    }\r\n  | {\r\n      not: PredicateType;\r\n    };\r\n\r\n/**\r\n * Optional configuration that specifies how the task should be retried if it fails.\r\n */\r\nexport interface RetryStrategySpec {\r\n  maxRetries?: number;\r\n}\r\n/**\r\n * Optional configuration that specifies how the task execution may be skipped if the output data exist in cache.\r\n */\r\nexport interface CachingStrategySpec {\r\n  maxCacheStaleness?: string;\r\n}\r\n\r\nexport interface ExecutionOptionsSpec {\r\n  retryStrategy?: RetryStrategySpec;\r\n  cachingStrategy?: CachingStrategySpec;\r\n}\r\n/**\r\n * 'Task specification. Task is a configured component - a component supplied with arguments and other applied configuration changes.\r\n */\r\nexport interface TaskSpec {\r\n  componentRef: ComponentReference;\r\n  arguments?: {\r\n    [k: string]: ArgumentType;\r\n  };\r\n  isEnabled?: PredicateType;\r\n  executionOptions?: ExecutionOptionsSpec;\r\n  annotations?: {\r\n    [k: string]: unknown;\r\n  };\r\n}\r\n/**\r\n * Describes the graph component implementation. It represents a graph of component tasks connected to the upstream sources of data using the argument specifications. It also describes the sources of graph output values.\r\n */\r\nexport interface GraphSpec {\r\n  tasks: {\r\n    [k: string]: TaskSpec;\r\n  };\r\n  outputValues?: {\r\n    [k: string]: TaskOutputArgument;\r\n  };\r\n}\r\n/**\r\n * Represents the graph component implementation.\r\n */\r\nexport interface GraphImplementation {\r\n  graph: GraphSpec;\r\n}\r\n\r\n// Type guards\r\nexport const isValidComponentSpec = (obj: object): obj is ComponentSpec =>\r\n  \"implementation\" in obj;\r\n\r\nexport const isContainerImplementation = (\r\n  implementation: ImplementationType\r\n): implementation is ContainerImplementation => \"container\" in implementation;\r\n\r\nexport const isGraphImplementation = (\r\n  implementation: ImplementationType\r\n): implementation is GraphImplementation => \"graph\" in implementation;\r\n","import { useState } from \"react\";\r\nimport { ArgumentType, TaskSpec } from \"../componentSpec\";\r\nimport ArgumentsEditor from \"./ArgumentsEditor\";\r\n\r\ninterface ArgumentsEditorDialogProps {\r\n  taskSpec: TaskSpec;\r\n  closeEditor?: () => void;\r\n  setArguments?: (args: Record<string, ArgumentType>) => void;\r\n}\r\n\r\nconst ArgumentsEditorDialog = ({\r\n  taskSpec,\r\n  closeEditor,\r\n  setArguments,\r\n}: ArgumentsEditorDialogProps) => {\r\n  const [currentArguments, setCurrentArguments] = useState<\r\n    Record<string, ArgumentType>\r\n  >({ ...taskSpec.arguments });\r\n\r\n  const componentSpec = taskSpec.componentRef.spec;\r\n  if (componentSpec === undefined) {\r\n    console.error(\r\n      \"ArgumentsEditor called with missing taskSpec.componentRef.spec\",\r\n      taskSpec\r\n    );\r\n    return <></>;\r\n  }\r\n\r\n  return (\r\n    <form\r\n      onSubmit={async (e) => {\r\n        e.preventDefault();\r\n      }}\r\n      // Does not work\r\n      // draggable={false}\r\n      style={{\r\n        position: \"fixed\",\r\n        background: \"white\",\r\n        border: \"1px solid black\",\r\n        borderRadius: \"4px\",\r\n        padding: \"15px\",\r\n        // Does not work\r\n        // zIndex: 11,\r\n      }}\r\n    >\r\n      <legend>Input arguments for {componentSpec.name}</legend>\r\n      <ArgumentsEditor\r\n        componentSpec={componentSpec}\r\n        componentArguments={currentArguments}\r\n        setComponentArguments={setCurrentArguments}\r\n      />\r\n      <button type=\"button\" onClick={closeEditor}>\r\n        Close\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        onClick={(e) => {\r\n          setArguments?.(currentArguments);\r\n          closeEditor?.();\r\n        }}\r\n      >\r\n        Apply\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ArgumentsEditorDialog;\r\n","import { CSSProperties, memo, useState } from 'react';\r\nimport {\r\n  ArgumentType,\r\n  InputSpec,\r\n  OutputSpec,\r\n  TaskSpec,\r\n} from '../componentSpec';\r\n\r\nimport { Handle, Position, Node, NodeProps, HandleType } from 'react-flow-renderer';\r\n\r\nimport ArgumentsEditorDialog from './ArgumentsEditorDialog';\r\n\r\nconst inputHandlePosition = Position.Top;\r\nconst outputHandlePosition = Position.Bottom;\r\n\r\ntype InputOrOutputSpec = InputSpec | OutputSpec;\r\n\r\nconst MISSING_ARGUMENT_CLASS_NAME = \"missing-argument\";\r\n\r\nconst NODE_WIDTH_IN_PX = 180;\r\n\r\nexport const isComponentTaskNode = (node: Node): node is Node<ComponentTaskNodeProps> =>\r\n  node.type === \"task\" && node.data !== undefined && \"taskSpec\" in node.data;\r\n\r\nfunction generateHandles(\r\n  ioSpecs: InputOrOutputSpec[],\r\n  handleType: HandleType,\r\n  position: Position,\r\n  idPrefix: string,\r\n  inputsWithMissingArguments?: string[],\r\n): JSX.Element[] {\r\n  let handleComponents = [];\r\n  const numHandles = ioSpecs.length;\r\n  for (let i = 0; i < numHandles; i++) {\r\n    const ioSpec = ioSpecs[i];\r\n    const id = idPrefix + ioSpec.name;\r\n    const relativePosition = (i + 1) / (numHandles + 1);\r\n    const positionPercentString = String(100 * relativePosition) + \"%\";\r\n    const style =\r\n      position === Position.Top || position === Position.Bottom\r\n        ? { left: positionPercentString }\r\n        : { top: positionPercentString };\r\n    // TODO: Handle complex type specs\r\n    const ioTypeName = ioSpec.type?.toString() ?? \"Any\";\r\n    let classNames = [`handle_${idPrefix}${ioTypeName}`.replace(\" \", \"_\")];\r\n    const isInvalid = (inputsWithMissingArguments ?? []).includes(ioSpec.name);\r\n    if (isInvalid) {\r\n      classNames.push(MISSING_ARGUMENT_CLASS_NAME);\r\n    }\r\n    classNames = classNames.map((className) => className.replace(\" \", \"_\"));\r\n\r\n    const [labelClasses, labelStyle] = generateLabelStyle(position, numHandles);\r\n    handleComponents.push(\r\n      <Handle\r\n        key={id}\r\n        type={handleType}\r\n        position={position}\r\n        id={id}\r\n        style={style}\r\n        isConnectable={true}\r\n        title={ioSpec.name + \" : \" + ioTypeName}\r\n        className={classNames.join(\" \")}\r\n      >\r\n        <div className={labelClasses} style={labelStyle}>\r\n          {ioSpec.name}\r\n        </div>\r\n      </Handle>\r\n    );\r\n  }\r\n  return handleComponents;\r\n}\r\n\r\n\r\nfunction generateLabelStyle(\r\n  position: Position,\r\n  numHandles: number\r\n): [string, CSSProperties] {\r\n  let maxLabelWidthPx = NODE_WIDTH_IN_PX;\r\n  // By default, we want to place the label on the same side of the handle as the handle is on the side of the node.\r\n  let labelClasses = \"label\";\r\n  // When there are too many inputs/outputs, we need to move the label so it starts from the handle.\r\n  // Based on my tests, we always want this for >4 handles (top/bottom), so the rotated default placement is never used at all.\r\n\r\n  if (position === Position.Top || position === Position.Bottom) {\r\n    if (numHandles > 1) {\r\n      // For single handle max width is the node width, while the formula would give half of that\r\n      maxLabelWidthPx = NODE_WIDTH_IN_PX / (numHandles + 1);\r\n    }\r\n    //if (numHandles > 4) {\r\n    if (maxLabelWidthPx < 35) {\r\n      maxLabelWidthPx = 50;\r\n      labelClasses += \" label-angled\";\r\n    }\r\n  } else {\r\n    maxLabelWidthPx = 60;\r\n  }\r\n\r\n  const labelStyle: CSSProperties = { maxWidth: `${maxLabelWidthPx}px` };\r\n  return [labelClasses, labelStyle];\r\n}\r\n\r\nfunction generateInputHandles(inputSpecs: InputSpec[], inputsWithInvalidArguments?: string[]): JSX.Element[] {\r\n  return generateHandles(inputSpecs, \"target\", inputHandlePosition, \"input_\", inputsWithInvalidArguments);\r\n}\r\n\r\nfunction generateOutputHandles(outputSpecs: OutputSpec[]): JSX.Element[] {\r\n  return generateHandles(outputSpecs, \"source\", outputHandlePosition, \"output_\");\r\n}\r\n\r\nexport interface ComponentTaskNodeProps {\r\n  taskSpec: TaskSpec,\r\n  taskId?: string,\r\n  setArguments?: (args: Record<string, ArgumentType>) => void;\r\n};\r\n\r\nconst ComponentTaskNode = ({ data }: NodeProps<ComponentTaskNodeProps>) => {\r\n  const [isArgumentsEditorOpen, setIsArgumentsEditorOpen] = useState(false);\r\n\r\n  const taskSpec = data.taskSpec;\r\n  const componentSpec = taskSpec.componentRef.spec;\r\n  if (componentSpec === undefined) {\r\n    return (<></>);\r\n  }\r\n\r\n  const label = componentSpec.name ?? \"<component>\";\r\n  const inputsWithInvalidArguments = (componentSpec.inputs ?? [])\r\n    .filter(\r\n      (inputSpec) =>\r\n        inputSpec.optional !== true &&\r\n        inputSpec.default === undefined &&\r\n        !(inputSpec.name in (taskSpec.arguments ?? {}))\r\n    )\r\n    .map((inputSpec) => inputSpec.name);\r\n  const inputHandles = generateInputHandles(componentSpec.inputs ?? [], inputsWithInvalidArguments);\r\n  const outputHandles = generateOutputHandles(componentSpec.outputs ?? []);\r\n  const handleComponents = inputHandles.concat(outputHandles);\r\n\r\n  const closeArgumentsEditor = () => {\r\n    setIsArgumentsEditorOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      onDoubleClick={() => {\r\n        setIsArgumentsEditorOpen(!isArgumentsEditorOpen);\r\n      }}\r\n      title={data.taskId}\r\n    >\r\n      {label}\r\n      {handleComponents}\r\n      {isArgumentsEditorOpen && (\r\n        <ArgumentsEditorDialog\r\n          taskSpec={taskSpec}\r\n          closeEditor={closeArgumentsEditor}\r\n          setArguments={data.setArguments}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(ComponentTaskNode);\r\n","import React, { DragEvent, useState } from \"react\";\r\nimport ReactFlow, {\r\n  ArrowHeadType,\r\n  Connection,\r\n  Edge,\r\n  ElementId,\r\n  Elements,\r\n  isEdge,\r\n  isNode,\r\n  Node,\r\n  OnLoadParams,\r\n  ReactFlowProps,\r\n  XYPosition,\r\n} from \"react-flow-renderer\";\r\n\r\nimport {\r\n  ArgumentType,\r\n  ComponentSpec,\r\n  GraphInputArgument,\r\n  GraphSpec,\r\n  InputSpec,\r\n  OutputSpec,\r\n  TaskOutputArgument,\r\n  TaskSpec,\r\n  isGraphImplementation,\r\n} from \"../componentSpec\";\r\nimport ComponentTaskNode, { ComponentTaskNodeProps, isComponentTaskNode } from \"./ComponentTaskNode\";\r\n\r\n\r\nconst NODE_LAYOUT_ANNOTATION_KEY = \"editor.position\";\r\nconst SDK_ANNOTATION_KEY = \"sdk\";\r\nconst SDK_ANNOTATION_VALUE = \"https://cloud-pipelines.github.io/pipeline-editor/\";\r\n\r\nexport const augmentComponentSpec = (\r\n  componentSpec: ComponentSpec,\r\n  nodes: Node[],\r\n  includeSpecs = false,\r\n  includePositions = true\r\n) => {\r\n  componentSpec = { ...componentSpec };\r\n\r\n  const getNodePositionAnnotation = (node: Node) =>\r\n    JSON.stringify({\r\n      // node.position cannot be used since set at 1st drop and never updated\r\n      x: node.__rf.position.x,\r\n      y: node.__rf.position.y,\r\n      width: node.__rf.width,\r\n      height: node.__rf.height,\r\n    });\r\n\r\n  const nodeXPositionComparer = (n1: Node, n2: Node) => {\r\n    const deltaX = n1.__rf.position.x - n2.__rf.position.x;\r\n    const deltaY = n1.__rf.position.y - n2.__rf.position.y;\r\n    return deltaX !== 0 ? deltaX : deltaY;\r\n  };\r\n  const nodeYPositionComparer = (n1: Node, n2: Node) => {\r\n    const deltaX = n1.__rf.position.x - n2.__rf.position.x;\r\n    const deltaY = n1.__rf.position.y - n2.__rf.position.y;\r\n    return deltaY !== 0 ? deltaY : deltaX;\r\n  };\r\n\r\n  // Input and output nodes\r\n  // Sorting them by horizontal position to make reordering inputs and outputs easy.\r\n  const inputNodes = nodes\r\n    .filter((node) => node.type === \"input\")\r\n    .sort(nodeXPositionComparer);\r\n  const outputNodes = nodes\r\n    .filter((node) => node.type === \"output\")\r\n    .sort(nodeXPositionComparer);\r\n  const taskNodes = nodes\r\n    .filter(isComponentTaskNode)\r\n    .sort(nodeYPositionComparer);\r\n\r\n  // TODO: Remove \"input_\" prefixes\r\n  const inputPositionMap = new Map<string, string>(\r\n    inputNodes.map((node) => [node.id, getNodePositionAnnotation(node)])\r\n  );\r\n  const inputOrderMap = new Map<string, number>(\r\n    inputNodes.map((node, index) => [node.id, index])\r\n  );\r\n  const inputOrderComparer = (a: InputSpec, b: InputSpec) =>\r\n    (inputOrderMap.get(a.name) ?? Infinity) -\r\n    (inputOrderMap.get(b.name) ?? Infinity);\r\n  // TODO: Remove \"output_\" prefixes\r\n  const outputPositionMap = new Map<string, string>(\r\n    outputNodes.map((node) => [node.id, getNodePositionAnnotation(node)])\r\n  );\r\n  const outputOrderMap = new Map<string, number>(\r\n    outputNodes.map((node, index) => [node.id, index])\r\n  );\r\n  const outputOrderComparer = (a: OutputSpec, b: OutputSpec) =>\r\n    (outputOrderMap.get(a.name) ?? Infinity) -\r\n    (outputOrderMap.get(b.name) ?? Infinity);\r\n  // TODO: Remove \"task_\" prefixes\r\n  const taskPositionMap = new Map<string, string>(\r\n    taskNodes.map((node) => [node.id, getNodePositionAnnotation(node)])\r\n  );\r\n  const taskOrderMap = new Map<string, number>(\r\n    taskNodes.map((node, index) => [node.id, index])\r\n  );\r\n  const taskOrderComparer = (\r\n    pairA: [string, TaskSpec],\r\n    pairB: [string, TaskSpec]\r\n  ) =>\r\n    (taskOrderMap.get(pairA[0]) ?? Infinity) -\r\n    (taskOrderMap.get(pairB[0]) ?? Infinity);\r\n\r\n  componentSpec.inputs = componentSpec.inputs\r\n    ?.map((inputSpec) => {\r\n      if (!inputPositionMap.has(inputSpec.name) || !inputOrderMap.has(inputSpec.name)) {\r\n        throw Error(`The nodes array does not have input node ${inputSpec.name}`);\r\n      }\r\n      let newAnnotations = { ...inputSpec.annotations };\r\n      if (includePositions) {\r\n        newAnnotations[NODE_LAYOUT_ANNOTATION_KEY] = inputPositionMap.get(\r\n          inputSpec.name\r\n        );\r\n      } else {\r\n        delete newAnnotations[NODE_LAYOUT_ANNOTATION_KEY];\r\n      }\r\n      let newInputSpec: InputSpec = {\r\n        ...inputSpec,\r\n        annotations: newAnnotations,\r\n      };\r\n      if (Object.keys(newAnnotations).length === 0) {\r\n        delete newInputSpec.annotations;\r\n      }\r\n      return newInputSpec;\r\n    })\r\n    .sort(inputOrderComparer);\r\n\r\n  componentSpec.outputs = componentSpec.outputs\r\n    ?.map((outputSpec) => {\r\n      if (!outputPositionMap.has(outputSpec.name) || !outputOrderMap.has(outputSpec.name)) {\r\n        throw Error(`The nodes array does not have output node ${outputSpec.name}`);\r\n      }\r\n      let newAnnotations = { ...outputSpec.annotations };\r\n      if (includePositions) {\r\n        newAnnotations[NODE_LAYOUT_ANNOTATION_KEY] = outputPositionMap.get(\r\n          outputSpec.name\r\n        );\r\n      } else {\r\n        delete newAnnotations[NODE_LAYOUT_ANNOTATION_KEY];\r\n      }\r\n      let newOutputSpec: OutputSpec = {\r\n        ...outputSpec,\r\n        annotations: newAnnotations,\r\n      };\r\n      if (\r\n        newAnnotations === undefined ||\r\n        Object.keys(newAnnotations).length === 0\r\n      ) {\r\n        delete newOutputSpec.annotations;\r\n      }\r\n      return newOutputSpec;\r\n    })\r\n    .sort(outputOrderComparer);\r\n\r\n  if (!isGraphImplementation(componentSpec.implementation)) {\r\n    return componentSpec;\r\n  }\r\n\r\n  let graphSpec: GraphSpec = { ...componentSpec.implementation.graph };\r\n  const newTasks = Object.fromEntries(\r\n    Object.entries(graphSpec.tasks || {})\r\n      .map(([taskId, taskSpec]) => {\r\n        if (!taskPositionMap.has(taskId) || !taskOrderMap.has(taskId)) {\r\n          throw Error(`The nodes array does not have task node ${taskId}`);\r\n        }\r\n        let newAnnotations = { ...taskSpec.annotations };\r\n        if (includePositions) {\r\n          newAnnotations[NODE_LAYOUT_ANNOTATION_KEY] =\r\n            taskPositionMap.get(taskId);\r\n        } else {\r\n          delete newAnnotations[NODE_LAYOUT_ANNOTATION_KEY];\r\n        }\r\n        let newTaskSpec: TaskSpec = {\r\n          ...taskSpec,\r\n          annotations: newAnnotations,\r\n        };\r\n        if (\r\n          newAnnotations === undefined ||\r\n          Object.keys(newAnnotations).length === 0\r\n        ) {\r\n          delete newTaskSpec.annotations;\r\n        }\r\n        // TODO: Sort the arguments based on the ordering of the component inputs.\r\n        if (\r\n          !includeSpecs &&\r\n          newTaskSpec.componentRef.spec !== undefined &&\r\n          newTaskSpec.componentRef.url !== undefined\r\n        ) {\r\n          newTaskSpec.componentRef = { ...newTaskSpec.componentRef };\r\n          delete newTaskSpec.componentRef.spec;\r\n        }\r\n        return [taskId, newTaskSpec] as [string, TaskSpec];\r\n      })\r\n      .sort(taskOrderComparer)\r\n  );\r\n  if (newTasks !== undefined) {\r\n    graphSpec.tasks = newTasks;\r\n  }\r\n  componentSpec = {\r\n    ...componentSpec,\r\n    implementation: { ...componentSpec.implementation, graph: graphSpec },\r\n  };\r\n\r\n  componentSpec = {\r\n    ...componentSpec,\r\n    metadata: {\r\n      ...componentSpec.metadata,\r\n      annotations: {\r\n        ...componentSpec.metadata?.annotations,\r\n        [SDK_ANNOTATION_KEY]: SDK_ANNOTATION_VALUE\r\n      }\r\n    }\r\n  }\r\n\r\n  // Reordering the attributes and removing the undefined ones\r\n  const rebuildComponentSpec = ({\r\n    name,\r\n    description,\r\n    metadata,\r\n    inputs,\r\n    outputs,\r\n    implementation,\r\n    ...rest\r\n  }: ComponentSpec): ComponentSpec => ({\r\n    ...(name && { name: name }),\r\n    ...(description && { description: description }),\r\n    ...(metadata && { metadata: metadata }),\r\n    ...(inputs && { inputs: inputs }),\r\n    ...(outputs && { outputs: outputs }),\r\n    implementation: implementation,\r\n    ...rest,\r\n  });\r\n  componentSpec = rebuildComponentSpec(componentSpec);\r\n\r\n  return componentSpec;\r\n};\r\n\r\nexport interface GraphComponentSpecFlowProps\r\n  extends Omit<ReactFlowProps, \"elements\"> {\r\n  componentSpec: ComponentSpec,\r\n  setComponentSpec: (componentSpec: ComponentSpec) => void,\r\n}\r\n\r\nconst nodeTypes = {\r\n  task: ComponentTaskNode,\r\n};\r\n\r\nconst GraphComponentSpecFlow = ({\r\n  children,\r\n  componentSpec = { implementation: { graph: { tasks: {} } } },\r\n  setComponentSpec,\r\n  ...rest\r\n}: GraphComponentSpecFlowProps) => {\r\n  const [reactFlowInstance, setReactFlowInstance] = useState<OnLoadParams>();\r\n\r\n  if (! ('graph' in componentSpec.implementation)) {\r\n    // Only graph components are supported\r\n    return <></>;\r\n  }\r\n  let graphSpec = componentSpec.implementation.graph;\r\n\r\n  const nodes = Object.entries(graphSpec.tasks).map<Node<ComponentTaskNodeProps>>(\r\n    ([taskId, taskSpec]) => {\r\n      let position: XYPosition = { x: 0, y: 0 };\r\n      if (taskSpec.annotations !== undefined) {\r\n        try {\r\n          const layoutAnnotation = taskSpec.annotations[\r\n            \"editor.position\"\r\n          ] as string;\r\n          const decodedPosition = JSON.parse(layoutAnnotation);\r\n          position = { x: decodedPosition[\"x\"], y: decodedPosition[\"y\"] };\r\n        } catch (err) {}\r\n      }\r\n\r\n      return {\r\n        id: taskId,\r\n        data: {\r\n          taskSpec: taskSpec,\r\n          taskId: taskId,\r\n          setArguments: (args) => setTaskArguments(taskId, args),\r\n        },\r\n        position: position,\r\n        type: \"task\",\r\n      };\r\n    }\r\n  );\r\n\r\n  const inputNodes = (componentSpec.inputs ?? []).map<Node>(\r\n    (inputSpec) => {\r\n      let position: XYPosition = { x: 0, y: 0 };\r\n      if (inputSpec.annotations !== undefined) {\r\n        try {\r\n          const layoutAnnotation = inputSpec.annotations[\r\n            \"editor.position\"\r\n          ] as string;\r\n          const decodedPosition = JSON.parse(layoutAnnotation);\r\n          position = { x: decodedPosition[\"x\"], y: decodedPosition[\"y\"] };\r\n        } catch (err) {}\r\n      }\r\n      return {\r\n        id: inputSpec.name,\r\n        data: { label: inputSpec.name },\r\n        position: position,\r\n        type: \"input\",\r\n      };\r\n    }\r\n  );\r\n\r\n  const outputNodes = (componentSpec.outputs ?? []).map<Node>(\r\n    (outputSpec) => {\r\n      let position: XYPosition = { x: 0, y: 0 };\r\n      if (outputSpec.annotations !== undefined) {\r\n        try {\r\n          const layoutAnnotation = outputSpec.annotations[\r\n            \"editor.position\"\r\n          ] as string;\r\n          const decodedPosition = JSON.parse(layoutAnnotation);\r\n          position = { x: decodedPosition[\"x\"], y: decodedPosition[\"y\"] };\r\n        } catch (err) {}\r\n      }\r\n      return {\r\n        id: outputSpec.name,\r\n        data: { label: outputSpec.name },\r\n        position: position,\r\n        type: \"output\",\r\n      };\r\n    }\r\n  );\r\n\r\n  const edges: Edge[] = Object.entries(graphSpec.tasks).flatMap(\r\n    ([taskId, taskSpec]) => {\r\n      return Object.entries(taskSpec.arguments ?? {}).flatMap(\r\n        ([inputName, argument]) => {\r\n          if (typeof argument === \"string\") {\r\n            return [];\r\n          }\r\n          if (\"taskOutput\" in argument) {\r\n            const taskOutput = argument.taskOutput;\r\n            const edge: Edge = {\r\n              id: `${taskOutput.taskId}_${taskOutput.outputName}-${taskId}_${inputName}`,\r\n              source: taskOutput.taskId,\r\n              sourceHandle: `output_${taskOutput.outputName}`,\r\n              target: taskId,\r\n              targetHandle: `input_${inputName}`,\r\n              arrowHeadType: ArrowHeadType.ArrowClosed,\r\n            };\r\n            return [edge];\r\n          } else if (\"graphInput\" in argument) {\r\n            const graphInput = argument.graphInput;\r\n            const edge: Edge = {\r\n              id: `Input_${graphInput.inputName}-${taskId}_${inputName}`,\r\n              source: graphInput.inputName,\r\n              //sourceHandle: undefined,\r\n              //sourceHandle: \"Input\",\r\n              sourceHandle: null,\r\n              target: taskId,\r\n              targetHandle: `input_${inputName}`,\r\n              arrowHeadType: ArrowHeadType.ArrowClosed,\r\n            };\r\n            return [edge];\r\n          } else {\r\n            console.error(\"Impossible task input argument kind: \", argument);\r\n            return [];\r\n          }\r\n        }\r\n      );\r\n    }\r\n  );\r\n\r\n  const outputEdges: Edge[] = Object.entries(graphSpec.outputValues ?? {}).map(\r\n    ([outputName, argument]) => {\r\n      const taskOutput = argument.taskOutput;\r\n      const edge: Edge = {\r\n        id: `${taskOutput.taskId}_${taskOutput.outputName}-Output_${outputName}`,\r\n        source: taskOutput.taskId,\r\n        sourceHandle: `output_${taskOutput.outputName}`,\r\n        target: outputName,\r\n        //targetHandle: undefined,\r\n        //targetHandle: \"Output\",\r\n        targetHandle: null,\r\n        arrowHeadType: ArrowHeadType.ArrowClosed,\r\n      };\r\n      return edge;\r\n    }\r\n  );\r\n\r\n  const elements = (nodes as Elements).concat(inputNodes).concat(outputNodes).concat(edges).concat(outputEdges);\r\n  \r\n  const replaceComponentSpec = (newComponentSpec: ComponentSpec) => {\r\n    componentSpec = newComponentSpec;\r\n    setComponentSpec(newComponentSpec);\r\n  };\r\n\r\n  const replaceGraphSpec = (newGraphSpec: GraphSpec) => {\r\n    graphSpec = newGraphSpec;\r\n    replaceComponentSpec({ ...componentSpec, implementation: { graph: graphSpec } });\r\n  };\r\n\r\n  const setTaskArguments = (\r\n    taskId: string,\r\n    taskArguments?: Record<string, ArgumentType>,\r\n  ) => {\r\n    let newGraphSpec: GraphSpec = {\r\n      ...graphSpec,\r\n      tasks: { ...graphSpec.tasks },\r\n    };\r\n    newGraphSpec.tasks[taskId] = {\r\n      ...graphSpec.tasks[taskId],\r\n      arguments: taskArguments,\r\n    };\r\n    replaceGraphSpec(newGraphSpec);\r\n  };\r\n\r\n  const setTaskArgument = (\r\n    taskId: string,\r\n    inputName: string,\r\n    argument?: ArgumentType\r\n  ) => {\r\n    const oldTaskSpec = graphSpec.tasks[taskId];\r\n    const oldTaskSpecArguments = oldTaskSpec.arguments;\r\n    let newTaskSpecArguments: Record<string, ArgumentType> = {\r\n      ...oldTaskSpecArguments,\r\n    };\r\n    if (argument === undefined) {\r\n      delete newTaskSpecArguments[inputName];\r\n    } else {\r\n      newTaskSpecArguments[inputName] = argument;\r\n    }\r\n    setTaskArguments(taskId, newTaskSpecArguments);\r\n  };\r\n\r\n  const removeTaskArgument = (taskId: string, inputName: string) =>\r\n    setTaskArgument(taskId, inputName, undefined);\r\n\r\n  const setGraphOutputValue = (\r\n    outputName: string,\r\n    outputValue?: TaskOutputArgument\r\n  ) => {\r\n    let newGraphOutputValues = { ...graphSpec.outputValues };\r\n    if (outputValue === undefined) {\r\n      delete newGraphOutputValues[outputName];\r\n    } else {\r\n      newGraphOutputValues[outputName] = outputValue;\r\n    }\r\n    graphSpec = { ...graphSpec, outputValues: newGraphOutputValues };\r\n    replaceGraphSpec(graphSpec);\r\n  };\r\n\r\n  const removeGraphOutputValue = (outputName: string) =>\r\n    setGraphOutputValue(outputName);\r\n\r\n  const addConnection = (connection: Connection | Edge) => {\r\n    if (connection.source === null || connection.target === null) {\r\n      console.error(\r\n        \"addConnection called with missing source or target: \",\r\n        connection\r\n      );\r\n      return;\r\n    }\r\n\r\n    const targetTaskInputName = connection.targetHandle?.replace(/^input_/, \"\");\r\n    const sourceTaskOutputName = connection.sourceHandle?.replace(/^output_/, \"\");\r\n\r\n    if (sourceTaskOutputName !== undefined) {\r\n      // Source is task output\r\n      const taskOutputArgument: TaskOutputArgument = {\r\n        taskOutput: {\r\n          taskId: connection.source,\r\n          outputName: sourceTaskOutputName,\r\n        },\r\n      };\r\n\r\n      if (targetTaskInputName !== undefined) {\r\n        // Target is task input\r\n        setTaskArgument(\r\n          connection.target,\r\n          targetTaskInputName,\r\n          taskOutputArgument\r\n        );\r\n      } else {\r\n        // Target is graph output\r\n        setGraphOutputValue(connection.target, taskOutputArgument);\r\n        // TODO: Perhaps propagate type information\r\n      }\r\n    } else {\r\n      // Source is graph input\r\n      const graphInputName = connection.source;\r\n      const graphInputArgument: GraphInputArgument = {\r\n        graphInput: {\r\n          inputName: graphInputName,\r\n        },\r\n      };\r\n      if (targetTaskInputName !== undefined) {\r\n        // Target is task input\r\n        setTaskArgument(\r\n          connection.target,\r\n          targetTaskInputName,\r\n          graphInputArgument\r\n        );\r\n        // TODO: Perhaps propagate type information\r\n      } else {\r\n        // Target is graph output\r\n        console.error(\r\n          \"addConnection: Cannot directly connect graph input to graph output: \",\r\n          connection\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const onConnect = (params: Connection | Edge) => {\r\n    addConnection(params);\r\n  };\r\n\r\n  const removeEdge = (edge: Edge) => {\r\n    const inputName = edge.targetHandle?.replace(/^input_/, \"\");\r\n\r\n    if (inputName !== undefined) {\r\n      removeTaskArgument(edge.target, inputName);\r\n    } else {\r\n      removeGraphOutputValue(edge.target);\r\n    }\r\n  };\r\n\r\n  const removeComponentInput = (inputName: string) => {\r\n    // Removing the outcoming edges\r\n    for (const [taskId, taskSpec] of Object.entries(graphSpec.tasks)) {\r\n      for (const [inputName, argument] of Object.entries(\r\n        taskSpec.arguments ?? {}\r\n      )) {\r\n        if (typeof argument !== \"string\" && \"graphInput\" in argument) {\r\n          if (argument.graphInput.inputName === inputName) {\r\n            removeTaskArgument(taskId, inputName);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // Not checking the sources of graph outputs, since they cannot be directly connected to the graph inputs\r\n\r\n    // Removing the input itself\r\n    const newInputs = (componentSpec.inputs ?? []).filter(\r\n      (inputSpec) => inputSpec.name !== inputName\r\n    );\r\n    componentSpec = { ...componentSpec, inputs: newInputs };\r\n    replaceComponentSpec(componentSpec);\r\n  };\r\n\r\n  const removeComponentOutput = (outputName: string) => {\r\n    removeGraphOutputValue(outputName);\r\n    // Removing the output itself\r\n    const newOutputs = (componentSpec.outputs ?? []).filter(\r\n      (outputSpec) => outputSpec.name !== outputName\r\n    );\r\n    componentSpec = { ...componentSpec, outputs: newOutputs };\r\n    replaceComponentSpec(componentSpec);\r\n  };\r\n\r\n  const removeTask = (taskId: string) => {\r\n    // Removing the outcoming edges\r\n    for (const [taskId, taskSpec] of Object.entries(graphSpec.tasks)) {\r\n      for (const [inputName, argument] of Object.entries(\r\n        taskSpec.arguments ?? {}\r\n      )) {\r\n        if (typeof argument !== \"string\" && \"taskOutput\" in argument) {\r\n          if (argument.taskOutput.taskId === taskId) {\r\n            removeTaskArgument(taskId, inputName);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Removing outcoming edges that go to graph outputs.\r\n    // ? Should we delete the outputs themselves\r\n    const newGraphOutputValues = Object.fromEntries(\r\n      Object.entries(graphSpec.outputValues ?? {}).filter(\r\n        ([_, argument]) => argument.taskOutput.taskId !== taskId\r\n      )\r\n    );\r\n    graphSpec = { ...graphSpec, outputValues: newGraphOutputValues };\r\n\r\n    // Removing the task\r\n    let newGraphSpec: GraphSpec = {\r\n      ...graphSpec,\r\n      tasks: { ...graphSpec.tasks },\r\n    };\r\n    delete newGraphSpec.tasks[taskId];\r\n    replaceGraphSpec(newGraphSpec);\r\n  };\r\n\r\n  const removeNode = (node: Node) => {\r\n    // TODO: Use global constants for node types\r\n    if (node.type === \"input\") {\r\n      const inputName = node.id;\r\n      removeComponentInput(inputName);\r\n    } else if (node.type === \"output\") {\r\n      const outputName = node.id;\r\n      removeComponentOutput(outputName);\r\n    } else if (node.type === \"task\") {\r\n      const taskId = node.id;\r\n      removeTask(taskId);\r\n    } else {\r\n      console.log(\"removeNode: Unexpected note type: \", node);\r\n    }\r\n  };\r\n\r\n  const onElementsRemove = (elementsToRemove: Elements) => {\r\n    for (const element of elementsToRemove) {\r\n      if (isEdge(element)) {\r\n        removeEdge(element);\r\n      }\r\n    }\r\n    for (const element of elementsToRemove) {\r\n      if (isNode(element)) {\r\n        removeNode(element);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onEdgeUpdate = (oldEdge: Edge, newConnection: Connection) => {\r\n    removeEdge(oldEdge);\r\n    addConnection(newConnection);\r\n  };\r\n\r\n  const onLoad = (_reactFlowInstance: OnLoadParams) =>\r\n    setReactFlowInstance(_reactFlowInstance);\r\n\r\n  const onDragOver = (event: DragEvent) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = \"move\";\r\n  };\r\n\r\n  const makeNameUniqueByAddingIndex = (name: string, existingNames: Set<string>): ElementId => {\r\n    let finalName = name;\r\n    let index = 1;\r\n    while (existingNames.has(finalName)) {\r\n      index++;\r\n      finalName = name + \" \" + index.toString();\r\n    }\r\n    return finalName;\r\n  };\r\n\r\n  const getUniqueInputName = (name: string = \"Input\") => {\r\n    return makeNameUniqueByAddingIndex(\r\n      name,\r\n      new Set(componentSpec.inputs?.map((inputSpec) => inputSpec.name))\r\n    );\r\n  };\r\n\r\n  const getUniqueOutputName = (name: string = \"Output\") => {\r\n    return makeNameUniqueByAddingIndex(\r\n      name,\r\n      new Set(componentSpec.outputs?.map((outputSpec) => outputSpec.name))\r\n    );\r\n  };\r\n\r\n  const getUniqueTaskName = (name: string = \"Task\") => {\r\n    return makeNameUniqueByAddingIndex(\r\n      name,\r\n      new Set(Object.keys(graphSpec.tasks))\r\n    );\r\n  };\r\n\r\n  const onDrop = (event: DragEvent) => {\r\n    event.preventDefault();\r\n\r\n    if (reactFlowInstance) {\r\n      const droppedData = event.dataTransfer.getData(\"application/reactflow\");\r\n      if (droppedData === \"\") {\r\n        return;\r\n      }\r\n      const droppedDataObject = JSON.parse(droppedData);\r\n      const nodeType = Object.keys(droppedDataObject)[0];\r\n      const nodeData = droppedDataObject[nodeType];\r\n      \r\n      // Correcting the position using the drag point location information\r\n      let dragOffsetX = 0;\r\n      let dragOffsetY = 0;\r\n      const dragStartOffsetData = event.dataTransfer.getData(\"DragStart.offset\");\r\n      if (dragStartOffsetData !== \"\") {\r\n        const dragStartOffset = JSON.parse(dragStartOffsetData);\r\n        // Hack to work around Chrome's draggable anchor bug. TODO: Remove once Chrome is fixed\r\n        dragOffsetX = dragStartOffset.offsetX * 0.68 ?? 0;\r\n        dragOffsetY = dragStartOffset.offsetY * 0.64 ?? 0;\r\n      }\r\n\r\n      // Node position. Offsets should be included in projection, so that they snap to the grid.\r\n      // Otherwise the dropped nodes will be out of phase with the rest of the nodes even when snapping.\r\n      let position = reactFlowInstance.project({\r\n        x: event.clientX - dragOffsetX,\r\n        y: event.clientY - dragOffsetY,\r\n      });\r\n\r\n      const nodePosition = { x: position.x, y: position.y };\r\n      const positionAnnotations = {\r\n        \"editor.position\": JSON.stringify(nodePosition),\r\n      }\r\n      if (nodeType === \"task\") {\r\n        const taskSpec = nodeData as TaskSpec;\r\n        const mergedAnnotations = {\r\n          ...taskSpec.annotations,\r\n          ...positionAnnotations,\r\n        };\r\n        taskSpec.annotations = mergedAnnotations;\r\n        const taskSpecWithAnnotation: TaskSpec = {\r\n          ...taskSpec,\r\n          annotations: mergedAnnotations,\r\n        };\r\n        const taskId = getUniqueTaskName(taskSpec.componentRef.spec?.name ?? \"Task\");\r\n        graphSpec = { ...graphSpec, tasks: { ...graphSpec.tasks } };\r\n        graphSpec.tasks[taskId] = taskSpecWithAnnotation;\r\n        replaceGraphSpec(graphSpec);\r\n      } else if (nodeType === \"input\") {\r\n        const inputId = getUniqueInputName();\r\n        const inputSpec: InputSpec = {\r\n          name: inputId,\r\n          annotations: positionAnnotations,\r\n        };\r\n        const inputs = (componentSpec.inputs ?? []).concat([inputSpec]);\r\n        componentSpec = { ...componentSpec, inputs: inputs };\r\n        replaceComponentSpec(componentSpec);\r\n      } else if (nodeType === \"output\") {\r\n        const outputId = getUniqueOutputName();\r\n        const outputSpec: OutputSpec = {\r\n          name: outputId,\r\n          annotations: positionAnnotations,\r\n        };\r\n        const outputs = (componentSpec.outputs ?? []).concat([outputSpec]);\r\n        componentSpec = { ...componentSpec, outputs: outputs };\r\n        replaceComponentSpec(componentSpec);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ReactFlow\r\n      {...rest}\r\n      elements={elements}\r\n      nodeTypes={nodeTypes}\r\n      onConnect={onConnect}\r\n      onDragOver={onDragOver}\r\n      onDrop={onDrop}\r\n      onEdgeUpdate={onEdgeUpdate}\r\n      onElementsRemove={onElementsRemove}\r\n      onLoad={onLoad}\r\n    >\r\n      {children}\r\n    </ReactFlow>\r\n  );\r\n};\r\n\r\nexport default GraphComponentSpecFlow;\r\n","import yaml from \"js-yaml\";\r\nimport localForage from \"localforage\";\r\nimport { ComponentSpec, ComponentReference } from \"./componentSpec\";\r\n\r\n// const COMPONENT_FILE_NAME_SUFFIX = \"component.yaml\";\r\n// const COMPONENT_FILE_MAX_SIZE = 100000;\r\nconst SEARCH_CACHE_NAME = \"https://api.github.com/search\";\r\nconst BLOB_CACHE_NAME = \"raw.githubusercontent.com/.../component.yaml\";\r\n\r\n// IndexedDB: DB and table names\r\nconst DB_NAME = \"components\";\r\nconst HASH_TO_CONTENT_DB_TABLE_NAME = \"hash_to_data\";\r\nconst HASH_TO_COMPONENT_NAME_DB_TABLE_NAME = \"hash_to_component_name\";\r\nconst URL_TO_HASH_DB_TABLE_NAME = \"url_to_hash\";\r\nconst HASH_TO_URL_DB_TABLE_NAME = \"hash_to_url\";\r\nconst URL_PROCESSING_VERSION_TABLE_NAME = \"url_version\";\r\nconst CURRENT_URL_PROCESSING_VERSION = 1;\r\nconst BAD_HASHES_TABLE_NAME = \"bad_hashes\";\r\n\r\nexport const httpGetWithCache = async (\r\n  urlOrRequest: string | RequestInfo,\r\n  cacheName: string,\r\n  updateIfInCache: boolean = false\r\n): Promise<Response> => {\r\n  const cache = await caches.open(cacheName);\r\n  const response = await cache.match(urlOrRequest);\r\n  if (response !== undefined) {\r\n    if (updateIfInCache) {\r\n      cache.add(urlOrRequest);\r\n    }\r\n    return response;\r\n  }\r\n  await cache.add(urlOrRequest);\r\n  const response2 = await cache.match(urlOrRequest);\r\n  if (response2 === undefined) {\r\n    return Promise.reject(\"Added object to cache, but could not find it\");\r\n  }\r\n  return response2;\r\n};\r\n\r\nexport const searchGitHubCodeWithCache = async (\r\n  query: string,\r\n  page = 1,\r\n  sort = \"indexed\",\r\n  order = \"desc\"\r\n): Promise<any> => {\r\n  // TODO: Paging\r\n  const encodedQuery = encodeURIComponent(query);\r\n  const encodedSort = encodeURIComponent(sort);\r\n  const encodedOrder = encodeURIComponent(order);\r\n  const searchUrl = `https://api.github.com/search/code?q=${encodedQuery}&sort=${encodedSort}&order=${encodedOrder}&per_page=100&page=${page}`;\r\n  const response = await httpGetWithCache(searchUrl, SEARCH_CACHE_NAME, true);\r\n  return response.json();\r\n};\r\n\r\nconst githubHtmlUrlToDownloadUrl = (htmlUrl: string): string => {\r\n  // https://github.com/               kubeflow/pipelines/blob/24bc9162a56c2fe3c50947d655ef280f71ba058f/components/gcp/dataflow/launch_flex_template/component.yaml\r\n  // https://raw.githubusercontent.com/kubeflow/pipelines     /24bc9162a56c2fe3c50947d655ef280f71ba058f/components/gcp/dataflow/launch_flex_template/component.yaml\r\n  return htmlUrl\r\n    .replace(\"https://github.com/\", \"https://raw.githubusercontent.com/\")\r\n    .replace(\"/blob/\", \"/\");\r\n};\r\n\r\ntype UrlAndHash = {\r\n  url: string;\r\n  hash: string;\r\n};\r\n\r\nexport async function* getComponentUrlsAndHashes(\r\n  users = [\"kubeflow\", \"Ark-kun\"]\r\n) {\r\n  let urlsAndHashes: UrlAndHash[] = [];\r\n  const query =\r\n    \"filename:component.yaml \" + users.map((user) => \"user:\" + user).join(\" \");\r\n  for (let page = 1; page < 100; page++) {\r\n    const searchResults = await searchGitHubCodeWithCache(query, page);\r\n    // \"total_count\": 512,\r\n    // \"incomplete_results\": false,\r\n    // \"items\": [\r\n    const items: any[] = searchResults.items;\r\n    if (items.length === 0) {\r\n      break;\r\n    }\r\n    for (let item of items) {\r\n      yield {\r\n        url: githubHtmlUrlToDownloadUrl(item.html_url),\r\n        hash: item.sha as string,\r\n      };\r\n    }\r\n    await new Promise((resolve) =>\r\n      setTimeout(resolve, ((60 * 1000) / 10) * (1 + 0.1))\r\n    );\r\n  }\r\n  return urlsAndHashes;\r\n}\r\n\r\nexport const cacheComponentCandidateBlobs = async (\r\n  users = [\"kubeflow\", \"Ark-kun\"]\r\n): Promise<any[]> => {\r\n  let urlsAndHashes: UrlAndHash[] = [];\r\n  let urls = [];\r\n  for await (const urlAndHash of getComponentUrlsAndHashes(users)) {\r\n    urlsAndHashes.push(urlAndHash);\r\n    urls.push(urlAndHash.url);\r\n  }\r\n  const cache = await caches.open(BLOB_CACHE_NAME);\r\n  await cache.addAll(urls);\r\n  return urlsAndHashes;\r\n};\r\n\r\nexport const downloadComponentDataWithCache = async (url: string) => {\r\n  const response = await httpGetWithCache(url, BLOB_CACHE_NAME);\r\n  const data = await response.blob();\r\n  const componentText = await data.text();\r\n  // TODO: Validate the data\r\n  const componentSpec = yaml.load(componentText) as ComponentSpec;\r\n  return componentSpec;\r\n};\r\n\r\nexport const cacheAllComponents = async (users = [\"kubeflow\", \"Ark-kun\"]) => {\r\n  console.debug(\"Starting cacheAllComponents\");\r\n  const urlsAndHashesIterator = getComponentUrlsAndHashes(users);\r\n\r\n  // const cache = await caches.open(BLOB_CACHE_NAME);\r\n  const urlToHashDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_TO_HASH_DB_TABLE_NAME,\r\n  });\r\n  const hashToUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_URL_DB_TABLE_NAME,\r\n  });\r\n  const hashToContentDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_CONTENT_DB_TABLE_NAME,\r\n  });\r\n  const hashToComponentNameDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_COMPONENT_NAME_DB_TABLE_NAME,\r\n  });\r\n  const urlProcessingVersionDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_PROCESSING_VERSION_TABLE_NAME,\r\n  });\r\n  const badHashesDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: BAD_HASHES_TABLE_NAME,\r\n  });\r\n  for await (const item of urlsAndHashesIterator) {\r\n    const hash = item.hash.toLowerCase();\r\n    const htmlUrl = item.url;\r\n    const badHashReason = await badHashesDb.getItem<string>(hash);\r\n    if (badHashReason !== null) {\r\n      console.debug(\r\n        `Skipping url ${htmlUrl} with hash ${hash} due to error: \"${badHashReason}\"`\r\n      );\r\n      continue;\r\n    }\r\n    try {\r\n      const downloadUrl: string = githubHtmlUrlToDownloadUrl(htmlUrl);\r\n      if (!downloadUrl.endsWith(\"component.yaml\")) {\r\n        console.debug(\r\n          `Skipping url ${downloadUrl} since it does not end with \"component.yaml\"`\r\n        );\r\n        continue;\r\n      }\r\n      // Sanity check\r\n      const cachedHash = await urlToHashDb.getItem<string>(downloadUrl);\r\n      if (cachedHash !== null && cachedHash !== hash) {\r\n        console.error(\r\n          `Component cache is broken. Stored hash for ${downloadUrl}: ${cachedHash} != ${hash}.`\r\n        );\r\n      }\r\n      // Check whether the processing is complete\r\n      const urlVersion = await urlProcessingVersionDb.getItem<string>(\r\n        downloadUrl\r\n      );\r\n\r\n      if (\r\n        cachedHash !== null && // Not sure we should check this, but it improves the sanity\r\n        urlVersion !== null &&\r\n        Number.parseInt(urlVersion) >= CURRENT_URL_PROCESSING_VERSION\r\n      ) {\r\n        continue;\r\n      }\r\n\r\n      console.debug(`Processing new component candidate: ${downloadUrl}.`);\r\n      const response = await httpGetWithCache(downloadUrl, BLOB_CACHE_NAME);\r\n      let componentSpec: ComponentSpec;\r\n      let componentText: string;\r\n      try {\r\n        const data = await response.blob();\r\n        componentText = await data.text();\r\n        // TODO: Validate the data\r\n        componentSpec = yaml.load(componentText) as ComponentSpec;\r\n      } catch (err) {\r\n        badHashesDb.setItem(hash, err.name + \": \" + err.message);\r\n        continue;\r\n      }\r\n      if (componentSpec.implementation === undefined) {\r\n        badHashesDb.setItem(\r\n          hash,\r\n          'Component lacks the \"implementation\" section.'\r\n        );\r\n        continue;\r\n      }\r\n\r\n      // Blobs are cumbersome (need await to get text) - store text instead\r\n      // await hashToContentDb.setItem(hash, data);\r\n      await hashToContentDb.setItem(hash, componentText);\r\n\r\n      // Only adding hash -> URL once\r\n      const urlForHash = await hashToUrlDb.getItem<string>(hash);\r\n      if (urlForHash === null) {\r\n        await hashToUrlDb.setItem(hash, downloadUrl);\r\n      }\r\n\r\n      // Only storing names when they exist\r\n      if (componentSpec.name) {\r\n        await hashToComponentNameDb.setItem(hash, componentSpec.name);\r\n      }\r\n\r\n      await urlToHashDb.setItem(downloadUrl, hash);\r\n\r\n      // Marking the processing as completed\r\n      await urlProcessingVersionDb.setItem(\r\n        downloadUrl,\r\n        CURRENT_URL_PROCESSING_VERSION\r\n      );\r\n    } catch (err) {\r\n      console.error(\r\n        `Error when processing component candidate ${htmlUrl} Error: ${err}.`\r\n      );\r\n    }\r\n  }\r\n  console.debug(\"Finished cacheAllComponents\");\r\n};\r\n\r\nexport const getAllComponentsAsRefs = async (\r\n  users = [\"kubeflow\", \"Ark-kun\"]\r\n) => {\r\n  // Perhaps use urlProcessingVersionDb as source of truth. Hmm. It is URL-based\r\n  const hashToUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_URL_DB_TABLE_NAME,\r\n  });\r\n  const hashToContentDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_CONTENT_DB_TABLE_NAME,\r\n  });\r\n  let hashToComponentRef = new Map<string, ComponentReference>();\r\n\r\n  const cachePromise = cacheAllComponents(users);\r\n  console.debug(\"getAllComponentsAsRefs: Started async cacheAllComponents\");\r\n  if ((await hashToContentDb.length()) === 0) {\r\n    console.debug(\"getAllComponentsAsRefs: Before await cachePromise\");\r\n    await cachePromise;\r\n  }\r\n  console.debug(\"getAllComponentsAsRefs: After\");\r\n\r\n  // !!! Iterating using hashToContentDb.iterate<string, void> causes all values to be `[object Blob]`\r\n  //await hashToContentDb.iterate<Blob, void>(\r\n  await hashToContentDb.iterate<string, void>(\r\n    // !!! async processor causes only 1 item to be processed since it returns Promise instead of undefined.\r\n    //async (componentData, hash, iterationNumber) => {\r\n    (componentText, hash, iterationNumber) => {\r\n      //const componentText = await componentData.text();\r\n      try {\r\n        const componentSpec = yaml.load(componentText) as ComponentSpec;\r\n        hashToComponentRef.set(hash, {\r\n          spec: componentSpec,\r\n        });\r\n      } catch (err) {\r\n        console.error(\r\n          `Error when parsing cached component. Hash: ${hash}. Error: ${err}. Component text: ${componentText}`\r\n        );\r\n      }\r\n    }\r\n  );\r\n  await hashToUrlDb.iterate<string, void>((url, hash, iterationNumber) => {\r\n    let componentRef = hashToComponentRef.get(hash);\r\n    if (componentRef === undefined) {\r\n      console.error(\r\n        `Component db corrupted: Component with url ${url} and hash ${hash} has no content in the DB.`\r\n      );\r\n    } else {\r\n      componentRef.url = url;\r\n    }\r\n  });\r\n  let componentRefs: ComponentReference[] = [];\r\n  // TODO: Improve the iteration once TypeScript property supports it\r\n  hashToComponentRef.forEach((componentRef, hash) => {\r\n    if (componentRef.url === undefined) {\r\n      console.error(\r\n        `Component db corrupted: Component with hash ${hash} has content, but no URL in the DB.`\r\n      );\r\n    } else {\r\n      componentRefs.push(componentRef);\r\n    }\r\n  });\r\n  return componentRefs;\r\n};\r\n\r\nexport const searchComponentsByName = async (\r\n  name: string,\r\n  users = [\"kubeflow\", \"Ark-kun\"]\r\n) => {\r\n  const componentRefs = await getAllComponentsAsRefs(users);\r\n  return componentRefs.filter(\r\n    (ref) => ref.spec?.name?.toLowerCase().includes(name.toLowerCase()) ?? false\r\n  );\r\n};\r\n","import { DragEvent } from \"react\";\r\n\r\nimport { ComponentReference, TaskSpec } from \"../componentSpec\";\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  event.dataTransfer.setData(\"application/reactflow\", JSON.stringify(nodeData));\r\n  event.dataTransfer.setData(\r\n    \"DragStart.offset\",\r\n    JSON.stringify({\r\n      offsetX: event.nativeEvent.offsetX,\r\n      offsetY: event.nativeEvent.offsetY,\r\n    })\r\n  );\r\n  event.dataTransfer.effectAllowed = \"move\";\r\n};\r\n\r\ninterface DraggableComponentProps {\r\n  componentReference: ComponentReference;\r\n}\r\n\r\nconst DraggableComponent = ({\r\n  componentReference,\r\n}: DraggableComponentProps) => {\r\n  return (\r\n    <div\r\n      className=\"react-flow__node react-flow__node-task sidebar-node\"\r\n      draggable\r\n      onDragStart={(event: DragEvent) => {\r\n        const taskSpec: TaskSpec = {\r\n          componentRef: componentReference,\r\n        };\r\n        return onDragStart(event, { task: taskSpec });\r\n      }}\r\n    >\r\n      {componentReference.spec?.name ?? \"Component\"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DraggableComponent;\r\n","import { ArgumentType, ComponentSpec, TypeSpecType } from \"../componentSpec\";\r\n\r\ninterface ArgumentsEditorProps {\r\n  componentSpec: ComponentSpec;\r\n  componentArguments: Record<string, ArgumentType>;\r\n  setComponentArguments: (args: Record<string, ArgumentType>) => void;\r\n  shrinkToWidth?: boolean;\r\n}\r\n\r\nconst getPatternForTypeSpec = (typeSpec?: TypeSpecType) => {\r\n  // TODO: Implement\r\n  return undefined;\r\n};\r\n\r\nconst typeSpecToString = (typeSpec?: TypeSpecType): string => {\r\n  if (typeSpec === undefined) {\r\n    return \"Any\";\r\n  }\r\n  if (typeof typeSpec === \"string\") {\r\n    return typeSpec;\r\n  }\r\n  return JSON.stringify(typeSpec);\r\n};\r\n\r\nconst ArgumentsEditor = ({\r\n  componentSpec,\r\n  componentArguments,\r\n  setComponentArguments,\r\n  shrinkToWidth = false,\r\n}: ArgumentsEditorProps) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"table\",\r\n        borderSpacing: \"5px\",\r\n        // Enables shrinking the table. But also makes all columns same width regardless of the content\r\n        tableLayout: shrinkToWidth ? \"fixed\" : \"auto\",\r\n        // Width is needed for table-layout: \"fixed\" to work\r\n        width: \"100%\",\r\n      }}\r\n    >\r\n      {(componentSpec.inputs ?? []).map((inputSpec) => {\r\n        const inputName = inputSpec.name;\r\n        let value: string | undefined = undefined;\r\n        let placeholder: string | undefined = undefined;\r\n        const argument = componentArguments[inputName];\r\n        if (argument === undefined) {\r\n          value = inputSpec.default;\r\n        } else {\r\n          if (typeof argument === \"string\") {\r\n            value = argument;\r\n          } else if (\"taskOutput\" in argument) {\r\n            placeholder = `<from task ${argument.taskOutput.taskId} / ${argument.taskOutput.outputName}>`;\r\n          } else if (\"graphInput\" in argument) {\r\n            placeholder = `<from graph input ${argument.graphInput.inputName}>`;\r\n          } else {\r\n            placeholder = \"<reference>\";\r\n          }\r\n        }\r\n\r\n        const argumentIsRequiredButMissing =\r\n          !(inputName in componentArguments) &&\r\n          inputSpec.optional !== true &&\r\n          inputSpec.default === undefined;\r\n\r\n        const typeSpecString =\r\n          typeSpecToString(inputSpec.type) +\r\n          (inputSpec.optional === true ? \"?\" : \"\");\r\n\r\n        return (\r\n          <div\r\n            key={inputName}\r\n            style={{\r\n              display: \"table-row\",\r\n            }}\r\n          >\r\n            <label\r\n              title={`${inputName} (${typeSpecString})`}\r\n              style={{\r\n                textAlign: \"right\",\r\n                display: \"table-cell\",\r\n                whiteSpace: \"nowrap\",\r\n                overflow: \"hidden\",\r\n                textOverflow: \"ellipsis\",\r\n              }}\r\n            >\r\n              <span>\r\n                {inputName} (\r\n                <span\r\n                  style={{\r\n                    textOverflow: \"ellipsis\",\r\n                    overflow: \"hidden\",\r\n                    maxWidth: \"90px\",\r\n                    display: \"inline-block\",\r\n                    verticalAlign: \"bottom\",\r\n                  }}\r\n                  title={typeSpecString}\r\n                >\r\n                  {typeSpecString}\r\n                </span>\r\n                )\r\n              </span>\r\n            </label>\r\n            <input\r\n              style={{\r\n                display: \"table-cell\",\r\n                // Prevents border flickering and disappearing on movement\r\n                borderWidth: \"1px\",\r\n                // Overriding both min-width and max-width to enable the input element shrinking\r\n                minWidth: \"50px\",\r\n                maxWidth: \"100%\",\r\n              }}\r\n              placeholder={placeholder}\r\n              required={argumentIsRequiredButMissing}\r\n              value={value ?? \"\"}\r\n              pattern={getPatternForTypeSpec(inputSpec.type)}\r\n              onChange={(e) => {\r\n                componentArguments[inputName] = e.target.value;\r\n                setComponentArguments({ ...componentArguments });\r\n              }}\r\n            />\r\n            <div\r\n              style={{\r\n                display: \"table-cell\",\r\n                // Setting explicit width to make the button column smaller. Otherwise it takes 1/3 of the total width when the table-layout is set to fixed.\r\n                // The width should have been set to \"min-content\", but that does not work for some reason\r\n                width: \"30px\",\r\n              }}\r\n            >\r\n              <button\r\n                type=\"button\"\r\n                title=\"Reset to default\"\r\n                onClick={(e) => {\r\n                  delete componentArguments[inputName];\r\n                  setComponentArguments({ ...componentArguments });\r\n                }}\r\n                disabled={!(inputName in componentArguments)}\r\n              >\r\n                ⌧\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ArgumentsEditor;\r\n","// Manually converted from https://github.com/kubeflow/pipelines/blob/master/api/v2alpha1/pipeline_spec.proto\r\n\r\n// The spec of a pipeline job.\r\nexport interface PipelineJob {\r\n  // Name of the job.\r\n  name?: string;\r\n\r\n  // User friendly display name\r\n  displayName?: string;\r\n  // Definition of the pipeline that is being executed.\r\n  pipelineSpec: PipelineSpec;\r\n\r\n  // The labels with user-defined metadata to organize PipelineJob.\r\n  labels?: { [k: string]: string };\r\n\r\n  // Runtime config of the pipeline.\r\n  runtimeConfig: RuntimeConfig;\r\n}\r\n\r\n// The runtime config of a PipelineJob.\r\nexport interface RuntimeConfig {\r\n  // The runtime parameters of the PipelineJob. The parameters will be\r\n  // passed into [PipelineJob.pipeline_spec][] to replace the placeholders\r\n  // at runtime.\r\n  parameters?: { [k: string]: MlmdValue };\r\n\r\n  // A path in a Cloud Storage bucket which will be treated as the root\r\n  // output directory of the pipeline. It is used by the system to\r\n  // generate the paths of output artifacts.\r\n  // This is a GCP-specific optimization.\r\n  gcsOutputDirectory: string;\r\n}\r\n\r\n// The spec of a pipeline.\r\nexport interface PipelineSpec {\r\n  // The metadata of the pipeline.\r\n  pipelineInfo?: PipelineInfo;\r\n\r\n  // The deployment config of the pipeline.\r\n  // The deployment config can be extended to provide platform specific configs.\r\n  deploymentSpec: PipelineDeploymentConfig;\r\n\r\n  // The version of the sdk, which compiles the spec.\r\n  sdkVersion?: string;\r\n\r\n  // The version of the schema.\r\n  schemaVersion?: string;\r\n\r\n  // The map of name to definition of all components used in this pipeline.\r\n  components: { [k: string]: ComponentSpec };\r\n\r\n  // The definition of the main pipeline.  Execution of the pipeline is\r\n  // completed upon the completion of this component.\r\n  root: ComponentSpec;\r\n}\r\n\r\n// Definition of a component.\r\nexport interface ComponentSpec {\r\n  // Definition of the input parameters and artifacts of the component.\r\n  inputDefinitions?: ComponentInputsSpec;\r\n\r\n  // Definition of the output parameters and artifacts of the component.\r\n  outputDefinitions?: ComponentOutputsSpec;\r\n\r\n  // Either a DAG or a single execution.\r\n  //oneof implementation {\r\n  dag?: DagSpec;\r\n  executorLabel?: string;\r\n  //}\r\n}\r\n\r\n// A DAG contains multiple tasks.\r\nexport interface DagSpec {\r\n  // The tasks inside the dag.\r\n  tasks: { [k: string]: PipelineTaskSpec };\r\n\r\n  // Defines how the outputs of the dag are linked to the sub tasks.\r\n  outputs?: DagOutputsSpec;\r\n}\r\n\r\n// Definition of the output artifacts and parameters of the DAG component.\r\nexport interface DagOutputsSpec {\r\n  // Name to the output artifact channel of the DAG.\r\n  artifacts?: { [k: string]: DagOutputArtifactSpec };\r\n\r\n  // The name to the output parameter.\r\n  parameters?: { [k: string]: DagOutputParameterSpec };\r\n}\r\n\r\n// Selects a defined output artifact from a sub task of the DAG.\r\nexport interface ArtifactSelectorSpec {\r\n  // The name of the sub task which produces the output that matches with\r\n  // the `output_artifact_key`.\r\n  producerSubtask: string;\r\n\r\n  // The key of [ComponentOutputsSpec.artifacts][] map of the producer task.\r\n  outputArtifactKey: string;\r\n}\r\n\r\n// Selects a list of output artifacts that will be aggregated to the single\r\n// output artifact channel of the DAG.\r\nexport interface DagOutputArtifactSpec {\r\n  // The selected artifacts will be aggregated as output as a single\r\n  // output channel of the DAG.\r\n  artifactSelectors: ArtifactSelectorSpec[];\r\n}\r\n\r\n// Selects a defined output parameter from a sub task of the DAG.\r\nexport interface ParameterSelectorSpec {\r\n  // The name of the sub task which produces the output that matches with\r\n  // the `output_parameter_key`.\r\n  producerSubtask: string;\r\n\r\n  // The key of [ComponentOutputsSpec.parameters][] map of the producer task.\r\n  outputParameterKey: string;\r\n}\r\n\r\n// Aggregate output parameters from sub tasks into a list object.\r\nexport interface ParameterSelectorsSpec {\r\n  parameterSelectors: ParameterSelectorSpec[];\r\n}\r\n\r\n// Aggregates output parameters from sub tasks into a map object.\r\nexport interface MapParameterSelectorsSpec {\r\n  mappedParameters: { [k: string]: ParameterSelectorSpec };\r\n}\r\n\r\n// We support four ways to fan-in output parameters from sub tasks to the DAG\r\n// parent task.\r\n// 1. Directly expose a single output parameter from a sub task,\r\n// 2. (Conditional flow) Expose a list of output from multiple tasks\r\n// (some might be skipped) but allows only one of the output being generated.\r\n// 3. Expose a list of outputs from multiple tasks (e.g. iterator flow).\r\n// 4. Expose the aggregation of output parameters as a name-value map.\r\nexport type DagOutputParameterSpec =\r\n  // Returns the sub-task parameter as a DAG parameter.  The selected\r\n  // parameter must have the same type as the DAG parameter type.\r\n  | { valueFromParameter: ParameterSelectorSpec }\r\n  // Returns one of the sub-task parameters as a DAG parameter. If there are\r\n  // multiple values are available to select, the DAG will fail. All the\r\n  // selected parameters must have the same type as the DAG parameter type.\r\n  | { valueFromOneof: ParameterSelectorsSpec };\r\n\r\n// Definition specification of the component input parameters and artifacts.\r\nexport interface ComponentInputsSpec {\r\n  // Name to artifact input.\r\n  artifacts?: { [k: string]: InputArtifactSpec };\r\n\r\n  // Name to parameter input.\r\n  parameters?: { [k: string]: InputParameterSpec };\r\n}\r\n\r\n// Definition of an artifact input.\r\nexport interface InputArtifactSpec {\r\n  artifactType: ArtifactTypeSchema;\r\n}\r\n\r\n// Definition of a parameter input.\r\nexport interface InputParameterSpec {\r\n  type: PrimitiveTypeEnum;\r\n}\r\n\r\n// Definition specification of the component output parameters and artifacts.\r\nexport interface ComponentOutputsSpec {\r\n  // Name to artifact output.\r\n  artifacts?: { [k: string]: OutputArtifactSpec };\r\n\r\n  // Name to parameter output.\r\n  parameters?: { [k: string]: OutputParameterSpec };\r\n}\r\n\r\n// Definition of an artifact output.\r\nexport interface OutputArtifactSpec {\r\n  artifactType: ArtifactTypeSchema;\r\n\r\n  // Properties of the Artifact.\r\n  metadata?: { [k: string]: any };\r\n}\r\n\r\n// Definition of a parameter output.\r\nexport interface OutputParameterSpec {\r\n  type: PrimitiveTypeEnum;\r\n}\r\n\r\n// The spec of task inputs.\r\n//export interface TaskInputsSpec {\r\nexport interface TaskArgumentsSpec {\r\n  // A map of input parameters which are small values, stored by the system and\r\n  // can be queried.\r\n  parameters?: { [k: string]: ParameterArgumentSpec };\r\n  // A map of input artifacts.\r\n  artifacts?: { [k: string]: ArtifactArgumentSpec };\r\n}\r\n\r\n// The specification of a task input artifact.\r\n//export type InputArtifactSpec =\r\nexport type ArtifactArgumentSpec =\r\n  // Pass the input artifact from another task within the same parent\r\n  // component.\r\n  | { taskOutputArtifact: TaskOutputArtifactSpec }\r\n  // Pass the input artifact from parent component input artifact.\r\n  | { componentInputArtifact: string };\r\n\r\nexport interface TaskOutputArtifactSpec {\r\n  // The name of the upstream task which produces the output that matches\r\n  // with the `output_artifact_key`.\r\n  producerTask: string;\r\n\r\n  // The key of [TaskOutputsSpec.artifacts][] map of the producer task.\r\n  outputArtifactKey: string;\r\n}\r\n\r\n// Represents an input parameter. The value can be taken from an upstream\r\n// task's output parameter (if specifying `producer_task` and\r\n// `output_parameter_key`, or it can be a runtime value, which can either be\r\n// determined at compile-time, or from a pipeline parameter.\r\n//export interface InputParameterSpec {\r\nexport interface ParameterArgumentSpec {\r\n  //oneof kind {\r\n  // Output parameter from an upstream task.\r\n  taskOutputParameter?: TaskOutputParameterSpec;\r\n  // A constant value or runtime parameter.\r\n  runtimeValue?: ValueOrRuntimeParameter;\r\n  // Pass the input parameter from parent component input parameter.\r\n  componentInputParameter?: string;\r\n  // The final status of an upstream task.\r\n  taskFinalStatus?: TaskFinalStatus;\r\n  //}\r\n\r\n  // Selector expression of Common Expression Language (CEL)\r\n  // that applies to the parameter found from above kind.\r\n  //\r\n  // The expression is applied to the Value type\r\n  // [Value][].  For example,\r\n  // 'size(string_value)' will return the size of the Value.string_value.\r\n  //\r\n  // After applying the selection, the parameter will be returned as a\r\n  // [Value][].  The type of the Value is either deferred from the input\r\n  // definition in the corresponding\r\n  // [ComponentSpec.input_definitions.parameters][], or if not found,\r\n  // automatically deferred as either string value or double value.\r\n  //\r\n  // In addition to the builtin functions in CEL, The value.string_value can\r\n  // be treated as a json string and parsed to the [google.protobuf.Value][]\r\n  // proto message. Then, the CEL expression provided in this field will be\r\n  // used to get the requested field. For examples,\r\n  //  - if Value.string_value is a json array of \"[1.1, 2.2, 3.3]\",\r\n  //  'parseJson(string_value)[i]' will pass the ith parameter from the list\r\n  //  to the current task, or\r\n  //  - if the Value.string_value is a json map of \"{\"a\": 1.1, \"b\": 2.2,\r\n  //  \"c\": 3.3}, 'parseJson(string_value)[key]' will pass the map value from\r\n  //  the struct map to the current task.\r\n  //\r\n  // If unset, the value will be passed directly to the current task.\r\n  parameterExpressionSelector?: string;\r\n}\r\n\r\n// Represents an upstream task's output parameter.\r\nexport interface TaskOutputParameterSpec {\r\n  // The name of the upstream task which produces the output parameter that\r\n  // matches with the `output_parameter_key`.\r\n  producerTask: string;\r\n\r\n  // The key of [TaskOutputsSpec.parameters][] map of the producer task.\r\n  outputParameterKey: string;\r\n}\r\n\r\n// Represents an upstream task's final status. The field can only be set if\r\n// the schema version is `2.0.0`. The resolved input parameter will be a\r\n// json payload in string type.\r\nexport interface TaskFinalStatus {\r\n  // The name of the upsteram task where the final status is coming from.\r\n  producerTask: string;\r\n}\r\n\r\n// The spec of task outputs.\r\nexport interface TaskOutputsSpec {\r\n  // A map of output parameters which are small values, stored by the system and\r\n  // can be queried. The output key is used\r\n  // by [TaskInputsSpec.InputParameterSpec][] of the downstream task to specify\r\n  // the data dependency. The same key will also be used by\r\n  // [ExecutorInput.Inputs][] to reference the output parameter.\r\n  parameters?: { [k: string]: OutputParameterSpec };\r\n  // A map of output artifacts. Keyed by output key. The output key is used\r\n  // by [TaskInputsSpec.InputArtifactSpec][] of the downstream task to specify\r\n  // the data dependency. The same key will also be used by\r\n  // [ExecutorInput.Inputs][] to reference the output artifact.\r\n  artifacts?: { [k: string]: OutputArtifactSpec };\r\n}\r\n\r\n// The specification of a task output artifact.\r\nexport interface OutputArtifactSpec {\r\n  // The type of the artifact.\r\n  artifactType: ArtifactTypeSchema;\r\n\r\n  // The properties of the artifact, which are determined either at\r\n  // compile-time, or at pipeline submission time through runtime parameters\r\n  properties?: { [k: string]: ValueOrRuntimeParameter };\r\n\r\n  // The custom properties of the artifact, which are determined either at\r\n  // compile-time, or at pipeline submission time through runtime parameters\r\n  customProperties?: { [k: string]: ValueOrRuntimeParameter };\r\n}\r\n\r\n// Specification for output parameters produced by the task.\r\nexport interface OutputParameterSpec {\r\n  // Required field. The type of the output parameter.\r\n  type: PrimitiveTypeEnum;\r\n}\r\n\r\n// Represent primitive types.\r\nexport enum PrimitiveTypeEnum {\r\n  PRIMITIVE_TYPE_UNSPECIFIED = \"PRIMITIVE_TYPE_UNSPECIFIED\",\r\n  INT = \"INT\",\r\n  DOUBLE = \"DOUBLE\",\r\n  STRING = \"STRING\",\r\n}\r\n\r\n// The spec of a pipeline task.\r\nexport interface PipelineTaskSpec {\r\n  // Basic info of a pipeline task.\r\n  taskInfo?: PipelineTaskInfo;\r\n\r\n  // Specification for task inputs which contains parameters and artifacts.\r\n  // <Alexey Volkov>: This should have been named: `arguments: TaskArguments`\r\n  inputs?: TaskArgumentsSpec;\r\n\r\n  // A list of names of upstream tasks that do not provide input\r\n  // artifacts for this task, but nonetheless whose completion this task depends\r\n  // on.\r\n  dependentTasks?: string[];\r\n\r\n  cachingOptions?: CachingOptions;\r\n\r\n  // Reference to a component.  Use this field to define either a DAG or an\r\n  // executor.\r\n  componentRef: ComponentRef;\r\n\r\n  // Trigger policy of the task.\r\n  triggerPolicy?: TriggerPolicy;\r\n\r\n  // Iterator supports fanning out the task into multiple sub-tasks based on the\r\n  // values of input artifact or parameter. The current task will become the\r\n  // parent of all the fan-out tasks. The output of the current task follows\r\n  // the following conventions:\r\n  // * Output artifacts with the same name of each iteration will be merged\r\n  //   into one output artifact channel of the parent iterator task.\r\n  // * Output parameters with the same name of each iteration will be merged\r\n  //   into a string output parameter with the same name with content being a\r\n  //   JSON array.\r\n  //\r\n  // For example, if an iterator starts two sub-tasks (t1 and t2) with the\r\n  // following outputs.\r\n  //\r\n  // t1.outputs.parameters = { 'p': 'v1' }\r\n  // t1.outputs.artifacts = { 'a': [a1] }\r\n  // t2.outputs.parameters = { 'p': 'v2' }\r\n  // t2.outputs.artifacts = { 'a': [a2] }\r\n  // parent_task.outputs.parameters = { 'p': '[\"v1\", \"v2\"]' }\r\n  // parent_task.outputs.artifacts = { 'a': [a1, a2] }\r\n  //oneof iterator {\r\n  // Iterator to iterate over an artifact input.\r\n  artifactIterator?: ArtifactIteratorSpec;\r\n  // Iterator to iterate over a parameter input.\r\n  parameterIterator?: ParameterIteratorSpec;\r\n  //}\r\n}\r\n\r\nexport interface CachingOptions {\r\n  // Whether or not to enable cache for this task. Defaults to false.\r\n  enableCache: boolean;\r\n}\r\n\r\n// Trigger policy defines how the task gets triggered. If a task is not\r\n// triggered, it will run into SKIPPED state.\r\nexport interface TriggerPolicy {\r\n  // An expression which will be evaluated into a boolean value. True to\r\n  // trigger the task to run. The expression follows the language of\r\n  // [CEL Spec][https://github.com/google/cel-spec]. It can access the data\r\n  // from [ExecutorInput][] message of the task.\r\n  // For example:\r\n  // - `inputs.artifacts['model'][0].properties['accuracy']*100 > 90`\r\n  // - `inputs.parameters['type'] == 'foo' && inputs.parameters['num'] == 1`\r\n  condition: string;\r\n\r\n  // The trigger strategy of this task.  The `strategy` and `condition` are\r\n  // in logic \"AND\", as a task will only be tested for the `condition` when\r\n  // the `strategy` is meet.\r\n  // Unset or set to default value of TRIGGER_STRATEGY_UNSPECIFIED behaves the\r\n  // same as ALL_UPSTREAM_TASKS_SUCCEEDED.\r\n  strategy: TriggerStrategy;\r\n}\r\n\r\n// An enum defines the trigger strategy of when the task will be ready to be\r\n// triggered.\r\n// ALL_UPSTREAM_TASKS_SUCCEEDED - all upstream tasks in succeeded state.\r\n// ALL_UPSTREAM_TASKS_COMPLETED - all upstream tasks in any final state.\r\n// (Note that CANCELLED is also a final state but job will not trigger new\r\n// tasks when job is in CANCELLING state, so that the task with the trigger\r\n// policy at ALL_UPSTREAM_TASKS_COMPLETED will not start when job\r\n// cancellation is in progress.)\r\nenum TriggerStrategy {\r\n  // Unspecified.  Behave the same as ALL_UPSTREAM_TASKS_SUCCEEDED.\r\n  TRIGGER_STRATEGY_UNSPECIFIED = \"TRIGGER_STRATEGY_UNSPECIFIED\",\r\n  // Specifies that all upstream tasks are in succeeded state.\r\n  ALL_UPSTREAM_TASKS_SUCCEEDED = \"ALL_UPSTREAM_TASKS_SUCCEEDED\",\r\n  // Specifies that all upstream tasks are in any final state.\r\n  ALL_UPSTREAM_TASKS_COMPLETED = \"ALL_UPSTREAM_TASKS_COMPLETED\",\r\n}\r\n\r\n// The spec of an artifact iterator. It supports fan-out a workflow from a list\r\n// of artifacts.\r\nexport interface ArtifactIteratorSpec {\r\n  // The items to iterate.\r\n  items: ArtifactItemsSpec;\r\n  // The name of the input artifact channel which has the artifact item from the\r\n  // [items][] collection.\r\n  itemInput: string;\r\n}\r\n// Specifies the name of the artifact channel which contains the collection of\r\n// items to iterate. The iterator will create a sub-task for each item of\r\n// the collection and pass the item as a new input artifact channel as\r\n// specified by [item_input][].\r\nexport interface ArtifactItemsSpec {\r\n  // The name of the input artifact.\r\n  inputArtifact: string;\r\n}\r\n\r\n// The spec of a parameter iterator. It supports fan-out a workflow from a\r\n// string parameter which contains a JSON array.\r\nexport interface ParameterIteratorSpec {\r\n  // The items to iterate.\r\n  items: ParameterItemsSpec;\r\n  // The name of the input parameter which has the item value from the\r\n  // [items][] collection.\r\n  itemInput: string;\r\n}\r\n\r\n// Specifies the spec to describe the parameter items to iterate.\r\nexport type ParameterItemsSpec =\r\n  // Specifies where to get the collection of items to iterate. The iterator\r\n  // will create a sub-task for each item of the collection and pass the item\r\n  // as a new input parameter as specified by [item_input][].\r\n  // The raw JSON array.\r\n  | { raw: string }\r\n  // The name of the input parameter whose value has the items collection.\r\n  // The parameter must be in STRING type and its content can be parsed\r\n  // as a JSON array.\r\n  | { input_parameter: string };\r\n\r\nexport interface ComponentRef {\r\n  // The name of a component. Refer to the key of the\r\n  // [PipelineSpec.components][] map.\r\n  name: string;\r\n}\r\n\r\n// Basic info of a pipeline.\r\nexport interface PipelineInfo {\r\n  // Required field. The name of the pipeline.\r\n  // The name will be used to create or find pipeline context in MLMD.\r\n  name: string;\r\n}\r\n\r\n// The definition of a artifact type in MLMD.\r\nexport type ArtifactTypeSchema =\r\n  // The name of the type. The format of the title must be:\r\n  // `<namespace>.<title>.<version>`.\r\n  // Examples:\r\n  //  - `aiplatform.Model.v1`\r\n  //  - `acme.CustomModel.v2`\r\n  // When this field is set, the export type must be pre-registered in the MLMD\r\n  // store.\r\n  | { schemaTitle: string }\r\n\r\n  // Points to a YAML file stored on Google Cloud Storage describing the\r\n  // format.\r\n  | { schemaUri: string }\r\n\r\n  // Contains a raw YAML string, describing the format of\r\n  // the properties of the type.\r\n  | { instanceSchema: string };\r\n\r\n// The basic info of a task.\r\nexport interface PipelineTaskInfo {\r\n  // The unique name of the task within the pipeline definition. This name\r\n  // will be used in downstream tasks to indicate task and data dependencies.\r\n  // <Alexey Volkov>: This ^^^ does not seem to be true. This name seems to be used only as display name.\r\n  name: string;\r\n}\r\n\r\n// Definition for a value or reference to a runtime parameter. A\r\n// ValueOrRuntimeParameter instance can be either a field value that is\r\n// determined during compilation time, or a runtime parameter which will be\r\n// determined during runtime.\r\nexport type ValueOrRuntimeParameter =\r\n  // Constant value which is determined in compile time.\r\n  | { constantValue: MlmdValue }\r\n  // The runtime parameter refers to the parent component input parameter.\r\n  | { runtimeParameter: string };\r\n\r\nexport type MlmdValue =\r\n  | {\r\n      stringValue: string;\r\n    }\r\n  | {\r\n      intValue: number;\r\n    }\r\n  | {\r\n      doubleValue: number;\r\n    };\r\n\r\n// The definition of the deployment config of the pipeline. It contains the\r\n// the platform specific executor configs for KFP OSS.\r\nexport interface PipelineDeploymentConfig {\r\n  // Map from executor label to executor spec.\r\n  executors: { [k: string]: ExecutorSpec };\r\n}\r\n\r\n// The specification on a container invocation.\r\n// The string fields of the message support string based placeholder contract\r\n// defined in [ExecutorInput](). The output of the container follows the\r\n// contract of [ExecutorOutput]().\r\nexport interface PipelineContainerSpec {\r\n  // The image uri of the container.\r\n  image: string;\r\n  // The main entrypoint commands of the container to run. If not provided,\r\n  // fallback to use the entry point command defined in the container image.\r\n  command?: string[];\r\n  // The arguments to pass into the main entrypoint of the container.\r\n  args?: string[];\r\n\r\n  // The lifecycle hooks of the container executor.\r\n  // lifecycle: Lifecycle;\r\n\r\n  resources?: ResourceSpec;\r\n}\r\n\r\n// The specification on the resource requirements of a container execution.\r\n// This can include specification of vCPU, memory requirements, as well as\r\n// accelerator types and counts.\r\nexport interface ResourceSpec {\r\n  // The limit of the number of vCPU cores. This container execution needs\r\n  // at most cpu_limit vCPU to run.\r\n  cpuLimit: number;\r\n\r\n  // The memory limit in GB. This container execution needs at most\r\n  // memory_limit RAM to run.\r\n  memoryLimit: number;\r\n\r\n  accelerator: AcceleratorConfig;\r\n}\r\n\r\n// The specification of the executor.\r\nexport type ExecutorSpec =\r\n  // Starts a container.\r\n  { container: PipelineContainerSpec };\r\n// Import an artifact.\r\n//| { importer: ImporterSpec }\r\n// Resolves an existing artifact.\r\n//| { resolver: ResolverSpec }\r\n// Starts a Google Cloud AI Platform CustomJob.\r\n//| { custom_job: AIPlatformCustomJobSpec };\r\n\r\n// The specification on the accelerators being attached to this container.\r\nexport interface AcceleratorConfig {\r\n  // The type of accelerators.\r\n  type: string;\r\n  // The number of accelerators.\r\n  count: number;\r\n}\r\n\r\n// Missing: Lifecycle\r\n// Missing: ImporterSpec\r\n// Missing: ResolverSpec\r\n// Missing: RuntimeArtifact\r\n// Missing: ArtifactList\r\n// Missing: ExecutorInput\r\n// Missing: ExecutorOutput\r\n","import {\r\n  ArgumentType,\r\n  ComponentSpec,\r\n  StringOrPlaceholder,\r\n  TypeSpecType,\r\n  isContainerImplementation,\r\n  isGraphImplementation,\r\n} from \"../componentSpec\";\r\n\r\nimport * as vertex from \"./vertexPipelineSpec\";\r\n\r\n// # How to handle I/O:\r\n// Rules (might have exceptions)\r\n// output = output artifact\r\n// inputValue => input parameter\r\n// inputPath => input artifact\r\n// # Fixing conflicts:\r\n// 1) Artifact (may only come from task output) is consumed as value.\r\n//   Solution 1) (implemented): Change input from parameter to artifact and use the input.artifact.value placeholder.\r\n//      Cons: The downstream component input definitions depend on arguments. (Some inputs are changed from parameter to artifact.)\r\n//   Solution 2): Add parameter output (with the same name as the artifact output) to the upstream component. The paths should be the same, so a single file will be treated as both parameter and output.\r\n//      Cons: The upstream component output definitions depend on downstream consumption style. (Although parameter outputs are added, not changed.)\r\n//   Solution 3): Insert a \"Downloader\" task between upstream and downstream.\r\n//      Cons: Extra container task\r\n// 2) Parameter (pipeline input or constant value) is consumed as artifact (as file).\r\n//   Solution 1): Insert a \"Uploader\" task to convert parameter to artifact.\r\n//      Cons: Extra container task\r\n\r\nconst sanitizePipelineInfoName = (pipelineContextName: string) => {\r\n  return pipelineContextName.toLowerCase().replace(/\\W/, \"-\");\r\n};\r\n\r\ntype ResolvedCommandLineAndArgs = {\r\n  command?: string[];\r\n  args?: string[];\r\n  inputsConsumedAsValue: Set<string>;\r\n  inputsConsumedAsPath: Set<string>;\r\n};\r\n\r\nconst resolveCommandLine = (\r\n  componentSpec: ComponentSpec,\r\n  taskArguments: Record<string, ArgumentType>\r\n): ResolvedCommandLineAndArgs => {\r\n  if (!isContainerImplementation(componentSpec.implementation)) {\r\n    throw Error(\"resolveCommandLine only supports container components\");\r\n  }\r\n  const containerSpec = componentSpec.implementation.container;\r\n\r\n  const inputsConsumedAsValue = new Set<string>();\r\n  const inputsConsumedAsPath = new Set<string>();\r\n  const convertArg = (arg: StringOrPlaceholder): string[] => {\r\n    if (typeof arg == \"string\") {\r\n      return [arg];\r\n    } else if (\"inputValue\" in arg) {\r\n      const inputName = arg.inputValue;\r\n      const argument = taskArguments[inputName];\r\n      if (\r\n        argument !== undefined &&\r\n        typeof argument != \"string\" &&\r\n        \"taskOutput\" in argument\r\n      ) {\r\n        // ! Important details:\r\n        // In this branch, the argument comes from task output.\r\n        // All outputs are artifacts by default, so this argument is an artifact argument.\r\n        // We can either try to change the argument to parameter or make the input to be an artifact to solve the conflict.\r\n        // I choose to make the input to be artifact.\r\n        // Adding input name to inputsConsumedAsPath to make the input rendered as an artifact input.\r\n        inputsConsumedAsPath.add(inputName);\r\n        return [`{{$.inputs.artifacts['${inputName}'].value}}`];\r\n      } else {\r\n        inputsConsumedAsValue.add(inputName);\r\n        return [`{{$.inputs.parameters['${inputName}']}}`];\r\n      }\r\n    } else if (\"inputPath\" in arg) {\r\n      const inputName = arg.inputPath;\r\n      inputsConsumedAsPath.add(inputName);\r\n      return [`{{$.inputs.artifacts['${inputName}'].path}}`];\r\n    } else if (\"outputPath\" in arg) {\r\n      const outputName = arg.outputPath;\r\n      return [`{{$.outputs.artifacts['${outputName}'].path}}`];\r\n    } else if (\"if\" in arg) {\r\n      const [ifCond, ifThen, ifElse] = [arg.if.cond, arg.if.then, arg.if.else];\r\n      // TODO: Check false values, not just check for true\r\n      let condEvaluatesToTrue = false;\r\n      if (typeof ifCond === \"string\") {\r\n        condEvaluatesToTrue = ifCond.toLowerCase() === \"true\";\r\n      } else if (typeof ifCond === \"boolean\") {\r\n        condEvaluatesToTrue = ifCond;\r\n      } else if (\"isPresent\" in ifCond) {\r\n        const inputName = ifCond.isPresent;\r\n        condEvaluatesToTrue = inputName in taskArguments;\r\n      } else if (\"inputValue\" in ifCond) {\r\n        const inputName = ifCond.inputValue;\r\n        if (!(inputName in taskArguments)) {\r\n          condEvaluatesToTrue = false;\r\n        } else {\r\n          const taskArgument = taskArguments[inputName];\r\n          if (typeof taskArgument === \"string\") {\r\n            condEvaluatesToTrue = taskArgument.toLowerCase() === \"true\";\r\n          } else {\r\n            throw Error(\r\n              \"Using runtime conditions in component command line placeholders is not supported yet.\"\r\n            );\r\n          }\r\n        }\r\n      } else {\r\n        throw Error(\"Unexpected condition kind: \" + ifCond);\r\n      }\r\n      const unresolvedArgs = condEvaluatesToTrue ? ifThen : ifElse;\r\n      if (unresolvedArgs === undefined) {\r\n        return [];\r\n      }\r\n      return unresolvedArgs.flatMap(convertArg);\r\n    } else if (\"concat\" in arg) {\r\n      const concatArgs = arg.concat;\r\n      return [concatArgs.flatMap(convertArg).join(\"\")];\r\n    } else {\r\n      throw Error(`Unknown kind of command-line argument: ${arg}`);\r\n    }\r\n  };\r\n\r\n  const result = {\r\n    command: containerSpec.command?.flatMap(convertArg),\r\n    args: containerSpec.args?.flatMap(convertArg),\r\n    inputsConsumedAsValue: inputsConsumedAsValue,\r\n    inputsConsumedAsPath: inputsConsumedAsPath,\r\n  };\r\n  return result;\r\n};\r\n\r\nconst typeSpecToVertexPrimitiveTypeEnum = (\r\n  typeSpec: TypeSpecType | undefined\r\n): vertex.PrimitiveTypeEnum => {\r\n  if (typeof typeSpec === \"string\") {\r\n    if ([\"integer\"].includes(typeSpec.toLowerCase())) {\r\n      return vertex.PrimitiveTypeEnum.INT;\r\n    }\r\n    if ([\"float\", \"double\"].includes(typeSpec.toLowerCase())) {\r\n      return vertex.PrimitiveTypeEnum.DOUBLE;\r\n    }\r\n  }\r\n  return vertex.PrimitiveTypeEnum.STRING;\r\n};\r\n\r\nconst typeSpecToVertexParameterSpec = (\r\n  typeSpec: TypeSpecType | undefined\r\n): vertex.InputParameterSpec => {\r\n  return {\r\n    type: typeSpecToVertexPrimitiveTypeEnum(typeSpec),\r\n  };\r\n};\r\n\r\nconst typeSpecToVertexArtifactTypeSchema = (\r\n  typeSpec: TypeSpecType | undefined\r\n): vertex.ArtifactTypeSchema => {\r\n  // TODO: Implement better mapping\r\n  const artifactTypeSchema = {\r\n    schemaTitle: \"system.Artifact\",\r\n  };\r\n  return artifactTypeSchema;\r\n};\r\n\r\nconst typeSpecToVertexArtifactSpec = (\r\n  typeSpec: TypeSpecType | undefined\r\n): vertex.InputArtifactSpec => {\r\n  return {\r\n    artifactType: typeSpecToVertexArtifactTypeSchema(typeSpec),\r\n  };\r\n};\r\n// const typeSpecToVertexArtifactType(typeSpec: TypeSpecType) => {\r\n//     return typeof typeSpec === \"string\" && [\"String\", \"Integer\", \"Float\", \"Double\", \"Boolean\", ]\r\n// }\r\n\r\nconst MAKE_ARTIFACT_COMPONENT_ID = \"_make_artifact\";\r\nconst MAKE_ARTIFACT_EXECUTOR_ID = \"_make_artifact\";\r\nconst MAKE_ARTIFACT_INPUT_NAME = \"parameter\";\r\nconst MAKE_ARTIFACT_OUTPUT_NAME = \"artifact\";\r\n\r\nconst makeArtifactTaskSpecTemplate: vertex.PipelineTaskSpec = {\r\n  componentRef: {\r\n    name: MAKE_ARTIFACT_COMPONENT_ID,\r\n  },\r\n  taskInfo: {\r\n    name: \"Make artifact\",\r\n  },\r\n  inputs: {\r\n    parameters: {},\r\n  },\r\n  cachingOptions: {\r\n    enableCache: true,\r\n  },\r\n};\r\n\r\nconst makeArtifactComponentSpec: vertex.ComponentSpec = {\r\n  executorLabel: MAKE_ARTIFACT_EXECUTOR_ID,\r\n  inputDefinitions: {\r\n    parameters: {\r\n      [MAKE_ARTIFACT_INPUT_NAME]: {\r\n        type: vertex.PrimitiveTypeEnum.STRING,\r\n      },\r\n    },\r\n  },\r\n  outputDefinitions: {\r\n    artifacts: {\r\n      [MAKE_ARTIFACT_OUTPUT_NAME]: {\r\n        artifactType: {\r\n          schemaTitle: \"system.Artifact\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst makeArtifactExecutorSpec: vertex.ExecutorSpec = {\r\n  container: {\r\n    image: \"alpine\",\r\n    command: [\r\n      \"sh\",\r\n      \"-ec\",\r\n      'mkdir -p \"$(dirname \"$1\")\"; printf \"%s\" \"$0\" > \"$1\"',\r\n      `{{$.inputs.parameters['${MAKE_ARTIFACT_INPUT_NAME}']}}`,\r\n      `{{$.outputs.artifacts['${MAKE_ARTIFACT_OUTPUT_NAME}'].path}}`,\r\n    ],\r\n  },\r\n};\r\n\r\nconst taskSpecToVertexTaskSpecComponentSpecAndExecutorSpec = (\r\n  componentSpec: ComponentSpec,\r\n  //passedArgumentNames: string[],\r\n  taskArguments: Record<string, ArgumentType>,\r\n  generateTaskID: (prefix: string) => string,\r\n  isRoot = false\r\n) => {\r\n  if (!isContainerImplementation(componentSpec.implementation)) {\r\n    // TODO: Support nested graph components\r\n    throw Error(\"Nested graph components are not supported yet\");\r\n  }\r\n  const containerSpec = componentSpec.implementation.container;\r\n\r\n  const resolvedCommandLine = resolveCommandLine(componentSpec, taskArguments);\r\n\r\n  const vertexExecutorSpec: vertex.ExecutorSpec = {\r\n    container: {\r\n      image: containerSpec.image,\r\n      command: resolvedCommandLine.command,\r\n      args: resolvedCommandLine.args,\r\n    },\r\n  };\r\n\r\n  const inputMap = new Map(\r\n    (componentSpec.inputs ?? []).map((inputSpec) => [inputSpec.name, inputSpec])\r\n  );\r\n\r\n  const vertexComponentInputsSpec: vertex.ComponentInputsSpec = {\r\n    parameters: Object.fromEntries(\r\n      Array.from(resolvedCommandLine.inputsConsumedAsValue.values()).map(\r\n        (inputName) => [\r\n          inputName,\r\n          typeSpecToVertexParameterSpec(inputMap.get(inputName)?.type),\r\n        ]\r\n      )\r\n    ),\r\n    artifacts: Object.fromEntries(\r\n      Array.from(resolvedCommandLine.inputsConsumedAsPath.values()).map(\r\n        (inputName) => [\r\n          inputName,\r\n          typeSpecToVertexArtifactSpec(inputMap.get(inputName)?.type),\r\n        ]\r\n      )\r\n    ),\r\n  };\r\n\r\n  const vertexComponentOutputsSpec: vertex.ComponentOutputsSpec = {\r\n    parameters: {}, // Parameters will be added later as needed\r\n    artifacts: Object.fromEntries(\r\n      (componentSpec.outputs ?? []).map((outputSpec) => [\r\n        outputSpec.name,\r\n        typeSpecToVertexArtifactSpec(outputSpec.type),\r\n      ])\r\n    ),\r\n  };\r\n\r\n  const vertexComponentSpec: vertex.ComponentSpec = {\r\n    inputDefinitions: vertexComponentInputsSpec,\r\n    outputDefinitions: vertexComponentOutputsSpec,\r\n    // dag\r\n    executorLabel: \"<set later>\",\r\n  };\r\n\r\n  const vertexTaskParameterArguments: Record<\r\n    string,\r\n    vertex.ParameterArgumentSpec\r\n  > = Object.fromEntries(\r\n    Array.from(resolvedCommandLine.inputsConsumedAsValue.values()).map(\r\n      (inputName) => [\r\n        inputName,\r\n        ((inputName) => {\r\n          // TODO: Check that this works\r\n          let taskArgument = taskArguments[inputName];\r\n          //if (! (inputName in taskArguments)) {\r\n          if (taskArgument === undefined) {\r\n            // Checking for default value\r\n            const inputSpec = inputMap.get(inputName);\r\n            if (inputSpec === undefined) {\r\n              throw Error(\r\n                `Cannot happen: vertexTaskParameterArguments - inputMap.get(${inputName}) === undefined`\r\n              );\r\n            }\r\n            if (inputSpec.default !== undefined) {\r\n              taskArgument = inputSpec.default;\r\n            } else {\r\n              if (inputSpec.optional === true) {\r\n                // TODO: Decide what the behavior should be\r\n                // throw Error(`Input \"${inputName}\" is optional, but command-line still uses it when when it's not present.`);\r\n                console.error(\r\n                  `Input \"${inputName}\" is optional, but command-line still uses it when when it's not present.`\r\n                );\r\n                taskArgument = \"\";\r\n              } else {\r\n                throw Error(\r\n                  `Argument was not provided for required input \"${inputName}\"`\r\n                );\r\n              }\r\n            }\r\n          }\r\n          let result: vertex.ParameterArgumentSpec;\r\n          if (typeof taskArgument === \"string\") {\r\n            result = {\r\n              runtimeValue: {\r\n                constantValue: {\r\n                  // TODO: Fix constant arguments for non-string inputs\r\n                  stringValue: taskArgument,\r\n                },\r\n              },\r\n            };\r\n            return result;\r\n          } else if (\"graphInput\" in taskArgument) {\r\n            result = {\r\n              componentInputParameter: taskArgument.graphInput.inputName,\r\n            };\r\n            return result;\r\n          } else if (\"taskOutput\" in taskArgument) {\r\n            result = {\r\n              taskOutputParameter: {\r\n                producerTask: taskArgument.taskOutput.taskId,\r\n                outputParameterKey: taskArgument.taskOutput.outputName,\r\n              },\r\n            };\r\n            return result;\r\n          } else {\r\n            throw Error(`Unknown kind of task argument: \"${taskArgument}\"`);\r\n          }\r\n        })(inputName),\r\n      ]\r\n    )\r\n  );\r\n\r\n  let vertexMakeArtifactTaskSpecs: Record<string, vertex.PipelineTaskSpec> = {};\r\n\r\n  const vertexTaskArtifactArguments: Record<\r\n    string,\r\n    vertex.ArtifactArgumentSpec\r\n  > = Object.fromEntries(\r\n    Array.from(resolvedCommandLine.inputsConsumedAsPath.values()).map(\r\n      (inputName) => [\r\n        inputName,\r\n        ((inputName) => {\r\n          // TODO: Check that this works\r\n          let taskArgument = taskArguments[inputName];\r\n          //if (! (inputName in taskArguments)) {\r\n          if (taskArgument === undefined) {\r\n            // Checking for default value\r\n            const inputSpec = inputMap.get(inputName);\r\n            if (inputSpec === undefined) {\r\n              throw Error(\r\n                `Cannot happen: vertexTaskParameterArguments - inputMap.get(${inputName}) === undefined`\r\n              );\r\n            }\r\n            if (inputSpec.default !== undefined) {\r\n              taskArgument = inputSpec.default;\r\n            } else {\r\n              if (inputSpec.optional === true) {\r\n                // TODO: Decide what the behavior should be\r\n                // throw Error(`Input \"${inputName}\" is optional, but command-line still uses it when when it's not present.`);\r\n                console.error(\r\n                  `Input \"${inputName}\" is optional, but command-line still uses it when when it's not present.`\r\n                );\r\n                taskArgument = \"\";\r\n              } else {\r\n                throw Error(\r\n                  `Argument was not provided for required input \"${inputName}\"`\r\n                );\r\n              }\r\n            }\r\n          }\r\n          let result: vertex.ArtifactArgumentSpec;\r\n          if (typeof taskArgument === \"string\") {\r\n            const makeArtifactTaskId = generateTaskID(\"Make artifact\");\r\n            const makeArtifactTaskSpec: vertex.PipelineTaskSpec = {\r\n              ...makeArtifactTaskSpecTemplate,\r\n              inputs: {\r\n                parameters: {\r\n                  [MAKE_ARTIFACT_INPUT_NAME]: {\r\n                    runtimeValue: {\r\n                      constantValue: {\r\n                        stringValue: taskArgument,\r\n                      },\r\n                    },\r\n                  },\r\n                },\r\n              },\r\n            };\r\n            vertexMakeArtifactTaskSpecs[makeArtifactTaskId] =\r\n              makeArtifactTaskSpec;\r\n            result = {\r\n              taskOutputArtifact: {\r\n                producerTask: makeArtifactTaskId,\r\n                outputArtifactKey: MAKE_ARTIFACT_OUTPUT_NAME,\r\n              },\r\n            };\r\n            return result;\r\n          } else if (\"graphInput\" in taskArgument) {\r\n            // Workaround for root DAG where all inputs must be parameters\r\n            if (isRoot) {\r\n              // We only need one task for each pipeline input parameter\r\n              //const makeArtifactTaskId = generateTaskID(\"Make artifact\");\r\n              const makeArtifactTaskId =\r\n                \"Make artifact for \" + taskArgument.graphInput.inputName;\r\n              const makeArtifactTaskSpec: vertex.PipelineTaskSpec = {\r\n                ...makeArtifactTaskSpecTemplate,\r\n                inputs: {\r\n                  parameters: {\r\n                    [MAKE_ARTIFACT_INPUT_NAME]: {\r\n                      componentInputParameter:\r\n                        taskArgument.graphInput.inputName,\r\n                    },\r\n                  },\r\n                },\r\n              };\r\n              vertexMakeArtifactTaskSpecs[makeArtifactTaskId] =\r\n                makeArtifactTaskSpec;\r\n              result = {\r\n                taskOutputArtifact: {\r\n                  producerTask: makeArtifactTaskId,\r\n                  outputArtifactKey: MAKE_ARTIFACT_OUTPUT_NAME,\r\n                },\r\n              };\r\n            } else {\r\n              result = {\r\n                componentInputArtifact: taskArgument.graphInput.inputName,\r\n              };\r\n            }\r\n            return result;\r\n          } else if (\"taskOutput\" in taskArgument) {\r\n            result = {\r\n              taskOutputArtifact: {\r\n                producerTask: taskArgument.taskOutput.taskId,\r\n                outputArtifactKey: taskArgument.taskOutput.outputName,\r\n              },\r\n            };\r\n            return result;\r\n          } else {\r\n            throw Error(`Unknown kind of task argument: \"${taskArgument}\"`);\r\n          }\r\n        })(inputName),\r\n      ]\r\n    )\r\n  );\r\n\r\n  const vertexTaskSpec: vertex.PipelineTaskSpec = {\r\n    taskInfo: {\r\n      // This is the task display name, not an ID\r\n      name: componentSpec.name ?? \"Component\",\r\n    },\r\n    inputs: {\r\n      parameters: vertexTaskParameterArguments,\r\n      artifacts: vertexTaskArtifactArguments,\r\n    },\r\n    // dependent_tasks: [],\r\n    cachingOptions: {\r\n      enableCache: true,\r\n    },\r\n    componentRef: {\r\n      name: \"<set later>\",\r\n    },\r\n    // triggerPolicy: {\r\n    //     condition: \"...\",\r\n    //     strategy: \"ALL_UPSTREAM_TASKS_SUCCEEDED\",\r\n    // },\r\n    // iterator: {\r\n    //     artifactIterator: {...},\r\n    //     parameterIterator: {...},\r\n    // },\r\n  };\r\n\r\n  return {\r\n    vertexTaskSpec,\r\n    vertexComponentSpec,\r\n    vertexExecutorSpec,\r\n    vertexMakeArtifactTaskSpecs,\r\n  };\r\n};\r\n\r\nconst makeNameUniqueByAddingIndex = (\r\n  name: string,\r\n  existingNames: Set<string>\r\n): string => {\r\n  let finalName = name;\r\n  let index = 1;\r\n  while (existingNames.has(finalName)) {\r\n    index++;\r\n    finalName = name + \" \" + index.toString();\r\n  }\r\n  return finalName;\r\n};\r\n\r\nexport const graphComponentSpecToVertexPipelineSpec = (\r\n  componentSpec: ComponentSpec,\r\n  pipelineContextName = \"pipeline\"\r\n) => {\r\n  if (!isGraphImplementation(componentSpec.implementation)) {\r\n    throw Error(\"Only graph components are supported for now\");\r\n  }\r\n\r\n  // TODO: Fix case when these inputs are passed to tasks as artifacts\r\n  const vertexComponentInputsSpec = {\r\n    parameters: Object.fromEntries(\r\n      (componentSpec.inputs ?? []).map((inputSpec) => [\r\n        inputSpec.name,\r\n        typeSpecToVertexParameterSpec(inputSpec.type),\r\n      ])\r\n    ),\r\n    // Pipeline does not support artifact inputs\r\n    // artifacts: {},\r\n  };\r\n\r\n  const graphSpec = componentSpec.implementation.graph;\r\n\r\n  let vertexExecutors: Record<string, vertex.ExecutorSpec> = {};\r\n  let vertexComponents: Record<string, vertex.ComponentSpec> = {};\r\n  let vertexTasks: Record<string, vertex.PipelineTaskSpec> = {};\r\n\r\n  let usedTaskIds = new Set<string>(Object.keys(graphSpec.tasks));\r\n  const generateTaskId = (prefix: string) => {\r\n    const taskId = makeNameUniqueByAddingIndex(prefix, usedTaskIds);\r\n    usedTaskIds.add(taskId);\r\n    return taskId;\r\n  };\r\n\r\n  for (const [taskId, taskSpec] of Object.entries(graphSpec.tasks)) {\r\n    if (taskSpec.componentRef.spec === undefined) {\r\n      throw Error(`Task \"${taskId}\" does not have taskSpec.componentRef.spec.`);\r\n    }\r\n    try {\r\n      const {\r\n        vertexTaskSpec,\r\n        vertexComponentSpec,\r\n        vertexExecutorSpec,\r\n        vertexMakeArtifactTaskSpecs,\r\n      } = taskSpecToVertexTaskSpecComponentSpecAndExecutorSpec(\r\n        taskSpec.componentRef.spec,\r\n        taskSpec.arguments ?? {},\r\n        generateTaskId,\r\n        true\r\n      );\r\n      // task IDs are expected to be unique\r\n      // TODO: Fix  this to work for multi-dag pipelines where task IDs are not globally unique\r\n      const vertexExecutorId = taskId + \"_executor\";\r\n      const vertexComponentId = taskId + \"_component\";\r\n      const vertexTaskId = taskId; // + \"_task\";\r\n      usedTaskIds.add(vertexTaskId);\r\n      vertexExecutors[vertexExecutorId] = vertexExecutorSpec;\r\n      vertexComponentSpec.executorLabel = vertexExecutorId;\r\n      vertexComponents[vertexComponentId] = vertexComponentSpec;\r\n      vertexTaskSpec.componentRef.name = vertexComponentId;\r\n      // This is the task display name, not an ID. It's already set to the component name\r\n      //vertexTaskSpec.taskInfo.name = vertexTaskId;\r\n      vertexTasks[vertexTaskId] = vertexTaskSpec;\r\n      // Processing the additional MakeArtifact tasks\r\n      for (const [additionalTaskId, additionalTaskSpec] of Object.entries(\r\n        vertexMakeArtifactTaskSpecs\r\n      )) {\r\n        usedTaskIds.add(additionalTaskId);\r\n        vertexExecutors[MAKE_ARTIFACT_EXECUTOR_ID] = makeArtifactExecutorSpec;\r\n        vertexComponents[MAKE_ARTIFACT_COMPONENT_ID] =\r\n          makeArtifactComponentSpec;\r\n        vertexTasks[additionalTaskId] = additionalTaskSpec;\r\n      }\r\n    } catch (err) {\r\n      throw Error(`Error compiling task ${taskId}: ` + err.toString());\r\n    }\r\n  }\r\n\r\n  const vertexPipelineSpec: vertex.PipelineSpec = {\r\n    pipelineInfo: {\r\n      name: sanitizePipelineInfoName(pipelineContextName),\r\n    },\r\n    sdkVersion: \"Cloud-Pipelines\",\r\n    schemaVersion: \"2.0.0\",\r\n    deploymentSpec: {\r\n      executors: vertexExecutors,\r\n    },\r\n    components: vertexComponents,\r\n    root: {\r\n      inputDefinitions: vertexComponentInputsSpec,\r\n      dag: {\r\n        tasks: vertexTasks,\r\n      },\r\n    },\r\n  };\r\n  return vertexPipelineSpec;\r\n};\r\n\r\nexport const generateVertexPipelineJobFromGraphComponent = (\r\n  componentSpec: ComponentSpec,\r\n  gcsOutputDirectory: string,\r\n  pipelineArguments?: Map<string, string>,\r\n  pipelineContextName = \"pipeline\"\r\n) => {\r\n  // The pipelineContextName affects caching\r\n\r\n  // TODO: FIX: Do proper conversion of integers\r\n  let convertedPipelineArguments: Record<string, any> = {};\r\n  if (pipelineArguments !== undefined) {\r\n    for (const [key, value] of Array.from(pipelineArguments.entries())) {\r\n      convertedPipelineArguments[key] = {\r\n        stringValue: value,\r\n        //intValue\r\n        //doubleValue\r\n      };\r\n    }\r\n  }\r\n\r\n  const pipelineSpec = graphComponentSpecToVertexPipelineSpec(\r\n    componentSpec,\r\n    pipelineContextName\r\n  );\r\n\r\n  const pipelineJob: vertex.PipelineJob = {\r\n    // name: \"<>\",\r\n    // Does not show up in the UX\r\n    displayName: componentSpec.name ?? \"Pipeline\",\r\n    // labels: {},\r\n    runtimeConfig: {\r\n      parameters: convertedPipelineArguments,\r\n      gcsOutputDirectory: gcsOutputDirectory,\r\n    },\r\n    pipelineSpec: pipelineSpec,\r\n    // encryptionSpec: {},\r\n    // serviceAccount: \"<>\",\r\n    // network: {},\r\n  };\r\n  return pipelineJob;\r\n};\r\n","import { DragEvent } from 'react';\r\n\r\nimport ComponentLibrary from './ComponentLibrary'\r\nimport ComponentSearch from './ComponentSearch'\r\nimport GraphComponentExporter from './GraphComponentExporter'\r\nimport GoogleCloudSubmitter from './GoogleCloud'\r\nimport VertexAiExporter from './VertexAiExporter'\r\nimport { ComponentSpec } from '../componentSpec';\r\nimport { loadComponentFromUrl, DATA_PASSING_PIPELINE_URL, GOOGLE_CLOUD_OPTIMIZER_PIPELINE_URL } from './samplePipelines';\r\nimport UserComponentLibrary from \"./UserComponentLibrary\";\r\nimport PipelineLibrary from \"./PipelineLibrary\";\r\nimport { COMPONENT_LIBRARY } from \"./sampleComponentLibrary\"\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  event.dataTransfer.setData('application/reactflow', JSON.stringify(nodeData));\r\n  event.dataTransfer.setData(\r\n    \"DragStart.offset\",\r\n    JSON.stringify({\r\n      offsetX: event.nativeEvent.offsetX,\r\n      offsetY: event.nativeEvent.offsetY,\r\n    })\r\n  );\r\n  event.dataTransfer.effectAllowed = 'move';\r\n};\r\n\r\ninterface SidebarProps {\r\n  componentSpec?: ComponentSpec,\r\n  setComponentSpec?: (componentSpec: ComponentSpec) => void,\r\n}\r\n\r\nconst Sidebar = ({\r\n  componentSpec,\r\n  setComponentSpec\r\n}: SidebarProps) => {\r\n  // Do not include the DebugScratch in the production build\r\n  let DebugScratchElement = () => null;\r\n  if (process?.env?.NODE_ENV === \"development\") {\r\n    const DebugScratch = require(\"./DebugScratch\").default;\r\n    DebugScratchElement = () =>\r\n      DebugScratch({\r\n        componentSpec: componentSpec,\r\n        setComponentSpec: setComponentSpec,\r\n      });\r\n  }\r\n\r\n  return (\r\n    <aside className=\"nodeList\">\r\n      <details style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary style={{ borderWidth: \"1px\", padding: \"4px\", fontWeight: \"bold\" }}>Save/Load pipeline</summary>\r\n        <PipelineLibrary componentSpec={componentSpec} setComponentSpec={setComponentSpec}/>\r\n      </details>\r\n      <details style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary style={{ borderWidth: \"1px\", padding: \"4px\", fontWeight: \"bold\" }}>Submit to Google Cloud</summary>\r\n        <GoogleCloudSubmitter componentSpec={componentSpec}/>\r\n      </details>\r\n      <h3>Drag components to the canvas:</h3>\r\n      <details style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary><strong>Special</strong></summary>\r\n        <div className=\"react-flow__node react-flow__node-input sidebar-node\" onDragStart={(event: DragEvent) => onDragStart(event, { input: { label: \"Input\" } })} draggable>\r\n          Input\r\n        </div>\r\n        <div className=\"react-flow__node react-flow__node-output sidebar-node\" onDragStart={(event: DragEvent) => onDragStart(event, { output: { label: \"Output\" } })} draggable>\r\n          Output\r\n        </div>\r\n      </details>\r\n      <ComponentLibrary componentGroups={COMPONENT_LIBRARY}/>\r\n      <details style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary style={{ borderWidth: \"1px\", padding: \"4px\", fontWeight: \"bold\" }}>User components</summary>\r\n        <UserComponentLibrary/>\r\n      </details>\r\n      <details open style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary style={{ borderWidth: \"1px\", padding: \"4px\", fontWeight: \"bold\" }}>Component search</summary>\r\n        <ComponentSearch />\r\n      </details>\r\n      <details>\r\n        <summary>Debug</summary>\r\n        {componentSpec && <GraphComponentExporter componentSpec={componentSpec}/>}\r\n        {componentSpec && <VertexAiExporter componentSpec={componentSpec}/>}\r\n        <button\r\n          type=\"button\"\r\n          onClick={(e) => {\r\n            loadComponentFromUrl(DATA_PASSING_PIPELINE_URL).then(setComponentSpec);\r\n          }}\r\n        >\r\n          Load Data Passing pipeline\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={(e) => {\r\n            loadComponentFromUrl(GOOGLE_CLOUD_OPTIMIZER_PIPELINE_URL).then(setComponentSpec);\r\n          }}\r\n        >\r\n          Load Google Cloud Optimizer pipeline\r\n        </button>\r\n        <DebugScratchElement/>\r\n      </details>\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport {downloadComponentDataWithCache} from '../github'\r\nimport { ComponentSpec } from '../componentSpec'\r\nimport DraggableComponent from \"./DraggableComponent\";\r\n\r\ntype ComponentGroup = {\r\n  category: string;\r\n  componentUrls: string[];\r\n};\r\n\r\nconst DraggableComponentRow = ({componentUrl}: {componentUrl: string}) => {\r\n  const [componentSpec, setComponentSpec] = useState<ComponentSpec | undefined>(undefined);\r\n  useEffect(() => {\r\n    // TODO: Validate the component\r\n    downloadComponentDataWithCache(componentUrl).then(setComponentSpec);\r\n  }, [componentUrl]);\r\n\r\n  if (componentSpec === undefined) {\r\n    return <div>Loading...</div>\r\n  } else {\r\n    return (\r\n      <DraggableComponent\r\n        componentReference={{\r\n          url: componentUrl,\r\n          spec: componentSpec,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n};\r\n\r\nconst ComponentGroupList = ({ componentGroups }: { componentGroups: ComponentGroup[] }) => {\r\n  return (\r\n    <>\r\n      {Array.from(componentGroups).map(\r\n        ({ category, componentUrls }, index) => (\r\n          <details key={category} open={index === 0} style={{ border: \"1px solid #aaa\", borderRadius: \"4px\" }}>\r\n            <summary style={{ borderWidth: \"1px\", padding: \"8px\" }}>\r\n              <strong>{category}</strong>\r\n            </summary>\r\n            {componentUrls.map((componentUrl) => (\r\n              <DraggableComponentRow key={componentUrl} componentUrl={componentUrl} />\r\n            ))}\r\n          </details>\r\n        )\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst ComponentLibrary = ({ componentGroups }: { componentGroups: ComponentGroup[] }) => {\r\n  return (\r\n    <details open>\r\n      <summary style={{ border: \"1px solid #aaa\", padding: \"4px\", borderRadius: \"4px\" }}>\r\n        <strong>Component library</strong>\r\n      </summary>\r\n      <div style={{ paddingLeft: \"10px\" }}>\r\n        <ComponentGroupList componentGroups={componentGroups}/>\r\n      </div>\r\n    </details>\r\n  );\r\n};\r\n\r\nexport default ComponentLibrary;\r\n","import { useState } from \"react\";\r\nimport { ComponentReference } from \"../componentSpec\";\r\nimport { searchComponentsByName } from \"../github\";\r\nimport DraggableComponent from \"./DraggableComponent\";\r\n\r\nconst COMPONENT_ORGS = [\"kubeflow\", \"Ark-kun\"];\r\n\r\nconst SearchPanel = (props: any) => {\r\n  const [error, setError] = useState<string | undefined>(undefined);\r\n  const [firstTime, setFirstTime] = useState(true);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [items, setItems] = useState<ComponentReference[]>([]);\r\n\r\n  const onQueryChange = (e: any) => {\r\n    setQuery(e.target.value);\r\n  };\r\n\r\n  async function fetchData(query: string) {\r\n    searchComponentsByName(query, COMPONENT_ORGS).then(\r\n      (componentRefs) => {\r\n        setIsLoaded(true);\r\n        setItems(componentRefs);\r\n      },\r\n      (error) => {\r\n        setIsLoaded(true);\r\n        setError(error.message);\r\n      }\r\n    );\r\n  }\r\n\r\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (query !== \"\") {\r\n      setFirstTime(false);\r\n      fetchData(query);\r\n    }\r\n    (window as any).gtag?.(\"event\", \"ComponentSearch_search\", {});\r\n  };\r\n\r\n  let results = <span></span>;\r\n  if (firstTime) {\r\n    results = <div>Enter search query</div>;\r\n  } else if (error !== undefined) {\r\n    results = <div>Error: {error}</div>;\r\n  } else if (!firstTime && !isLoaded) {\r\n    results = <div>Searching...</div>;\r\n  } else if (items !== undefined) {\r\n    const componentElements = items.map((componentRef) => (\r\n      <DraggableComponent\r\n        key={componentRef.digest ?? componentRef.url}\r\n        componentReference={componentRef}\r\n      />\r\n    ));\r\n    results = <>{componentElements}</>;\r\n  }\r\n  return (\r\n    <div className=\"nodeList\">\r\n      <form onSubmit={onSubmit}>\r\n        <input type=\"search\" placeholder=\"XGBoost\" onChange={onQueryChange} />\r\n        <input type=\"submit\" />\r\n      </form>\r\n      <div>{results}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPanel;\r\n","import {\r\n  useStoreState,\r\n} from \"react-flow-renderer\";\r\nimport yaml from \"js-yaml\";\r\n\r\nimport { ComponentSpec } from \"../componentSpec\";\r\nimport { augmentComponentSpec } from './GraphComponentSpecFlow'\r\n\r\ninterface GraphComponentExporterProps {\r\n  componentSpec: ComponentSpec,\r\n}\r\n\r\nconst GraphComponentExporter = ({\r\n  componentSpec,\r\n}: GraphComponentExporterProps) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n\r\n  let componentText = \"\";\r\n  try {\r\n    const graphComponent = augmentComponentSpec(componentSpec, nodes, false, true);\r\n    componentText = yaml.dump(graphComponent, { lineWidth: 10000 });\r\n  } catch(err) {\r\n    componentText = String(err);\r\n  }\r\n\r\n  const componentTextBlob = new Blob([componentText], { type: \"text/yaml\" }); // Or application/x-yaml (which leads to downloading)\r\n  const downloadLink = <a href={URL.createObjectURL(componentTextBlob)} download={\"component.yaml\"}>component.yaml</a>\r\n\r\n  return (\r\n    <details>\r\n      <summary>Graph {downloadLink}</summary>\r\n      <pre style={{overflow: \"auto\"}}>{componentText}</pre>\r\n    </details>\r\n  );\r\n};\r\n\r\nexport default GraphComponentExporter;\r\n","/* global gapi */\r\n\r\nimport { useState } from 'react';\r\n\r\nimport { ArgumentType, ComponentSpec } from '../componentSpec';\r\nimport {generateVertexPipelineJobFromGraphComponent} from './vertexAiCompiler'\r\nimport ArgumentsEditor from \"./ArgumentsEditor\";\r\n\r\nconst LOCAL_STORAGE_GCS_OUTPUT_DIRECTORY_KEY = \"GoogleCloudSubmitter/gcsOutputDirectory\";\r\nconst LOCAL_STORAGE_PROJECT_ID_KEY = \"GoogleCloudSubmitter/projectId\";\r\nconst LOCAL_STORAGE_REGION_KEY = \"GoogleCloudSubmitter/region\";\r\nconst LOCAL_STORAGE_PROJECT_IDS_KEY = \"GoogleCloudSubmitter/projectIds\";\r\n\r\nvar CLIENT_ID = '640001104961-2m8hs192tmd9f9nssbr5thr5o3uhmita.apps.googleusercontent.com';\r\nvar API_KEY = 'AIzaSyCDPTffgYGXoit-jKsj1_1WWbSxvU7aEdQ';\r\n     \r\nconst VERTEX_AI_PIPELINES_REGIONS = [\r\n  'us-central1',\r\n  'europe-west4',\r\n  'asia-east1',\r\n];\r\n\r\nconst VERTEX_AI_PIPELINES_DEFAULT_REGION = 'us-central1';\r\n\r\nconst authorizeGoogleCloudClient = async (\r\n  scopes: string[],\r\n  immediate = false, // Setting immediate to true prevents auth window showing every time. But it needs to be false the first time (when cookies are not set).\r\n  apiKey: string = API_KEY,\r\n  clientId: string = CLIENT_ID,\r\n) => {\r\n  return new Promise<GoogleApiOAuth2TokenObject>(\r\n    (resolve, reject) => {\r\n      // TODO: Investigate removing this. It does not seem to be needed.\r\n      gapi.client.setApiKey(apiKey);\r\n      gapi.auth.authorize(\r\n        {\r\n          client_id: clientId,\r\n          scope: scopes,\r\n          immediate: immediate,\r\n        },\r\n        (authResult) => {\r\n          // console.debug(\"authorizeGoogleCloudClient: called back\");\r\n          if (authResult === undefined) {\r\n            console.error(\"authorizeGoogleCloudClient failed\");\r\n            reject(\"gapi.auth.authorize result is undefined\");\r\n          } else if (authResult.error) {\r\n            console.error(\r\n              \"authorizeGoogleCloudClient failed\",\r\n              authResult.error\r\n            );\r\n            reject(authResult.error);\r\n          } else {\r\n            // console.debug(\"authorizeGoogleCloudClient: Success\");\r\n            // Working around the Google Auth bug: The request succeeds, but the returned token does not have the requested scopes.\r\n            // See https://github.com/google/google-api-javascript-client/issues/743\r\n            const receivedScopesString = (authResult as any).scope as string | undefined;\r\n            const receivedScopes = receivedScopesString?.split(\" \");\r\n            if (receivedScopes === undefined || !scopes.every((scope) => receivedScopes.includes(scope))) {\r\n              const errorMessage = `Authorization call succeeded, but the returned scopes are ${receivedScopesString}`;\r\n              console.error(errorMessage);\r\n              reject(errorMessage);\r\n            } else {\r\n              resolve(authResult);\r\n            }\r\n          }\r\n        }\r\n      );\r\n    }\r\n  );\r\n};\r\n\r\nconst ensureGoogleCloudAuthorizesScopes = async (scopes: string[]) => {\r\n  try {\r\n    // console.debug('Before ensureGoogleCloudAuthorizesScopes(immediate=true)');\r\n    await authorizeGoogleCloudClient(scopes, true);\r\n    // console.debug('After ensureGoogleCloudAuthorizesScopes(immediate=true)');\r\n    (window as any).gtag?.(\"event\", \"GoogleCloud_auth\", {\r\n      result: \"succeeded\",\r\n      immediate: \"true\"\r\n    });\r\n  } catch (err) {\r\n    // console.error('ensureGoogleCloudAuthorizesScopes(immediate=true)', err);\r\n    try {\r\n      await authorizeGoogleCloudClient(scopes, false);\r\n      (window as any).gtag?.(\"event\", \"GoogleCloud_auth\", {\r\n        result: \"succeeded\",\r\n        immediate: \"false\"\r\n      });\r\n    } catch (err) {\r\n      // console.error('ensureGoogleCloudAuthorizesScopes(immediate=false)', err);\r\n      (window as any).gtag?.(\"event\", \"GoogleCloud_auth\", {\r\n        result: \"failed\",\r\n        immediate: \"false\"\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nconst cloudresourcemanagerListProjects = async (isAuthenticated = false) => {\r\n  await ensureGoogleCloudAuthorizesScopes(\r\n    [\"https://www.googleapis.com/auth/cloud-platform\"]\r\n  );\r\n  const response = await gapi.client.request({\r\n    path: \"https://cloudresourcemanager.googleapis.com/v1/projects/\",\r\n  });\r\n  return response.result;\r\n}\r\n\r\nconst aiplatformCreatePipelineJob = async (projectId: string, region='us-central1', pipelineJob: Record<string, any>) => {\r\n  await ensureGoogleCloudAuthorizesScopes(\r\n    [\"https://www.googleapis.com/auth/cloud-platform\"]\r\n  );\r\n  const response = await gapi.client.request({\r\n    path: `https://${region}-aiplatform.googleapis.com/v1beta1/projects/${projectId}/locations/${region}/pipelineJobs`,\r\n    method: \"POST\",\r\n    body: JSON.stringify(pipelineJob),\r\n  });\r\n  (window as any).gtag?.(\"event\", \"GoogleCloud_submit_pipeline_job\", {\r\n    result: \"succeeded\"\r\n  });\r\n  return response.result;\r\n}\r\n\r\ninterface GoogleCloudSubmitterProps {\r\n  componentSpec?: ComponentSpec,\r\n};\r\n\r\nconst GoogleCloudSubmitter = ({\r\n  componentSpec,\r\n}: GoogleCloudSubmitterProps) => {\r\n  const [projects, setProjects] = useState<string[]>(\r\n    () => JSON.parse(window.localStorage?.getItem(LOCAL_STORAGE_PROJECT_IDS_KEY) ?? \"[]\")\r\n  );\r\n  const [project, setProject] = useState<string>(\r\n    () => window.localStorage?.getItem(LOCAL_STORAGE_PROJECT_ID_KEY) ?? \"\"\r\n  ); // undefined causes error: https://reactjs.org/docs/forms.html#controlled-components https://stackoverflow.com/a/47012342\r\n  const [region, setRegion] = useState(\r\n    () => window.localStorage?.getItem(LOCAL_STORAGE_REGION_KEY) ?? VERTEX_AI_PIPELINES_DEFAULT_REGION\r\n  );\r\n  const [error, setError] = useState(\"\");\r\n  const [gcsOutputDirectory, setGcsOutputDirectory] = useState(\r\n    () => window.localStorage?.getItem(LOCAL_STORAGE_GCS_OUTPUT_DIRECTORY_KEY) ?? \"\"\r\n  );\r\n  const [pipelineJobWebUrl, setPipelineJobWebUrl] = useState(\"\");\r\n  const [compilationError, setCompilationError] = useState(\"\");\r\n  const [componentArguments, setComponentArguments] = useState<Record<string, ArgumentType>>({});\r\n\r\n  let vertexPipelineJobJson: string | undefined = undefined;\r\n  let vertexPipelineJob: Record<string, any> | undefined = undefined;\r\n\r\n  //useEffect(() => {\r\n  if (componentSpec !== undefined) {\r\n    const defaultInputValues = Object.fromEntries(\r\n      (componentSpec.inputs ?? [])\r\n        .filter((inputSpec) => inputSpec.default !== undefined)\r\n        .map((inputSpec) => [inputSpec.name, String(inputSpec.default)])\r\n    );\r\n    const pipelineArguments = {\r\n      ...defaultInputValues,\r\n      ...componentArguments,\r\n    };\r\n    const pipelineArgumentMap = new Map(\r\n      Object.entries(pipelineArguments).filter(\r\n        // Type guard predicate\r\n        (pair): pair is [string, string] => typeof pair[1] === \"string\"\r\n      )\r\n    );\r\n    try {\r\n      vertexPipelineJob = generateVertexPipelineJobFromGraphComponent(\r\n        componentSpec,\r\n        gcsOutputDirectory,\r\n        pipelineArgumentMap\r\n      );\r\n      vertexPipelineJobJson = JSON.stringify(vertexPipelineJob, undefined, 2);\r\n      // Prevent infinite re-renders\r\n      if (compilationError !== \"\") {\r\n        setCompilationError(\"\");\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err.toString();\r\n      // Prevent infinite re-renders\r\n      if (errorMessage !== compilationError) {\r\n        setCompilationError(err.toString());\r\n      }\r\n    }\r\n  }\r\n  //}, [componentSpec, gcsOutputDirectory]);\r\n\r\n  const vertexPipelineJobUrl = vertexPipelineJobJson && URL.createObjectURL(\r\n    new Blob([vertexPipelineJobJson], { type: \"application/json\" })\r\n  );\r\n\r\n  const readyToSubmit =\r\n    project !== \"\" && region !== \"\" && vertexPipelineJob !== undefined;\r\n\r\n  return (\r\n    <form\r\n      onSubmit={async (e) => {\r\n        e.preventDefault();\r\n        if (vertexPipelineJob === undefined) {\r\n          return;\r\n        }\r\n        setPipelineJobWebUrl(\"\");\r\n        try {\r\n          // setItem might throw exception on iOS in incognito mode\r\n          try {\r\n            window.localStorage?.setItem(LOCAL_STORAGE_GCS_OUTPUT_DIRECTORY_KEY, gcsOutputDirectory);\r\n            window.localStorage?.setItem(LOCAL_STORAGE_PROJECT_ID_KEY, project);\r\n            window.localStorage?.setItem(LOCAL_STORAGE_REGION_KEY, region);\r\n          } catch(err) {\r\n            console.error(\"GoogleCloudSubmitter: Error writing properties to the localStorage\", err);\r\n          }\r\n          const result = await aiplatformCreatePipelineJob(project, region, vertexPipelineJob);\r\n          const pipelineJobName: string = result.name;\r\n          const pipelineJobId = pipelineJobName.split('/').slice(-1)[0];\r\n          const pipelineJobWebUrl = `https://console.cloud.google.com/vertex-ai/locations/${region}/pipelines/runs/${pipelineJobId}?project=${project}`;\r\n          setPipelineJobWebUrl(pipelineJobWebUrl);\r\n          setError(\"\");\r\n        } catch (err) {\r\n          console.error(err);\r\n          setError(err?.result?.error?.message ?? \"Error\");\r\n          (window as any).gtag?.(\"event\", \"GoogleCloud_submit_pipeline_job\", {\r\n            result: \"failed\"\r\n          });\r\n        }\r\n      }}\r\n    >\r\n      {componentSpec === undefined ||\r\n      (componentSpec?.inputs?.length ?? 0) === 0 ? undefined : (\r\n        <fieldset\r\n          style={{\r\n            // Reduce the default padding\r\n            padding: \"2px\",\r\n          }}\r\n        >\r\n          <legend>Arguments</legend>\r\n          <ArgumentsEditor\r\n            componentSpec={componentSpec}\r\n            componentArguments={componentArguments}\r\n            setComponentArguments={setComponentArguments}\r\n            shrinkToWidth={true}\r\n          />\r\n        </fieldset>\r\n      )}\r\n      <div style={{\r\n        whiteSpace: \"nowrap\",\r\n        margin: \"5px\",\r\n      }}>\r\n        <label htmlFor=\"project\">Project: </label>\r\n        <input\r\n          id=\"project\"\r\n          required\r\n          type=\"text\"\r\n          list=\"projects\"\r\n          placeholder=\"<my-project-id>\"\r\n          value={project}\r\n          onChange={(e) => setProject(e.target.value)}\r\n        />\r\n        <datalist id=\"projects\">\r\n          {projects.map((projectId) => (\r\n            <option key={projectId} value={projectId} />\r\n          ))}\r\n        </datalist>\r\n        <button\r\n          type=\"button\" // The default button type is \"submit\", not \"button\". WTF!?\r\n          onClick={async (e) => {\r\n            try {\r\n              const result = await cloudresourcemanagerListProjects();\r\n              const projectIds = (result.projects as any[]).map<string>(\r\n                (projectInfo) => projectInfo.projectId\r\n              );\r\n              setProjects(projectIds);\r\n              setError(\"\");\r\n              try {\r\n                window.localStorage?.setItem(LOCAL_STORAGE_PROJECT_IDS_KEY, JSON.stringify(projectIds));\r\n              } catch(err) {\r\n                console.error(\"GoogleCloudSubmitter: Error writing properties to the localStorage\", err);\r\n              }\r\n              (window as any).gtag?.(\"event\", \"GoogleCloud_list_projects\", { result: \"succeeded\" });\r\n            } catch (err) {\r\n              setError(err?.result?.error?.message ?? \"Error\");\r\n              (window as any).gtag?.(\"event\", \"GoogleCloud_list_projects\", { result: \"failed\" });\r\n            }\r\n          }}\r\n        >\r\n          ⟳{/* 🗘⭯ ⭮ ↺ ↻ ⟲ ⟳ 🔃🔄 */}\r\n        </button>\r\n      </div>\r\n      <div style={{\r\n        whiteSpace: \"nowrap\",\r\n        margin: \"5px\",\r\n      }}>\r\n        <label htmlFor=\"region\">Region: </label>\r\n        <input\r\n          id=\"region\"\r\n          required\r\n          type=\"text\"\r\n          list=\"regions\"\r\n          value={region}\r\n          onChange={(e) => setRegion(e.target.value)}\r\n        />\r\n        <datalist id=\"regions\">\r\n          {VERTEX_AI_PIPELINES_REGIONS.map((region) => (\r\n            <option key={region} value={region} />\r\n          ))}\r\n        </datalist>\r\n      </div>\r\n      <div style={{\r\n        whiteSpace: \"nowrap\",\r\n        margin: \"5px\",\r\n      }}>\r\n        <label htmlFor=\"region\">GCS dir: </label>\r\n        <input\r\n          id=\"gcsOutputDirectory\"\r\n          required\r\n          type=\"text\"\r\n          value={gcsOutputDirectory}\r\n          onChange={(e) => setGcsOutputDirectory(e.target.value)}\r\n        />\r\n      </div>\r\n      <div style={{\r\n        whiteSpace: \"nowrap\",\r\n        margin: \"5px\",\r\n      }}>\r\n        <input\r\n          type=\"submit\"\r\n          disabled={!readyToSubmit}\r\n          value=\"Submit pipeline job\"\r\n        />\r\n        {pipelineJobWebUrl !== \"\" && <a href={pipelineJobWebUrl} target=\"_blank\" rel=\"noreferrer\" style={{ margin: \"5px\" }}>Job</a>}\r\n      </div>\r\n      {vertexPipelineJobUrl !== undefined && (\r\n        <div style={{\r\n          whiteSpace: \"nowrap\",\r\n          margin: \"5px\",\r\n        }}>\r\n          Download <a\r\n            href={vertexPipelineJobUrl}\r\n            download={\"vertex_pipeline_job.json\"}\r\n          >\r\n            vertex_pipeline_job.json\r\n          </a>\r\n        </div>\r\n      )}\r\n      {compilationError !== \"\" && <div>{compilationError}</div>}\r\n      {error !== \"\" && <div>Error: {error}</div>}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default GoogleCloudSubmitter;\r\n","import {\r\n  useStoreState,\r\n} from \"react-flow-renderer\";\r\n\r\nimport { ComponentSpec } from \"../componentSpec\";\r\nimport { augmentComponentSpec } from \"./GraphComponentSpecFlow\";\r\nimport {graphComponentSpecToVertexPipelineSpec} from './vertexAiCompiler'\r\n\r\ninterface VertexAiExporterProps {\r\n  componentSpec: ComponentSpec;\r\n}\r\n\r\nconst VertexAiExporter = ({componentSpec}: VertexAiExporterProps) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n\r\n  let vertexPipelineSpecText = \"\";\r\n  try {\r\n    // Augmenting the componentSpec might be useless right now, but it can stabilize the output (e.g. ordering).\r\n    // Also, in the future, the original spec might be included in the vertexPipelineSpec\r\n    componentSpec = augmentComponentSpec(componentSpec, nodes, true, true);\r\n    const vertexPipelineSpec = graphComponentSpecToVertexPipelineSpec(componentSpec);\r\n    vertexPipelineSpecText = JSON.stringify(vertexPipelineSpec, undefined, 2);\r\n  } catch(err) {\r\n    vertexPipelineSpecText = String(err);\r\n  }\r\n\r\n  const vertexPipelineSpecTextBlob = new Blob([vertexPipelineSpecText], { type: \"application/json\" }); // Or application/x-yaml (which leads to downloading)\r\n  // TODO: Call vertexPipelineSpecTextBlobUrl.revokeObjectURL in the future\r\n  const vertexPipelineSpecTextBlobUrl = URL.createObjectURL(vertexPipelineSpecTextBlob);\r\n\r\n  return (\r\n    <details>\r\n      <summary>\r\n        Cloud IR <a\r\n          href={vertexPipelineSpecTextBlobUrl}\r\n          download={\"vertex_pipeline_spec.json\"}\r\n        >\r\n          vertex_pipeline_spec.json\r\n        </a>\r\n      </summary>\r\n      <pre style={{ overflow: \"auto\" }}>{vertexPipelineSpecText}</pre>\r\n    </details>\r\n  );\r\n};\r\n\r\nexport default VertexAiExporter;\r\n","import { useCallback, useState, useEffect } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport {\r\n  getAllComponentsFromList,\r\n  addComponentToListByText,\r\n  ComponentReferenceWithSpec,\r\n} from \"../componentStore\";\r\nimport DraggableComponent from \"./DraggableComponent\";\r\n\r\nconst USER_COMPONENTS_LIST_NAME = \"user_components\";\r\n\r\nconst UserComponentLibrary = () => {\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [componentRefs, setComponentRefs] = useState<\r\n    ComponentReferenceWithSpec[]\r\n  >([]);\r\n\r\n  useEffect(() => {\r\n    getAllComponentsFromList(USER_COMPONENTS_LIST_NAME).then(setComponentRefs);\r\n  }, []);\r\n\r\n  const onDrop = useCallback((acceptedFiles: File[]) => {\r\n    acceptedFiles.forEach((file) => {\r\n      const reader = new FileReader();\r\n      reader.onabort = () => console.log(\"file reading was aborted\");\r\n      reader.onerror = () => console.log(\"file reading has failed\");\r\n      reader.onload = async () => {\r\n        const binaryStr = reader.result;\r\n        if (binaryStr === null || binaryStr === undefined) {\r\n          console.error(`Dropped file reader result was ${binaryStr}`);\r\n          return;\r\n        }\r\n        try {\r\n          const componentRef = await addComponentToListByText(\r\n            USER_COMPONENTS_LIST_NAME,\r\n            binaryStr,\r\n            \"Component\"\r\n          );\r\n          console.debug(\"storeComponentText succeeded\", componentRef);\r\n          (window as any).gtag?.(\"event\", \"UserComponents_component_import\", {\r\n            result: \"succeeded\",\r\n          });\r\n          setErrorMessage(\"\");\r\n          const allComponentRefs = await getAllComponentsFromList(\r\n            USER_COMPONENTS_LIST_NAME\r\n          );\r\n          setComponentRefs(allComponentRefs);\r\n        } catch (err) {\r\n          setErrorMessage(\r\n            `Error parsing the dropped file as component: ${err.toString()}.`\r\n          );\r\n          console.error(\"Error parsing the dropped file as component\", err);\r\n          (window as any).gtag?.(\"event\", \"UserComponents_component_import\", {\r\n            result: \"failed\",\r\n          });\r\n        }\r\n      };\r\n      reader.readAsArrayBuffer(file);\r\n    });\r\n  }, []);\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n  return (\r\n    <div>\r\n      <div {...getRootProps()}>\r\n        <input {...getInputProps()} />\r\n        <div\r\n          style={{\r\n            border: \"1px solid black\",\r\n            padding: \"4px\",\r\n            minHeight: \"3em\",\r\n          }}\r\n        >\r\n          {isDragActive\r\n            ? \"Drop the files here ...\"\r\n            : errorMessage ||\r\n              \"Drag and drop component.yaml files or click to select files\"}\r\n          {componentRefs.map((componentRef) => (\r\n            <DraggableComponent\r\n              key={componentRef.digest}\r\n              componentReference={componentRef}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserComponentLibrary;\r\n","export const COMPONENT_LIBRARY = [\r\n  {\r\n    category: \"Quick start\",\r\n    componentUrls: [\r\n      // 'https://raw.githubusercontent.com/Ark-kun/pipelines/60a2612541ec08c6a85c237d2ec7525b12543a43/components/datasets/Chicago_Taxi_Trips/component.yaml',\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipelines/2463ecda532517462590d75e6e14a8af6b55869a/components/datasets/Chicago_Taxi_Trips/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/d948cd6d191f94b9bb24550cfa45b32976901f18/components/XGBoost/Train/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/d948cd6d191f94b9bb24550cfa45b32976901f18/components/XGBoost/Predict/component.yaml\",\r\n    ],\r\n  },\r\n  {\r\n    category: \"Datasets\",\r\n    componentUrls: [\r\n      // 'https://raw.githubusercontent.com/Ark-kun/pipelines/60a2612541ec08c6a85c237d2ec7525b12543a43/components/datasets/Chicago_Taxi_Trips/component.yaml',\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipelines/2463ecda532517462590d75e6e14a8af6b55869a/components/datasets/Chicago_Taxi_Trips/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/d7a6e4ae90f15821c0151f4185ff1d18ed384431/components/datasets/HuggingFace/Load_dataset/component.yaml\"\r\n    ],\r\n  },\r\n  {\r\n    category: \"Data manipulation\",\r\n    componentUrls: [\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/d948cd6d191f94b9bb24550cfa45b32976901f18/components/pandas/Transform_DataFrame/in_CSV_format/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/d7a6e4ae90f15821c0151f4185ff1d18ed384431/components/dataset_manipulation/split_data_into_folds/in_CSV/component.yaml\",\r\n      // JSON\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/204f65b69b32b05687131603b1642b50f953438f/components/json/Build_dict/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/204f65b69b32b05687131603b1642b50f953438f/components/json/Build_list/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/204f65b69b32b05687131603b1642b50f953438f/components/json/Build_list_of_strings/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/204f65b69b32b05687131603b1642b50f953438f/components/json/Build_list_of_integers/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/204f65b69b32b05687131603b1642b50f953438f/components/json/Build_list_of_floats/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/204f65b69b32b05687131603b1642b50f953438f/components/json/Combine_lists/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/204f65b69b32b05687131603b1642b50f953438f/components/json/Get_element_by_index/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/204f65b69b32b05687131603b1642b50f953438f/components/json/Get_element_by_key/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/204f65b69b32b05687131603b1642b50f953438f/components/json/Query/component.yaml\",\r\n    ],\r\n  },\r\n  {\r\n    category: \"Upload/Download\",\r\n    componentUrls: [\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/d948cd6d191f94b9bb24550cfa45b32976901f18/components/web/Download/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/d948cd6d191f94b9bb24550cfa45b32976901f18/components/google-cloud/storage/download/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/d948cd6d191f94b9bb24550cfa45b32976901f18/components/google-cloud/storage/upload_to_unique_uri/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/d948cd6d191f94b9bb24550cfa45b32976901f18/components/google-cloud/storage/upload_to_explicit_uri/component.yaml\",\r\n    ],\r\n  },\r\n  {\r\n    category: \"XGBoost\",\r\n    componentUrls: [\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/d948cd6d191f94b9bb24550cfa45b32976901f18/components/XGBoost/Train/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/d948cd6d191f94b9bb24550cfa45b32976901f18/components/XGBoost/Predict/component.yaml\",\r\n    ],\r\n  },\r\n  {\r\n    category: \"PyTorch\",\r\n    componentUrls: [\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/d948cd6d191f94b9bb24550cfa45b32976901f18/components/PyTorch/Create_fully_connected_network/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/d948cd6d191f94b9bb24550cfa45b32976901f18/components/PyTorch/Train_PyTorch_model/from_CSV/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/d948cd6d191f94b9bb24550cfa45b32976901f18/components/PyTorch/Convert_to_OnnxModel_from_PyTorchScriptModule/component.yaml\",\r\n    ],\r\n  },\r\n  {\r\n    category: \"Google Cloud\",\r\n    componentUrls: [\r\n      // // AutoML\r\n      // \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/45caf8d2b9c5e4733cef2a31507eb3964efc30c5/components/google-cloud/AutoML/Tables/Create_dataset/from_CSV/component.yaml\",\r\n      // \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/45caf8d2b9c5e4733cef2a31507eb3964efc30c5/components/google-cloud/AutoML/Tables/Create_dataset/from_GCS/component.yaml\",\r\n      // \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/62df0b062bc13fc1996db839f519c3517e923641/components/google-cloud/AutoML/Tables/Create_dataset/from_BigQuery/component.yaml\",\r\n      // \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/62df0b062bc13fc1996db839f519c3517e923641/components/gcp/automl/create_model_for_tables/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/7a0842e84849cfb674f90ed8af78ffee13bfb20a/components/google-cloud/Vertex_AI/AutoML/Tables/Create_dataset/from_GCS/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/7a0842e84849cfb674f90ed8af78ffee13bfb20a/components/google-cloud/Vertex_AI/AutoML/Tables/Create_dataset/from_BigQuery/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/2da9c15c94d0909f8b8065e9709494767f90a57b/components/google-cloud/Vertex_AI/AutoML/Tables/Train_model/component.yaml\",\r\n      // Storage\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/62df0b062bc13fc1996db839f519c3517e923641/components/google-cloud/storage/download/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/d948cd6d191f94b9bb24550cfa45b32976901f18/components/google-cloud/storage/upload_to_explicit_uri/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/d948cd6d191f94b9bb24550cfa45b32976901f18/components/google-cloud/storage/upload_to_unique_uri/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/62df0b062bc13fc1996db839f519c3517e923641/components/google-cloud/storage/list/component.yaml\",\r\n      // Vizier\r\n\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/62df0b062bc13fc1996db839f519c3517e923641/components/google-cloud/Optimizer/Suggest_parameter_sets_based_on_measurements/component.yaml\",\r\n    ],\r\n  },\r\n  {\r\n    category: \"TFX\",\r\n    componentUrls: [\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/d948cd6d191f94b9bb24550cfa45b32976901f18/components/deprecated/tfx/ExampleGen/CsvExampleGen/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/d948cd6d191f94b9bb24550cfa45b32976901f18/components/deprecated/tfx/StatisticsGen/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/d948cd6d191f94b9bb24550cfa45b32976901f18/components/deprecated/tfx/SchemaGen/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/d948cd6d191f94b9bb24550cfa45b32976901f18/components/deprecated/tfx/ExampleValidator/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/d948cd6d191f94b9bb24550cfa45b32976901f18/components/deprecated/tfx/Transform/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/d948cd6d191f94b9bb24550cfa45b32976901f18/components/deprecated/tfx/Trainer/component.yaml\",\r\n      \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/d948cd6d191f94b9bb24550cfa45b32976901f18/components/deprecated/tfx/Evaluator/component.yaml\",\r\n    ],\r\n  },\r\n];\r\n","import { useStoreState } from \"react-flow-renderer\";\r\nimport yaml from \"js-yaml\";\r\n\r\nimport { ComponentSpec } from \"../componentSpec\";\r\nimport { augmentComponentSpec } from \"./GraphComponentSpecFlow\";\r\n\r\ninterface GraphComponentLinkProps {\r\n  componentSpec: ComponentSpec;\r\n  downloadFileName?: string;\r\n  linkText?: string;\r\n  linkRef?: React.Ref<HTMLAnchorElement>;\r\n  style?: React.CSSProperties;\r\n}\r\n\r\nconst GraphComponentLink = ({\r\n  componentSpec,\r\n  downloadFileName = \"component.yaml\",\r\n  linkText = \"component.yaml\",\r\n  linkRef,\r\n  style,\r\n}: GraphComponentLinkProps) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n\r\n  try {\r\n    componentSpec = augmentComponentSpec(componentSpec, nodes, false, true);\r\n  } catch (err) {\r\n    if (err?.message?.startsWith(\"The nodes array does not\") !== true) {\r\n      console.error(err);\r\n      return <>err.toString()</>;\r\n    }\r\n  }\r\n  const componentText = yaml.dump(componentSpec, { lineWidth: 10000 });\r\n  const componentTextBlob = new Blob([componentText], { type: \"text/yaml\" }); // Or application/x-yaml (which leads to downloading)\r\n  return (\r\n    <a\r\n      ref={linkRef}\r\n      href={URL.createObjectURL(componentTextBlob)}\r\n      download={downloadFileName}\r\n      style={style}\r\n    >\r\n      {linkText}\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default GraphComponentLink;\r\n","import { useState, useEffect } from \"react\";\r\nimport { ComponentSpec } from \"../componentSpec\";\r\nimport {\r\n  storeComponentFromUrl,\r\n  ComponentReferenceWithSpec,\r\n} from \"../componentStore\";\r\nimport {\r\n  preloadComponentReferences,\r\n  PRELOADED_PIPELINE_URLS,\r\n} from \"./samplePipelines\";\r\n\r\ninterface PipelineLibraryProps {\r\n  setComponentSpec?: (componentSpec: ComponentSpec) => void;\r\n}\r\n\r\nconst SamplePipelineLibrary = ({ setComponentSpec }: PipelineLibraryProps) => {\r\n  const [componentRefs, setComponentRefs] = useState<\r\n    ComponentReferenceWithSpec[]\r\n  >([]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (componentRefs.length === 0) {\r\n        const loadedComponentRefs = await Promise.all(\r\n          PRELOADED_PIPELINE_URLS.map(async (url) => {\r\n            const componentRef = await storeComponentFromUrl(url);\r\n            await preloadComponentReferences(componentRef.spec);\r\n            return componentRef;\r\n          })\r\n        );\r\n        setComponentRefs(loadedComponentRefs);\r\n      }\r\n    })();\r\n  }, [componentRefs.length]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        //border: \"1px solid black\",\r\n        overflow: \"auto\",\r\n        whiteSpace: \"nowrap\",\r\n      }}\r\n    >\r\n      <div style={{ overflow: \"auto\", marginLeft: \"10px\" }}>\r\n        {componentRefs.map((componentRef) => (\r\n          <div key={componentRef.digest}>\r\n            ⋮ {/* ⋮ ≡ ⋅ */}\r\n            <button\r\n              className=\"link-button\"\r\n              onClick={(e) => {\r\n                setComponentSpec?.(componentRef.spec);\r\n              }}\r\n            >\r\n              {componentRef.spec.name ?? \"<Pipeline>\"}\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SamplePipelineLibrary;\r\n","import { useCallback, useState, useEffect, useRef } from \"react\";\r\nimport { ComponentSpec, isGraphImplementation } from \"../componentSpec\";\r\nimport {\r\n  getAllComponentsFromList,\r\n  addComponentToListByText,\r\n  ComponentReferenceWithSpec,\r\n  loadComponentAsRefFromText,\r\n} from \"../componentStore\";\r\nimport GraphComponentLink from \"./GraphComponentLink\";\r\nimport SamplePipelineLibrary from \"./SamplePipelineLibrary\";\r\n// //import Filer from \"filer\";\r\n// const Filer = require('filer');\r\n// const fs = new Filer.FileSystem({\r\n//   name: \"pipeline_library_fs_filer\",\r\n// }).promises;\r\n\r\nconst USER_PIPELINES_LIST_NAME = \"user_pipelines\";\r\n\r\ninterface PipelineLibraryProps {\r\n  componentSpec?: ComponentSpec;\r\n  setComponentSpec?: (componentSpec: ComponentSpec) => void;\r\n}\r\n\r\nconst PipelineLibrary = ({\r\n  componentSpec,\r\n  setComponentSpec,\r\n}: PipelineLibraryProps) => {\r\n  // const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [componentRefs, setComponentRefs] = useState<\r\n    ComponentReferenceWithSpec[]\r\n  >([]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      let componentRefs = await getAllComponentsFromList(\r\n        USER_PIPELINES_LIST_NAME\r\n      );\r\n      setComponentRefs(componentRefs);\r\n    })();\r\n  }, []);\r\n\r\n  const onDrop = useCallback((acceptedFiles: File[]) => {\r\n    acceptedFiles.forEach((file) => {\r\n      const reader = new FileReader();\r\n      reader.onabort = () => console.log(\"file reading was aborted\");\r\n      reader.onerror = () => console.log(\"file reading has failed\");\r\n      reader.onload = async () => {\r\n        const binaryStr = reader.result;\r\n        if (binaryStr === null || binaryStr === undefined) {\r\n          console.error(`Dropped file reader result was ${binaryStr}`);\r\n          return;\r\n        }\r\n        try {\r\n          const componentRef1 = await loadComponentAsRefFromText(binaryStr);\r\n          if (!isGraphImplementation(componentRef1.spec.implementation)) {\r\n            console.error(\"Dropped component is not a graph component\");\r\n            return;\r\n          }\r\n          // TODO: Do not load the component twice\r\n\r\n          const componentRef = await addComponentToListByText(\r\n            USER_PIPELINES_LIST_NAME,\r\n            binaryStr,\r\n            \"Pipeline\"\r\n          );\r\n          console.debug(\"storeComponentText succeeded\", componentRef);\r\n          (window as any).gtag?.(\"event\", \"PipelineLibrary_pipeline_import\", {\r\n            result: \"succeeded\",\r\n          });\r\n          // setErrorMessage(\"\");\r\n          const allComponentRefs = await getAllComponentsFromList(\r\n            USER_PIPELINES_LIST_NAME\r\n          );\r\n          setComponentRefs(allComponentRefs);\r\n        } catch (err) {\r\n          // setErrorMessage(\r\n          //   `Error parsing the dropped file as component: ${err.toString()}.`\r\n          // );\r\n          console.error(\"Error parsing the dropped file as component\", err);\r\n          (window as any).gtag?.(\"event\", \"PipelineLibrary_pipeline_import\", {\r\n            result: \"failed\",\r\n          });\r\n        }\r\n      };\r\n      reader.readAsArrayBuffer(file);\r\n    });\r\n  }, []);\r\n\r\n  const fileInput = useRef<HTMLInputElement>(null);\r\n  const componentLink = useRef<HTMLAnchorElement>(null);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        //border: \"1px solid black\",\r\n        overflow: \"auto\",\r\n        whiteSpace: \"nowrap\",\r\n      }}\r\n    >\r\n      <div style={{ margin: \"5px\" }}>\r\n        <input\r\n          ref={fileInput}\r\n          type=\"file\"\r\n          accept=\".yaml\"\r\n          onChange={(e) => onDrop(Array.from(e.target.files ?? []))}\r\n          style={{ display: \"none\" }}\r\n        />\r\n        <button onClick={(e) => fileInput.current?.click()}>\r\n          + Import\r\n        </button>\r\n        <button\r\n          onClick={(e) => {\r\n            componentLink.current?.click();\r\n          }}\r\n        >\r\n          Export\r\n        </button>\r\n        {componentSpec && (\r\n          <GraphComponentLink\r\n            linkRef={componentLink}\r\n            componentSpec={componentSpec}\r\n            linkText=\"🔗\"\r\n            downloadFileName={\r\n              (componentSpec.name ? componentSpec.name + \".\" : \"\") +\r\n              \"pipeline.component.yaml\"\r\n            }\r\n            style={{ textDecoration: \"none\" }}\r\n          />\r\n        )}\r\n      </div>\r\n      <div style={{ overflow: \"auto\", marginLeft: \"10px\" }}>\r\n        {componentRefs.map((componentRef) => (\r\n          <div key={componentRef.digest}>\r\n            ⋮ {/* ⋮ ≡ ⋅ */}\r\n            <button\r\n              className=\"link-button\"\r\n              onClick={(e) => {\r\n                setComponentSpec?.(componentRef.spec);\r\n              }}\r\n            >\r\n              {componentRef.spec.name ?? \"<Pipeline>\"}\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <details\r\n        open\r\n        style={{\r\n          border: \"1px solid #aaa\",\r\n          borderRadius: \"4px\",\r\n          padding: \"4px\",\r\n        }}\r\n      >\r\n        <summary>\r\n          <strong>Sample pipelines</strong>\r\n        </summary>\r\n        <SamplePipelineLibrary setComponentSpec={setComponentSpec} />\r\n      </details>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PipelineLibrary;\r\n"],"sourceRoot":""}