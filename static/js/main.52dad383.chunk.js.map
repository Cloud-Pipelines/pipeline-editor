{"version":3,"sources":["componentStore.ts","DragNDrop/Sidebar.tsx","github.ts","DragNDrop/ComponentSearch.tsx","DragNDrop/MultiHandleNode.tsx","DragNDrop/ComponentTaskNode.tsx","DragNDrop/index.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["loadComponentFromUrl","a","url","fetch","then","response","text","yaml","load","onDragStart","event","nodeData","console","log","JSON","stringify","dataTransfer","setData","effectAllowed","Sidebar","componentSpec","className","input","label","draggable","default","output","multihandle","handles","top","type","ids","bottom","left","right","onClick","inputNames","inputs","map","inputSpec","name","undefined","outputs","outputNames","outputSpec","componentName","task","componentRef","spec","SEARCH_CACHE_NAME","BLOB_CACHE_NAME","DB_NAME","HASH_TO_CONTENT_DB_TABLE_NAME","HASH_TO_COMPONENT_NAME_DB_TABLE_NAME","URL_TO_HASH_DB_TABLE_NAME","HASH_TO_URL_DB_TABLE_NAME","URL_PROCESSING_VERSION_TABLE_NAME","httpGetWithCache","urlOrRequest","cacheName","updateIfInCache","caches","open","cache","match","add","response2","Promise","reject","searchGitHubCodeWithCache","query","page","sort","order","encodedQuery","encodeURIComponent","encodedSort","encodedOrder","searchUrl","json","githubHtmlUrlToDownloadUrl","htmlUrl","replace","getComponentUrlsAndHashes","users","urlsAndHashes","user","join","searchResults","items","length","item","push","html_url","hash","sha","cacheAllComponents","urlToHashDb","localForage","createInstance","storeName","hashToUrlDb","hashToContentDb","hashToComponentNameDb","urlProcessingVersionDb","toLowerCase","downloadUrl","endsWith","debug","getItem","cachedHash","error","urlVersion","Number","parseInt","blob","data","loadedYaml","implementation","setItem","getAllComponentsAsRefs","hashToComponentRef","Map","cachePromise","iterate","componentText","iterationNumber","set","err","get","componentRefs","forEach","searchComponentsByName","filter","ref","includes","SearchPanel","props","useState","setError","firstTime","setFirstTime","isLoaded","setIsLoaded","setQuery","setItems","message","results","componentElements","title","onSubmit","e","preventDefault","fetchData","placeholder","onChange","target","value","MultiHandleNode","handleComponents","position","sideHandles","numHandles","i","id","positionPercentString","String","style","Position","Top","Bottom","isConnectable","memo","inputHandlePosition","outputHandlePosition","generateHandles","ioSpecs","handleType","idPrefix","ioSpec","ioTypeName","toString","ComponentTaskNode","inputHandles","outputHandles","concat","nodeTypes","initialElements","x","y","onDragOver","dropEffect","DnDFlow","reactFlowInstance","setReactFlowInstance","elements","setElements","onConnect","params","els","addEdge","onElementsRemove","elementsToRemove","removeElements","onEdgeUpdateStart","_","edge","onEdgeUpdateEnd","onEdgeUpdate","oldEdge","newConnection","updateEdge","onLoad","_reactFlowInstance","onDrop","getData","transferredData","parse","nodeType","Object","keys","project","clientX","clientY","newNode","es","deleteKeyCode","multiSelectionKeyCode","snapToGrid","snapGrid","gap","ComponentSearch","App","width","height","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.52dad383.chunk.js","sourcesContent":["import yaml from \"js-yaml\";\r\n\r\nimport {ComponentSpec} from './componentSpec'\r\n\r\nexport async function loadComponentFromUrl(\r\n  url: string = \"https://raw.githubusercontent.com/kubeflow/pipelines/603342c4b88fe2d69ff07682f702cd3601e883bb/components/PyTorch/Train_PyTorch_model/from_CSV/component.yaml\"\r\n): Promise<ComponentSpec> {\r\n  return fetch(url)\r\n    .then((response) => response.text())\r\n    .then((response) => yaml.load(response) as ComponentSpec);\r\n}\r\n\r\n// let componentSpec = loadComponentFromUrl(\"https://raw.githubusercontent.com/kubeflow/pipelines/603342c4b88fe2d69ff07682f702cd3601e883bb/components/PyTorch/Train_PyTorch_model/from_CSV/component.yaml\");\r\n// console.log(componentSpec)\r\n","import React, { DragEvent } from 'react';\r\n\r\nimport {loadComponentFromUrl} from '../componentStore'\r\nimport {ComponentSpec, TaskSpec} from '../componentSpec'\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  console.log('JSON.stringify(nodeData)=' + JSON.stringify(nodeData));\r\n  event.dataTransfer.setData('application/reactflow', JSON.stringify(nodeData));\r\n  event.dataTransfer.effectAllowed = 'move';\r\n};\r\n\r\nconst Sidebar = () => {\r\n  let componentSpec: ComponentSpec | undefined;\r\n  (async () => {componentSpec = await loadComponentFromUrl(\"https://raw.githubusercontent.com/kubeflow/pipelines/603342c4b88fe2d69ff07682f702cd3601e883bb/components/PyTorch/Train_PyTorch_model/from_CSV/component.yaml\")})();\r\n  console.log('componentSpec=' + componentSpec);\r\n  return (\r\n    <aside>\r\n      <div className=\"description\">You can drag these nodes to the pane on the right.</div>\r\n      <div className=\"react-flow__node-input\" onDragStart={(event: DragEvent) => onDragStart(event, { input: { label: \"Input Node\" } })} draggable>\r\n        Input Node\r\n      </div>\r\n      <div className=\"react-flow__node-default\" onDragStart={(event: DragEvent) => onDragStart(event, { default: { label: \"Default Node\" } })} draggable>\r\n        Default Node\r\n      </div>\r\n      <div className=\"react-flow__node-output\" onDragStart={(event: DragEvent) => onDragStart(event, { output: { label: \"Output Node\" } })} draggable>\r\n        Output Node\r\n      </div>\r\n      <div className=\"react-flow__node react-flow__node-multihandle\" draggable\r\n        onDragStart={(event: DragEvent) =>\r\n          onDragStart(event, { multihandle: {\r\n            handles: {\r\n              top: { type: \"target\", ids: [\"top_1\", \"top_2\", \"top_3\"] },\r\n              bottom: { type: \"source\", ids: [\"bottom_1\", \"bottom_2\"] },\r\n              left: { type: \"target\", ids: [\"left_1\"] },\r\n              right: { type: \"source\", ids: [\"right_1\"] },\r\n            },\r\n            label: \"Multi-handle node (3-2-1-1)\",\r\n          }})\r\n        }\r\n      >\r\n        Multi-port Node 3-2-1-1\r\n      </div>\r\n      <button onClick={async (event) => {\r\n        console.log(\"Clicked\");\r\n        let componentSpec: ComponentSpec = await loadComponentFromUrl(\"https://raw.githubusercontent.com/kubeflow/pipelines/603342c4b88fe2d69ff07682f702cd3601e883bb/components/PyTorch/Train_PyTorch_model/from_CSV/component.yaml\");\r\n        console.log(componentSpec)\r\n        const inputNames = componentSpec?.inputs?.map(inputSpec => inputSpec.name);\r\n        console.log(inputNames)\r\n      return true;\r\n      }}>\r\n        Load\r\n      </button>\r\n      <div className=\"react-flow__node react-flow__node-multihandle\" draggable\r\n        onDragStart={async (event: DragEvent) => {\r\n          //const componentSpec = await loadComponentFromUrl(\"https://raw.githubusercontent.com/kubeflow/pipelines/603342c4b88fe2d69ff07682f702cd3601e883bb/components/PyTorch/Train_PyTorch_model/from_CSV/component.yaml\");\r\n          console.log('componentSpec{div}=' + componentSpec);\r\n          if (componentSpec === undefined) {\r\n            return;\r\n          }\r\n          const inputs = componentSpec.inputs ?? []\r\n          const inputNames = inputs.map(inputSpec => inputSpec.name);\r\n          const outputs = componentSpec.outputs ?? []\r\n          const outputNames = outputs.map(outputSpec => outputSpec.name);\r\n          const componentName = componentSpec.name ?? \"Component\"\r\n          console.log(inputNames)\r\n          return onDragStart(event, { multihandle: {\r\n            handles: {\r\n              top: { type: \"target\", ids: inputNames },\r\n              bottom: { type: \"source\", ids: outputNames },\r\n            },\r\n            label: componentName,\r\n          }});\r\n        }}\r\n      >\r\n        PyTorch/Train_PyTorch_model/from_CSV\r\n      </div>\r\n      <div className=\"react-flow__node react-flow__node-multihandle\" draggable\r\n        onDragStart={(event: DragEvent) => {\r\n          const taskSpec: TaskSpec = {\r\n            componentRef: {\r\n              spec: componentSpec,\r\n            },\r\n          };\r\n          return onDragStart(event, { task: taskSpec});\r\n        }}\r\n      >\r\n        2 PyTorch/Train_PyTorch_model/from_CSV\r\n      </div>\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import yaml from \"js-yaml\";\r\nimport localForage from \"localforage\";\r\nimport { ComponentSpec, ComponentReference } from \"./componentSpec\";\r\n\r\n// const COMPONENT_FILE_NAME_SUFFIX = \"component.yaml\";\r\n// const COMPONENT_FILE_MAX_SIZE = 100000;\r\nconst SEARCH_CACHE_NAME = \"https://api.github.com/search\";\r\nconst BLOB_CACHE_NAME = \"raw.githubusercontent.com/.../component.yaml\";\r\nconst DB_NAME = \"components\";\r\nconst HASH_TO_CONTENT_DB_TABLE_NAME = \"hash_to_data\";\r\nconst HASH_TO_COMPONENT_NAME_DB_TABLE_NAME = \"hash_to_component_name\";\r\nconst URL_TO_HASH_DB_TABLE_NAME = \"url_to_hash\";\r\nconst HASH_TO_URL_DB_TABLE_NAME = \"hash_to_url\";\r\nconst URL_PROCESSING_VERSION_TABLE_NAME = \"url_version\";\r\nconst CURRENT_URL_PROCESSING_VERSION = 1;\r\n\r\nexport const httpGetWithCache = async (\r\n  urlOrRequest: string | RequestInfo,\r\n  cacheName: string,\r\n  updateIfInCache: boolean = false\r\n): Promise<Response> => {\r\n  const cache = await caches.open(cacheName);\r\n  const response = await cache.match(urlOrRequest);\r\n  if (response !== undefined) {\r\n    if (updateIfInCache) {\r\n      cache.add(urlOrRequest);\r\n    }\r\n    return response;\r\n  }\r\n  await cache.add(urlOrRequest);\r\n  const response2 = await cache.match(urlOrRequest);\r\n  if (response2 === undefined) {\r\n    return Promise.reject(\"Added object to cache, but counld not find it\");\r\n  }\r\n  return response2;\r\n};\r\n\r\nexport const searchGitHubCodeWithCache = async (\r\n  query: string,\r\n  page = 1,\r\n  sort = \"indexed\",\r\n  order = \"desc\",\r\n): Promise<any> => {\r\n  // TODO: Paging\r\n  const encodedQuery = encodeURIComponent(query);\r\n  const encodedSort = encodeURIComponent(sort);\r\n  const encodedOrder = encodeURIComponent(order);\r\n  const searchUrl = `https://api.github.com/search/code?q=${encodedQuery}&sort=${encodedSort}&order=${encodedOrder}&per_page=100&page=${page}`;\r\n  const response = await httpGetWithCache(searchUrl, SEARCH_CACHE_NAME, true);\r\n  return response.json();\r\n};\r\n\r\nconst githubHtmlUrlToDownloadUrl = (htmlUrl: string): string => {\r\n  // https://github.com/               kubeflow/pipelines/blob/24bc9162a56c2fe3c50947d655ef280f71ba058f/components/gcp/dataflow/launch_flex_template/component.yaml\r\n  // https://raw.githubusercontent.com/kubeflow/pipelines     /24bc9162a56c2fe3c50947d655ef280f71ba058f/components/gcp/dataflow/launch_flex_template/component.yaml\r\n  return htmlUrl\r\n    .replace(\"https://github.com/\", \"https://raw.githubusercontent.com/\")\r\n    .replace(\"/blob/\", \"/\");\r\n};\r\n\r\ntype UrlAndHash = {\r\n  url: string;\r\n  hash: string;\r\n};\r\n\r\nexport const getComponentUrlsAndHashes = async (\r\n  users = [\"kubeflow\", \"Ark-kun\"]\r\n): Promise<UrlAndHash[]> => {\r\n  let urlsAndHashes: UrlAndHash[] = [];\r\n  const query =\r\n    \"filename:component.yaml \" + users.map((user) => \"user:\" + user).join(\" \");\r\n  for (let page = 1; page < 100; page++) {\r\n    const searchResults = await searchGitHubCodeWithCache(query, page);\r\n    // \"total_count\": 512,\r\n    // \"incomplete_results\": false,\r\n    // \"items\": [\r\n    const items: any[] = searchResults.items;\r\n    if (items.length === 0) {\r\n      break;\r\n    }\r\n    for (let item of items) {\r\n      urlsAndHashes.push({ url: githubHtmlUrlToDownloadUrl(item.html_url), hash: item.sha })\r\n    }\r\n    // await new Promise( resolve => setTimeout(resolve, 7 * 1000));\r\n  }\r\n  return urlsAndHashes;\r\n};\r\n\r\nexport const cacheComponentCandidateBlobs = async (\r\n  users = [\"kubeflow\", \"Ark-kun\"]\r\n): Promise<any[]> => {\r\n  const urlsAndHashes = await getComponentUrlsAndHashes(users);\r\n  const cache = await caches.open(BLOB_CACHE_NAME);\r\n  await cache.addAll(urlsAndHashes.map((item) => item.url));\r\n  return urlsAndHashes;\r\n};\r\n\r\n// export const cacheComponents = async (\r\n//   users = [\"kubeflow\", \"Ark-kun\"]\r\n// ): Promise<any[]> => {\r\n//   const urls = await cacheComponentCandidateBlobs(users);\r\n//   const cache = await caches.open(BLOB_CACHE_NAME);\r\n\r\n//   return urls;\r\n// };\r\n\r\nexport const cacheAllComponents = async (users = [\"kubeflow\", \"Ark-kun\"]) => {\r\n  const urlsAndHashes = await getComponentUrlsAndHashes(users);\r\n\r\n  // const cache = await caches.open(BLOB_CACHE_NAME);\r\n  const urlToHashDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_TO_HASH_DB_TABLE_NAME,\r\n  });\r\n  const hashToUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_URL_DB_TABLE_NAME,\r\n  });\r\n  const hashToContentDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_CONTENT_DB_TABLE_NAME,\r\n  });\r\n  const hashToComponentNameDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_COMPONENT_NAME_DB_TABLE_NAME,\r\n  });\r\n  const urlProcessingVersionDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_PROCESSING_VERSION_TABLE_NAME,\r\n  });\r\n  for (const item of urlsAndHashes) {\r\n    const hash = item.hash.toLowerCase();\r\n    const htmlUrl = item.url;\r\n    try {\r\n      const downloadUrl: string = githubHtmlUrlToDownloadUrl(htmlUrl);\r\n      if (!downloadUrl.endsWith(\"component.yaml\")) {\r\n        console.debug(`Skipping url ${downloadUrl} since it does not end with \"component.yaml\"`);\r\n        continue;\r\n      }\r\n      // Sanity check\r\n      const cachedHash = await urlToHashDb.getItem<string>(downloadUrl);\r\n      if (cachedHash !== null && cachedHash !== hash) {\r\n        console.error(\r\n          `Component cache is broken. Stored hash for ${downloadUrl}: ${cachedHash} != ${hash}.`\r\n        );\r\n      }\r\n      // Check whether the processing is complete\r\n      const urlVersion = await urlProcessingVersionDb.getItem<string>(\r\n        downloadUrl\r\n      );\r\n\r\n      if (\r\n        cachedHash !== null && // Not sure we should check this, but it improves the sanity\r\n        urlVersion !== null &&\r\n        Number.parseInt(urlVersion) >= CURRENT_URL_PROCESSING_VERSION\r\n      ) {\r\n        continue;\r\n      }\r\n\r\n      console.debug(`Processing new component candidate: ${downloadUrl}.`);\r\n      const response = await httpGetWithCache(downloadUrl, BLOB_CACHE_NAME);\r\n      const data = await response.blob();\r\n      const text = await data.text();\r\n      const loadedYaml = yaml.load(text);\r\n      const componentSpec = loadedYaml as ComponentSpec;\r\n      if (componentSpec.implementation === undefined) {\r\n        continue;\r\n      }\r\n\r\n      // Blobs are cumbersome (need await to get text) - store text instead\r\n      // await hashToContentDb.setItem(hash, data);\r\n      await hashToContentDb.setItem(hash, text);\r\n\r\n      // Only adding hash -> URL once\r\n      const urlForHash = await hashToUrlDb.getItem<string>(hash);\r\n      if (urlForHash === null) {\r\n        await hashToUrlDb.setItem(hash, downloadUrl);\r\n      }\r\n\r\n      // Only storing names when they exist\r\n      if (componentSpec.name) {\r\n        await hashToComponentNameDb.setItem(hash, componentSpec.name);\r\n      }\r\n\r\n      await urlToHashDb.setItem(downloadUrl, hash);\r\n\r\n      // Marking the processing as completed\r\n      await urlProcessingVersionDb.setItem(\r\n        downloadUrl,\r\n        CURRENT_URL_PROCESSING_VERSION\r\n      );\r\n    } catch (err) {\r\n      console.error(\r\n        `Error when processing component candidate ${htmlUrl} Error: ${err}.`\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nexport const getAllComponentsAsRefs = async () => {\r\n  // Perhaps use urlProcessingVersionDb as source of truth. Hmm. It is URL-based\r\n  const hashToUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_URL_DB_TABLE_NAME,\r\n  });\r\n  const hashToContentDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_CONTENT_DB_TABLE_NAME,\r\n  });\r\n  let hashToComponentRef = new Map<string, ComponentReference>();\r\n\r\n  console.log(\"Start cacheAllComponents\");\r\n  const cachePromise = cacheAllComponents();\r\n  if ((await hashToContentDb.length()) === 0) {\r\n    await cachePromise;\r\n  }\r\n\r\n  // !!! Iterating using hashToContentDb.iterate<string, void> causes all values to be `[object Blob]`\r\n  //await hashToContentDb.iterate<Blob, void>(\r\n  await hashToContentDb.iterate<string, void>(\r\n    // !!! async processor causes only 1 item to be processed\r\n    //async (componentData, hash, iterationNumber) => {\r\n    (componentText, hash, iterationNumber) => {\r\n      //const componentText = await componentData.text();\r\n      try {\r\n        const componentSpec = yaml.load(componentText) as ComponentSpec;\r\n        hashToComponentRef.set(hash, {\r\n          spec: componentSpec,\r\n        });\r\n      } catch (err) {\r\n        console.error(\r\n          `Error when parsing cached component. Hash: ${hash}. Error: ${err}. Component text: ${componentText}`\r\n        );\r\n      }\r\n    }\r\n  );\r\n  await hashToUrlDb.iterate<string, void>((url, hash, iterationNumber) => {\r\n    let componentRef = hashToComponentRef.get(hash);\r\n    if (componentRef === undefined) {\r\n      console.error(\r\n        `Component db corrupted: Component with url ${url} and hash ${hash} has no content in the DB.`\r\n      );\r\n    } else {\r\n      componentRef.url = url;\r\n    }\r\n  });\r\n  let componentRefs: ComponentReference[] = [];\r\n  // TODO: Improve the iteration onve TypeScript propertly supports it\r\n  hashToComponentRef.forEach((componentRef, hash) => {\r\n    if (componentRef.url === undefined) {\r\n      console.error(\r\n        `Component db corrupted: Component with hash ${hash} has content, but no URL in the DB.`\r\n      );\r\n    } else {\r\n      componentRefs.push(componentRef);\r\n    }\r\n  });\r\n  return componentRefs;\r\n};\r\n\r\nexport const searchComponentsByName = async (name: string) => {\r\n  const componentRefs = await getAllComponentsAsRefs();\r\n  return componentRefs.filter((ref) => ref.spec?.name?.toLowerCase().includes(name.toLowerCase()) ?? false);\r\n};\r\n","import React, { DragEvent } from 'react';\r\nimport { useState } from \"react\";\r\nimport { ComponentReference, ComponentSpec, TaskSpec } from \"../componentSpec\";\r\nimport { searchComponentsByName } from \"../github\";\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  console.log(\"JSON.stringify(nodeData)=\" + JSON.stringify(nodeData));\r\n  event.dataTransfer.setData(\"application/reactflow\", JSON.stringify(nodeData));\r\n  event.dataTransfer.effectAllowed = \"move\";\r\n};\r\n\r\nconst ComponentResult = ({\r\n  componentRef,\r\n}: {\r\n  componentRef: ComponentReference;\r\n}) => {\r\n  const componentSpec = componentRef.spec as ComponentSpec;\r\n  return <div>{componentSpec.name ?? \"<unnamed component>\"}</div>;\r\n};\r\n\r\nconst ResultsTable = (props: any) => {\r\n  const componentRefs = props.componentRefs;\r\n  const rows = [];\r\n  for (const componentRef of componentRefs) {\r\n    rows.push(<ComponentResult componentRef={componentRef} />);\r\n  }\r\n};\r\n\r\nconst COMPONENT_ORGS = [\"kubeflow\", \"Ark-kun\"];\r\n\r\nconst SearchPanel = (props: any) => {\r\n  const [error, setError] = useState<string | undefined>(undefined);\r\n  const [firstTime, setFirstTime] = useState(true);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [items, setItems] = useState<ComponentReference[]>([]);\r\n\r\n  const onQueryChange = (e: any) => {\r\n    setQuery(e.target.value);\r\n  };\r\n\r\n  async function fetchData(query: string) {\r\n    searchComponentsByName(query).then(\r\n      (componentRefs) => {\r\n        setIsLoaded(true);\r\n        setItems(componentRefs);\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        setIsLoaded(true);\r\n        setError(error.message);\r\n      }\r\n    );\r\n  }\r\n\r\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (query !== \"\") {\r\n      setFirstTime(false);\r\n      fetchData(query);\r\n    }\r\n  };\r\n\r\n  let results = <span></span>;\r\n  if (firstTime) {\r\n    results = <div>Enter search query</div>;\r\n  } else if (error !== undefined) {\r\n    results = <div>Error: {error}</div>;\r\n  } else if (!firstTime && !isLoaded) {\r\n    results = <div>Loading...</div>;\r\n  } else if (items !== undefined) {\r\n    // results = (\r\n    //   <ul\r\n    //     style={{\r\n    //       width: \"200px\",\r\n    //       whiteSpace: \"nowrap\",\r\n    //       overflow: \"hidden\",\r\n    //       textOverflow: \"ellipsis\",\r\n    //     }}\r\n    //   >\r\n    //     {items.map((item) => (\r\n    //       <li key={item.url} title={item.url}>\r\n    //         {item.spec?.name}\r\n    //       </li>\r\n    //     ))}\r\n    //   </ul>\r\n    // );\r\n\r\n    const componentElements = items.map((item) => (\r\n      <div key={item.url} title={item.url} className=\"react-flow__node react-flow__node-multihandle\" draggable onDragStart={(event: DragEvent) => {\r\n          const taskSpec: TaskSpec = {\r\n            componentRef: item,\r\n          };\r\n          return onDragStart(event, { task: taskSpec });\r\n        }}\r\n      >\r\n        {item.spec?.name}\r\n      </div>\r\n    ));\r\n    results = <>\r\n      {componentElements}\r\n    </>;\r\n  }\r\n  return (\r\n    <div className=\"nodeList\">\r\n      <form onSubmit={onSubmit}>\r\n        <input placeholder=\"XGBoost\" onChange={onQueryChange} />\r\n        <input type=\"submit\" />\r\n      </form>\r\n      <div>{results}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// https://api.github.com/search/code?q=filename:component.yaml%20user:kubeflow&sort=indexed&order=asc\r\n\r\nexport default SearchPanel;\r\n","import React, { memo, FC } from 'react';\r\n\r\nimport { Handle, Position, NodeProps, HandleType } from 'react-flow-renderer';\r\n\r\ntype NodeData = {\r\n  label: string\r\n  handles: NodeHandles\r\n}\r\n\r\ntype NodeHandles = {\r\n  [key: string]: SideHandles // key is Position\r\n}\r\n\r\ntype SideHandles = {\r\n  type: HandleType\r\n  ids: string[]\r\n}\r\n\r\nconst MultiHandleNode: FC<NodeProps<NodeData>> = ({data}) => {\r\n  let handleComponents = [];\r\n  for (const position in data.handles) {\r\n    const sideHandles = data.handles[position];\r\n    const numHandles = sideHandles.ids.length;\r\n    for (let i = 0; i < numHandles; i++) {\r\n      const id = sideHandles.ids[i];\r\n      const relativePosition = (i + 1) / (numHandles + 1);\r\n      const positionPercentString = String(100 * relativePosition) + \"%\";\r\n      const style =\r\n        (position === Position.Top || position === Position.Bottom)\r\n          ? { left: positionPercentString }\r\n          : { top: positionPercentString };\r\n      handleComponents.push(\r\n        <Handle\r\n          key={id}\r\n          type={sideHandles.type}\r\n          position={position as Position}\r\n          id={id}\r\n          style={style}\r\n          isConnectable={true}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {data.label}\r\n      {handleComponents}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(MultiHandleNode);\r\n","import { memo } from 'react';\r\nimport {TaskSpec, InputSpec, OutputSpec} from '../componentSpec';\r\n\r\nimport { Handle, Position, NodeProps, HandleType } from 'react-flow-renderer';\r\n\r\nconst inputHandlePosition = Position.Top;\r\nconst outputHandlePosition = Position.Bottom;\r\n\r\ntype InputOrOutputSpec = InputSpec | OutputSpec;\r\n\r\nfunction generateHandles(\r\n  ioSpecs: InputOrOutputSpec[],\r\n  handleType: HandleType,\r\n  position: Position,\r\n  idPrefix: string,\r\n): JSX.Element[] {\r\n  let handleComponents = [];\r\n  const numHandles = ioSpecs.length;\r\n  for (let i = 0; i < numHandles; i++) {\r\n    const ioSpec = ioSpecs[i];\r\n    const id = idPrefix + ioSpec.name;\r\n    const relativePosition = (i + 1) / (numHandles + 1);\r\n    const positionPercentString = String(100 * relativePosition) + \"%\";\r\n    const style =\r\n      position === Position.Top || position === Position.Bottom\r\n        ? { left: positionPercentString }\r\n        : { top: positionPercentString };\r\n    const ioTypeName = ioSpec.type?.toString() ?? \"Any\";\r\n    const className = ioTypeName; // Need to be sanitized\r\n    handleComponents.push(\r\n      <Handle\r\n        key={id}\r\n        type={handleType}\r\n        position={position}\r\n        id={id}\r\n        style={style}\r\n        isConnectable={true}\r\n        title={ioSpec.name + \" : \" + ioTypeName}\r\n        className={\"handle_\" + className}\r\n      />\r\n    );\r\n  }\r\n  return handleComponents;\r\n}\r\n\r\nfunction generateInputHandles(inputSpecs: InputSpec[]): JSX.Element[] {\r\n  return generateHandles(inputSpecs, \"target\", inputHandlePosition, \"input_\");\r\n}\r\n\r\nfunction generateOutputHandles(outputSpecs: OutputSpec[]): JSX.Element[] {\r\n  return generateHandles(outputSpecs, \"source\", outputHandlePosition, \"output_\");\r\n}\r\n\r\nconst ComponentTaskNode = ({data}: NodeProps<TaskSpec>) => {\r\n  const taskSpec = data;\r\n  const componentSpec = taskSpec.componentRef.spec;\r\n  if (componentSpec === undefined) {\r\n    return (<></>);\r\n  }\r\n\r\n  const label = componentSpec.name ?? \"<component>\";\r\n  const inputHandles = generateInputHandles(componentSpec.inputs ?? []);\r\n  const outputHandles = generateOutputHandles(componentSpec.outputs ?? []);\r\n  const handleComponents = inputHandles.concat(outputHandles);\r\n\r\n  return (\r\n    <>\r\n      {label}\r\n      {handleComponents}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(ComponentTaskNode);\r\n","import React, { useState, DragEvent } from 'react';\r\nimport ReactFlow, {\r\n  ReactFlowProvider,\r\n  addEdge,\r\n  updateEdge,\r\n  removeElements,\r\n  Controls,\r\n  OnLoadParams,\r\n  Elements,\r\n  Connection,\r\n  Edge,\r\n  ElementId,\r\n  Node,\r\n  MiniMap,\r\n  Background,\r\n} from 'react-flow-renderer';\r\n\r\nimport Sidebar from './Sidebar';\r\nimport ComponentSearch from './ComponentSearch'\r\n\r\nimport MultiHandleNode from './MultiHandleNode';\r\nimport ComponentTaskNode from './ComponentTaskNode';\r\n\r\nimport './dnd.css';\r\n\r\nconst nodeTypes = {\r\n  multihandle: MultiHandleNode,\r\n  task: ComponentTaskNode,\r\n};\r\n\r\nconst initialElements = [{ id: '1', type: 'input', data: { label: 'input node' }, position: { x: 250, y: 5 } }];\r\n\r\nconst onDragOver = (event: DragEvent) => {\r\n  event.preventDefault();\r\n  event.dataTransfer.dropEffect = 'move';\r\n};\r\n\r\nlet id = 0;\r\nconst getId = (): ElementId => `dndnode_${id++}`;\r\n\r\nlet nodeMap: { [id: string] : Node; } = {};\r\n\r\nconst DnDFlow = () => {\r\n  const [reactFlowInstance, setReactFlowInstance] = useState<OnLoadParams>();\r\n  const [elements, setElements] = useState<Elements>(initialElements);\r\n\r\n  // gets called after end of edge gets dragged to another source or target\r\n  const onEdgeUpdate = (oldEdge: Edge, newConnection: Connection) =>\r\n    setElements((els) => updateEdge(oldEdge, newConnection, els));\r\n  const onConnect = (params: Connection | Edge) => setElements((els) => addEdge(params, els));\r\n  const onElementsRemove = (elementsToRemove: Elements) => setElements((els) => removeElements(elementsToRemove, els));\r\n  const onLoad = (_reactFlowInstance: OnLoadParams) => setReactFlowInstance(_reactFlowInstance);\r\n\r\n  const onEdgeUpdateStart = (_: React.MouseEvent, edge: Edge) => console.log('start update', edge);\r\n  const onEdgeUpdateEnd = (_: MouseEvent, edge: Edge) => console.log('end update', edge);\r\n\r\n  const onDrop = (event: DragEvent) => {\r\n    event.preventDefault();\r\n\r\n    if (reactFlowInstance) {\r\n      console.log('event.dataTransfer.data=' + event.dataTransfer.getData('application/reactflow'));\r\n      const transferredData = JSON.parse(event.dataTransfer.getData('application/reactflow'));\r\n      const nodeType = Object.keys(transferredData)[0];\r\n      const nodeData = transferredData[nodeType];\r\n      const position = reactFlowInstance.project({ x: event.clientX, y: event.clientY - 40 });\r\n      const newNode: Node = {\r\n        id: getId(),\r\n        type: nodeType,\r\n        position,\r\n        data: nodeData,\r\n      };\r\n\r\n      setElements((es) => es.concat(newNode));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"dndflow\">\r\n      <ReactFlowProvider>\r\n        <div className=\"reactflow-wrapper\">\r\n          {/*  */}\r\n          <ReactFlow\r\n            elements={elements}\r\n            onConnect={onConnect}\r\n            onElementsRemove={onElementsRemove}\r\n            onEdgeUpdateStart={onEdgeUpdateStart}\r\n            onEdgeUpdateEnd={onEdgeUpdateEnd}\r\n            onEdgeUpdate={onEdgeUpdate}\r\n            onLoad={onLoad}\r\n            onDrop={onDrop}\r\n            onDragOver={onDragOver}\r\n            nodeTypes={nodeTypes}\r\n            deleteKeyCode='Delete'\r\n            multiSelectionKeyCode='Control'\r\n            snapToGrid={true}\r\n            snapGrid={[10, 10]}\r\n            \r\n          >\r\n            <MiniMap/>\r\n            <Controls />\r\n            <Background gap={10}/>\r\n          </ReactFlow>\r\n        </div>\r\n        <Sidebar />\r\n        <ComponentSearch />\r\n      </ReactFlowProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DnDFlow;\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport DnDFlow from './DragNDrop/index';\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{width: \"100%\", height: \"90%\"}}>\n      <DnDFlow/>\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          LeZzzzarn React\n        </a>\n      </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}