{"version":3,"sources":["github.ts","DragNDrop/GraphComponentSpecFlow.tsx","DragNDrop/ArgumentsEditor.tsx","DragNDrop/ComponentTaskNode.tsx","DragNDrop/vertexAiCompiler.ts","DragNDrop/graphComponentFromFlow.ts","DragNDrop/Sidebar.tsx","DragNDrop/ComponentLibrary.tsx","DragNDrop/ComponentSearch.tsx","DragNDrop/GraphComponentExporter.tsx","DragNDrop/GoogleCloud.tsx","DragNDrop/VertexAiExporter.tsx","DragNDrop/GraphComponentLink.tsx","DragNDrop/index.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx","DragNDrop/samplePipelines.ts"],"names":["SEARCH_CACHE_NAME","BLOB_CACHE_NAME","DB_NAME","HASH_TO_CONTENT_DB_TABLE_NAME","HASH_TO_COMPONENT_NAME_DB_TABLE_NAME","URL_TO_HASH_DB_TABLE_NAME","HASH_TO_URL_DB_TABLE_NAME","URL_PROCESSING_VERSION_TABLE_NAME","BAD_HASHES_TABLE_NAME","httpGetWithCache","urlOrRequest","cacheName","a","updateIfInCache","caches","open","cache","match","undefined","response","add","response2","Promise","reject","searchGitHubCodeWithCache","query","page","sort","order","encodedQuery","encodeURIComponent","encodedSort","encodedOrder","searchUrl","json","githubHtmlUrlToDownloadUrl","htmlUrl","replace","getComponentUrlsAndHashes","users","urlsAndHashes","map","user","join","searchResults","items","length","item","url","html_url","hash","sha","resolve","setTimeout","downloadComponentDataWithCache","blob","data","text","componentText","componentSpec","yaml","load","cacheAllComponents","console","debug","urlsAndHashesIterator","urlToHashDb","localForage","createInstance","name","storeName","hashToUrlDb","hashToContentDb","hashToComponentNameDb","urlProcessingVersionDb","badHashesDb","toLowerCase","getItem","badHashReason","downloadUrl","endsWith","cachedHash","error","urlVersion","Number","parseInt","setItem","message","implementation","getAllComponentsAsRefs","hashToComponentRef","Map","cachePromise","iterate","iterationNumber","set","spec","err","componentRef","get","componentRefs","forEach","push","searchComponentsByName","filter","ref","includes","augmentComponentSpec","nodes","includeSpecs","includePositions","getNodePositionAnnotation","node","JSON","stringify","x","__rf","position","y","width","height","nodeXPositionComparer","n1","n2","deltaX","deltaY","nodeYPositionComparer","inputNodes","type","outputNodes","taskNodes","isComponentTaskNode","inputPositionMap","id","inputOrderMap","index","inputOrderComparer","b","Infinity","outputPositionMap","outputOrderMap","outputOrderComparer","taskPositionMap","taskOrderMap","taskOrderComparer","pairA","pairB","inputs","inputSpec","has","Error","newAnnotations","annotations","NODE_LAYOUT_ANNOTATION_KEY","newInputSpec","Object","keys","outputs","outputSpec","newOutputSpec","graphSpec","graph","newTasks","fromEntries","entries","tasks","taskId","taskSpec","newTaskSpec","rebuildComponentSpec","description","metadata","rest","nodeTypes","task","ComponentTaskNode","GraphComponentSpecFlow","children","setComponentSpec","useState","reactFlowInstance","setReactFlowInstance","layoutAnnotation","decodedPosition","parse","setArguments","args","setTaskArguments","label","edges","flatMap","arguments","inputName","argument","taskOutput","outputName","source","sourceHandle","target","targetHandle","arrowHeadType","ArrowHeadType","ArrowClosed","graphInput","outputEdges","outputValues","elements","concat","replaceComponentSpec","newComponentSpec","replaceGraphSpec","newGraphSpec","taskArguments","setTaskArgument","oldTaskSpecArguments","newTaskSpecArguments","removeTaskArgument","setGraphOutputValue","outputValue","newGraphOutputValues","removeGraphOutputValue","addConnection","connection","targetTaskInputName","sourceTaskOutputName","taskOutputArgument","graphInputArgument","removeEdge","edge","removeNode","newInputs","removeComponentInput","newOutputs","removeComponentOutput","removeTask","log","makeNameUniqueByAddingIndex","existingNames","finalName","toString","onConnect","params","onDragOver","event","preventDefault","dataTransfer","dropEffect","onDrop","droppedData","getData","droppedDataObject","nodeType","nodeData","dragOffsetX","dragOffsetY","dragStartOffsetData","dragStartOffset","offsetX","offsetY","project","clientX","clientY","nodePosition","positionAnnotations","mergedAnnotations","taskSpecWithAnnotation","Set","getUniqueTaskName","getUniqueInputName","getUniqueOutputName","onEdgeUpdate","oldEdge","newConnection","onElementsRemove","elementsToRemove","element","isEdge","isNode","onLoad","_reactFlowInstance","ArgumentsEditor","closeEditor","currentArguments","setCurrentArguments","inputSpecs","onSubmit","e","style","display","borderSpacing","background","border","borderRadius","padding","value","placeholder","default","typeSpec","argumentIsRequiredButMissing","optional","typeSpecString","textAlign","whiteSpace","textOverflow","overflow","maxWidth","verticalAlign","title","required","pattern","onChange","onClick","disabled","inputHandlePosition","Position","Top","outputHandlePosition","Bottom","generateHandles","ioSpecs","handleType","idPrefix","inputsWithMissingArguments","handleComponents","numHandles","i","ioSpec","positionPercentString","String","left","top","ioTypeName","classNames","className","generateLabelStyle","labelClasses","labelStyle","isConnectable","maxLabelWidthPx","isArgumentsEditorOpen","setIsArgumentsEditorOpen","inputsWithInvalidArguments","inputHandles","generateInputHandles","outputHandles","onDoubleClick","memo","sanitizePipelineInfoName","pipelineContextName","typeSpecToVertexPrimitiveTypeEnum","typeSpecToVertexParameterSpec","taskSpecToVertexTaskSpecComponentSpecAndExecutorSpec","containerSpec","container","resolvedCommandLine","inputsConsumedAsValue","inputsConsumedAsPath","convertArg","arg","inputValue","inputPath","outputPath","if","cond","then","else","ifCond","ifThen","ifElse","condEvaluatesToTrue","isPresent","taskArgument","unresolvedArgs","command","resolveCommandLine","vertexExecutorSpec","image","inputMap","vertexComponentSpec","inputDefinitions","parameters","Array","from","values","artifacts","artifactType","schemaTitle","outputDefinitions","executorLabel","vertexTaskParameterArguments","runtimeValue","constantValue","stringValue","componentInputParameter","taskOutputParameter","producerTask","outputParameterKey","vertexTaskArtifactArguments","componentInputArtifact","taskOutputArtifact","outputArtifactKey","vertexTaskSpec","taskInfo","cachingOptions","enableCache","graphComponentSpecToVertexPipelineSpec","vertexComponentInputsSpec","vertexExecutors","vertexComponents","vertexTasks","vertexExecutorId","vertexComponentId","vertexTaskId","vertexPipelineSpec","pipelineInfo","sdkVersion","schemaVersion","deploymentSpec","executors","components","root","dag","generateVertexPipelineJobFromGraphComponent","gcsOutputDirectory","pipelineArguments","convertedPipelineArguments","key","pipelineSpec","pipelineJob","displayName","runtimeConfig","getNodePositionAnnotations","nodeOrderComparer","createGraphComponentSpecFromFlowElements","alert","outputSpecs","taskMap","reduce","accumulator","assign","graphOutputValues","sourceTaskId","sourceOutputName","targetTaskId","targetInputName","targetTask","graphComponent","onDragStart","setData","nativeEvent","effectAllowed","COMPONENT_LIBRARY","category","componentUrls","Sidebar","borderWidth","fontWeight","loadComponentFromUrl","TFX_PIPELINE_URL","XGBOOST_PIPELINE_URL","PYTORCH_PIPELINE_URL","process","NODE_ENV","DATA_PASSING_PIPELINE_URL","input","draggable","output","componentGroups","DraggableComponentRow","componentUrl","useEffect","ComponentGroupList","ComponentLibrary","paddingLeft","COMPONENT_ORGS","SearchPanel","props","setError","firstTime","setFirstTime","isLoaded","setIsLoaded","setQuery","setItems","results","componentElements","fetchData","GraphComponentExporter","useStoreState","store","dump","lineWidth","componentTextBlob","Blob","downloadLink","href","URL","createObjectURL","download","LOCAL_STORAGE_GCS_OUTPUT_DIRECTORY_KEY","LOCAL_STORAGE_PROJECT_ID_KEY","LOCAL_STORAGE_REGION_KEY","LOCAL_STORAGE_PROJECT_IDS_KEY","CLIENT_ID","API_KEY","VERTEX_AI_PIPELINES_REGIONS","authorizeGoogleCloudClient","scopes","immediate","apiKey","clientId","gapi","client","setApiKey","auth","authorize","client_id","scope","authResult","ensureGoogleCloudAuthorizesScopes","cloudresourcemanagerListProjects","request","path","result","aiplatformCreatePipelineJob","projetId","region","method","body","GoogleCloudSubmitter","window","localStorage","projects","setProjects","setProject","setRegion","setGcsOutputDirectory","pipelineJobWebUrl","setPipelineJobWebUrl","compilationError","setCompilationError","vertexPipelineJobJson","vertexPipelineJob","vertexPipelineJobUrl","readyToSubmit","pipelineJobName","pipelineJobId","split","slice","htmlFor","list","projectId","projectIds","projectInfo","rel","VertexAiExporter","pipelineName","vertexPipelineSpecText","vertexPipelineSpecTextBlob","vertexPipelineSpecTextBlobUrl","GraphComponentLink","downloadFileName","linkText","SAVED_COMPONENT_SPEC_KEY","ComponentSpecAutoSaver","warn","sessionStorage","saveComponentSpec","DnDFlow","restoredComponentSpec","loadedYaml","loadComponentSpec","deleteKeyCode","multiSelectionKeyCode","snapToGrid","snapGrid","gap","App","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","preloadComponentReferences","componentMap","taskComponentSpec","preloadChildComponentSpecs"],"mappings":"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","file":"static/js/main.cd9955d3.chunk.js","sourcesContent":["import yaml from \"js-yaml\";\r\nimport localForage from \"localforage\";\r\nimport { ComponentSpec, ComponentReference } from \"./componentSpec\";\r\n\r\n// const COMPONENT_FILE_NAME_SUFFIX = \"component.yaml\";\r\n// const COMPONENT_FILE_MAX_SIZE = 100000;\r\nconst SEARCH_CACHE_NAME = \"https://api.github.com/search\";\r\nconst BLOB_CACHE_NAME = \"raw.githubusercontent.com/.../component.yaml\";\r\n\r\n// IndexedDB: DB and table names\r\nconst DB_NAME = \"components\";\r\nconst HASH_TO_CONTENT_DB_TABLE_NAME = \"hash_to_data\";\r\nconst HASH_TO_COMPONENT_NAME_DB_TABLE_NAME = \"hash_to_component_name\";\r\nconst URL_TO_HASH_DB_TABLE_NAME = \"url_to_hash\";\r\nconst HASH_TO_URL_DB_TABLE_NAME = \"hash_to_url\";\r\nconst URL_PROCESSING_VERSION_TABLE_NAME = \"url_version\";\r\nconst CURRENT_URL_PROCESSING_VERSION = 1;\r\nconst BAD_HASHES_TABLE_NAME = \"bad_hashes\";\r\n\r\n\r\nexport const httpGetWithCache = async (\r\n  urlOrRequest: string | RequestInfo,\r\n  cacheName: string,\r\n  updateIfInCache: boolean = false\r\n): Promise<Response> => {\r\n  const cache = await caches.open(cacheName);\r\n  const response = await cache.match(urlOrRequest);\r\n  if (response !== undefined) {\r\n    if (updateIfInCache) {\r\n      cache.add(urlOrRequest);\r\n    }\r\n    return response;\r\n  }\r\n  await cache.add(urlOrRequest);\r\n  const response2 = await cache.match(urlOrRequest);\r\n  if (response2 === undefined) {\r\n    return Promise.reject(\"Added object to cache, but counld not find it\");\r\n  }\r\n  return response2;\r\n};\r\n\r\n\r\nexport const searchGitHubCodeWithCache = async (\r\n  query: string,\r\n  page = 1,\r\n  sort = \"indexed\",\r\n  order = \"desc\",\r\n): Promise<any> => {\r\n  // TODO: Paging\r\n  const encodedQuery = encodeURIComponent(query);\r\n  const encodedSort = encodeURIComponent(sort);\r\n  const encodedOrder = encodeURIComponent(order);\r\n  const searchUrl = `https://api.github.com/search/code?q=${encodedQuery}&sort=${encodedSort}&order=${encodedOrder}&per_page=100&page=${page}`;\r\n  const response = await httpGetWithCache(searchUrl, SEARCH_CACHE_NAME, true);\r\n  return response.json();\r\n};\r\n\r\n\r\nconst githubHtmlUrlToDownloadUrl = (htmlUrl: string): string => {\r\n  // https://github.com/               kubeflow/pipelines/blob/24bc9162a56c2fe3c50947d655ef280f71ba058f/components/gcp/dataflow/launch_flex_template/component.yaml\r\n  // https://raw.githubusercontent.com/kubeflow/pipelines     /24bc9162a56c2fe3c50947d655ef280f71ba058f/components/gcp/dataflow/launch_flex_template/component.yaml\r\n  return htmlUrl\r\n    .replace(\"https://github.com/\", \"https://raw.githubusercontent.com/\")\r\n    .replace(\"/blob/\", \"/\");\r\n};\r\n\r\n\r\ntype UrlAndHash = {\r\n  url: string;\r\n  hash: string;\r\n};\r\n\r\n\r\nexport async function * getComponentUrlsAndHashes(\r\n  users = [\"kubeflow\", \"Ark-kun\"]\r\n) {\r\n  let urlsAndHashes: UrlAndHash[] = [];\r\n  const query =\r\n    \"filename:component.yaml \" + users.map((user) => \"user:\" + user).join(\" \");\r\n  for (let page = 1; page < 100; page++) {\r\n    const searchResults = await searchGitHubCodeWithCache(query, page);\r\n    // \"total_count\": 512,\r\n    // \"incomplete_results\": false,\r\n    // \"items\": [\r\n    const items: any[] = searchResults.items;\r\n    if (items.length === 0) {\r\n      break;\r\n    }\r\n    for (let item of items) {\r\n      yield { url: githubHtmlUrlToDownloadUrl(item.html_url), hash: item.sha as string };\r\n    }\r\n    await new Promise( resolve => setTimeout(resolve, (60 * 1000 / 10) * (1 + 0.1)));\r\n  }\r\n  return urlsAndHashes;\r\n};\r\n\r\n\r\nexport const cacheComponentCandidateBlobs = async (\r\n  users = [\"kubeflow\", \"Ark-kun\"]\r\n): Promise<any[]> => {\r\n  let urlsAndHashes: UrlAndHash[] = [];\r\n  let urls = [];\r\n  for await (const urlAndHash of getComponentUrlsAndHashes(users)) {\r\n    urlsAndHashes.push(urlAndHash);\r\n    urls.push(urlAndHash.url);\r\n  }\r\n  const cache = await caches.open(BLOB_CACHE_NAME);\r\n  await cache.addAll(urls);\r\n  return urlsAndHashes;\r\n};\r\n\r\nexport const downloadComponentDataWithCache = async (url: string) => {\r\n  const response = await httpGetWithCache(url, BLOB_CACHE_NAME)\r\n  const data = await response.blob();\r\n  const componentText = await data.text();\r\n  const componentSpec = yaml.load(componentText) as ComponentSpec;\r\n  return componentSpec;\r\n}\r\n\r\nexport const cacheAllComponents = async (users = [\"kubeflow\", \"Ark-kun\"]) => {\r\n  console.debug(\"Starting cacheAllComponents\");\r\n  const urlsAndHashesIterator = getComponentUrlsAndHashes(users);\r\n\r\n  // const cache = await caches.open(BLOB_CACHE_NAME);\r\n  const urlToHashDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_TO_HASH_DB_TABLE_NAME,\r\n  });\r\n  const hashToUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_URL_DB_TABLE_NAME,\r\n  });\r\n  const hashToContentDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_CONTENT_DB_TABLE_NAME,\r\n  });\r\n  const hashToComponentNameDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_COMPONENT_NAME_DB_TABLE_NAME,\r\n  });\r\n  const urlProcessingVersionDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_PROCESSING_VERSION_TABLE_NAME,\r\n  });\r\n  const badHashesDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: BAD_HASHES_TABLE_NAME,\r\n  });\r\n  for await (const item of urlsAndHashesIterator) {\r\n    const hash = item.hash.toLowerCase();\r\n    const htmlUrl = item.url;\r\n    const badHashReason = await badHashesDb.getItem<string>(hash);\r\n    if (badHashReason !== null) {\r\n      console.debug(`Skipping url ${htmlUrl} with hash ${hash} due to error: \"${badHashReason}\"`);\r\n      continue;\r\n    }\r\n    try {\r\n      const downloadUrl: string = githubHtmlUrlToDownloadUrl(htmlUrl);\r\n      if (!downloadUrl.endsWith(\"component.yaml\")) {\r\n        console.debug(`Skipping url ${downloadUrl} since it does not end with \"component.yaml\"`);\r\n        continue;\r\n      }\r\n      // Sanity check\r\n      const cachedHash = await urlToHashDb.getItem<string>(downloadUrl);\r\n      if (cachedHash !== null && cachedHash !== hash) {\r\n        console.error(\r\n          `Component cache is broken. Stored hash for ${downloadUrl}: ${cachedHash} != ${hash}.`\r\n        );\r\n      }\r\n      // Check whether the processing is complete\r\n      const urlVersion = await urlProcessingVersionDb.getItem<string>(\r\n        downloadUrl\r\n      );\r\n\r\n      if (\r\n        cachedHash !== null && // Not sure we should check this, but it improves the sanity\r\n        urlVersion !== null &&\r\n        Number.parseInt(urlVersion) >= CURRENT_URL_PROCESSING_VERSION\r\n      ) {\r\n        continue;\r\n      }\r\n\r\n      console.debug(`Processing new component candidate: ${downloadUrl}.`);\r\n      const response = await httpGetWithCache(downloadUrl, BLOB_CACHE_NAME);\r\n      let componentSpec: ComponentSpec;\r\n      let componentText: string;\r\n      try {\r\n        const data = await response.blob();\r\n        componentText = await data.text();\r\n        componentSpec = yaml.load(componentText) as ComponentSpec;\r\n      } catch(err) {\r\n        badHashesDb.setItem(hash, err.name + \": \" + err.message);\r\n        continue;\r\n      }\r\n      if (componentSpec.implementation === undefined) {\r\n        badHashesDb.setItem(hash, 'Component lacks the \"impelmentation\" section.');\r\n        continue;\r\n      }\r\n\r\n      // Blobs are cumbersome (need await to get text) - store text instead\r\n      // await hashToContentDb.setItem(hash, data);\r\n      await hashToContentDb.setItem(hash, componentText);\r\n\r\n      // Only adding hash -> URL once\r\n      const urlForHash = await hashToUrlDb.getItem<string>(hash);\r\n      if (urlForHash === null) {\r\n        await hashToUrlDb.setItem(hash, downloadUrl);\r\n      }\r\n\r\n      // Only storing names when they exist\r\n      if (componentSpec.name) {\r\n        await hashToComponentNameDb.setItem(hash, componentSpec.name);\r\n      }\r\n\r\n      await urlToHashDb.setItem(downloadUrl, hash);\r\n\r\n      // Marking the processing as completed\r\n      await urlProcessingVersionDb.setItem(\r\n        downloadUrl,\r\n        CURRENT_URL_PROCESSING_VERSION\r\n      );\r\n    } catch (err) {\r\n      console.error(\r\n        `Error when processing component candidate ${htmlUrl} Error: ${err}.`\r\n      );\r\n    }\r\n  }\r\n  console.debug(\"Finished cacheAllComponents\");\r\n};\r\n\r\n\r\nexport const getAllComponentsAsRefs = async (users = [\"kubeflow\", \"Ark-kun\"]) => {\r\n  // Perhaps use urlProcessingVersionDb as source of truth. Hmm. It is URL-based\r\n  const hashToUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_URL_DB_TABLE_NAME,\r\n  });\r\n  const hashToContentDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_CONTENT_DB_TABLE_NAME,\r\n  });\r\n  let hashToComponentRef = new Map<string, ComponentReference>();\r\n\r\n  const cachePromise = cacheAllComponents(users);\r\n  if ((await hashToContentDb.length()) === 0) {\r\n    await cachePromise;\r\n  }\r\n\r\n  // !!! Iterating using hashToContentDb.iterate<string, void> causes all values to be `[object Blob]`\r\n  //await hashToContentDb.iterate<Blob, void>(\r\n  await hashToContentDb.iterate<string, void>(\r\n    // !!! async processor causes only 1 item to be processed since it returns Promise instead of undefined.\r\n    //async (componentData, hash, iterationNumber) => {\r\n    (componentText, hash, iterationNumber) => {\r\n      //const componentText = await componentData.text();\r\n      try {\r\n        const componentSpec = yaml.load(componentText) as ComponentSpec;\r\n        hashToComponentRef.set(hash, {\r\n          spec: componentSpec,\r\n        });\r\n      } catch (err) {\r\n        console.error(\r\n          `Error when parsing cached component. Hash: ${hash}. Error: ${err}. Component text: ${componentText}`\r\n        );\r\n      }\r\n    }\r\n  );\r\n  await hashToUrlDb.iterate<string, void>((url, hash, iterationNumber) => {\r\n    let componentRef = hashToComponentRef.get(hash);\r\n    if (componentRef === undefined) {\r\n      console.error(\r\n        `Component db corrupted: Component with url ${url} and hash ${hash} has no content in the DB.`\r\n      );\r\n    } else {\r\n      componentRef.url = url;\r\n    }\r\n  });\r\n  let componentRefs: ComponentReference[] = [];\r\n  // TODO: Improve the iteration onve TypeScript propertly supports it\r\n  hashToComponentRef.forEach((componentRef, hash) => {\r\n    if (componentRef.url === undefined) {\r\n      console.error(\r\n        `Component db corrupted: Component with hash ${hash} has content, but no URL in the DB.`\r\n      );\r\n    } else {\r\n      componentRefs.push(componentRef);\r\n    }\r\n  });\r\n  return componentRefs;\r\n};\r\n\r\n\r\nexport const searchComponentsByName = async (name: string, users = [\"kubeflow\", \"Ark-kun\"]) => {\r\n  const componentRefs = await getAllComponentsAsRefs(users);\r\n  return componentRefs.filter((ref) => ref.spec?.name?.toLowerCase().includes(name.toLowerCase()) ?? false);\r\n};\r\n","import React, { DragEvent, useState } from \"react\";\r\nimport ReactFlow, {\r\n  ArrowHeadType,\r\n  Connection,\r\n  Edge,\r\n  ElementId,\r\n  Elements,\r\n  isEdge,\r\n  isNode,\r\n  Node,\r\n  OnLoadParams,\r\n  ReactFlowProps,\r\n  XYPosition,\r\n} from \"react-flow-renderer\";\r\n\r\nimport {\r\n  ArgumentType,\r\n  ComponentSpec,\r\n  GraphInputArgument,\r\n  GraphSpec,\r\n  InputSpec,\r\n  OutputSpec,\r\n  TaskOutputArgument,\r\n  TaskSpec,\r\n} from \"../componentSpec\";\r\nimport ComponentTaskNode, { ComponentTaskNodeProps, isComponentTaskNode } from \"./ComponentTaskNode\";\r\n\r\n\r\nconst NODE_LAYOUT_ANNOTATION_KEY = \"editor.position\";\r\n\r\nexport const augmentComponentSpec = (\r\n  componentSpec: ComponentSpec,\r\n  nodes: Node[],\r\n  includeSpecs = false,\r\n  includePositions = true\r\n) => {\r\n  componentSpec = { ...componentSpec };\r\n\r\n  const getNodePositionAnnotation = (node: Node) =>\r\n    JSON.stringify({\r\n      // node.position cannot be used since set at 1st drop and never updated\r\n      x: node.__rf.position.x,\r\n      y: node.__rf.position.y,\r\n      width: node.__rf.width,\r\n      height: node.__rf.height,\r\n    });\r\n\r\n  const nodeXPositionComparer = (n1: Node, n2: Node) => {\r\n    const deltaX = n1.__rf.position.x - n2.__rf.position.x;\r\n    const deltaY = n1.__rf.position.y - n2.__rf.position.y;\r\n    return deltaX !== 0 ? deltaX : deltaY;\r\n  };\r\n  const nodeYPositionComparer = (n1: Node, n2: Node) => {\r\n    const deltaX = n1.__rf.position.x - n2.__rf.position.x;\r\n    const deltaY = n1.__rf.position.y - n2.__rf.position.y;\r\n    return deltaY !== 0 ? deltaY : deltaX;\r\n  };\r\n\r\n  // Input and output nodes\r\n  // Sorting them by horisontal position to make reordering inputs and outputs easy.\r\n  const inputNodes = nodes\r\n    .filter((node) => node.type === \"input\")\r\n    .sort(nodeXPositionComparer);\r\n  const outputNodes = nodes\r\n    .filter((node) => node.type === \"output\")\r\n    .sort(nodeXPositionComparer);\r\n  const taskNodes = nodes\r\n    .filter(isComponentTaskNode)\r\n    .sort(nodeYPositionComparer);\r\n\r\n  // TODO: Remove \"input_\" prefixes\r\n  const inputPositionMap = new Map<string, string>(\r\n    inputNodes.map((node) => [node.id, getNodePositionAnnotation(node)])\r\n  );\r\n  const inputOrderMap = new Map<string, number>(\r\n    inputNodes.map((node, index) => [node.id, index])\r\n  );\r\n  const inputOrderComparer = (a: InputSpec, b: InputSpec) =>\r\n    (inputOrderMap.get(a.name) ?? Infinity) -\r\n    (inputOrderMap.get(b.name) ?? Infinity);\r\n  // TODO: Remove \"output_\" prefixes\r\n  const outputPositionMap = new Map<string, string>(\r\n    outputNodes.map((node) => [node.id, getNodePositionAnnotation(node)])\r\n  );\r\n  const outputOrderMap = new Map<string, number>(\r\n    outputNodes.map((node, index) => [node.id, index])\r\n  );\r\n  const outputOrderComparer = (a: OutputSpec, b: OutputSpec) =>\r\n    (outputOrderMap.get(a.name) ?? Infinity) -\r\n    (outputOrderMap.get(b.name) ?? Infinity);\r\n  // TODO: Remove \"task_\" prefixes\r\n  const taskPositionMap = new Map<string, string>(\r\n    taskNodes.map((node) => [node.id, getNodePositionAnnotation(node)])\r\n  );\r\n  const taskOrderMap = new Map<string, number>(\r\n    taskNodes.map((node, index) => [node.id, index])\r\n  );\r\n  const taskOrderComparer = (\r\n    pairA: [string, TaskSpec],\r\n    pairB: [string, TaskSpec]\r\n  ) =>\r\n    (taskOrderMap.get(pairA[0]) ?? Infinity) -\r\n    (taskOrderMap.get(pairB[0]) ?? Infinity);\r\n\r\n  componentSpec.inputs = componentSpec.inputs\r\n    ?.map((inputSpec) => {\r\n      if (!inputPositionMap.has(inputSpec.name) || !inputOrderMap.has(inputSpec.name)) {\r\n        throw Error(`The nodes array does not have input node ${inputSpec.name}`);\r\n      }\r\n      let newAnnotations = { ...inputSpec.annotations };\r\n      if (includePositions) {\r\n        newAnnotations[NODE_LAYOUT_ANNOTATION_KEY] = inputPositionMap.get(\r\n          inputSpec.name\r\n        );\r\n      } else {\r\n        delete newAnnotations[NODE_LAYOUT_ANNOTATION_KEY];\r\n      }\r\n      let newInputSpec: InputSpec = {\r\n        ...inputSpec,\r\n        annotations: newAnnotations,\r\n      };\r\n      if (Object.keys(newAnnotations).length === 0) {\r\n        delete newInputSpec.annotations;\r\n      }\r\n      return newInputSpec;\r\n    })\r\n    .sort(inputOrderComparer);\r\n\r\n  componentSpec.outputs = componentSpec.outputs\r\n    ?.map((outputSpec) => {\r\n      if (!outputPositionMap.has(outputSpec.name) || !outputOrderMap.has(outputSpec.name)) {\r\n        throw Error(`The nodes array does not have output node ${outputSpec.name}`);\r\n      }\r\n      let newAnnotations = { ...outputSpec.annotations };\r\n      if (includePositions) {\r\n        newAnnotations[NODE_LAYOUT_ANNOTATION_KEY] = outputPositionMap.get(\r\n          outputSpec.name\r\n        );\r\n      } else {\r\n        delete newAnnotations[NODE_LAYOUT_ANNOTATION_KEY];\r\n      }\r\n      let newOutputSpec: OutputSpec = {\r\n        ...outputSpec,\r\n        annotations: newAnnotations,\r\n      };\r\n      if (\r\n        newAnnotations === undefined ||\r\n        Object.keys(newAnnotations).length === 0\r\n      ) {\r\n        delete newOutputSpec.annotations;\r\n      }\r\n      return newOutputSpec;\r\n    })\r\n    .sort(outputOrderComparer);\r\n\r\n  if (!(\"graph\" in componentSpec.implementation)) {\r\n    return componentSpec;\r\n  }\r\n\r\n  let graphSpec: GraphSpec = { ...componentSpec.implementation.graph };\r\n  const newTasks = Object.fromEntries(\r\n    Object.entries(graphSpec.tasks || {})\r\n      .map(([taskId, taskSpec]) => {\r\n        if (!taskPositionMap.has(taskId) || !taskOrderMap.has(taskId)) {\r\n          throw Error(`The nodes array does not have task node ${taskId}`);\r\n        }\r\n        let newAnnotations = { ...taskSpec.annotations };\r\n        if (includePositions) {\r\n          newAnnotations[NODE_LAYOUT_ANNOTATION_KEY] =\r\n            taskPositionMap.get(taskId);\r\n        } else {\r\n          delete newAnnotations[NODE_LAYOUT_ANNOTATION_KEY];\r\n        }\r\n        let newTaskSpec: TaskSpec = {\r\n          ...taskSpec,\r\n          annotations: newAnnotations,\r\n        };\r\n        if (\r\n          newAnnotations === undefined ||\r\n          Object.keys(newAnnotations).length === 0\r\n        ) {\r\n          delete newTaskSpec.annotations;\r\n        }\r\n        // TODO: Sort the arguments based on the ordering of the component inputs.\r\n        if (\r\n          !includeSpecs &&\r\n          newTaskSpec.componentRef.spec !== undefined &&\r\n          newTaskSpec.componentRef.url !== undefined\r\n        ) {\r\n          newTaskSpec.componentRef = { ...newTaskSpec.componentRef };\r\n          delete newTaskSpec.componentRef.spec;\r\n        }\r\n        return [taskId, newTaskSpec] as [string, TaskSpec];\r\n      })\r\n      .sort(taskOrderComparer)\r\n  );\r\n  if (newTasks !== undefined) {\r\n    graphSpec.tasks = newTasks;\r\n  }\r\n  componentSpec = {\r\n    ...componentSpec,\r\n    implementation: { ...componentSpec.implementation, graph: graphSpec },\r\n  };\r\n\r\n  // Reordering the attributes and removing the undefined ones\r\n  const rebuildComponentSpec = ({\r\n    name,\r\n    description,\r\n    metadata,\r\n    inputs,\r\n    outputs,\r\n    implementation,\r\n    ...rest\r\n  }: ComponentSpec): ComponentSpec => ({\r\n    ...(name && { name: name }),\r\n    ...(description && { description: description }),\r\n    ...(metadata && { metadata: metadata }),\r\n    ...(inputs && { inputs: inputs }),\r\n    ...(outputs && { outputs: outputs }),\r\n    implementation: implementation,\r\n    ...rest,\r\n  });\r\n  componentSpec = rebuildComponentSpec(componentSpec);\r\n\r\n  return componentSpec;\r\n};\r\n\r\nexport interface GraphComponentSpecFlowProps\r\n  extends Omit<ReactFlowProps, \"elements\"> {\r\n  componentSpec: ComponentSpec,\r\n  setComponentSpec: (componentSpec: ComponentSpec) => void,\r\n}\r\n\r\nconst nodeTypes = {\r\n  task: ComponentTaskNode,\r\n};\r\n\r\nconst GraphComponentSpecFlow = ({\r\n  children,\r\n  componentSpec = { implementation: { graph: { tasks: {} } } },\r\n  setComponentSpec,\r\n  ...rest\r\n}: GraphComponentSpecFlowProps) => {\r\n  const [reactFlowInstance, setReactFlowInstance] = useState<OnLoadParams>();\r\n\r\n  if (! ('graph' in componentSpec.implementation)) {\r\n    // Only graph components are supported\r\n    return <></>;\r\n  }\r\n  let graphSpec = componentSpec.implementation.graph;\r\n\r\n  const nodes = Object.entries(graphSpec.tasks).map<Node<ComponentTaskNodeProps>>(\r\n    ([taskId, taskSpec]) => {\r\n      let position: XYPosition = { x: 0, y: 0 };\r\n      if (taskSpec.annotations !== undefined) {\r\n        try {\r\n          const layoutAnnotation = taskSpec.annotations[\r\n            \"editor.position\"\r\n          ] as string;\r\n          const decodedPosition = JSON.parse(layoutAnnotation);\r\n          position = { x: decodedPosition[\"x\"], y: decodedPosition[\"y\"] };\r\n        } catch (err) {}\r\n      }\r\n\r\n      return {\r\n        id: taskId,\r\n        data: {\r\n          taskSpec: taskSpec,\r\n          taskId: taskId,\r\n          setArguments: (args) => setTaskArguments(taskId, args),\r\n        },\r\n        position: position,\r\n        type: \"task\",\r\n      };\r\n    }\r\n  );\r\n\r\n  const inputNodes = (componentSpec.inputs ?? []).map<Node>(\r\n    (inputSpec) => {\r\n      let position: XYPosition = { x: 0, y: 0 };\r\n      if (inputSpec.annotations !== undefined) {\r\n        try {\r\n          const layoutAnnotation = inputSpec.annotations[\r\n            \"editor.position\"\r\n          ] as string;\r\n          const decodedPosition = JSON.parse(layoutAnnotation);\r\n          position = { x: decodedPosition[\"x\"], y: decodedPosition[\"y\"] };\r\n        } catch (err) {}\r\n      }\r\n      return {\r\n        id: inputSpec.name,\r\n        data: { label: inputSpec.name },\r\n        position: position,\r\n        type: \"input\",\r\n      };\r\n    }\r\n  );\r\n\r\n  const outputNodes = (componentSpec.outputs ?? []).map<Node>(\r\n    (outputSpec) => {\r\n      let position: XYPosition = { x: 0, y: 0 };\r\n      if (outputSpec.annotations !== undefined) {\r\n        try {\r\n          const layoutAnnotation = outputSpec.annotations[\r\n            \"editor.position\"\r\n          ] as string;\r\n          const decodedPosition = JSON.parse(layoutAnnotation);\r\n          position = { x: decodedPosition[\"x\"], y: decodedPosition[\"y\"] };\r\n        } catch (err) {}\r\n      }\r\n      return {\r\n        id: outputSpec.name,\r\n        data: { label: outputSpec.name },\r\n        position: position,\r\n        type: \"output\",\r\n      };\r\n    }\r\n  );\r\n\r\n  const edges: Edge[] = Object.entries(graphSpec.tasks).flatMap(\r\n    ([taskId, taskSpec]) => {\r\n      return Object.entries(taskSpec.arguments ?? {}).flatMap(\r\n        ([inputName, argument]) => {\r\n          if (typeof argument === \"string\") {\r\n            return [];\r\n          }\r\n          if (\"taskOutput\" in argument) {\r\n            const taskOutput = argument.taskOutput;\r\n            const edge: Edge = {\r\n              id: `${taskOutput.taskId}_${taskOutput.outputName}-${taskId}_${inputName}`,\r\n              source: taskOutput.taskId,\r\n              sourceHandle: `output_${taskOutput.outputName}`,\r\n              target: taskId,\r\n              targetHandle: `input_${inputName}`,\r\n              arrowHeadType: ArrowHeadType.ArrowClosed,\r\n            };\r\n            return [edge];\r\n          } else if (\"graphInput\" in argument) {\r\n            const graphInput = argument.graphInput;\r\n            const edge: Edge = {\r\n              id: `Input_${graphInput.inputName}-${taskId}_${inputName}`,\r\n              source: graphInput.inputName,\r\n              //sourceHandle: undefined,\r\n              //sourceHandle: \"Input\",\r\n              sourceHandle: null,\r\n              target: taskId,\r\n              targetHandle: `input_${inputName}`,\r\n              arrowHeadType: ArrowHeadType.ArrowClosed,\r\n            };\r\n            return [edge];\r\n          } else {\r\n            console.error(\"Impossible task input argument kind: \", argument);\r\n            return [];\r\n          }\r\n        }\r\n      );\r\n    }\r\n  );\r\n\r\n  const outputEdges: Edge[] = Object.entries(graphSpec.outputValues ?? {}).map(\r\n    ([outputName, argument]) => {\r\n      const taskOutput = argument.taskOutput;\r\n      const edge: Edge = {\r\n        id: `${taskOutput.taskId}_${taskOutput.outputName}-Output_${outputName}`,\r\n        source: taskOutput.taskId,\r\n        sourceHandle: `output_${taskOutput.outputName}`,\r\n        target: outputName,\r\n        //targetHandle: undefined,\r\n        //targetHandle: \"Output\",\r\n        targetHandle: null,\r\n        arrowHeadType: ArrowHeadType.ArrowClosed,\r\n      };\r\n      return edge;\r\n    }\r\n  );\r\n\r\n  const elements = (nodes as Elements).concat(inputNodes).concat(outputNodes).concat(edges).concat(outputEdges);\r\n  \r\n  const replaceComponentSpec = (newComponentSpec: ComponentSpec) => {\r\n    componentSpec = newComponentSpec;\r\n    setComponentSpec(newComponentSpec);\r\n  };\r\n\r\n  const replaceGraphSpec = (newGraphSpec: GraphSpec) => {\r\n    graphSpec = newGraphSpec;\r\n    replaceComponentSpec({ ...componentSpec, implementation: { graph: graphSpec } });\r\n  };\r\n\r\n  const setTaskArguments = (\r\n    taskId: string,\r\n    taskArguments?: Record<string, ArgumentType>,\r\n  ) => {\r\n    let newGraphSpec: GraphSpec = {\r\n      ...graphSpec,\r\n      tasks: { ...graphSpec.tasks },\r\n    };\r\n    newGraphSpec.tasks[taskId] = {\r\n      ...graphSpec.tasks[taskId],\r\n      arguments: taskArguments,\r\n    };\r\n    replaceGraphSpec(newGraphSpec);\r\n  };\r\n\r\n  const setTaskArgument = (\r\n    taskId: string,\r\n    inputName: string,\r\n    argument?: ArgumentType\r\n  ) => {\r\n    const oldTaskSpec = graphSpec.tasks[taskId];\r\n    const oldTaskSpecArguments = oldTaskSpec.arguments;\r\n    let newTaskSpecArguments: Record<string, ArgumentType> = {\r\n      ...oldTaskSpecArguments,\r\n    };\r\n    if (argument === undefined) {\r\n      delete newTaskSpecArguments[inputName];\r\n    } else {\r\n      newTaskSpecArguments[inputName] = argument;\r\n    }\r\n    setTaskArguments(taskId, newTaskSpecArguments);\r\n  };\r\n\r\n  const removeTaskArgument = (taskId: string, inputName: string) =>\r\n    setTaskArgument(taskId, inputName, undefined);\r\n\r\n  const setGraphOutputValue = (\r\n    outputName: string,\r\n    outputValue?: TaskOutputArgument\r\n  ) => {\r\n    let newGraphOutputValues = { ...graphSpec.outputValues };\r\n    if (outputValue === undefined) {\r\n      delete newGraphOutputValues[outputName];\r\n    } else {\r\n      newGraphOutputValues[outputName] = outputValue;\r\n    }\r\n    graphSpec = { ...graphSpec, outputValues: newGraphOutputValues };\r\n    replaceGraphSpec(graphSpec);\r\n  };\r\n\r\n  const removeGraphOutputValue = (outputName: string) =>\r\n    setGraphOutputValue(outputName);\r\n\r\n  const addConnection = (connection: Connection | Edge) => {\r\n    if (connection.source === null || connection.target === null) {\r\n      console.error(\r\n        \"addConnection called with missing source or target: \",\r\n        connection\r\n      );\r\n      return;\r\n    }\r\n\r\n    const targetTaskInputName = connection.targetHandle?.replace(/^input_/, \"\");\r\n    const sourceTaskOutputName = connection.sourceHandle?.replace(/^output_/, \"\");\r\n\r\n    if (sourceTaskOutputName !== undefined) {\r\n      // Source is task output\r\n      const taskOutputArgument: TaskOutputArgument = {\r\n        taskOutput: {\r\n          taskId: connection.source,\r\n          outputName: sourceTaskOutputName,\r\n        },\r\n      };\r\n\r\n      if (targetTaskInputName !== undefined) {\r\n        // Target is task input\r\n        setTaskArgument(\r\n          connection.target,\r\n          targetTaskInputName,\r\n          taskOutputArgument\r\n        );\r\n      } else {\r\n        // Target is graph output\r\n        setGraphOutputValue(connection.target, taskOutputArgument);\r\n        // TODO: Perhaps propagate type information\r\n      }\r\n    } else {\r\n      // Source is graph input\r\n      const graphInputName = connection.source;\r\n      const graphInputArgument: GraphInputArgument = {\r\n        graphInput: {\r\n          inputName: graphInputName,\r\n        },\r\n      };\r\n      if (targetTaskInputName !== undefined) {\r\n        // Target is task input\r\n        setTaskArgument(\r\n          connection.target,\r\n          targetTaskInputName,\r\n          graphInputArgument\r\n        );\r\n        // TODO: Perhaps propagate type information\r\n      } else {\r\n        // Target is graph output\r\n        console.error(\r\n          \"addConnection: Cannot directly connect graph input to graph output: \",\r\n          connection\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const onConnect = (params: Connection | Edge) => {\r\n    addConnection(params);\r\n  };\r\n\r\n  const removeEdge = (edge: Edge) => {\r\n    const inputName = edge.targetHandle?.replace(/^input_/, \"\");\r\n\r\n    if (inputName !== undefined) {\r\n      removeTaskArgument(edge.target, inputName);\r\n    } else {\r\n      removeGraphOutputValue(edge.target);\r\n    }\r\n  };\r\n\r\n  const removeComponentInput = (inputName: string) => {\r\n    // Removing the outcoming edges\r\n    for (const [taskId, taskSpec] of Object.entries(graphSpec.tasks)) {\r\n      for (const [inputName, argument] of Object.entries(\r\n        taskSpec.arguments ?? {}\r\n      )) {\r\n        if (typeof argument !== \"string\" && \"graphInput\" in argument) {\r\n          if (argument.graphInput.inputName === inputName) {\r\n            removeTaskArgument(taskId, inputName);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // Not checking the sources of graph outputs, since they cannot be directly connected to the graph inputs\r\n\r\n    // Removing the input itself\r\n    const newInputs = (componentSpec.inputs ?? []).filter(\r\n      (inputSpec) => inputSpec.name !== inputName\r\n    );\r\n    componentSpec = { ...componentSpec, inputs: newInputs };\r\n    replaceComponentSpec(componentSpec);\r\n  };\r\n\r\n  const removeComponentOutput = (outputName: string) => {\r\n    removeGraphOutputValue(outputName);\r\n    // Removing the output itself\r\n    const newOutputs = (componentSpec.outputs ?? []).filter(\r\n      (outputSpec) => outputSpec.name !== outputName\r\n    );\r\n    componentSpec = { ...componentSpec, outputs: newOutputs };\r\n    replaceComponentSpec(componentSpec);\r\n  };\r\n\r\n  const removeTask = (taskId: string) => {\r\n    // Removing the outcoming edges\r\n    for (const [taskId, taskSpec] of Object.entries(graphSpec.tasks)) {\r\n      for (const [inputName, argument] of Object.entries(\r\n        taskSpec.arguments ?? {}\r\n      )) {\r\n        if (typeof argument !== \"string\" && \"taskOutput\" in argument) {\r\n          if (argument.taskOutput.taskId === taskId) {\r\n            removeTaskArgument(taskId, inputName);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Removing outcoming edges that go to graph outputs.\r\n    // ? Should we delete the outputs themselves\r\n    const newGraphOutputValues = Object.fromEntries(\r\n      Object.entries(graphSpec.outputValues ?? {}).filter(\r\n        ([_, argument]) => argument.taskOutput.taskId !== taskId\r\n      )\r\n    );\r\n    graphSpec = { ...graphSpec, outputValues: newGraphOutputValues };\r\n\r\n    // Removing the task\r\n    let newGraphSpec: GraphSpec = {\r\n      ...graphSpec,\r\n      tasks: { ...graphSpec.tasks },\r\n    };\r\n    delete newGraphSpec.tasks[taskId];\r\n    replaceGraphSpec(newGraphSpec);\r\n  };\r\n\r\n  const removeNode = (node: Node) => {\r\n    // TODO: Use global constants for node types\r\n    if (node.type === \"input\") {\r\n      const inputName = node.id;\r\n      removeComponentInput(inputName);\r\n    } else if (node.type === \"output\") {\r\n      const outputName = node.id;\r\n      removeComponentOutput(outputName);\r\n    } else if (node.type === \"task\") {\r\n      const taskId = node.id;\r\n      removeTask(taskId);\r\n    } else {\r\n      console.log(\"removeNode: Unexpected note type: \", node);\r\n    }\r\n  };\r\n\r\n  const onElementsRemove = (elementsToRemove: Elements) => {\r\n    for (const element of elementsToRemove) {\r\n      if (isEdge(element)) {\r\n        removeEdge(element);\r\n      }\r\n    }\r\n    for (const element of elementsToRemove) {\r\n      if (isNode(element)) {\r\n        removeNode(element);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onEdgeUpdate = (oldEdge: Edge, newConnection: Connection) => {\r\n    removeEdge(oldEdge);\r\n    addConnection(newConnection);\r\n  };\r\n\r\n  const onLoad = (_reactFlowInstance: OnLoadParams) =>\r\n    setReactFlowInstance(_reactFlowInstance);\r\n\r\n  const onDragOver = (event: DragEvent) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = \"move\";\r\n  };\r\n\r\n  const makeNameUniqueByAddingIndex = (name: string, existingNames: Set<string>): ElementId => {\r\n    let finalName = name;\r\n    let index = 1;\r\n    while (existingNames.has(finalName)) {\r\n      index++;\r\n      finalName = name + \" \" + index.toString();\r\n    }\r\n    return finalName;\r\n  };\r\n\r\n  const getUniqueInputName = (name: string = \"Input\") => {\r\n    return makeNameUniqueByAddingIndex(\r\n      name,\r\n      new Set(componentSpec.inputs?.map((inputSpec) => inputSpec.name))\r\n    );\r\n  };\r\n\r\n  const getUniqueOutputName = (name: string = \"Output\") => {\r\n    return makeNameUniqueByAddingIndex(\r\n      name,\r\n      new Set(componentSpec.outputs?.map((outputSpec) => outputSpec.name))\r\n    );\r\n  };\r\n\r\n  const getUniqueTaskName = (name: string = \"Task\") => {\r\n    return makeNameUniqueByAddingIndex(\r\n      name,\r\n      new Set(Object.keys(graphSpec.tasks))\r\n    );\r\n  };\r\n\r\n  const onDrop = (event: DragEvent) => {\r\n    event.preventDefault();\r\n\r\n    if (reactFlowInstance) {\r\n      const droppedData = event.dataTransfer.getData(\"application/reactflow\");\r\n      if (droppedData === \"\") {\r\n        return;\r\n      }\r\n      const droppedDataObject = JSON.parse(droppedData);\r\n      const nodeType = Object.keys(droppedDataObject)[0];\r\n      const nodeData = droppedDataObject[nodeType];\r\n      \r\n      // Correcting the position using the drag point location information\r\n      let dragOffsetX = 0;\r\n      let dragOffsetY = 0;\r\n      const dragStartOffsetData = event.dataTransfer.getData(\"DragStart.offset\");\r\n      if (dragStartOffsetData !== \"\") {\r\n        const dragStartOffset = JSON.parse(dragStartOffsetData);\r\n        // Hack to work around Chrome's draggable anchor bug. TODO: Remove once Chrome is fixed\r\n        dragOffsetX = dragStartOffset.offsetX * 0.68 ?? 0;\r\n        dragOffsetY = dragStartOffset.offsetY * 0.64 ?? 0;\r\n      }\r\n\r\n      // Node position. Offsets should be included in projection, so that they snap to the grid.\r\n      // Otherwise the dropped nodes will be out of phase with the rest of the nodes even when snapping.\r\n      let position = reactFlowInstance.project({\r\n        x: event.clientX - dragOffsetX,\r\n        y: event.clientY - dragOffsetY,\r\n      });\r\n\r\n      const nodePosition = { x: position.x, y: position.y };\r\n      const positionAnnotations = {\r\n        \"editor.position\": JSON.stringify(nodePosition),\r\n      }\r\n      if (nodeType === \"task\") {\r\n        const taskSpec = nodeData as TaskSpec;\r\n        const mergedAnnotations = {\r\n          ...taskSpec.annotations,\r\n          ...positionAnnotations,\r\n        };\r\n        taskSpec.annotations = mergedAnnotations;\r\n        const taskSpecWithAnnotation: TaskSpec = {\r\n          ...taskSpec,\r\n          annotations: mergedAnnotations,\r\n        };\r\n        const taskId = getUniqueTaskName(taskSpec.componentRef.spec?.name ?? \"Task\");\r\n        graphSpec = { ...graphSpec, tasks: { ...graphSpec.tasks } };\r\n        graphSpec.tasks[taskId] = taskSpecWithAnnotation;\r\n        replaceGraphSpec(graphSpec);\r\n      } else if (nodeType === \"input\") {\r\n        const inputId = getUniqueInputName();\r\n        const inputSpec: InputSpec = {\r\n          name: inputId,\r\n          annotations: positionAnnotations,\r\n        };\r\n        const inputs = (componentSpec.inputs ?? []).concat([inputSpec]);\r\n        componentSpec = { ...componentSpec, inputs: inputs };\r\n        replaceComponentSpec(componentSpec);\r\n      } else if (nodeType === \"output\") {\r\n        const outputId = getUniqueOutputName();\r\n        const outputSpec: OutputSpec = {\r\n          name: outputId,\r\n          annotations: positionAnnotations,\r\n        };\r\n        const outputs = (componentSpec.outputs ?? []).concat([outputSpec]);\r\n        componentSpec = { ...componentSpec, outputs: outputs };\r\n        replaceComponentSpec(componentSpec);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ReactFlow\r\n      {...rest}\r\n      elements={elements}\r\n      nodeTypes={nodeTypes}\r\n      onConnect={onConnect}\r\n      onDragOver={onDragOver}\r\n      onDrop={onDrop}\r\n      onEdgeUpdate={onEdgeUpdate}\r\n      onElementsRemove={onElementsRemove}\r\n      onLoad={onLoad}\r\n    >\r\n      {children}\r\n    </ReactFlow>\r\n  );\r\n};\r\n\r\nexport default GraphComponentSpecFlow;\r\n","import { useState } from \"react\";\r\nimport { ArgumentType, TaskSpec, TypeSpecType } from \"../componentSpec\";\r\n\r\ninterface ArgumentsEditorProps {\r\n  taskSpec: TaskSpec;\r\n  closeEditor?: () => void;\r\n  setArguments?: (args: Record<string, ArgumentType>) => void;\r\n}\r\n\r\nconst getPatternForTypeSpec = (typeSpec?: TypeSpecType) => {\r\n  // TODO: Implement\r\n  return undefined;\r\n};\r\n\r\nconst typeSpecToString = (typeSpec?: TypeSpecType): string => {\r\n  if (typeSpec === undefined) {\r\n    return \"Any\";\r\n  }\r\n  if (typeof typeSpec === \"string\") {\r\n    return typeSpec\r\n  }\r\n  return JSON.stringify(typeSpec);\r\n};\r\n\r\nconst ArgumentsEditor = ({\r\n  taskSpec,\r\n  closeEditor,\r\n  setArguments,\r\n}: ArgumentsEditorProps) => {\r\n  const [currentArguments, setCurrentArguments] = useState<\r\n    Record<string, ArgumentType>\r\n  >({ ...taskSpec.arguments });\r\n\r\n  const componentSpec = taskSpec.componentRef.spec;\r\n  if (componentSpec === undefined) {\r\n    console.error(\r\n      \"ArgumentsEditor called with missing taskSpec.componentRef.spec\",\r\n      taskSpec\r\n    );\r\n    return <></>;\r\n  }\r\n\r\n  const inputSpecs = componentSpec.inputs ?? [];\r\n\r\n  return (\r\n    <form\r\n      onSubmit={async (e) => {\r\n        e.preventDefault();\r\n      }}\r\n      // Does not work\r\n      // draggable={false}\r\n      style={{\r\n        position: \"fixed\",\r\n        display: \"table\",\r\n        borderSpacing: \"5px\",\r\n        background: \"white\",\r\n        border: \"1px solid black\",\r\n        borderRadius: \"4px\",\r\n        padding: \"15px\",\r\n        // Does not work\r\n        // zIndex: 11,\r\n      }}\r\n    >\r\n      <legend>Input arguments for {componentSpec.name}</legend>\r\n      <div>\r\n        {inputSpecs.map((inputSpec) => {\r\n          const inputName = inputSpec.name;\r\n          let value: string | undefined = undefined;\r\n          let placeholder: string | undefined = undefined;\r\n          const argument = currentArguments[inputName];\r\n          if (argument === undefined) {\r\n            value = inputSpec.default;\r\n          } else {\r\n            if (typeof argument === \"string\") {\r\n              value = argument;\r\n            } else if (\"taskOutput\" in argument) {\r\n              placeholder = `<from task ${argument.taskOutput.taskId} / ${argument.taskOutput.outputName}>`;\r\n            } else if (\"graphInput\" in argument) {\r\n              placeholder = `<from graph input ${argument.graphInput.inputName}>`;\r\n            } else {\r\n              placeholder = \"<reference>\";\r\n            }\r\n          }\r\n\r\n          const argumentIsRequiredButMissing =\r\n            !(inputName in currentArguments) &&\r\n            inputSpec.optional !== true &&\r\n            inputSpec.default === undefined;\r\n          \r\n          const typeSpecString = typeSpecToString(inputSpec.type);\r\n\r\n          return (\r\n            <div\r\n              key={inputName}\r\n              style={{\r\n                display: \"table-row\",\r\n              }}\r\n            >\r\n              <label\r\n                style={{\r\n                  textAlign: \"right\",\r\n                  display: \"table-cell\",\r\n                  whiteSpace: \"nowrap\",\r\n                }}\r\n              >\r\n                <span>\r\n                  {inputName} (\r\n                  <span\r\n                    style={{\r\n                      textOverflow: \"ellipsis\",\r\n                      overflow: \"hidden\",\r\n                      maxWidth: \"90px\",\r\n                      display: \"inline-block\",\r\n                      verticalAlign: \"bottom\",\r\n                    }}\r\n                    title={typeSpecString}\r\n                  >\r\n                    {typeSpecString}\r\n                  </span>\r\n                  )\r\n                </span>\r\n              </label>\r\n              <input\r\n                style={{\r\n                  display: \"table-cell\",\r\n                }}\r\n                placeholder={placeholder}\r\n                required={argumentIsRequiredButMissing}\r\n                value={value ?? \"\"}\r\n                pattern={getPatternForTypeSpec(inputSpec.type)}\r\n                onChange={(e) => {\r\n                  currentArguments[inputName] = e.target.value;\r\n                  setCurrentArguments({ ...currentArguments });\r\n                }}\r\n              />\r\n              <div\r\n                style={{\r\n                  display: \"table-cell\",\r\n                }}\r\n              >\r\n                <button\r\n                  type=\"button\"\r\n                  title=\"Reset to default\"\r\n                  onClick={(e) => {\r\n                    delete currentArguments[inputName];\r\n                    setCurrentArguments({ ...currentArguments });\r\n                  }}\r\n                  disabled={!(inputName in currentArguments)}\r\n                >\r\n                  ⌧\r\n                </button>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <button type=\"button\" onClick={closeEditor}>\r\n        Close\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        onClick={(e) => {\r\n          setArguments?.(currentArguments);\r\n          closeEditor?.();\r\n        }}\r\n      >\r\n        Apply\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\n//export default memo(ArgumentsEditor);\r\nexport default ArgumentsEditor;\r\n","import { CSSProperties, memo, useState } from 'react';\r\nimport {\r\n  ArgumentType,\r\n  InputSpec,\r\n  OutputSpec,\r\n  TaskSpec,\r\n} from '../componentSpec';\r\n\r\nimport { Handle, Position, Node, NodeProps, HandleType } from 'react-flow-renderer';\r\n\r\nimport ArgumentsEditor from './ArgumentsEditor';\r\n\r\nconst inputHandlePosition = Position.Top;\r\nconst outputHandlePosition = Position.Bottom;\r\n\r\ntype InputOrOutputSpec = InputSpec | OutputSpec;\r\n\r\nconst MISSING_ARGUMENT_CLASS_NAME = \"missing-argument\";\r\n\r\nconst NODE_WIDTH_IN_PX = 180;\r\n\r\nexport const isComponentTaskNode = (node: Node): node is Node<ComponentTaskNodeProps> =>\r\n  node.type === \"task\" && node.data !== undefined && \"taskSpec\" in node.data;\r\n\r\nfunction generateHandles(\r\n  ioSpecs: InputOrOutputSpec[],\r\n  handleType: HandleType,\r\n  position: Position,\r\n  idPrefix: string,\r\n  inputsWithMissingArguments?: string[],\r\n): JSX.Element[] {\r\n  let handleComponents = [];\r\n  const numHandles = ioSpecs.length;\r\n  for (let i = 0; i < numHandles; i++) {\r\n    const ioSpec = ioSpecs[i];\r\n    const id = idPrefix + ioSpec.name;\r\n    const relativePosition = (i + 1) / (numHandles + 1);\r\n    const positionPercentString = String(100 * relativePosition) + \"%\";\r\n    const style =\r\n      position === Position.Top || position === Position.Bottom\r\n        ? { left: positionPercentString }\r\n        : { top: positionPercentString };\r\n    // TODO: Handle complex type specs\r\n    const ioTypeName = ioSpec.type?.toString() ?? \"Any\";\r\n    let classNames = [`handle_${idPrefix}${ioTypeName}`.replace(\" \", \"_\")];\r\n    const isInvalid = (inputsWithMissingArguments ?? []).includes(ioSpec.name);\r\n    if (isInvalid) {\r\n      classNames.push(MISSING_ARGUMENT_CLASS_NAME);\r\n    }\r\n    classNames = classNames.map((className) => className.replace(\" \", \"_\"));\r\n\r\n    const [labelClasses, labelStyle] = generateLabelStyle(position, numHandles);\r\n    handleComponents.push(\r\n      <Handle\r\n        key={id}\r\n        type={handleType}\r\n        position={position}\r\n        id={id}\r\n        style={style}\r\n        isConnectable={true}\r\n        title={ioSpec.name + \" : \" + ioTypeName}\r\n        className={classNames.join(\" \")}\r\n      >\r\n        <div className={labelClasses} style={labelStyle}>\r\n          {ioSpec.name}\r\n        </div>\r\n      </Handle>\r\n    );\r\n  }\r\n  return handleComponents;\r\n}\r\n\r\n\r\nfunction generateLabelStyle(\r\n  position: Position,\r\n  numHandles: number\r\n): [string, CSSProperties] {\r\n  let maxLabelWidthPx = NODE_WIDTH_IN_PX;\r\n  // By default, we want to place the label on the same side of the handle as the handle is on the side of the node.\r\n  let labelClasses = \"label\";\r\n  // When there are too many inputs/outputs, we need to move the label so it starts from the handle.\r\n  // Based on my tests, we always want this for >4 handles (top/bottom), so the rotated default placement is never used at all.\r\n\r\n  if (position === Position.Top || position === Position.Bottom) {\r\n    if (numHandles > 1) {\r\n      // For single handle max width is the node width, while the formula would give half of that\r\n      maxLabelWidthPx = NODE_WIDTH_IN_PX / (numHandles + 1);\r\n    }\r\n    //if (numHandles > 4) {\r\n    if (maxLabelWidthPx < 35) {\r\n      maxLabelWidthPx = 50;\r\n      labelClasses += \" label-angled\";\r\n    }\r\n  } else {\r\n    maxLabelWidthPx = 60;\r\n  }\r\n\r\n  const labelStyle: CSSProperties = { maxWidth: `${maxLabelWidthPx}px` };\r\n  return [labelClasses, labelStyle];\r\n}\r\n\r\nfunction generateInputHandles(inputSpecs: InputSpec[], inputsWithInvalidArguments?: string[]): JSX.Element[] {\r\n  return generateHandles(inputSpecs, \"target\", inputHandlePosition, \"input_\", inputsWithInvalidArguments);\r\n}\r\n\r\nfunction generateOutputHandles(outputSpecs: OutputSpec[]): JSX.Element[] {\r\n  return generateHandles(outputSpecs, \"source\", outputHandlePosition, \"output_\");\r\n}\r\n\r\nexport interface ComponentTaskNodeProps {\r\n  taskSpec: TaskSpec,\r\n  taskId?: string,\r\n  setArguments?: (args: Record<string, ArgumentType>) => void;\r\n};\r\n\r\nconst ComponentTaskNode = ({ data }: NodeProps<ComponentTaskNodeProps>) => {\r\n  const [isArgumentsEditorOpen, setIsArgumentsEditorOpen] = useState(false);\r\n\r\n  const taskSpec = data.taskSpec;\r\n  const componentSpec = taskSpec.componentRef.spec;\r\n  if (componentSpec === undefined) {\r\n    return (<></>);\r\n  }\r\n\r\n  const label = componentSpec.name ?? \"<component>\";\r\n  const inputsWithInvalidArguments = (componentSpec.inputs ?? [])\r\n    .filter(\r\n      (inputSpec) =>\r\n        inputSpec.optional !== true &&\r\n        inputSpec.default === undefined &&\r\n        !(inputSpec.name in (taskSpec.arguments ?? {}))\r\n    )\r\n    .map((inputSpec) => inputSpec.name);\r\n  const inputHandles = generateInputHandles(componentSpec.inputs ?? [], inputsWithInvalidArguments);\r\n  const outputHandles = generateOutputHandles(componentSpec.outputs ?? []);\r\n  const handleComponents = inputHandles.concat(outputHandles);\r\n\r\n  const closeArgumentsEditor = () => {\r\n    setIsArgumentsEditorOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      onDoubleClick={() => {\r\n        setIsArgumentsEditorOpen(!isArgumentsEditorOpen);\r\n      }}\r\n      title={data.taskId}\r\n    >\r\n      {label}\r\n      {handleComponents}\r\n      {isArgumentsEditorOpen && (\r\n        <ArgumentsEditor\r\n          taskSpec={taskSpec}\r\n          closeEditor={closeArgumentsEditor}\r\n          setArguments={data.setArguments}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(ComponentTaskNode);\r\n","import { ComponentSpec, ContainerImplementation, ImplementationType, StringOrPlaceholder, ArgumentType, TypeSpecType } from \"../componentSpec\";\r\n\r\n// # How to handle I/O:\r\n// output = output artifact\r\n// inputValue => input parameter\r\n// inputPath => input artifact\r\n// [ ] downstream input parameter => spread \"parameterness\" upstream - add output parameters when needed (AFAIK, the paths are the same - required)\r\n// [ ] const argument or pipeline parameter + artifact input => need to insert uploader task\r\n\r\nconst sanitizePipelineInfoName = (pipelineContextName: string) => {\r\n    return pipelineContextName.toLowerCase().replace(/\\W/, '-')\r\n}\r\n\r\ntype ResolvedCommandLineAndArgs = {\r\n    command?: string[],\r\n    args?: string[],\r\n    inputsConsumedAsValue: Set<string>,\r\n    inputsConsumedAsPath: Set<string>,\r\n};\r\n\r\nconst resolveCommandLine = (componentSpec: ComponentSpec, taskArguments: Record<string, ArgumentType>): ResolvedCommandLineAndArgs => {\r\n    if (! ('container' in componentSpec.implementation)) {\r\n      throw Error(\"resolveCommandLine only supports container components\");\r\n    }\r\n    const containerSpec = componentSpec.implementation.container;\r\n\r\n    const inputsConsumedAsValue = new Set<string>();\r\n    const inputsConsumedAsPath = new Set<string>();\r\n    const convertArg = (arg: StringOrPlaceholder): string[] => {\r\n        if (typeof arg == \"string\") {\r\n            return [arg];\r\n        } else if ('inputValue' in arg) {\r\n            const inputName = arg.inputValue;\r\n            inputsConsumedAsValue.add(inputName);\r\n            return [`{{$.inputs.parameters['${inputName}']}}`];\r\n        } else if ('inputPath' in arg) {\r\n            const inputName = arg.inputPath;\r\n            inputsConsumedAsPath.add(inputName);\r\n            return [`{{$.inputs.artifacts['${inputName}'].path}}`];\r\n        } else if ('outputPath' in arg) {\r\n            const outputName = arg.outputPath;\r\n            return [`{{$.outputs.artifacts['${outputName}'].path}}`];\r\n        } else if ('if' in arg) {\r\n            const [ifCond, ifThen, ifElse] = [arg.if.cond, arg.if.then, arg.if.else];\r\n            // TODO: Check false values, not just check for true\r\n            let condEvaluatesToTrue = false;\r\n            if (typeof ifCond === \"string\") {\r\n              condEvaluatesToTrue = ifCond.toLowerCase() === \"true\";\r\n            } else if (typeof ifCond === \"boolean\") {\r\n              condEvaluatesToTrue = ifCond;\r\n            } else if (\"isPresent\" in ifCond) {\r\n              const inputName = ifCond.isPresent;\r\n              condEvaluatesToTrue = inputName in taskArguments;\r\n            } else if (\"inputValue\" in ifCond) {\r\n              const inputName = ifCond.inputValue;\r\n              if (! (inputName in taskArguments)) {\r\n                condEvaluatesToTrue = false;\r\n              } else {\r\n                const taskArgument = taskArguments[inputName];\r\n                if (typeof taskArgument === \"string\") {\r\n                    condEvaluatesToTrue = taskArgument.toLowerCase() === \"true\";\r\n                } else {\r\n                    throw Error(\"Using runtime conditions in component command line placeholders is not supported yet.\")\r\n                }\r\n              }\r\n            } else {\r\n                throw Error(\"Unexpected contition kind: \" + ifCond);\r\n            }\r\n            const unresolvedArgs = condEvaluatesToTrue ? ifThen : ifElse;\r\n            if (unresolvedArgs === undefined) {\r\n                return [];\r\n            }\r\n            return unresolvedArgs.flatMap(convertArg);\r\n        } else if ('concat' in arg) {\r\n            const concatArgs = arg.concat;\r\n            return concatArgs.flatMap(convertArg);\r\n        } else {\r\n            throw Error(`Unknown kind of command-line argument: ${arg}`);\r\n        }\r\n    };\r\n\r\n    const result = {\r\n        command: containerSpec.command?.flatMap(convertArg),\r\n        args: containerSpec.args?.flatMap(convertArg),\r\n        inputsConsumedAsValue: inputsConsumedAsValue,\r\n        inputsConsumedAsPath: inputsConsumedAsPath,\r\n    };\r\n    return result;\r\n}\r\n\r\nfunction isContainerImplementation(implementationType: ImplementationType): implementationType is ContainerImplementation {\r\n    return 'container' in implementationType;\r\n}\r\n\r\nconst typeSpecToVertexPrimitiveTypeEnum = (typeSpec: TypeSpecType | undefined) => {\r\n    if (typeof typeSpec === \"string\") {\r\n        if ([\"integer\"].includes(typeSpec.toLowerCase())) {\r\n            return \"INT\";\r\n        }\r\n        if ([\"float\", \"double\"].includes(typeSpec.toLowerCase())) {\r\n            return \"DOUBLE\";\r\n        }\r\n    }\r\n    return \"STRING\";\r\n}\r\n\r\nconst typeSpecToVertexParameterSpec = (typeSpec: TypeSpecType | undefined) => {\r\n    return {\r\n        type: typeSpecToVertexPrimitiveTypeEnum(typeSpec)\r\n    }\r\n}\r\n\r\nconst typeSpecToVertexArtifactTypeSchema = (typeSpec: TypeSpecType | undefined) => {\r\n    // TODO: Implement better mapping\r\n    const artifactTypeSchema = {\r\n        schemaTitle: \"system.Artifact\"\r\n    }\r\n    return artifactTypeSchema\r\n}\r\n\r\nconst typeSpecToVertexArtifactSpec = (typeSpec: TypeSpecType | undefined) => {\r\n    return {\r\n        artifactType: typeSpecToVertexArtifactTypeSchema(typeSpec)\r\n    }\r\n}\r\n// const typeSpecToVertexArtifactType(typeSpec: TypeSpecType) => {\r\n//     return typeof typeSpec === \"string\" && [\"String\", \"Integer\", \"Float\", \"Double\", \"Boolean\", ]\r\n// }\r\n\r\n\r\nconst taskSpecToVertexTaskSpecComponentSpecAndExecutorSpec = (\r\n    componentSpec: ComponentSpec,\r\n    //passedArgumentNames: string[],\r\n    taskArguments: Record<string, ArgumentType>\r\n) => {\r\n    // TODO: Investigate how to properly narrow the ImplementationTyppe union type\r\n    // Type guard!\r\n\r\n    if (!isContainerImplementation(componentSpec.implementation)) {\r\n        throw Error(\"Nested graph components are not supported yet\");\r\n    }\r\n    // Also works\r\n    // if ('container' in componentSpec.implementation) {\r\n    //     componentSpec.implementation\r\n    // }\r\n\r\n    const containerSpec = componentSpec.implementation.container;\r\n\r\n\r\n    const resolvedCommandLine = resolveCommandLine(componentSpec, taskArguments);\r\n\r\n    const vertexExecutorSpec = {\r\n        container: {\r\n            image: containerSpec.image,\r\n            command: resolvedCommandLine.command,\r\n            args: resolvedCommandLine.args,\r\n        }\r\n    };\r\n\r\n    // resolvedCommandLine.inputsConsumedAsPath\r\n\r\n    const inputMap = new Map((componentSpec.inputs ?? []).map(inputSpec => [inputSpec.name, inputSpec]));\r\n\r\n    // Array.from(inputMap.keys()).filter(resolvedCommandLine.inputsConsumedAsValue.has)\r\n\r\n    const vertexComponentInputsSpec = {\r\n      parameters: Object.fromEntries(\r\n        Array.from(resolvedCommandLine.inputsConsumedAsValue.values()).map(\r\n          (inputName) => [\r\n            inputName,\r\n            typeSpecToVertexParameterSpec(inputMap.get(inputName)?.type),\r\n          ]\r\n        )\r\n      ),\r\n      artifacts: Object.fromEntries(\r\n        Array.from(resolvedCommandLine.inputsConsumedAsPath.values()).map(\r\n          (inputName) => [\r\n            inputName,\r\n            typeSpecToVertexArtifactSpec(inputMap.get(inputName)?.type)\r\n          ]\r\n        )\r\n      ),\r\n    };\r\n\r\n    const vertexComponentOutputsSpec = {\r\n      parameters: {}, // Parameters will be added later as needed\r\n      artifacts: Object.fromEntries(\r\n        (componentSpec.outputs ?? []).map((outputSpec) => [\r\n          outputSpec.name,\r\n          typeSpecToVertexArtifactSpec(outputSpec.type)\r\n        ])\r\n      ),\r\n    };\r\n\r\n    const vertexComponentSpec = {\r\n        inputDefinitions: vertexComponentInputsSpec,\r\n        outputDefinitions: vertexComponentOutputsSpec,\r\n        // dag\r\n        executorLabel: \"<set later>\",\r\n    };\r\n\r\n    const vertexTaskParameterArguments = Object.fromEntries(Array.from(resolvedCommandLine.inputsConsumedAsValue.values()).map(inputName => [inputName, (inputName => {\r\n        // TODO: Check that this works\r\n        let taskArgument = taskArguments[inputName];\r\n        //if (! (inputName in taskArguments)) {\r\n        if (taskArgument === undefined) {\r\n            // Checking for default value\r\n            const inputSpec = inputMap.get(inputName);\r\n            if (inputSpec === undefined) {\r\n                throw Error(`Cannot happen: vertexTaskParameterArguments - inputMap.get(${inputName}) === undefined`)\r\n            }\r\n            if (inputSpec.default !== undefined) {\r\n                taskArgument = inputSpec.default;\r\n            } else {\r\n                if (inputSpec.optional === true) {\r\n                    // TODO: Decide what the behavior should be\r\n                    // throw Error(`Input \"${inputName}\" is optional, but command-line still uses it when when it's not present.`);\r\n                    console.error(`Input \"${inputName}\" is optional, but command-line still uses it when when it's not present.`);\r\n                    taskArgument = \"\";\r\n                } else {\r\n                    throw Error(`Argument was not provided for required input \"${inputName}\"`);\r\n                }\r\n            }\r\n        }\r\n        if (typeof taskArgument === \"string\" ) {\r\n            return {\r\n                runtimeValue: {\r\n                    constantValue: {\r\n                        // TODO: Fix constant arguments for non-string inputs\r\n                        stringValue: taskArgument,\r\n                    }\r\n                }\r\n            }\r\n        } else if ('graphInput' in taskArgument) {\r\n            return {\r\n                componentInputParameter: taskArgument.graphInput.inputName,\r\n            }\r\n        } else if ('taskOutput' in taskArgument) {\r\n            return {\r\n                taskOutputParameter: {\r\n                    producerTask: taskArgument.taskOutput.taskId,\r\n                    outputParameterKey: taskArgument.taskOutput.outputName,\r\n                }\r\n            };\r\n        } else {\r\n            throw Error(`Unknown kind of task argument: \"${taskArgument}\"`);\r\n        }\r\n    })(inputName)]));\r\n\r\n    const vertexTaskArtifactArguments = Object.fromEntries(Array.from(resolvedCommandLine.inputsConsumedAsPath.values()).map(inputName => [inputName, (inputName => {\r\n        // TODO: Check that this works\r\n        let taskArgument = taskArguments[inputName];\r\n        //if (! (inputName in taskArguments)) {\r\n        if (taskArgument === undefined) {\r\n            // Checking for default value\r\n            const inputSpec = inputMap.get(inputName);\r\n            if (inputSpec === undefined) {\r\n                throw Error(`Cannot happen: vertexTaskParameterArguments - inputMap.get(${inputName}) === undefined`)\r\n            }\r\n            if (inputSpec.default !== undefined) {\r\n                taskArgument = inputSpec.default;\r\n            } else {\r\n                if (inputSpec.optional === true) {\r\n                    // TODO: Decide what the behavior should be\r\n                    // throw Error(`Input \"${inputName}\" is optional, but command-line still uses it when when it's not present.`);\r\n                    console.error(`Input \"${inputName}\" is optional, but command-line still uses it when when it's not present.`);\r\n                    taskArgument = \"\";\r\n                } else {\r\n                    throw Error(`Argument was not provided for required input \"${inputName}\"`);\r\n                }\r\n            }\r\n        }\r\n        if (typeof taskArgument === \"string\" ) {\r\n            // TODO: Work around and make this possible\r\n            throw Error(\"Constant arguments for artifact inputs are not supported yet.\");\r\n        } else if ('graphInput' in taskArgument) {\r\n            return {\r\n                componentInputArtifact: taskArgument.graphInput.inputName,\r\n            }\r\n        } else if ('taskOutput' in taskArgument) {\r\n            return {\r\n                taskOutputArtifact: {\r\n                    producerTask: taskArgument.taskOutput.taskId,\r\n                    outputArtifactKey: taskArgument.taskOutput.outputName,\r\n                }\r\n            };\r\n        } else {\r\n            throw Error(`Unknown kind of task argument: \"${taskArgument}\"`);\r\n        }\r\n    })(inputName)]));\r\n    \r\n    const vertexTaskSpec = {\r\n        taskInfo: {\r\n            // This is the task display name, not an ID\r\n            name: componentSpec.name ?? \"Component\",\r\n        },\r\n        inputs: {\r\n            parameters: vertexTaskParameterArguments,\r\n            artifacts: vertexTaskArtifactArguments,\r\n        },\r\n        // dependent_tasks: [],\r\n        cachingOptions: {\r\n            enableCache: true,\r\n        },\r\n        componentRef: {\r\n          name: \"<set later>\"\r\n        },\r\n        // triggerPolicy: {\r\n        //     condition: \"...\",\r\n        //     strategy: \"ALL_UPSTREAM_TASKS_SUCCEEDED\",\r\n        // },\r\n        // iterator: {\r\n        //     artifactIterator: {...},\r\n        //     parameterIterator: {...},\r\n        // },\r\n    }\r\n    \r\n    return { vertexTaskSpec, vertexComponentSpec, vertexExecutorSpec };\r\n}\r\n\r\nconst graphComponentSpecToVertexPipelineSpec = (componentSpec: ComponentSpec, pipelineContextName = \"pipeline\") => {\r\n    if (! ('graph' in componentSpec.implementation)) {\r\n        throw Error(\"Only graph components are supported for now\")\r\n    }\r\n\r\n    // TODO: Fix case when these inputs are passed to tasks as artifacts\r\n    const vertexComponentInputsSpec = {\r\n        parameters: Object.fromEntries(\r\n          (componentSpec.inputs ?? []).map(\r\n            (inputSpec) => [inputSpec.name, typeSpecToVertexParameterSpec(inputSpec.type)]\r\n          )\r\n        ),\r\n        // Pipeline does not support artifact inputs\r\n        // artifacts: {},\r\n    };\r\n\r\n    const graphSpec = componentSpec.implementation.graph;\r\n\r\n    let vertexExecutors: Record<string, any> = {};\r\n    let vertexComponents: Record<string, any> = {};\r\n    let vertexTasks: Record<string, any> = {};\r\n\r\n    for (const [taskId, taskSpec] of Object.entries(graphSpec.tasks)) {\r\n        if (taskSpec.componentRef.spec === undefined) {\r\n            throw Error(`Task \"${taskId}\" does not have taskSpec.componentRef.spec.`)\r\n        }\r\n        try {\r\n            const {vertexTaskSpec, vertexComponentSpec, vertexExecutorSpec} = taskSpecToVertexTaskSpecComponentSpecAndExecutorSpec(taskSpec.componentRef.spec, taskSpec.arguments ?? {});\r\n            // task IDs are expected to be unique\r\n            // TODO: Fix  this to work for multi-dag pipelines where task IDs are not globally unique\r\n            const vertexExecutorId = taskId + \"_executor\";\r\n            const vertexComponentId = taskId + \"_component\";\r\n            const vertexTaskId = taskId; // + \"_task\";\r\n            vertexExecutors[vertexExecutorId] = vertexExecutorSpec;\r\n            vertexComponentSpec.executorLabel = vertexExecutorId;\r\n            vertexComponents[vertexComponentId] = vertexComponentSpec;\r\n            vertexTaskSpec.componentRef.name = vertexComponentId;\r\n            // This is the task display name, not an ID. It's already set to the component name\r\n            //vertexTaskSpec.taskInfo.name = vertexTaskId;\r\n            vertexTasks[vertexTaskId] = vertexTaskSpec;\r\n        } catch(err) {\r\n            throw Error(`Error compiling task ${taskId}: ` + err.toString());\r\n        }\r\n    }\r\n\r\n    const vertexPipelineSpec = {\r\n        pipelineInfo: {\r\n            name: sanitizePipelineInfoName(pipelineContextName)\r\n        },\r\n        sdkVersion: \"Cloud-Pipelines\",\r\n        schemaVersion: \"2.0.0\",\r\n        deploymentSpec: {\r\n            executors: vertexExecutors,\r\n        },\r\n        components: vertexComponents,\r\n        root: {\r\n          inputDefinitions: vertexComponentInputsSpec,\r\n          dag: {\r\n            tasks: vertexTasks,\r\n          }\r\n        },\r\n    };\r\n    return vertexPipelineSpec;\r\n};\r\n\r\nconst generateVertexPipelineJobFromGraphComponent = (\r\n  componentSpec: ComponentSpec,\r\n  gcsOutputDirectory: string,\r\n  pipelineArguments?: Map<string, string>,\r\n  pipelineContextName = \"pipeline\",\r\n) => {\r\n  // The pipelineContextName affects caching\r\n\r\n  // TODO: FIX: Do proper conversion of integers\r\n  //let convertedPipelineArguments = new Map<String, object>(Array.from(pipelineArguments.entries()).map((key, value) => [key, value]));\r\n  let convertedPipelineArguments: Record<string, any> = {};\r\n  if (pipelineArguments !== undefined) {\r\n    for (const [key, value] of Array.from(pipelineArguments.entries())) {\r\n      convertedPipelineArguments[key] = {\r\n        stringValue: value,\r\n        //intValue\r\n        //doubleValue\r\n      };\r\n    }\r\n  }\r\n\r\n  const pipelineSpec = graphComponentSpecToVertexPipelineSpec(componentSpec, pipelineContextName);\r\n\r\n  const pipelineJob = {\r\n    // name: \"<>\",\r\n    // Does not show up in the UX\r\n    displayName: componentSpec.name ?? \"Pipeline\",\r\n    // labels: {},\r\n    runtimeConfig: {\r\n      parameters: convertedPipelineArguments,\r\n      gcsOutputDirectory: gcsOutputDirectory,\r\n    },\r\n    pipelineSpec: pipelineSpec,\r\n    // encryptionSpec: {},\r\n    // serviceAccount: \"<>\",\r\n    // network: {},\r\n  };\r\n  return pipelineJob;\r\n};\r\n\r\nexport { graphComponentSpecToVertexPipelineSpec, generateVertexPipelineJobFromGraphComponent };\r\n","import {\r\n  Node,\r\n  Edge,\r\n} from \"react-flow-renderer\";\r\n\r\nimport {\r\n  ComponentSpec,\r\n  TaskSpec,\r\n  InputSpec,\r\n  OutputSpec,\r\n  ArgumentType,\r\n  GraphInputArgument,\r\n  TaskOutputArgument,\r\n  GraphImplementation,\r\n} from \"../componentSpec\";\r\nimport { isComponentTaskNode } from \"./ComponentTaskNode\";\r\n\r\nconst getNodePositionAnnotations = (node: Node): { [k: string]: string } => ({\r\n  \"editor.position\": JSON.stringify({\r\n    // node.position cannot be used since set at 1st drop and never updated\r\n    x: node.__rf.position.x,\r\n    y: node.__rf.position.y,\r\n    width: node.__rf.width,\r\n    height: node.__rf.height,\r\n  }),\r\n});\r\n\r\nconst nodeOrderComparer = (n1: Node, n2: Node) =>\r\n  n1.__rf.position.x - n2.__rf.position.x;\r\n\r\nconst createGraphComponentSpecFromFlowElements = (\r\n  nodes: Node[],\r\n  edges: Edge[],\r\n  name = \"Component\",\r\n  annotations: Record<string, string> = {},\r\n  includePositions: boolean = true,\r\n  includeSpecs: boolean = false\r\n): ComponentSpec => {\r\n  // Input and output nodes\r\n  // Sorting them by horisontal position to make reordering inputs and outputs easy.\r\n  const inputNodes = nodes.filter((node) => node.type === \"input\").sort(nodeOrderComparer);\r\n  const outputNodes = nodes.filter((node) => node.type === \"output\").sort(nodeOrderComparer);\r\n  // Task nodes. They should all be ComponentTaskNode components\r\n  const taskNodes = nodes\r\n    .filter(isComponentTaskNode);\r\n  \r\n  const inputSpecs = inputNodes.map<InputSpec>((node) => {\r\n    let spec: InputSpec = { name: node.id };\r\n    if (includePositions) {\r\n      spec.annotations = getNodePositionAnnotations(node);\r\n      if (spec.annotations === undefined) {\r\n        alert(\"spec.annotations === undefined\");\r\n      }\r\n    }\r\n    return spec;\r\n  });\r\n\r\n  const outputSpecs = outputNodes.map<OutputSpec>((node) => {\r\n    let spec: OutputSpec = { name: node.id };\r\n    if (includePositions) {\r\n      spec.annotations = spec.annotations = getNodePositionAnnotations(node);\r\n    }\r\n    return spec;\r\n  });\r\n\r\n  // const originalTaskMap = taskNodes.reduce((map, node) => {\r\n  //   const taskSpec = node.data;\r\n  //   if (taskSpec !== undefined) {\r\n  //     map.set(node.id, taskSpec);\r\n  //   }\r\n  //   return map;\r\n  // }, new Map<string, TaskSpec>());\r\n\r\n  const taskMap = taskNodes.reduce((accumulator, node) => {\r\n    let taskSpec = node.data?.taskSpec;\r\n    if (taskSpec !== undefined) {\r\n      // Cloning the spec to modify it\r\n      taskSpec = Object.assign({}, taskSpec);\r\n      if (!includeSpecs) {\r\n        taskSpec.componentRef = Object.assign({}, taskSpec.componentRef);\r\n        delete taskSpec.componentRef.spec;\r\n      }\r\n      if (includePositions) {\r\n        taskSpec.annotations = getNodePositionAnnotations(node);\r\n      }\r\n      accumulator[node.id] = taskSpec;\r\n    }\r\n    return accumulator;\r\n  }, {} as Record<string, TaskSpec>);\r\n\r\n  let graphOutputValues: Record<string, TaskOutputArgument> = {};\r\n\r\n  for (const edge of edges) {\r\n    const sourceTaskId = edge.source;\r\n    const sourceOutputName = edge.sourceHandle?.replace(/^output_/, '');\r\n    const targetTaskId = edge.target;\r\n    const targetInputName = edge.targetHandle?.replace(/^input_/, '');\r\n\r\n    // if (!sourceOutputName || !targetInputName) {\r\n    //   console.error(\"Enexpected edge without a source or target handle:\", edge);\r\n    //   continue;\r\n    // }\r\n\r\n    // Checking the source task for sanity\r\n    if (!!sourceOutputName && taskMap[sourceTaskId] === undefined) {\r\n      console.error(\"Task node is connected to unknown node type:\", edge);\r\n      continue;\r\n    }\r\n\r\n    // FIX: For now, detecting the graph inputs and outputs by sourceOutputName or targetInputName being null\r\n    const argument: ArgumentType =\r\n      !!sourceOutputName\r\n        ? ({\r\n            taskOutput: { taskId: sourceTaskId, outputName: sourceOutputName },\r\n          } as TaskOutputArgument)\r\n        : ({\r\n            // Using input node ID as graph input name\r\n            graphInput: { inputName: sourceTaskId },\r\n          } as GraphInputArgument);\r\n    if (!!targetInputName) {\r\n      let targetTask = taskMap[targetTaskId];\r\n      if (targetTask === undefined) {\r\n        console.error(\"Task node is connected to unknown node type:\", edge);\r\n        continue;\r\n      }\r\n      if (targetTask.arguments === undefined) {\r\n        targetTask.arguments = {};\r\n      }\r\n      targetTask.arguments[targetInputName] = argument;\r\n    } else {\r\n      // graph output\r\n      // Using output node ID as graph output name\r\n      const taskOutputArgument = argument as TaskOutputArgument;\r\n      // FIX BUG This check does not work to guard against incompatible arguments\r\n      if (!!taskOutputArgument) {\r\n        graphOutputValues[targetTaskId] = taskOutputArgument;\r\n      } else {\r\n        console.error(\"Graph outputs can only come from task outputs.\")\r\n      }\r\n    }\r\n  }\r\n\r\n  // // Verify arguments\r\n  // // TODO: Also sort them\r\n  // for (const [taskId, taskSpec] of Object.entries(taskMap)) {\r\n    \r\n  // }\r\n\r\n  const graphComponent: ComponentSpec = {\r\n    name: name,\r\n    inputs: inputSpecs,\r\n    outputs: outputSpecs,\r\n    metadata: {\r\n      annotations: annotations\r\n    },\r\n    implementation: {\r\n      graph: {\r\n        tasks: taskMap,\r\n        outputValues: graphOutputValues,\r\n      },\r\n    },\r\n  };\r\n\r\n  // Cleanup.\r\n  // I could have prevented these attributes from being added, but then the attribute serialization ordering will be ugly\r\n  // (the first attribute would be \"implementation\" since it's required).\r\n  if (inputSpecs.length === 0) {\r\n    delete graphComponent.inputs;\r\n  }\r\n  if (outputSpecs.length === 0) {\r\n    delete graphComponent.outputs;\r\n  }\r\n  if (Object.keys(annotations).length === 0) {\r\n    delete graphComponent.metadata;\r\n  }\r\n  if (Object.keys(graphOutputValues).length === 0) {\r\n    delete (graphComponent.implementation as GraphImplementation).graph.outputValues;\r\n  }\r\n  return graphComponent;\r\n};\r\n\r\nexport { createGraphComponentSpecFromFlowElements };\r\n","import { DragEvent } from 'react';\r\n\r\nimport ComponentLibrary from './ComponentLibrary'\r\nimport ComponentSearch from './ComponentSearch'\r\nimport GraphComponentExporter from './GraphComponentExporter'\r\nimport GoogleCloudSubmitter from './GoogleCloud'\r\nimport VertexAiExporter from './VertexAiExporter'\r\nimport { ComponentSpec } from '../componentSpec';\r\nimport { loadComponentFromUrl, XGBOOST_PIPELINE_URL, PYTORCH_PIPELINE_URL, TFX_PIPELINE_URL, DATA_PASSING_PIPELINE_URL } from './samplePipelines';\r\nimport GraphComponentLink from './GraphComponentLink';\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  event.dataTransfer.setData('application/reactflow', JSON.stringify(nodeData));\r\n  event.dataTransfer.setData(\r\n    \"DragStart.offset\",\r\n    JSON.stringify({\r\n      offsetX: event.nativeEvent.offsetX,\r\n      offsetY: event.nativeEvent.offsetY,\r\n    })\r\n  );\r\n  event.dataTransfer.effectAllowed = 'move';\r\n};\r\n\r\nconst COMPONENT_LIBRARY = [\r\n  {\r\n    category: \"Quick start\",\r\n    componentUrls: [\r\n      // 'https://raw.githubusercontent.com/Ark-kun/pipelines/60a2612541ec08c6a85c237d2ec7525b12543a43/components/datasets/Chicago_Taxi_Trips/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/2463ecda532517462590d75e6e14a8af6b55869a/components/datasets/Chicago_Taxi_Trips/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/567c04c51ff00a1ee525b3458425b17adbe3df61/components/XGBoost/Train/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/567c04c51ff00a1ee525b3458425b17adbe3df61/components/XGBoost/Predict/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"Datasets\", componentUrls: [\r\n      // 'https://raw.githubusercontent.com/Ark-kun/pipelines/60a2612541ec08c6a85c237d2ec7525b12543a43/components/datasets/Chicago_Taxi_Trips/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/2463ecda532517462590d75e6e14a8af6b55869a/components/datasets/Chicago_Taxi_Trips/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"Data manipulation\",\r\n    componentUrls: [\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/6162d55998b176b50267d351241100bb0ee715bc/components/pandas/Transform_DataFrame/in_CSV_format/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"Upload/Download\",\r\n    componentUrls: [\r\n    'https://raw.githubusercontent.com/Ark-kun/pipelines/54ac9a6a7173aecbbb30a043b2077e790cac6953/components/web/Download/component.yaml',\r\n    'https://raw.githubusercontent.com/Ark-kun/pipelines/2dac60c400ad8767b452649d08f328dfaf230f96/components/google-cloud/storage/download/component.yaml',\r\n    'https://raw.githubusercontent.com/Ark-kun/pipelines/2dac60c400ad8767b452649d08f328dfaf230f96/components/google-cloud/storage/upload_to_unique_uri/component.yaml',\r\n    'https://raw.githubusercontent.com/Ark-kun/pipelines/2dac60c400ad8767b452649d08f328dfaf230f96/components/google-cloud/storage/upload_to_explicit_uri/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"XGBoost\",\r\n    componentUrls: [\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/567c04c51ff00a1ee525b3458425b17adbe3df61/components/XGBoost/Train/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/567c04c51ff00a1ee525b3458425b17adbe3df61/components/XGBoost/Predict/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"PyTorch\",\r\n    componentUrls: [\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/4e1facea1a270535b515a9e8cc59422d1ad76a9e/components/PyTorch/Create_fully_connected_network/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/603342c4b88fe2d69ff07682f702cd3601e883bb/components/PyTorch/Train_PyTorch_model/from_CSV/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/e011e4affa85542ef2b24d63fdac27f8d939bbee/components/PyTorch/Convert_to_OnnxModel_from_PyTorchScriptModule/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"TFX\",\r\n    componentUrls: [\r\n      'https://raw.githubusercontent.com/kubeflow/pipelines/9b0d47a226c61f96e1ebe7a8ba427df38f8734e1/components/deprecated/tfx/ExampleGen/CsvExampleGen/component.yaml',\r\n      'https://raw.githubusercontent.com/kubeflow/pipelines/9b0d47a226c61f96e1ebe7a8ba427df38f8734e1/components/deprecated/tfx/StatisticsGen/component.yaml',\r\n      'https://raw.githubusercontent.com/kubeflow/pipelines/9b0d47a226c61f96e1ebe7a8ba427df38f8734e1/components/deprecated/tfx/SchemaGen/component.yaml',\r\n      'https://raw.githubusercontent.com/kubeflow/pipelines/9b0d47a226c61f96e1ebe7a8ba427df38f8734e1/components/deprecated/tfx/ExampleValidator/component.yaml',\r\n      'https://raw.githubusercontent.com/kubeflow/pipelines/9b0d47a226c61f96e1ebe7a8ba427df38f8734e1/components/deprecated/tfx/Transform/component.yaml',\r\n      'https://raw.githubusercontent.com/kubeflow/pipelines/9b0d47a226c61f96e1ebe7a8ba427df38f8734e1/components/deprecated/tfx/Trainer/component.yaml',\r\n      'https://raw.githubusercontent.com/kubeflow/pipelines/9b0d47a226c61f96e1ebe7a8ba427df38f8734e1/components/deprecated/tfx/Evaluator/component.yaml',\r\n    ]\r\n  },\r\n];\r\n\r\ninterface SidebarProps {\r\n  componentSpec?: ComponentSpec,\r\n  setComponentSpec?: (componentSpec: ComponentSpec) => void,\r\n}\r\n\r\nconst Sidebar = ({\r\n  componentSpec,\r\n  setComponentSpec\r\n}: SidebarProps) => {\r\n  return (\r\n    <aside className=\"nodeList\">\r\n      <details style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary style={{ borderWidth: \"1px\", padding: \"4px\", fontWeight: \"bold\" }}>Save/Load pipeline</summary>\r\n        <button\r\n          type=\"button\"\r\n          onClick={(e) => {\r\n            loadComponentFromUrl(TFX_PIPELINE_URL).then(setComponentSpec)\r\n          }}\r\n        >\r\n          Load TFX pipeline\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={(e) => {\r\n            loadComponentFromUrl(XGBOOST_PIPELINE_URL).then(setComponentSpec)\r\n          }}\r\n        >\r\n          Load XGBoost pipeline\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={(e) => {\r\n            loadComponentFromUrl(PYTORCH_PIPELINE_URL).then(setComponentSpec)\r\n          }}\r\n        >\r\n          Load PyTorch pipeline\r\n        </button>\r\n        {process?.env?.NODE_ENV === \"development\" ? (\r\n          <button\r\n            type=\"button\"\r\n            onClick={(e) => {\r\n              loadComponentFromUrl(DATA_PASSING_PIPELINE_URL).then(setComponentSpec);\r\n            }}\r\n          >\r\n            Load Data Passing pipeline\r\n          </button>\r\n        ) : undefined}\r\n        <div>\r\n          Save as <GraphComponentLink/>\r\n        </div>\r\n      </details>\r\n      <details style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary style={{ borderWidth: \"1px\", padding: \"4px\", fontWeight: \"bold\" }}>Submit to Google Cloud</summary>\r\n        <GoogleCloudSubmitter componentSpec={componentSpec}/>\r\n      </details>\r\n      <h3>Drag components to the canvas:</h3>\r\n      <details style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary><strong>Special</strong></summary>\r\n        <div className=\"react-flow__node react-flow__node-input\" onDragStart={(event: DragEvent) => onDragStart(event, { input: { label: \"Input\" } })} draggable>\r\n          Input\r\n        </div>\r\n        <div className=\"react-flow__node react-flow__node-output\" onDragStart={(event: DragEvent) => onDragStart(event, { output: { label: \"Output\" } })} draggable>\r\n          Output\r\n        </div>\r\n      </details>\r\n      <ComponentLibrary componentGroups={COMPONENT_LIBRARY}/>\r\n      <details open style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary style={{ borderWidth: \"1px\", padding: \"4px\", fontWeight: \"bold\" }}>Component search</summary>\r\n        <ComponentSearch />\r\n      </details>\r\n      <details>\r\n        <summary>Debug</summary>\r\n        {componentSpec && <GraphComponentExporter componentSpec={componentSpec}/>}\r\n        <VertexAiExporter/>\r\n      </details>\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import { DragEvent, useEffect, useState } from 'react';\r\n\r\nimport {downloadComponentDataWithCache} from '../github'\r\nimport {ComponentSpec, TaskSpec} from '../componentSpec'\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  event.dataTransfer.setData('application/reactflow', JSON.stringify(nodeData));\r\n  event.dataTransfer.setData(\r\n    \"DragStart.offset\",\r\n    JSON.stringify({\r\n      offsetX: event.nativeEvent.offsetX,\r\n      offsetY: event.nativeEvent.offsetY,\r\n    })\r\n  );\r\n  event.dataTransfer.effectAllowed = 'move';\r\n};\r\n\r\ntype ComponentGroup = {\r\n  category: string;\r\n  componentUrls: string[];\r\n};\r\n\r\nconst DraggableComponentRow = ({componentUrl}: {componentUrl: string}) => {\r\n  const [componentSpec, setComponentSpec] = useState<ComponentSpec | undefined>(undefined);\r\n  useEffect(() => {\r\n    downloadComponentDataWithCache(componentUrl).then(setComponentSpec);\r\n  }, [componentUrl]);\r\n\r\n  if (componentSpec === undefined) {\r\n    return <span>Loading...</span>\r\n  } else {\r\n    return (\r\n      <div\r\n        className=\"react-flow__node react-flow__node-task\"\r\n        draggable\r\n        onDragStart={(event: DragEvent) => {\r\n          const taskSpec: TaskSpec = {\r\n            componentRef: {\r\n              url: componentUrl,\r\n              spec: componentSpec,\r\n            },\r\n          };\r\n          return onDragStart(event, { task: taskSpec });\r\n        }}\r\n      >\r\n        {componentSpec.name}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst ComponentGroupList = ({ componentGroups }: { componentGroups: ComponentGroup[] }) => {\r\n  return (\r\n    <>\r\n      {Array.from(componentGroups).map(\r\n        ({ category, componentUrls }, index) => (\r\n          <details key={category} open={index === 0} style={{ border: \"1px solid #aaa\", borderRadius: \"4px\" }}>\r\n            <summary style={{ borderWidth: \"1px\", padding: \"8px\" }}>\r\n              <strong>{category}</strong>\r\n            </summary>\r\n            {componentUrls.map((componentUrl) => (\r\n              <DraggableComponentRow key={componentUrl} componentUrl={componentUrl} />\r\n            ))}\r\n          </details>\r\n        )\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst ComponentLibrary = ({ componentGroups }: { componentGroups: ComponentGroup[] }) => {\r\n  return (\r\n    <details open>\r\n      <summary style={{ border: \"1px solid #aaa\", padding: \"4px\", borderRadius: \"4px\" }}>\r\n        <strong>Component library</strong>\r\n      </summary>\r\n      <div style={{ paddingLeft: \"10px\" }}>\r\n        <ComponentGroupList componentGroups={componentGroups}/>\r\n      </div>\r\n    </details>\r\n  );\r\n};\r\n\r\nexport default ComponentLibrary;\r\n","import React, { DragEvent } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { ComponentReference, TaskSpec } from \"../componentSpec\";\r\nimport { searchComponentsByName } from \"../github\";\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  event.dataTransfer.setData(\"application/reactflow\", JSON.stringify(nodeData));\r\n  event.dataTransfer.effectAllowed = \"move\";\r\n};\r\n\r\nconst COMPONENT_ORGS = [\"kubeflow\", \"Ark-kun\"];\r\n\r\nconst SearchPanel = (props: any) => {\r\n  const [error, setError] = useState<string | undefined>(undefined);\r\n  const [firstTime, setFirstTime] = useState(true);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [items, setItems] = useState<ComponentReference[]>([]);\r\n\r\n  const onQueryChange = (e: any) => {\r\n    setQuery(e.target.value);\r\n  };\r\n\r\n  async function fetchData(query: string) {\r\n    searchComponentsByName(query, COMPONENT_ORGS).then(\r\n      (componentRefs) => {\r\n        setIsLoaded(true);\r\n        setItems(componentRefs);\r\n      },\r\n      (error) => {\r\n        setIsLoaded(true);\r\n        setError(error.message);\r\n      }\r\n    );\r\n  }\r\n\r\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (query !== \"\") {\r\n      setFirstTime(false);\r\n      fetchData(query);\r\n    }\r\n  };\r\n\r\n  let results = <span></span>;\r\n  if (firstTime) {\r\n    results = <div>Enter search query</div>;\r\n  } else if (error !== undefined) {\r\n    results = <div>Error: {error}</div>;\r\n  } else if (!firstTime && !isLoaded) {\r\n    results = <div>Searching...</div>;\r\n  } else if (items !== undefined) {\r\n    const componentElements = items.map((item) => (\r\n      <div\r\n        key={item.url}\r\n        title={item.url}\r\n        className=\"react-flow__node react-flow__node-multihandle\"\r\n        draggable\r\n        onDragStart={(event: DragEvent) => {\r\n          const taskSpec: TaskSpec = {\r\n            componentRef: item,\r\n          };\r\n          return onDragStart(event, { task: taskSpec });\r\n        }}\r\n      >\r\n        {item.spec?.name}\r\n      </div>\r\n    ));\r\n    results = <>{componentElements}</>;\r\n  }\r\n  return (\r\n    <div className=\"nodeList\">\r\n      <form onSubmit={onSubmit}>\r\n        <input type=\"search\" placeholder=\"XGBoost\" onChange={onQueryChange} />\r\n        <input type=\"submit\" />\r\n      </form>\r\n      <div>{results}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPanel;\r\n","import {\r\n  useStoreState,\r\n} from \"react-flow-renderer\";\r\nimport yaml from \"js-yaml\";\r\n\r\nimport { ComponentSpec } from \"../componentSpec\";\r\nimport { augmentComponentSpec } from './GraphComponentSpecFlow'\r\n\r\ninterface GraphComponentExporterProps {\r\n  componentSpec: ComponentSpec,\r\n}\r\n\r\nconst GraphComponentExporter = ({\r\n  componentSpec,\r\n}: GraphComponentExporterProps) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n\r\n  let componentText = \"\";\r\n  try {\r\n    const graphComponent = augmentComponentSpec(componentSpec, nodes, false, true);\r\n    componentText = yaml.dump(graphComponent, { lineWidth: 10000 });\r\n  } catch(err) {\r\n    componentText = String(err);\r\n  }\r\n\r\n  const componentTextBlob = new Blob([componentText], { type: \"text/yaml\" }); // Or application/x-yaml (which leads to downloading)\r\n  const downloadLink = <a href={URL.createObjectURL(componentTextBlob)} download={\"component.yaml\"}>component.yaml</a>\r\n\r\n  return (\r\n    <details>\r\n      <summary>Graph {downloadLink}</summary>\r\n      <pre style={{overflow: \"auto\"}}>{componentText}</pre>\r\n    </details>\r\n  );\r\n};\r\n\r\nexport default GraphComponentExporter;\r\n","/* global gapi */\r\n\r\nimport { useState } from 'react';\r\n\r\nimport { ComponentSpec } from '../componentSpec';\r\nimport {generateVertexPipelineJobFromGraphComponent} from './vertexAiCompiler'\r\n\r\nconst LOCAL_STORAGE_GCS_OUTPUT_DIRECTORY_KEY = \"GoogleCloudSubmitter/gcsOutputDirectory\";\r\nconst LOCAL_STORAGE_PROJECT_ID_KEY = \"GoogleCloudSubmitter/projectId\";\r\nconst LOCAL_STORAGE_REGION_KEY = \"GoogleCloudSubmitter/region\";\r\nconst LOCAL_STORAGE_PROJECT_IDS_KEY = \"GoogleCloudSubmitter/projectIds\";\r\n\r\nvar CLIENT_ID = '640001104961-2m8hs192tmd9f9nssbr5thr5o3uhmita.apps.googleusercontent.com';\r\nvar API_KEY = 'AIzaSyCDPTffgYGXoit-jKsj1_1WWbSxvU7aEdQ';\r\n     \r\nconst VERTEX_AI_PIPELINES_REGIONS = [\r\n  'us-central1',\r\n  'europe-west4',\r\n  'asia-east1',\r\n];\r\n\r\nconst VERTEX_AI_PIPELINES_DEFAULT_REGION = 'us-central1';\r\n\r\nconst authorizeGoogleCloudClient = async (\r\n  scopes: string[],\r\n  immediate = false, // Setting immediate to true prevents auth window showing every time. But it needs to be false the first time (when cookies are not set).\r\n  apiKey: string = API_KEY,\r\n  clientId: string = CLIENT_ID,\r\n) => {\r\n  return new Promise<GoogleApiOAuth2TokenObject>(\r\n    (resolve, reject) => {\r\n      gapi.client.setApiKey(apiKey);\r\n      gapi.auth.authorize(\r\n        {\r\n          client_id: clientId,\r\n          scope: scopes,\r\n          immediate: immediate,\r\n        },\r\n        (authResult) => {\r\n          // console.debug(\"authorizeGoogleCloudClient: called back\");\r\n          if (authResult === undefined) {\r\n            console.error(\"authorizeGoogleCloudClient failed\");\r\n            reject(\"gapi.auth.authorize result is undefined\");\r\n          } else if (authResult.error) {\r\n            console.error(\r\n              \"authorizeGoogleCloudClient failed\",\r\n              authResult.error\r\n            );\r\n            reject(authResult.error);\r\n          } else {\r\n            resolve(authResult);\r\n            // console.debug(\"authorizeGoogleCloudClient: Success\");\r\n          }\r\n        }\r\n      );\r\n    }\r\n  );\r\n};\r\n\r\nconst ensureGoogleCloudAuthorizesScopes = async (scopes: string[]) => {\r\n  try {\r\n    // console.debug('Before ensureGoogleCloudAuthorizesScopes(immediate=true)');\r\n    await authorizeGoogleCloudClient(scopes, true);\r\n    // console.debug('After ensureGoogleCloudAuthorizesScopes(immediate=true)');\r\n  } catch (err) {\r\n    // console.error('ensureGoogleCloudAuthorizesScopes(immediate=true)', err);\r\n    try {\r\n      await authorizeGoogleCloudClient(scopes, false);\r\n    } catch (err) {\r\n      // console.error('ensureGoogleCloudAuthorizesScopes(immediate=false)', err);\r\n    }\r\n  }\r\n};\r\n\r\nconst cloudresourcemanagerListProjects = async (isAuthenticated = false) => {\r\n  await ensureGoogleCloudAuthorizesScopes(\r\n    [\"https://www.googleapis.com/auth/cloud-platform\"]\r\n  );\r\n  const response = await gapi.client.request({\r\n    path: \"https://cloudresourcemanager.googleapis.com/v1/projects/\",\r\n  });\r\n  return response.result;\r\n}\r\n\r\nconst aiplatformCreatePipelineJob = async (projetId: string, region='us-central1', pipelineJob: Record<string, any>) => {\r\n  await ensureGoogleCloudAuthorizesScopes(\r\n    [\"https://www.googleapis.com/auth/cloud-platform\"]\r\n  );\r\n  const response = await gapi.client.request({\r\n    path: `https://${region}-aiplatform.googleapis.com/v1beta1/projects/${projetId}/locations/${region}/pipelineJobs`,\r\n    method: \"POST\",\r\n    body: JSON.stringify(pipelineJob),\r\n  });\r\n  return response.result;\r\n}\r\n\r\ninterface GoogleCloudSubmitterProps {\r\n  componentSpec?: ComponentSpec,\r\n};\r\n\r\nconst GoogleCloudSubmitter = ({\r\n  componentSpec,\r\n}: GoogleCloudSubmitterProps) => {\r\n  const [projects, setProjects] = useState<string[]>(\r\n    () => JSON.parse(window.localStorage?.getItem(LOCAL_STORAGE_PROJECT_IDS_KEY) ?? \"[]\")\r\n  );\r\n  const [project, setProject] = useState<string>(\r\n    () => window.localStorage?.getItem(LOCAL_STORAGE_PROJECT_ID_KEY) ?? \"\"\r\n  ); // undefined causes error: https://reactjs.org/docs/forms.html#controlled-components https://stackoverflow.com/a/47012342\r\n  const [region, setRegion] = useState(\r\n    () => window.localStorage?.getItem(LOCAL_STORAGE_REGION_KEY) ?? VERTEX_AI_PIPELINES_DEFAULT_REGION\r\n  );\r\n  const [error, setError] = useState(\"\");\r\n  const [gcsOutputDirectory, setGcsOutputDirectory] = useState(\r\n    () => window.localStorage?.getItem(LOCAL_STORAGE_GCS_OUTPUT_DIRECTORY_KEY) ?? \"\"\r\n  );\r\n  const [pipelineJobWebUrl, setPipelineJobWebUrl] = useState(\"\");\r\n  const [compilationError, setCompilationError] = useState(\"\");\r\n\r\n  let vertexPipelineJobJson: string | undefined = undefined;\r\n  let vertexPipelineJob: Record<string, any> | undefined = undefined;\r\n\r\n  //useEffect(() => {\r\n  if (componentSpec !== undefined) {\r\n    try {\r\n      vertexPipelineJob = generateVertexPipelineJobFromGraphComponent(componentSpec, gcsOutputDirectory);\r\n      vertexPipelineJobJson = JSON.stringify(vertexPipelineJob, undefined, 2);\r\n      // Prevent inifinite re-renders\r\n      if (compilationError !== \"\") {\r\n        setCompilationError(\"\");\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err.toString();\r\n      // Prevent inifinite re-renders\r\n      if (errorMessage !== compilationError) {\r\n        setCompilationError(err.toString());\r\n      }\r\n    }\r\n  }\r\n  //}, [componentSpec, gcsOutputDirectory]);\r\n\r\n  const vertexPipelineJobUrl = vertexPipelineJobJson && URL.createObjectURL(\r\n    new Blob([vertexPipelineJobJson], { type: \"application/json\" })\r\n  );\r\n\r\n  const readyToSubmit =\r\n    project !== \"\" && region !== \"\" && vertexPipelineJob !== undefined;\r\n\r\n  return (\r\n    <form\r\n      onSubmit={async (e) => {\r\n        e.preventDefault();\r\n        if (vertexPipelineJob === undefined) {\r\n          return;\r\n        }\r\n        setPipelineJobWebUrl(\"\");\r\n        try {\r\n          // setItem might throw exception on iOS in incognito mode\r\n          try {\r\n            window.localStorage?.setItem(LOCAL_STORAGE_GCS_OUTPUT_DIRECTORY_KEY, gcsOutputDirectory);\r\n            window.localStorage?.setItem(LOCAL_STORAGE_PROJECT_ID_KEY, project);\r\n            window.localStorage?.setItem(LOCAL_STORAGE_REGION_KEY, region);\r\n          } catch(err) {\r\n            console.error(\"GoogleCloudSubmitter: Error writing properties to the localStorage\", err);\r\n          }\r\n          const result = await aiplatformCreatePipelineJob(project, region, vertexPipelineJob);\r\n          const pipelineJobName: string = result.name;\r\n          const pipelineJobId = pipelineJobName.split('/').slice(-1)[0];\r\n          const pipelineJobWebUrl = `https://console.cloud.google.com/vertex-ai/locations/${region}/pipelines/runs/${pipelineJobId}?project=${project}`;\r\n          setPipelineJobWebUrl(pipelineJobWebUrl);\r\n          setError(\"\");\r\n        } catch (err) {\r\n          console.error(err);\r\n          setError(err?.result?.error?.message ?? \"Error\");\r\n        }\r\n      }}\r\n    >\r\n      <div style={{ whiteSpace: \"nowrap\" }}>\r\n        <label htmlFor=\"project\">Project: </label>\r\n        <input\r\n          id=\"project\"\r\n          required\r\n          type=\"text\"\r\n          list=\"projects\"\r\n          placeholder=\"<my-project-id>\"\r\n          value={project}\r\n          onChange={(e) => setProject(e.target.value)}\r\n        />\r\n        <datalist id=\"projects\">\r\n          {projects.map((projectId) => (\r\n            <option key={projectId} value={projectId} />\r\n          ))}\r\n        </datalist>\r\n        <button\r\n          type=\"button\" // The default button type is \"submit\", not \"button\". WTF!?\r\n          onClick={async (e) => {\r\n            try {\r\n              const result = await cloudresourcemanagerListProjects();\r\n              const projectIds = (result.projects as any[]).map<string>(\r\n                (projectInfo) => projectInfo.projectId\r\n              );\r\n              setProjects(projectIds);\r\n              setError(\"\");\r\n              try {\r\n                window.localStorage?.setItem(LOCAL_STORAGE_PROJECT_IDS_KEY, JSON.stringify(projectIds));\r\n              } catch(err) {\r\n                console.error(\"GoogleCloudSubmitter: Error writing properties to the localStorage\", err);\r\n              }\r\n            } catch (err) {\r\n              setError(err?.result?.error?.message ?? \"Error\");\r\n            }\r\n          }}\r\n        >\r\n          ⟳{/* 🗘⭯ ⭮ ↺ ↻ ⟲ ⟳ 🔃🔄 */}\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"region\">Region: </label>\r\n        <input\r\n          id=\"region\"\r\n          required\r\n          type=\"text\"\r\n          list=\"regions\"\r\n          value={region}\r\n          onChange={(e) => setRegion(e.target.value)}\r\n        />\r\n        <datalist id=\"regions\">\r\n          {VERTEX_AI_PIPELINES_REGIONS.map((region) => (\r\n            <option key={region} value={region} />\r\n          ))}\r\n        </datalist>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"region\">GCS dir: </label>\r\n        <input\r\n          id=\"gcsOutputDirectory\"\r\n          required\r\n          type=\"text\"\r\n          value={gcsOutputDirectory}\r\n          onChange={(e) => setGcsOutputDirectory(e.target.value)}\r\n        />\r\n      </div>\r\n      <input\r\n        type=\"submit\"\r\n        disabled={!readyToSubmit}\r\n        value=\"Submit pipeline job\"\r\n      />\r\n      {pipelineJobWebUrl !== \"\" && <div><a href={pipelineJobWebUrl} target=\"_blank\" rel=\"noreferrer\">Job</a></div>}\r\n      {vertexPipelineJobUrl !== undefined && (\r\n        <div>\r\n          Download <a\r\n            href={vertexPipelineJobUrl}\r\n            download={\"vertex_pipeline_job.json\"}\r\n          >\r\n            vertex_pipeline_job.json\r\n          </a>\r\n        </div>\r\n      )}\r\n      {compilationError !== \"\" && <div>{compilationError}</div>}\r\n      {error !== \"\" && <div>Error: {error}</div>}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default GoogleCloudSubmitter;\r\n","import {\r\n  useStoreState,\r\n} from \"react-flow-renderer\";\r\n\r\nimport {createGraphComponentSpecFromFlowElements} from './graphComponentFromFlow'\r\nimport {graphComponentSpecToVertexPipelineSpec} from './vertexAiCompiler'\r\n\r\nconst VertexAiExporter = ({pipelineName}: {pipelineName?: string}) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n  const edges = useStoreState((store) => store.edges);\r\n\r\n  pipelineName = pipelineName ?? \"Pipeline\";\r\n\r\n  let vertexPipelineSpecText = \"\";\r\n  try {\r\n    const graphComponent = createGraphComponentSpecFromFlowElements(nodes, edges, pipelineName, undefined, false, true);\r\n    const vertexPipelineSpec = graphComponentSpecToVertexPipelineSpec(graphComponent);\r\n    vertexPipelineSpecText = JSON.stringify(vertexPipelineSpec, undefined, 2);\r\n  } catch(err) {\r\n    vertexPipelineSpecText = String(err);\r\n  }\r\n\r\n  const vertexPipelineSpecTextBlob = new Blob([vertexPipelineSpecText], { type: \"application/json\" }); // Or application/x-yaml (which leads to downloading)\r\n  // TODO: Call vertexPipelineSpecTextBlobUrl.revokeObjectURL in the future\r\n  const vertexPipelineSpecTextBlobUrl = URL.createObjectURL(vertexPipelineSpecTextBlob);\r\n\r\n  return (\r\n    <details open>\r\n      <summary>\r\n        Cloud IR <a\r\n          href={vertexPipelineSpecTextBlobUrl}\r\n          download={\"vertex_pipeline_spec.json\"}\r\n        >\r\n          vertex_pipeline_spec.json\r\n        </a>\r\n      </summary>\r\n      <pre style={{ overflow: \"auto\" }}>{vertexPipelineSpecText}</pre>\r\n    </details>\r\n  );\r\n};\r\n\r\nexport default VertexAiExporter;\r\n","import { useStoreState } from \"react-flow-renderer\";\r\nimport yaml from \"js-yaml\";\r\n\r\nimport { createGraphComponentSpecFromFlowElements } from \"./graphComponentFromFlow\";\r\n\r\ninterface GraphComponentLinkProps {\r\n  pipelineName?: string;\r\n  downloadFileName?: string;\r\n  linkText?: string;\r\n}\r\n\r\nconst GraphComponentLink = ({\r\n  pipelineName,\r\n  downloadFileName = \"component.yaml\",\r\n  linkText = \"component.yaml\",\r\n}: GraphComponentLinkProps) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n  const edges = useStoreState((store) => store.edges);\r\n\r\n  pipelineName = pipelineName ?? \"Pipeline\";\r\n\r\n  let componentText = \"\";\r\n  try {\r\n    const graphComponent = createGraphComponentSpecFromFlowElements(\r\n      nodes,\r\n      edges,\r\n      pipelineName\r\n    );\r\n    componentText = yaml.dump(graphComponent, { lineWidth: 10000 });\r\n  } catch (err) {\r\n    componentText = String(err);\r\n  }\r\n\r\n  const componentTextBlob = new Blob([componentText], { type: \"text/yaml\" }); // Or application/x-yaml (which leads to downloading)\r\n  return (\r\n    <a\r\n      href={URL.createObjectURL(componentTextBlob)}\r\n      download={\"component.yaml\"}\r\n    >\r\n      component.yaml\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default GraphComponentLink;\r\n","import { useState } from 'react';\r\nimport {\r\n  ReactFlowProvider,\r\n  Controls,\r\n  Background,\r\n  MiniMap,\r\n  Node,\r\n  useStoreState,\r\n} from 'react-flow-renderer';\r\nimport yaml from \"js-yaml\";\r\n\r\nimport { ComponentSpec } from '../componentSpec';\r\nimport GraphComponentSpecFlow, { augmentComponentSpec } from './GraphComponentSpecFlow';\r\nimport Sidebar from './Sidebar';\r\nimport { loadComponentFromUrl, XGBOOST_PIPELINE_URL } from \"./samplePipelines\";\r\n\r\nimport './dnd.css';\r\n\r\nconst GRID_SIZE = 10;\r\nconst SAVED_COMPONENT_SPEC_KEY = \"autosaved.component.yaml\";\r\n\r\nconst saveComponentSpec = (componentSpec: ComponentSpec, nodes?: Node[]) => {\r\n  try {\r\n    if (nodes !== undefined) {\r\n      if (nodes.length === 0) {\r\n        console.warn(\"saveComponentSpec: nodes.length === 0\");\r\n      }\r\n      componentSpec = augmentComponentSpec(componentSpec, nodes, true, true);\r\n    }\r\n    const componentText = yaml.dump(componentSpec, { lineWidth: 10000 });\r\n    window.sessionStorage.setItem(SAVED_COMPONENT_SPEC_KEY, componentText);\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n}\r\n\r\nconst loadComponentSpec = () => {\r\n  try {\r\n    const componentText = window.sessionStorage.getItem(SAVED_COMPONENT_SPEC_KEY);\r\n    if (componentText !== null) {\r\n      const loadedYaml = yaml.load(componentText);\r\n      if (loadedYaml !== null && typeof loadedYaml === \"object\") {\r\n        //TODO: Validate that the spec is valid\r\n        const savedComponentSpec = loadedYaml as ComponentSpec;\r\n        return savedComponentSpec;\r\n      }\r\n    }\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n  return undefined;\r\n}\r\n\r\n// Auto-saver is extracted to its own child component since useStoreState in the parent causes inifinite re-rendering\r\n// (each render of GraphComponentSpecFlow seems to change the Redux store).\r\n// This component seems to be triggered for every node movement, so even pure layout changes are saved.\r\nconst ComponentSpecAutoSaver = ({\r\n  componentSpec,\r\n}: {\r\n  componentSpec: ComponentSpec;\r\n}) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n  // Fixing issue where a React error would cause all node positions to be recorded as undefined (`!<tag:yaml.org,2002:js/undefined>`)\r\n  // nodes should never be undefined in normal situation.\r\n  if (nodes !== undefined && nodes.length > 0) {\r\n    saveComponentSpec(componentSpec, nodes);\r\n  }\r\n  return null;\r\n};\r\n\r\nconst DnDFlow = () => {\r\n  const [componentSpec, setComponentSpec] = useState<ComponentSpec | undefined>();\r\n\r\n  if (componentSpec === undefined) {\r\n    const restoredComponentSpec = loadComponentSpec();\r\n    if (restoredComponentSpec === undefined) {\r\n      loadComponentFromUrl(XGBOOST_PIPELINE_URL).then(setComponentSpec);\r\n    } else {\r\n      setComponentSpec(restoredComponentSpec);\r\n    }\r\n  };\r\n\r\n  if (componentSpec === undefined) {\r\n    return (<></>);\r\n  }\r\n\r\n  return (\r\n    <div className=\"dndflow\">\r\n      <ReactFlowProvider>\r\n        <div className=\"reactflow-wrapper\">\r\n          <GraphComponentSpecFlow\r\n            componentSpec={componentSpec}\r\n            setComponentSpec={setComponentSpec}\r\n            deleteKeyCode='Delete'\r\n            multiSelectionKeyCode='Control'\r\n            snapToGrid={true}\r\n            snapGrid={[GRID_SIZE, GRID_SIZE]}\r\n          >\r\n            <MiniMap/>\r\n            <Controls />\r\n            <Background gap={GRID_SIZE}/>\r\n          </GraphComponentSpecFlow>\r\n        </div>\r\n        <Sidebar\r\n          componentSpec={componentSpec}\r\n          setComponentSpec={setComponentSpec}\r\n        />\r\n        <ComponentSpecAutoSaver componentSpec={componentSpec}/>\r\n      </ReactFlowProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DnDFlow;\r\n","import './App.css';\r\nimport DnDFlow from './DragNDrop/index';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" style={{width: \"100%\", height: \"100%\"}}>\r\n      <DnDFlow/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // Strict mode causes every component to be rendered twice in dev environment\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { ComponentSpec } from \"../componentSpec\";\r\nimport { downloadComponentDataWithCache } from \"../github\";\r\n\r\nconst TFX_PIPELINE_URL = \"https://raw.githubusercontent.com/Ark-kun/pipelines/2765b13699ac28de523f499eeaa9eb2ed9b8798a/components/deprecated/tfx/_samples/TFX.pipeline.component.yaml\"\r\nconst XGBOOST_PIPELINE_URL = \"https://raw.githubusercontent.com/Ark-kun/pipelines/77df9c97191a181fcd3cded83f147799d46eca20/components/XGBoost/_samples/sample_pipeline.pipeline.component.yaml\"\r\nconst PYTORCH_PIPELINE_URL = \"https://raw.githubusercontent.com/Ark-kun/pipelines/322c0c75f32d87acfd5da9c390dee0b5799bfdaf/components/PyTorch/_samples/Train_fully-connected_network.pipeline.component.yaml\"\r\nexport const DATA_PASSING_PIPELINE_URL = \"https://raw.githubusercontent.com/Ark-kun/pipelines/48cd62a5beb7ec32332711ea8aafc158ad8e12d2/samples/test/data_passing.pipeline.component.yaml\"\r\n\r\nconst preloadComponentReferences = async (\r\n  componentSpec: ComponentSpec,\r\n  componentMap?: Map<string, ComponentSpec>\r\n) => {\r\n  // This map is needed to improve efficiency and handle recursive components.\r\n  if (componentMap === undefined) {\r\n    componentMap = new Map<string, ComponentSpec>();\r\n  }\r\n  if (\"graph\" in componentSpec.implementation) {\r\n    for (const taskSpec of Object.values(\r\n      componentSpec.implementation.graph.tasks\r\n    )) {\r\n      const componentUrl = taskSpec.componentRef.url;\r\n      if (\r\n        taskSpec.componentRef.spec === undefined &&\r\n        componentUrl !== undefined\r\n      ) {\r\n        let taskComponentSpec = componentMap.get(componentUrl);\r\n        if (taskComponentSpec === undefined) {\r\n          taskComponentSpec = await downloadComponentDataWithCache(\r\n            componentUrl\r\n          );\r\n          componentMap.set(componentUrl, taskComponentSpec);\r\n        }\r\n        taskSpec.componentRef.spec = taskComponentSpec;\r\n        await preloadComponentReferences(taskComponentSpec, componentMap);\r\n      }\r\n    }\r\n  }\r\n  return componentSpec;\r\n};\r\n\r\nconst loadComponentFromUrl = async (\r\n  url: string,\r\n  preloadChildComponentSpecs = true\r\n) => {\r\n  let componentSpec = await downloadComponentDataWithCache(url);\r\n  if (preloadChildComponentSpecs) {\r\n    componentSpec = await preloadComponentReferences(componentSpec);\r\n  }\r\n  return componentSpec;\r\n};\r\n\r\nexport { loadComponentFromUrl, preloadComponentReferences, XGBOOST_PIPELINE_URL, PYTORCH_PIPELINE_URL, TFX_PIPELINE_URL };\r\n"],"sourceRoot":""}