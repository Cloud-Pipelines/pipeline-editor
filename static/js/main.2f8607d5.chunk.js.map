{"version":3,"sources":["DragNDrop/DebugScratch.tsx","DragNDrop/index.tsx","AppFooter.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx","componentStore.ts","componentSpec.ts","DragNDrop/samplePipelines.ts","DragNDrop/ArgumentsEditorDialog.tsx","DragNDrop/ComponentTaskNode.tsx","DragNDrop/GraphComponentSpecFlow.tsx","github.ts","cacheUtils.ts","DragNDrop/DraggableComponent.tsx","DragNDrop/ArgumentsEditor.tsx","appSettings.ts","compilers/GoogleCloudVertexAIPipelines/vertexPipelineSpec.ts","compilers/GoogleCloudVertexAIPipelines/vertexAiCompiler.ts","DragNDrop/Sidebar.tsx","DragNDrop/ComponentLibrary.tsx","DragNDrop/ComponentSearch.tsx","DragNDrop/GraphComponentExporter.tsx","DragNDrop/VertexAiExporter.tsx","DragNDrop/UserComponentLibrary.tsx","DragNDrop/AppSettingsDialog.tsx","DragNDrop/GoogleCloud.tsx","utils.ts","compilers/Argo/argoCompiler.ts","DragNDrop/KubeflowPipelinesSubmitter.tsx","DragNDrop/PipelineSubmitter.tsx","DragNDrop/GraphComponentLink.tsx","DragNDrop/SamplePipelineLibrary.tsx","DragNDrop/PipelineLibrary.tsx"],"names":["DATA_PASSING_PIPELINE_URL","GOOGLE_CLOUD_OPTIMIZER_PIPELINE_URL","DebugScratch","componentSpec","setComponentSpec","useState","message","setMessage","isDialogOpen","setIsDialogOpen","type","onClick","e","loadComponentFromUrl","then","a","fetch","headers","Headers","Authorization","response","text","responseText","open","aria-labelledby","aria-describedby","id","color","autoFocus","SAVED_COMPONENT_SPEC_KEY","loadComponentSpec","componentText","window","sessionStorage","getItem","loadedYaml","yaml","load","err","console","error","ComponentSpecAutoSaver","nodes","useStoreState","store","undefined","length","warn","augmentComponentSpec","componentSpecToYaml","setItem","startsWith","saveComponentSpec","isAppleOS","navigator","platform","EMPTY_GRAPH_COMPONENT_SPEC","implementation","graph","tasks","DnDFlow","getAppSettings","appSettings","useEffect","restoredComponentSpec","defaultPipelineUrl","defaultPipelineSpec","className","GraphComponentSpecFlow","deleteKeyCode","multiSelectionKeyCode","snapToGrid","snapGrid","gap","Sidebar","AppFooter","style","width","height","padding","textAlign","backgroundColor","display","Link","href","underline","target","rel","margin","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","DB_NAME","DIGEST_TO_DATA_DB_TABLE_NAME","DIGEST_TO_COMPONENT_SPEC_DB_TABLE_NAME","URL_TO_DIGEST_DB_TABLE_NAME","DIGEST_TO_CANONICAL_URL_DB_TABLE_NAME","FILE_STORE_DB_TABLE_NAME_PREFIX","calculateHashDigestHex","data","dataBytes","TextEncoder","encode","crypto","subtle","digest","hashBuffer","hashArray","Array","from","Uint8Array","hashHex","map","b","toString","padStart","join","storeComponentSpec","digestToComponentSpecDb","localForage","createInstance","name","storeName","digestToComponentNameDb","loadComponentAsRefFromText","componentString","TextDecoder","decode","componentBytes","loadedObj","Error","isValidComponentSpec","componentRefPlusData","componentRef","spec","storeComponentText","digestToComponentTextDb","storeComponentFromUrl","url","setUrlAsCanonical","urlToDigestDb","digestToDataDb","existingDigest","componentData","arrayBuffer","digestToCanonicalUrlDb","existingCanonicalUrl","debug","makeNameUniqueByAddingIndex","existingNames","finalName","index","has","writeComponentRefPlusDataToFile","listName","fileName","upgradeSingleComponentListDb","tableName","componentListDb","existingFile","currentTime","Date","fileEntry","creationTime","modificationTime","addComponentRefPlusDataToList","Set","keys","uniqueFileName","addComponentToListByUrl","defaultFileName","addComponentToListByText","writeComponentToFileListFromText","getAllComponentFilesFromList","componentFiles","Map","iterate","iterationNumber","set","getComponentFileFromList","deleteComponentFileFromList","removeItem","dump","lineWidth","componentListVersionKey","componentStoreSettingsDb","componentListTableName","listFormatVersion","includes","componentRefListsDb","componentRefList","emptyNameReplacement","add","fileNames","newDigest","newFileEntry","obj","isContainerImplementation","isGraphImplementation","preloadComponentReferences","componentMap","Object","values","taskSpec","componentUrl","taskComponentSpec","downloadComponentDataWithCache","preloadChildComponentSpecs","ArgumentsEditorDialog","closeEditor","setArguments","arguments","currentArguments","setCurrentArguments","onSubmit","preventDefault","position","background","border","borderRadius","ArgumentsEditor","componentArguments","setComponentArguments","inputHandlePosition","Position","Top","outputHandlePosition","Bottom","isComponentTaskNode","node","generateHandles","ioSpecs","handleType","idPrefix","inputsWithMissingArguments","handleComponents","numHandles","i","ioSpec","positionPercentString","String","left","top","ioTypeName","classNames","replace","push","generateLabelStyle","labelClasses","labelStyle","isConnectable","title","maxLabelWidthPx","maxWidth","ComponentTaskNode","isArgumentsEditorOpen","setIsArgumentsEditorOpen","label","taskId","inputsWithInvalidArguments","inputs","filter","inputSpec","optional","default","inputHandles","inputSpecs","generateInputHandles","outputHandles","outputs","concat","onDoubleClick","SDK_ANNOTATION_VALUE","taskIdToNodeId","inputNameToNodeId","outputNameToNodeId","nodeIdToTaskId","nodeIdToInputName","nodeIdToOutputName","includeSpecs","includePositions","getNodePositionAnnotation","JSON","stringify","x","__rf","y","nodeXPositionComparer","n1","n2","deltaX","deltaY","nodeYPositionComparer","inputNodes","sort","outputNodes","taskNodes","inputPositionMap","inputOrderMap","inputOrderComparer","Infinity","outputPositionMap","outputOrderMap","outputOrderComparer","taskPositionMap","taskOrderMap","taskOrderComparer","pairA","pairB","newAnnotations","annotations","NODE_LAYOUT_ANNOTATION_KEY","newInputSpec","outputSpec","newOutputSpec","graphSpec","newTasks","fromEntries","entries","newTaskSpec","rebuildComponentSpec","description","metadata","rest","nodeTypes","task","memo","children","reactFlowInstance","setReactFlowInstance","layoutAnnotation","decodedPosition","parse","args","setTaskArguments","edges","flatMap","inputName","argument","taskOutput","outputName","source","sourceHandle","targetHandle","arrowHeadType","ArrowHeadType","ArrowClosed","graphInput","outputEdges","outputValues","elements","replaceComponentSpec","newComponentSpec","replaceGraphSpec","newGraphSpec","taskArguments","setTaskArgument","oldTaskSpecArguments","newTaskSpecArguments","removeTaskArgument","setGraphOutputValue","outputValue","newGraphOutputValues","removeGraphOutputValue","addConnection","connection","targetTaskInputName","sourceTaskOutputName","taskOutputArgument","graphInputArgument","removeEdge","edge","removeNode","inputNameToRemove","newInputs","removeComponentInput","outputNameToRemove","newOutputs","removeComponentOutput","taskIdToRemove","removeTask","onConnect","params","onDragOver","event","dataTransfer","dropEffect","onDrop","droppedData","getData","droppedDataObject","nodeType","nodeData","dragOffsetX","dragOffsetY","dragStartOffsetData","dragStartOffset","offsetX","offsetY","project","clientX","clientY","nodePosition","positionAnnotations","mergedAnnotations","taskSpecWithAnnotation","getUniqueTaskName","getUniqueInputName","getUniqueOutputName","onEdgeUpdate","oldEdge","newConnection","onElementsRemove","elementsToRemove","element","isEdge","isNode","onLoad","_reactFlowInstance","SEARCH_CACHE_NAME","BLOB_CACHE_NAME","HASH_TO_CONTENT_DB_TABLE_NAME","HASH_TO_COMPONENT_NAME_DB_TABLE_NAME","URL_TO_HASH_DB_TABLE_NAME","HASH_TO_URL_DB_TABLE_NAME","URL_PROCESSING_VERSION_TABLE_NAME","BAD_HASHES_TABLE_NAME","getSingleGitHubCodeSearchPageWithCache","query","page","order","encodedQuery","encodeURIComponent","encodedSort","encodedOrder","searchUrl","httpGetWithCache","json","githubHtmlUrlToDownloadUrl","htmlUrl","searchComponentsOnGitHubToGetUrlsAndHashes","searchLocations","urlsAndHashes","queryParts","searchResults","items","item","html_url","hash","sha","Promise","resolve","setTimeout","blob","componentSpecObj","importComponentsFromGitHubSearch","urlsAndHashesIterator","urlToHashDb","hashToUrlDb","hashToContentDb","hashToComponentNameDb","urlProcessingVersionDb","badHashesDb","toLowerCase","badHashReason","downloadUrl","endsWith","cachedHash","urlVersion","Number","parseInt","errorMessage","isComponentFeedEntry","isComponentFeed","isArray","every","isComponentFeedEntryArray","notUndefined","calculateGitBlobSha1HashHex","dataString","gitDataString","gitDataBytes","importComponentsFromFeed","componentFeedUrl","componentFeedCandidateBlob","componentFeedCandidateText","componentFeedCandidateObject","componentFeed","all","components","entry","urlsHashesAndData","error_message","refreshComponentDb","componentSearchConfig","ComponentFeedUrls","GitHubSearchLocations","getAllComponentsAsRefs","hashToComponentRef","componentRefs","forEach","isComponentDbEmpty","searchComponentsByName","ref","urlOrRequest","cacheName","updateIfInCache","caches","cache","response2","reject","DraggableComponent","componentReference","props","draggable","onDragStart","setData","nativeEvent","effectAllowed","shrinkToWidth","borderSpacing","tableLayout","value","placeholder","typeSpec","argumentIsRequiredButMissing","typeSpecString","whiteSpace","overflow","textOverflow","verticalAlign","borderWidth","minWidth","required","pattern","onChange","disabled","COMPONENT_FEED_URLS_DEFAULT_VALUE","GITHUB_SEARCH_LOCATIONS_DEFAULT_VALUE","SettingBackedByLocalStorage","storageKey","defaultValue","_defaultValue","_storageKey","this","stringValue","localStorage","deserialize","valueString","serialize","StringSettingBackedByLocalStorage","StringArraySettingBackedByLocalStorage","AppSettingsBackedByLocalStorage","componentLibraryUrl","pipelineLibraryUrl","componentFeedUrls","gitHubSearchLocations","googleCloudOAuthClientId","getMutableAppSettings","mutableAppSettings","PrimitiveTypeEnum","TriggerStrategy","sanitizePipelineInfoName","pipelineContextName","typeSpecToVertexPrimitiveTypeEnum","vertex","INT","DOUBLE","STRING","typeSpecToVertexParameterSpec","stringToMlmdValue","constantString","primitiveType","intValue","doubleValue","parseFloat","MAKE_ARTIFACT_COMPONENT_ID","MAKE_ARTIFACT_EXECUTOR_ID","MAKE_ARTIFACT_INPUT_NAME","MAKE_ARTIFACT_OUTPUT_NAME","buildMakeArtifactTaskSpec","parameterArgumentSpec","taskInfo","parameters","cachingOptions","enableCache","makeArtifactComponentSpec","executorLabel","inputDefinitions","outputDefinitions","artifacts","artifactType","schemaTitle","makeArtifactExecutorSpec","container","image","command","buildVertexParameterArgumentSpec","taskArgument","runtimeValue","constantValue","componentInputParameter","taskOutputParameter","producerTask","outputParameterKey","buildVertexArtifactArgumentSpec","upstreamCannotBeArtifact","addMakeArtifactTaskAndGetArtifactArgumentSpec","result","componentInputArtifact","taskOutputArtifact","outputArtifactKey","assertDefined","TypeError","buildVertexComponentSpecFromContainerComponentSpec","inputsThatHaveParameterArguments","addExecutorAndGetId","containerSpec","resolvedCommandLine","inputsConsumedAsParameter","inputsConsumedAsArtifact","convertArg","arg","inputValue","inputPath","outputPath","if","cond","else","ifCond","ifThen","ifElse","condEvaluatesToTrue","isPresent","unresolvedArgs","envValues","env","key","resolvedArgArray","resolveCommandLine","vertexExecutorId","inputMap","buildVertexComponentSpecFromGraphComponentSpec","addComponentAndGetId","vertexTasks","taskStringToTaskId","addTaskAndGetId","namePrefix","serializedSpec","existingId","usedIds","makeArtifactExecutorId","makeArtifactComponentSpecCopy","makeArtifactComponentsId","makeArtifactTaskSpec","artifactArgumentSpec","vertexTaskSpec","buildVertexTaskSpecFromTaskSpec","inputNamesThatAreUsedBothAsParameterAndArtifact","inputNamesThatAreParametersButAreConsumedAsArtifacts","record","transform","dagOutputArtifactSpecs","artifactSelectors","producerSubtask","dag","buildVertexComponentSpecFromComponentSpec","graphInputsWithParameterArguments","vertexComponentSpec","vertexComponentId","vertexTaskParameterArguments","vertexTaskArtifactArguments","buildVertexPipelineSpecFromGraphComponentSpec","vertexExecutors","executorStringToExecutorId","vertexComponents","componentStringToComponentId","executor","component","pipelineArguments","pipelineComponentSpec","vertexPipelineSpec","pipelineInfo","sdkVersion","schemaVersion","deploymentSpec","executors","root","buildVertexPipelineJobFromGraphComponent","gcsOutputDirectory","pipelineSpec","inputParameterDefinitions","defaultInputValuePairs","allPipelineArguments","convertedPipelineArguments","pipelineJob","displayName","runtimeConfig","isSettingsDialogOpen","setIsSettingsDialogOpen","DebugScratchElement","NODE_ENV","require","fontWeight","samplePipelineLibraryUrl","input","output","isOpen","handleClose","DraggableComponentRow","SingleFolderVis","folder","paddingLeft","folders","componentFolder","ComponentLibraryVisFromStruct","componentLibraryStruct","loadComponentLibraryStruct","componentLibrary","ComponentLibraryVisFromUrl","setComponentLibraryStruct","loadedComponentLibrary","SearchPanel","setError","firstTime","setFirstTime","isLoaded","setIsLoaded","setQuery","setItems","results","componentElements","fetchData","gtag","GraphComponentExporter","includeComponentSpecs","graphComponent","componentTextBlob","Blob","downloadLink","createObjectURL","download","VertexAiExporter","vertexPipelineSpecText","vertexPipelineSpecTextBlob","vertexPipelineSpecTextBlobUrl","USER_COMPONENTS_LIST_NAME","UserComponentLibrary","setErrorMessage","setComponentFiles","contextMenuFileName","setContextMenuFileName","contextMenuAnchor","setContextMenuAnchor","isImportComponentDialogOpen","setIsImportComponentDialogOpen","refreshComponents","useCallback","acceptedFiles","file","reader","FileReader","onabort","onerror","onload","binaryStr","readAsArrayBuffer","onImportFromUrl","componentFileEntry","handleContextMenuDelete","useDropzone","accept","getRootProps","getInputProps","isDragActive","marginBottom","minHeight","onContextMenu","currentTarget","anchorEl","onClose","dense","ImportComponentFromUrlDialog","onCancel","initialValue","onImport","urlInputRef","useRef","fullWidth","current","inputRef","AppSettingsDialog","setComponentLibraryUrl","setPipelineLibraryUrl","setDefaultPipelineUrl","setComponentFeedUrls","setGitHubSearchLocations","setGoogleCloudOAuthClientId","variant","multiline","split","resetToDefault","LOCAL_STORAGE_GCS_OUTPUT_DIRECTORY_KEY","LOCAL_STORAGE_PROJECT_ID_KEY","LOCAL_STORAGE_REGION_KEY","LOCAL_STORAGE_PROJECT_IDS_KEY","VERTEX_AI_PIPELINES_REGIONS","authorizeGoogleCloudClient","clientId","scopes","immediate","gapi","auth","authorize","client_id","scope","authResult","receivedScopesString","receivedScopes","ensureGoogleCloudAuthorizesScopes","oauthToken","cloudresourcemanagerListProjects","client","request","path","aiplatformCreatePipelineJob","projectId","region","pipelineJobId","method","body","GoogleCloudSubmitter","projects","setProjects","setProject","setRegion","setGcsOutputDirectory","pipelineJobWebUrl","setPipelineJobWebUrl","compilationError","setCompilationError","vertexPipelineJob","setVertexPipelineJob","vertexPipelineJsonBlobUrl","setVertexPipelineJsonBlobUrl","labels","sdk","vertexPipelineJobJson","readyToSubmit","toISOString","substring","desiredPipelineJobId","pipelineJobName","slice","htmlFor","list","projectIds","projectInfo","IO_FILE_NAME","sanitizeParameterOrArtifactName","replaceAll","sanitizeID","sanitized1","MAKE_PARAMETER_TEMPLATE_ID","MAKE_PARAMETER_INPUT_NAME","MAKE_PARAMETER_OUTPUT_NAME","buildMakeParameterTaskSpec","artifactArgument","template","dependencies","makeParameterTemplate","CONTAINER_INPUTS_DIR","valueFrom","buildArgoContainerTemplateFromContainerComponentSpec","CONTAINER_OUTPUTS_DIR","buildArgoTemplateFromComponentSpec","addTemplateAndGetId","argoTasks","taskCopyForHash","addMakeParameterTaskAndGetParameterArgument","makeArtifactTemplateId","argoTask","buildArgoDagTaskFromTaskSpec","argoInputName","dagOutputArtifactSources","outputArgoName","upstreamTaskOutputArgoName","upstreamTaskArgoId","buildArgoDagTemplateFromGraphComponentSpec","argoTemplate","argoTemplateId","argoTaskParameterArguments","parameter","upstreamCannotBeParameter","argoGraphInputName","convertedParameterArgument","taskOutputArgoOutputName","taskOutputArgoTaskId","buildArgoParameterArgument","argoTaskArtifactArguments","artifact","raw","graphInputArgoName","buildArgoArtifactArgument","argoArgumentValues","upstreamArgoTaskIds","delimiter","buildArgoWorkflowFromGraphComponent","workflowSpec","argoTemplates","templateStringToTemplateId","templateCopyForHash","entrypoint","templates","buildArgoWorkflowSpecFromGraphComponentSpec","rootTemplate","inputParameterNames","inputArtifactsNames","pipelineArgumentsWithArgoNames","apiVersion","kind","generateName","LOCAL_STORAGE_ENDPOINT_KEY","LOCAL_STORAGE_AUTH_TOKEN_KEY","kfpSubmitPipelineRun","argoWorkflowSpec","endpoint","authToken","runName","kfpRun","pipeline_spec","workflow_manifest","apiUrl","access_token","generateKfpRunUrl","runId","KubeflowPipelinesSubmitter","argoWorkflow","setArgoWorkflow","argoWorkflowYamlBlobUrl","setArgoWorkflowYamlBlobUrl","submissionError","setSubmissionError","setEndpoint","setAuthToken","setPipelineRunId","setWorkflowResourceName","pipelineRunWebUrl","setPipelineRunWebUrl","argoWorkflowYaml","quotingType","newArgoWorkflowYamlBlobUrl","currentArgoWorkflowYamlBlobUrl","revokeObjectURL","run","runUrl","runtimeWorkflowManifestString","pipeline_runtime","runtimeWorkflowManifest","resourceName","PipelineSubmitter","setPipelineArguments","stringPipelineArguments","setStringPipelineArguments","newStringPipelineArguments","pair","GoogleCloud","GraphComponentLink","downloadFileName","linkText","linkRef","loadPipelineLibraryStruct","pipelineLibrary","SamplePipelineLibrary","setComponentRefs","pipelineUrls","loadedComponentRefs","marginLeft","USER_PIPELINES_LIST_NAME","removeSuffixes","s","suffixes","suffix","SavePipelineAsDialog","onPipelineSave","initialName","setFileName","isOverwriteDialogOpen","setIsOverwriteDialogOpen","handleSave","onSave","inputLabel","okButtonText","onOk","OkCancelDialog","cancelButtonText","Dialog","DialogTitle","DialogActions","Button","SaveAsDialog","nameInputRef","DialogContent","TextField","PipelineLibrary","pipelineFile","setPipelineFile","saveAsDialogIsOpen","setSaveAsDialogIsOpen","refreshPipelines","openPipelineFile","componentRefPlusData1","componentRef1","openSaveAsDialog","closeSaveAsDialog","handlePipelineSave","handleContextMenuOpen","fileInput","componentLink","files","click","textDecoration","Menu","MenuItem"],"mappings":"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","file":"static/js/main.2f8607d5.chunk.js","sourcesContent":["/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport {\r\n  Accordion,\r\n  AccordionSummary,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n} from \"@material-ui/core\";\r\nimport { ComponentSpec } from \"../componentSpec\";\r\nimport { useState } from \"react\";\r\nimport { loadComponentFromUrl } from \"./samplePipelines\";\r\n\r\nexport const DATA_PASSING_PIPELINE_URL =\r\n  \"https://raw.githubusercontent.com/Ark-kun/pipelines/b45c82e42588ee0a86b8875d1908d972275bfd2f/samples/test/data_passing.pipeline.component.yaml\";\r\nexport const GOOGLE_CLOUD_OPTIMIZER_PIPELINE_URL =\r\n  \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/84e782224ff79a0690e84e7d66c93cec5089e041/components/google-cloud/Optimizer/_samples/Optimization.pipeline.component.yaml\";\r\n\r\ninterface DebugScratchProps {\r\n  componentSpec?: ComponentSpec;\r\n  setComponentSpec?: (componentSpec: ComponentSpec) => void;\r\n}\r\n\r\nconst DebugScratch = ({\r\n  componentSpec,\r\n  setComponentSpec,\r\n}: DebugScratchProps) => {\r\n  const [message, setMessage] = useState(\"\");\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        type=\"button\"\r\n        onClick={(e) => {\r\n          loadComponentFromUrl(DATA_PASSING_PIPELINE_URL).then(\r\n            setComponentSpec\r\n          );\r\n        }}\r\n      >\r\n        Load Data Passing pipeline\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        onClick={(e) => {\r\n          loadComponentFromUrl(GOOGLE_CLOUD_OPTIMIZER_PIPELINE_URL).then(\r\n            setComponentSpec\r\n          );\r\n        }}\r\n      >\r\n        Load Google Cloud Optimizer pipeline\r\n      </button>\r\n      <button\r\n        onClick={async (e) => {\r\n          // Error: net::ERR_CERT_AUTHORITY_INVALID\r\n          const response = await fetch(\"https://IP/api/v1/pods/\", {\r\n            headers: new Headers({\r\n              Authorization: \"Bearer \",\r\n              \"Content-Type\": \"application/json; charset=utf-8\",\r\n            }),\r\n          });\r\n          const responseText = await response.text();\r\n          setMessage(responseText);\r\n        }}\r\n      >\r\n        List K8s cluster objects\r\n      </button>\r\n      <span>{message}</span>\r\n      <Accordion>\r\n        <AccordionSummary>Summary</AccordionSummary>\r\n      </Accordion>\r\n      <button\r\n        onClick={(e) => {\r\n          setIsDialogOpen(true);\r\n        }}\r\n      >\r\n        Show dialog\r\n      </button>\r\n      <Dialog\r\n        //open={open}\r\n        open={isDialogOpen}\r\n        //onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Do something?\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            foo bar\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button color=\"primary\" onClick={(e) => setIsDialogOpen(false)}>\r\n            Disagree\r\n          </Button>\r\n          <Button\r\n            color=\"primary\"\r\n            onClick={(e) => setIsDialogOpen(false)}\r\n            autoFocus\r\n          >\r\n            Agree\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DebugScratch;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport {\r\n  ReactFlowProvider,\r\n  Controls,\r\n  Background,\r\n  MiniMap,\r\n  Node,\r\n  useStoreState,\r\n} from 'react-flow-renderer';\r\nimport yaml from \"js-yaml\";\r\n\r\nimport { ComponentSpec } from '../componentSpec';\r\nimport { componentSpecToYaml } from '../componentStore';\r\nimport GraphComponentSpecFlow, { augmentComponentSpec } from './GraphComponentSpecFlow';\r\nimport Sidebar from './Sidebar';\r\nimport { getAppSettings } from '../appSettings';\r\nimport { loadComponentFromUrl } from \"./samplePipelines\";\r\n\r\nimport './dnd.css';\r\n\r\nconst GRID_SIZE = 10;\r\nconst SAVED_COMPONENT_SPEC_KEY = \"autosaved.component.yaml\";\r\n\r\nconst saveComponentSpec = (componentSpec: ComponentSpec, nodes?: Node[]) => {\r\n  try {\r\n    if (nodes !== undefined) {\r\n      if (nodes.length === 0) {\r\n        console.warn(\"saveComponentSpec: nodes.length === 0\");\r\n      }\r\n      componentSpec = augmentComponentSpec(componentSpec, nodes, true, true);\r\n    }\r\n    const componentText = componentSpecToYaml(componentSpec);\r\n    window.sessionStorage.setItem(SAVED_COMPONENT_SPEC_KEY, componentText);\r\n  } catch(err: any) {\r\n    // TODO: Find a way to avoid the React/Redux race conditions causing this error.\r\n    if (err?.message?.startsWith(\"The nodes array does not\") !== true) {\r\n      console.error(err);\r\n    }\r\n  }\r\n}\r\n\r\nconst loadComponentSpec = () => {\r\n  try {\r\n    const componentText = window.sessionStorage.getItem(SAVED_COMPONENT_SPEC_KEY);\r\n    if (componentText !== null) {\r\n      const loadedYaml = yaml.load(componentText);\r\n      if (loadedYaml !== null && typeof loadedYaml === \"object\") {\r\n        //TODO: Validate that the spec is valid\r\n        const savedComponentSpec = loadedYaml as ComponentSpec;\r\n        return savedComponentSpec;\r\n      }\r\n    }\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n  return undefined;\r\n}\r\n\r\n// Auto-saver is extracted to its own child component since useStoreState in the parent causes infinite re-rendering\r\n// (each render of GraphComponentSpecFlow seems to change the Redux store).\r\n// This component seems to be triggered for every node movement, so even pure layout changes are saved.\r\nconst ComponentSpecAutoSaver = ({\r\n  componentSpec,\r\n}: {\r\n  componentSpec: ComponentSpec;\r\n}) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n  // Fixing issue where a React error would cause all node positions to be recorded as undefined (`!<tag:yaml.org,2002:js/undefined>`)\r\n  // nodes should never be undefined in normal situation.\r\n  if (nodes !== undefined && nodes.length > 0) {\r\n    saveComponentSpec(componentSpec, nodes);\r\n  }\r\n  return null;\r\n};\r\n\r\nconst isAppleOS = () =>\r\n  window.navigator.platform.startsWith(\"Mac\") ||\r\n  window.navigator.platform.startsWith(\"iPhone\") ||\r\n  window.navigator.platform.startsWith(\"iPad\") ||\r\n  window.navigator.platform.startsWith(\"iPod\");\r\n\r\nconst EMPTY_GRAPH_COMPONENT_SPEC: ComponentSpec = {\r\n  implementation: {\r\n    graph: {\r\n      tasks: {},\r\n    },\r\n  },\r\n};\r\n\r\nconst DnDFlow = () => {\r\n  const [componentSpec, setComponentSpec] = useState<ComponentSpec | undefined>();\r\n  const [appSettings] = useState(getAppSettings());\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const restoredComponentSpec = loadComponentSpec();\r\n      if (restoredComponentSpec !== undefined) {\r\n        setComponentSpec(restoredComponentSpec);\r\n        return;\r\n      }\r\n      const defaultPipelineUrl = appSettings.defaultPipelineUrl;\r\n      try {\r\n        const defaultPipelineSpec = await loadComponentFromUrl(\r\n          defaultPipelineUrl\r\n        );\r\n        setComponentSpec(defaultPipelineSpec);\r\n      } catch (err) {\r\n        console.error(\r\n          `Failed to load the default pipeline from ${defaultPipelineUrl}`\r\n        );\r\n        console.error(err);\r\n        setComponentSpec(EMPTY_GRAPH_COMPONENT_SPEC);\r\n      }\r\n    })();\r\n  }, [appSettings.defaultPipelineUrl]);\r\n\r\n  if (componentSpec === undefined) {\r\n    return (<></>);\r\n  }\r\n\r\n  return (\r\n    <div className=\"dndflow\">\r\n      <ReactFlowProvider>\r\n        <div className=\"reactflow-wrapper\">\r\n          <GraphComponentSpecFlow\r\n            componentSpec={componentSpec}\r\n            setComponentSpec={setComponentSpec}\r\n            deleteKeyCode={isAppleOS() ? \"Backspace\" : \"Delete\"}\r\n            multiSelectionKeyCode={isAppleOS() ? \"Command\" : \"Control\"}\r\n            snapToGrid={true}\r\n            snapGrid={[GRID_SIZE, GRID_SIZE]}\r\n          >\r\n            <MiniMap/>\r\n            <Controls />\r\n            <Background gap={GRID_SIZE}/>\r\n          </GraphComponentSpecFlow>\r\n        </div>\r\n        <Sidebar\r\n          componentSpec={componentSpec}\r\n          setComponentSpec={setComponentSpec}\r\n          appSettings={appSettings}\r\n        />\r\n        <ComponentSpecAutoSaver componentSpec={componentSpec}/>\r\n      </ReactFlowProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DnDFlow;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport { Link } from \"@material-ui/core\";\r\n\r\nfunction AppFooter() {\r\n  return (\r\n    <footer\r\n      className=\"footer\"\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"30px\",\r\n        padding: \"4px\",\r\n        textAlign: \"center\",\r\n        backgroundColor: \"ghostwhite\",\r\n      }}\r\n    >\r\n      <div style={{ display: \"inline-block\" }}>\r\n        <Link\r\n          href=\"https://cloud-pipelines.net/\"\r\n          underline=\"hover\"\r\n          target=\"_blank\"\r\n          rel=\"noopener\"\r\n          style={{ margin: \"6px\" }}\r\n        >\r\n          About\r\n        </Link>\r\n        <Link\r\n          href=\"https://github.com/Cloud-Pipelines/pipeline-editor/issues\"\r\n          underline=\"hover\"\r\n          target=\"_blank\"\r\n          rel=\"noopener\"\r\n          style={{ margin: \"6px\" }}\r\n        >\r\n          Give feedback\r\n        </Link>\r\n        <Link\r\n          href=\"https://cloud-pipelines.net/privacy_policy\"\r\n          underline=\"hover\"\r\n          target=\"_blank\"\r\n          rel=\"noopener\"\r\n          style={{ margin: \"6px\" }}\r\n        >\r\n          Privacy policy\r\n        </Link>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default AppFooter;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport './App.css';\r\nimport DnDFlow from './DragNDrop/index';\r\nimport AppFooter from \"./AppFooter\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" style={{ width: \"100%\", height: \"calc(100% - 30px)\" }}>\r\n      <DnDFlow />\r\n      <AppFooter />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n//import { migrateUserData } from \"./userDataMigration\"\r\n\r\n// Migration is now disabled.\r\n// After 2 months of auto-migration, the redirect from cloud-pipelines.github.io\r\n// to cloud-pipelines.net was changed to hard redirect.\r\n// Accessing the data stored for cloud-pipelines.github.io is now impossible.\r\n// try {\r\n//   migrateUserData();\r\n// } catch (err) {\r\n//   console.error(err);\r\n// }\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport yaml from \"js-yaml\";\r\nimport localForage from \"localforage\";\r\n\r\nimport {\r\n  ComponentSpec,\r\n  ComponentReference,\r\n  isValidComponentSpec,\r\n} from \"./componentSpec\";\r\n\r\n// IndexedDB: DB and table names\r\nconst DB_NAME = \"components\";\r\nconst DIGEST_TO_DATA_DB_TABLE_NAME = \"digest_to_component_data\";\r\nconst DIGEST_TO_COMPONENT_SPEC_DB_TABLE_NAME = \"digest_to_component_spec\";\r\nconst DIGEST_TO_COMPONENT_NAME_DB_TABLE_NAME = \"digest_to_component_name\";\r\nconst URL_TO_DIGEST_DB_TABLE_NAME = \"url_to_digest\";\r\nconst DIGEST_TO_CANONICAL_URL_DB_TABLE_NAME = \"digest_to_canonical_url\";\r\nconst COMPONENT_REF_LISTS_DB_TABLE_NAME = \"component_ref_lists\";\r\nconst COMPONENT_STORE_SETTINGS_DB_TABLE_NAME = \"component_store_settings\";\r\nconst FILE_STORE_DB_TABLE_NAME_PREFIX = \"file_store_\";\r\n\r\nexport interface ComponentReferenceWithSpec extends ComponentReference {\r\n  spec: ComponentSpec;\r\n  digest: string;\r\n}\r\n\r\nexport interface ComponentReferenceWithSpecPlusData {\r\n  componentRef: ComponentReferenceWithSpec;\r\n  data: ArrayBuffer;\r\n}\r\n\r\nconst calculateHashDigestHex = async (data: string | ArrayBuffer) => {\r\n  const dataBytes =\r\n    typeof data === \"string\" ? new TextEncoder().encode(data) : data;\r\n  const hashBuffer = await crypto.subtle.digest(\"SHA-256\", dataBytes);\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n  const hashHex = hashArray\r\n    .map((b) => b.toString(16).padStart(2, \"0\"))\r\n    .join(\"\");\r\n  return hashHex;\r\n};\r\n\r\nconst storeComponentSpec = async (\r\n  digest: string,\r\n  componentSpec: ComponentSpec\r\n) => {\r\n  const digestToComponentSpecDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: DIGEST_TO_COMPONENT_SPEC_DB_TABLE_NAME,\r\n  });\r\n  const digestToComponentNameDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: DIGEST_TO_COMPONENT_NAME_DB_TABLE_NAME,\r\n  });\r\n  await digestToComponentSpecDb.setItem(digest, componentSpec);\r\n  if (componentSpec.name !== undefined) {\r\n    await digestToComponentNameDb.setItem(digest, componentSpec.name);\r\n  }\r\n};\r\n\r\nexport const loadComponentAsRefFromText = async (\r\n  componentText: string | ArrayBuffer\r\n) => {\r\n  const componentString =\r\n    typeof componentText === \"string\"\r\n      ? componentText\r\n      : new TextDecoder().decode(componentText);\r\n  const componentBytes =\r\n    typeof componentText === \"string\"\r\n      ? new TextEncoder().encode(componentText)\r\n      : componentText;\r\n\r\n  const loadedObj = yaml.load(componentString);\r\n  if (typeof loadedObj !== \"object\" || loadedObj === null) {\r\n    throw Error(`componentText is not a YAML-encoded object: ${loadedObj}`);\r\n  }\r\n  if (!isValidComponentSpec(loadedObj)) {\r\n    throw Error(\r\n      `componentText does not encode a valid pipeline component: ${loadedObj}`\r\n    );\r\n  }\r\n  const componentSpec: ComponentSpec = loadedObj;\r\n\r\n  const digest = await calculateHashDigestHex(componentBytes);\r\n  const componentRef: ComponentReferenceWithSpec = {\r\n    spec: componentSpec,\r\n    digest: digest,\r\n  };\r\n  const componentRefPlusData: ComponentReferenceWithSpecPlusData = {\r\n    componentRef: componentRef,\r\n    data: componentBytes,\r\n  };\r\n  return componentRefPlusData;\r\n};\r\n\r\nexport const loadComponentAsRefFromUrl = async (url: string) => {\r\n  const response = await fetch(url);\r\n  const componentData = await response.arrayBuffer();\r\n  let componentRefPlusData = await loadComponentAsRefFromText(componentData);\r\n  componentRefPlusData.componentRef.url = url;\r\n  return componentRefPlusData;\r\n};\r\n\r\nexport const storeComponentText = async (\r\n  componentText: string | ArrayBuffer\r\n) => {\r\n  const componentBytes =\r\n    typeof componentText === \"string\"\r\n      ? new TextEncoder().encode(componentText)\r\n      : componentText;\r\n  const componentRefPlusData = await loadComponentAsRefFromText(componentText);\r\n  const digestToComponentTextDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: DIGEST_TO_DATA_DB_TABLE_NAME,\r\n  });\r\n  const componentRef = componentRefPlusData.componentRef;\r\n  await digestToComponentTextDb.setItem(\r\n    componentRefPlusData.componentRef.digest,\r\n    componentBytes\r\n  );\r\n  await storeComponentSpec(componentRef.digest, componentRef.spec);\r\n\r\n  return componentRefPlusData;\r\n};\r\n\r\nexport const getAllComponentsAsRefs = async () => {\r\n  const digestToComponentSpecDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: DIGEST_TO_COMPONENT_SPEC_DB_TABLE_NAME,\r\n  });\r\n\r\n  // TODO: Rewrite as async generator\r\n  let digestToComponentRef = new Map<string, ComponentReferenceWithSpec>();\r\n  await digestToComponentSpecDb.iterate<ComponentSpec, void>(\r\n    (componentSpec, digest, iterationNumber) => {\r\n      const componentRef: ComponentReferenceWithSpec = {\r\n        spec: componentSpec,\r\n        digest: digest,\r\n      };\r\n      digestToComponentRef.set(digest, componentRef);\r\n    }\r\n  );\r\n  await addCanonicalUrlsToComponentReferences(digestToComponentRef);\r\n\r\n  const componentRefs = Array.from(digestToComponentRef.values());\r\n  return componentRefs;\r\n};\r\n\r\nconst addCanonicalUrlsToComponentReferences = async (\r\n  digestToComponentRef: Map<string, ComponentReference>\r\n) => {\r\n  const digestToCanonicalUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: DIGEST_TO_CANONICAL_URL_DB_TABLE_NAME,\r\n  });\r\n  await digestToCanonicalUrlDb.iterate<string, void>(\r\n    (url, digest, iterationNumber) => {\r\n      let componentRef = digestToComponentRef.get(digest);\r\n      if (componentRef === undefined) {\r\n        console.error(\r\n          `Component db corrupted: Component with url ${url} and digest ${digest} has no content in the DB.`\r\n        );\r\n      } else {\r\n        componentRef.url = url;\r\n      }\r\n    }\r\n  );\r\n};\r\n\r\nexport const searchComponentsByName = async (name: string) => {\r\n  const componentRefs = await getAllComponentsAsRefs();\r\n  return componentRefs.filter(\r\n    (ref) => ref.spec.name?.toLowerCase().includes(name.toLowerCase()) ?? false\r\n  );\r\n};\r\n\r\nexport const storeComponentFromUrl = async (\r\n  url: string,\r\n  setUrlAsCanonical = false\r\n) => {\r\n  const urlToDigestDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_TO_DIGEST_DB_TABLE_NAME,\r\n  });\r\n  const digestToComponentSpecDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: DIGEST_TO_COMPONENT_SPEC_DB_TABLE_NAME,\r\n  });\r\n  const digestToDataDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: DIGEST_TO_DATA_DB_TABLE_NAME,\r\n  });\r\n\r\n  const existingDigest = await urlToDigestDb.getItem<string>(url);\r\n  if (existingDigest !== null) {\r\n    const componentSpec = await digestToComponentSpecDb.getItem<ComponentSpec>(\r\n      existingDigest\r\n    );\r\n    const componentData = await digestToDataDb.getItem<ArrayBuffer>(\r\n      existingDigest\r\n    );\r\n    if (componentSpec !== null && componentData !== null) {\r\n      const componentRef: ComponentReferenceWithSpec = {\r\n        url: url,\r\n        digest: existingDigest,\r\n        spec: componentSpec,\r\n      };\r\n      const componentRefPlusData: ComponentReferenceWithSpecPlusData = {\r\n        componentRef: componentRef,\r\n        data: componentData,\r\n      };\r\n      return componentRefPlusData;\r\n    } else {\r\n      console.error(\r\n        `Component db is corrupted: Component with url ${url} was added before with digest ${existingDigest} but now has no content in the DB.`\r\n      );\r\n    }\r\n  }\r\n\r\n  const response = await fetch(url);\r\n  const componentData = await response.arrayBuffer();\r\n  let componentRefPlusData = await storeComponentText(componentData);\r\n  let componentRef = componentRefPlusData.componentRef;\r\n  componentRef.url = url;\r\n  const digest = componentRef.digest;\r\n  if (digest === undefined) {\r\n    console.error(\r\n      `Cannot happen: storeComponentText has returned componentReference with digest === undefined.`\r\n    );\r\n    return componentRefPlusData;\r\n  }\r\n  if (existingDigest !== null && digest !== existingDigest) {\r\n    console.error(\r\n      `Component db is corrupted: Component with url ${url} previously had digest ${existingDigest} but now has digest ${digest}.`\r\n    );\r\n  }\r\n  const digestToCanonicalUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: DIGEST_TO_CANONICAL_URL_DB_TABLE_NAME,\r\n  });\r\n  const existingCanonicalUrl = await digestToCanonicalUrlDb.getItem<string>(\r\n    digest\r\n  );\r\n  if (existingCanonicalUrl === null) {\r\n    await digestToCanonicalUrlDb.setItem(digest, url);\r\n  } else {\r\n    if (url !== existingCanonicalUrl) {\r\n      console.debug(\r\n        `The component with digest \"${digest}\" is being loaded from \"${url}\", but was previously loaded from \"${existingCanonicalUrl}\".` +\r\n          (setUrlAsCanonical ? \" Changing the canonical url.\" : \"\")\r\n      );\r\n      if (setUrlAsCanonical) {\r\n        await digestToCanonicalUrlDb.setItem(digest, url);\r\n      }\r\n    }\r\n  }\r\n  // Updating the urlToDigestDb last, because it's used to check for cached entries.\r\n  // So we need to be sure that everything has been updated correctly.\r\n  await urlToDigestDb.setItem(url, digest);\r\n  return componentRefPlusData;\r\n};\r\n\r\ninterface ComponentFileEntryV2 {\r\n  componentRef: ComponentReferenceWithSpec;\r\n}\r\n\r\ninterface FileEntry {\r\n  name: string;\r\n  creationTime: Date;\r\n  modificationTime: Date;\r\n  data: ArrayBuffer;\r\n}\r\n\r\ninterface ComponentFileEntryV3\r\n  extends FileEntry,\r\n    ComponentReferenceWithSpecPlusData {}\r\n\r\nexport type ComponentFileEntry = ComponentFileEntryV3;\r\n\r\nconst makeNameUniqueByAddingIndex = (\r\n  name: string,\r\n  existingNames: Set<string>\r\n): string => {\r\n  let finalName = name;\r\n  let index = 1;\r\n  while (existingNames.has(finalName)) {\r\n    index++;\r\n    finalName = name + \" \" + index.toString();\r\n  }\r\n  return finalName;\r\n};\r\n\r\nconst writeComponentRefPlusDataToFile = async (\r\n  listName: string,\r\n  fileName: string,\r\n  componentRefPlusData: ComponentReferenceWithSpecPlusData\r\n) => {\r\n  await upgradeSingleComponentListDb(listName);\r\n  const tableName = FILE_STORE_DB_TABLE_NAME_PREFIX + listName;\r\n  const componentListDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: tableName,\r\n  });\r\n  const existingFile = await componentListDb.getItem<ComponentFileEntry>(\r\n    fileName\r\n  );\r\n  const currentTime = new Date();\r\n  let fileEntry: ComponentFileEntry;\r\n  if (existingFile === null) {\r\n    fileEntry = {\r\n      componentRef: componentRefPlusData.componentRef,\r\n      name: fileName,\r\n      creationTime: currentTime,\r\n      modificationTime: currentTime,\r\n      data: componentRefPlusData.data,\r\n    };\r\n  } else {\r\n    fileEntry = {\r\n      ...existingFile,\r\n      name: fileName,\r\n      modificationTime: currentTime,\r\n      data: componentRefPlusData.data,\r\n      componentRef: componentRefPlusData.componentRef,\r\n    };\r\n  }\r\n  await componentListDb.setItem(fileName, fileEntry);\r\n  return fileEntry;\r\n};\r\n\r\nconst addComponentRefPlusDataToList = async (\r\n  listName: string,\r\n  componentRefPlusData: ComponentReferenceWithSpecPlusData,\r\n  fileName: string = \"Component\"\r\n) => {\r\n  await upgradeSingleComponentListDb(listName);\r\n  const tableName = FILE_STORE_DB_TABLE_NAME_PREFIX + listName;\r\n  const componentListDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: tableName,\r\n  });\r\n  const existingNames = new Set<string>(await componentListDb.keys());\r\n  const uniqueFileName = makeNameUniqueByAddingIndex(fileName, existingNames);\r\n  return writeComponentRefPlusDataToFile(\r\n    listName,\r\n    uniqueFileName,\r\n    componentRefPlusData\r\n  );\r\n};\r\n\r\nexport const addComponentToListByUrl = async (\r\n  listName: string,\r\n  url: string,\r\n  defaultFileName: string = \"Component\"\r\n) => {\r\n  const componentRefPlusData = await storeComponentFromUrl(url);\r\n  return addComponentRefPlusDataToList(\r\n    listName,\r\n    componentRefPlusData,\r\n    componentRefPlusData.componentRef.spec.name ?? defaultFileName\r\n  );\r\n};\r\n\r\nexport const addComponentToListByText = async (\r\n  listName: string,\r\n  componentText: string | ArrayBuffer,\r\n  fileName?: string,\r\n  defaultFileName: string = \"Component\"\r\n) => {\r\n  const componentRefPlusData = await storeComponentText(componentText);\r\n  return addComponentRefPlusDataToList(\r\n    listName,\r\n    componentRefPlusData,\r\n    fileName ?? componentRefPlusData.componentRef.spec.name ?? defaultFileName\r\n  );\r\n};\r\n\r\nexport const writeComponentToFileListFromText = async (\r\n  listName: string,\r\n  fileName: string,\r\n  componentText: string | ArrayBuffer\r\n) => {\r\n  const componentRefPlusData = await storeComponentText(componentText);\r\n  return writeComponentRefPlusDataToFile(\r\n    listName,\r\n    fileName,\r\n    componentRefPlusData\r\n  );\r\n};\r\n\r\nexport const getAllComponentsFromList = async (listName: string) => {\r\n  await upgradeSingleComponentListDb(listName);\r\n  const tableName = FILE_STORE_DB_TABLE_NAME_PREFIX + listName;\r\n  const componentListDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: tableName,\r\n  });\r\n  let componentRefs: ComponentReferenceWithSpec[] = [];\r\n  await componentListDb.iterate<ComponentFileEntry, void>(\r\n    (fileEntry, fileName, iterationNumber) => {\r\n      componentRefs.push(fileEntry.componentRef);\r\n    }\r\n  );\r\n  return componentRefs;\r\n};\r\n\r\nexport const getAllComponentFilesFromList = async (listName: string) => {\r\n  await upgradeSingleComponentListDb(listName);\r\n  const tableName = FILE_STORE_DB_TABLE_NAME_PREFIX + listName;\r\n  const componentListDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: tableName,\r\n  });\r\n  let componentFiles = new Map<string, ComponentFileEntry>();\r\n  await componentListDb.iterate<ComponentFileEntry, void>(\r\n    (fileEntry, fileName, iterationNumber) => {\r\n      componentFiles.set(fileName, fileEntry);\r\n    }\r\n  );\r\n  return componentFiles;\r\n};\r\n\r\nexport const getComponentFileFromList = async (\r\n  listName: string,\r\n  fileName: string\r\n) => {\r\n  await upgradeSingleComponentListDb(listName);\r\n  const tableName = FILE_STORE_DB_TABLE_NAME_PREFIX + listName;\r\n  const componentListDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: tableName,\r\n  });\r\n  return componentListDb.getItem<ComponentFileEntry>(fileName);\r\n};\r\n\r\nexport const deleteComponentFileFromList = async (\r\n  listName: string,\r\n  fileName: string\r\n) => {\r\n  await upgradeSingleComponentListDb(listName);\r\n  const tableName = FILE_STORE_DB_TABLE_NAME_PREFIX + listName;\r\n  const componentListDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: tableName,\r\n  });\r\n  return componentListDb.removeItem(fileName);\r\n};\r\n\r\nexport const unsafeWriteFilesToList = async (listName: string, files: ComponentFileEntry[]) => {\r\n  await upgradeSingleComponentListDb(listName);\r\n  const tableName = FILE_STORE_DB_TABLE_NAME_PREFIX + listName;\r\n  const componentListDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: tableName,\r\n  });\r\n  for (const file of files) {\r\n    await componentListDb.setItem(file.name, file);\r\n  }\r\n};\r\n\r\nexport const componentSpecToYaml = (componentSpec: ComponentSpec) => {\r\n  return yaml.dump(componentSpec, { lineWidth: 10000 });\r\n};\r\n\r\n// TODO: Remove the upgrade code in several weeks.\r\nconst upgradeSingleComponentListDb = async (listName: string) => {\r\n  const componentListVersionKey = \"component_list_format_version_\" + listName;\r\n  const componentStoreSettingsDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: COMPONENT_STORE_SETTINGS_DB_TABLE_NAME,\r\n  });\r\n  const componentListTableName = FILE_STORE_DB_TABLE_NAME_PREFIX + listName;\r\n  const componentListDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: componentListTableName,\r\n  });\r\n  let listFormatVersion =\r\n    (await componentStoreSettingsDb.getItem<number>(componentListVersionKey)) ??\r\n    1;\r\n  if (![1, 2, 3].includes(listFormatVersion)) {\r\n    throw Error(\r\n      `upgradeComponentListDb: Unknown component list version \"${listFormatVersion}\" for the list ${listName}`\r\n    );\r\n  }\r\n  if (listFormatVersion === 1) {\r\n    console.log(`componentStore: Upgrading the component list DB ${listName}`);\r\n    const componentRefListsDb = localForage.createInstance({\r\n      name: DB_NAME,\r\n      storeName: COMPONENT_REF_LISTS_DB_TABLE_NAME,\r\n    });\r\n    const componentRefList: ComponentReferenceWithSpec[] =\r\n      (await componentRefListsDb.getItem(listName)) ?? [];\r\n\r\n    let existingNames = new Set<string>();\r\n    const emptyNameReplacement =\r\n      listName === \"user_pipelines\" ? \"Pipeline\" : \"Component\";\r\n    for (const componentRef of componentRefList) {\r\n      const fileName = componentRef.spec.name ?? emptyNameReplacement;\r\n      const uniqueFileName = makeNameUniqueByAddingIndex(\r\n        fileName,\r\n        existingNames\r\n      );\r\n      const fileEntry: ComponentFileEntryV2 = {\r\n        componentRef: componentRef,\r\n      };\r\n      await componentListDb.setItem(uniqueFileName, fileEntry);\r\n      existingNames.add(uniqueFileName);\r\n    }\r\n    await componentStoreSettingsDb.setItem(componentListVersionKey, 2);\r\n    listFormatVersion = 2;\r\n    console.log(\r\n      `componentStore: Upgraded the component list DB ${listName} to version ${listFormatVersion}`\r\n    );\r\n  }\r\n  if (listFormatVersion === 2) {\r\n    const digestToDataDb = localForage.createInstance({\r\n      name: DB_NAME,\r\n      storeName: DIGEST_TO_DATA_DB_TABLE_NAME,\r\n    });\r\n    const fileNames = await componentListDb.keys();\r\n    for (const fileName of fileNames) {\r\n      const fileEntry = await componentListDb.getItem<ComponentFileEntryV2>(\r\n        fileName\r\n      );\r\n      if (fileEntry === null) {\r\n        throw Error(`File \"${fileName}\" has disappeared during upgrade`);\r\n      }\r\n      let componentRef = fileEntry.componentRef;\r\n      let data = await digestToDataDb.getItem<ArrayBuffer>(\r\n        fileEntry.componentRef.digest\r\n      );\r\n      if (data === null) {\r\n        console.error(\r\n          `Db is corrupted: Could not find data for file \"${fileName}\" with digest ${fileEntry.componentRef.digest}.`\r\n        );\r\n        const componentText = componentSpecToYaml(fileEntry.componentRef.spec);\r\n        data = new TextEncoder().encode(componentText);\r\n        const newDigest = await calculateHashDigestHex(data);\r\n        componentRef.digest = newDigest;\r\n        console.warn(\r\n          `The component \"${fileName}\" was re-serialized. Old digest: ${fileEntry.componentRef.digest}. New digest ${newDigest}.`\r\n        );\r\n        // This case should not happen. Let's throw error for now.\r\n        throw Error(\r\n          `Db is corrupted: Could not find data for file \"${fileName}\" with digest ${fileEntry.componentRef.digest}.`\r\n        );\r\n      }\r\n      const currentTime = new Date();\r\n      const newFileEntry: ComponentFileEntryV3 = {\r\n        name: fileName,\r\n        creationTime: currentTime,\r\n        modificationTime: currentTime,\r\n        data: data,\r\n        componentRef: componentRef,\r\n      };\r\n      await componentListDb.setItem(fileName, newFileEntry);\r\n    }\r\n    listFormatVersion = 3;\r\n    await componentStoreSettingsDb.setItem(\r\n      componentListVersionKey,\r\n      listFormatVersion\r\n    );\r\n    console.log(\r\n      `componentStore: Upgraded the component list DB ${listName} to version ${listFormatVersion}`\r\n    );\r\n  }\r\n};\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nexport type MySchema = ComponentSpec;\r\nexport type TypeSpecType =\r\n  | string\r\n  | {\r\n      [k: string]: TypeSpecType;\r\n    };\r\nexport interface InputOutputSpec {\r\n  name: string;\r\n  type?: TypeSpecType;\r\n  description?: string;\r\n  annotations?: {\r\n    [k: string]: unknown;\r\n  };\r\n}\r\n/**\r\n * Describes the component input specification\r\n */\r\nexport interface InputSpec extends InputOutputSpec {\r\n  name: string;\r\n  type?: TypeSpecType;\r\n  description?: string;\r\n  default?: string;\r\n  optional?: boolean;\r\n  annotations?: {\r\n    [k: string]: unknown;\r\n  };\r\n}\r\n/**\r\n * Describes the component output specification\r\n */\r\nexport interface OutputSpec extends InputOutputSpec {\r\n  name: string;\r\n  type?: TypeSpecType;\r\n  description?: string;\r\n  annotations?: {\r\n    [k: string]: unknown;\r\n  };\r\n}\r\n/**\r\n * Represents the command-line argument placeholder that will be replaced at run-time by the input argument value.\r\n */\r\nexport interface InputValuePlaceholder {\r\n  /**\r\n   * Name of the input.\r\n   */\r\n  inputValue: string;\r\n}\r\n/**\r\n * Represents the command-line argument placeholder that will be replaced at run-time by a local file path pointing to a file containing the input argument value.\r\n */\r\nexport interface InputPathPlaceholder {\r\n  /**\r\n   * Name of the input.\r\n   */\r\n  inputPath: string;\r\n}\r\n/**\r\n * Represents the command-line argument placeholder that will be replaced at run-time by a local file path pointing to a file where the program should write its output data.\r\n */\r\nexport interface OutputPathPlaceholder {\r\n  /**\r\n   * Name of the output.\r\n   */\r\n  outputPath: string;\r\n}\r\nexport type StringOrPlaceholder =\r\n  | string\r\n  | InputValuePlaceholder\r\n  | InputPathPlaceholder\r\n  | OutputPathPlaceholder\r\n  | ConcatPlaceholder\r\n  | IfPlaceholder;\r\n/**\r\n * Represents the command-line argument placeholder that will be replaced at run-time by the concatenated values of its items.\r\n */\r\nexport interface ConcatPlaceholder {\r\n  /**\r\n   * Items to concatenate\r\n   */\r\n  concat: StringOrPlaceholder[];\r\n}\r\n/**\r\n * Represents the command-line argument placeholder that will be replaced at run-time by a boolean value specifying whether the caller has passed an argument for the specified optional input.\r\n */\r\nexport interface IsPresentPlaceholder {\r\n  /**\r\n   * Name of the input.\r\n   */\r\n  isPresent: string;\r\n}\r\nexport type IfConditionArgumentType =\r\n  | IsPresentPlaceholder\r\n  | boolean\r\n  | string\r\n  | InputValuePlaceholder;\r\nexport type ListOfStringsOrPlaceholders = StringOrPlaceholder[];\r\n/**\r\n * Represents the command-line argument placeholder that will be replaced at run-time by a boolean value specifying whether the caller has passed an argument for the specified optional input.\r\n */\r\nexport interface IfPlaceholder {\r\n  if: {\r\n    cond: IfConditionArgumentType;\r\n    then: ListOfStringsOrPlaceholders;\r\n    else?: ListOfStringsOrPlaceholders;\r\n  };\r\n}\r\nexport interface ContainerSpec {\r\n  /**\r\n   * Docker image name.\r\n   */\r\n  image: string;\r\n  /**\r\n   * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided.\r\n   */\r\n  command?: StringOrPlaceholder[];\r\n  /**\r\n   * Arguments to the entrypoint. The docker image's CMD is used if this is not provided.\r\n   */\r\n  args?: StringOrPlaceholder[];\r\n  /**\r\n   * List of environment variables to set in the container.\r\n   */\r\n  env?: {\r\n    [k: string]: StringOrPlaceholder;\r\n  };\r\n}\r\n/**\r\n * Represents the container component implementation.\r\n */\r\nexport interface ContainerImplementation {\r\n  container: ContainerSpec;\r\n}\r\nexport type ImplementationType = ContainerImplementation | GraphImplementation;\r\nexport interface MetadataSpec {\r\n  annotations?: {\r\n    [k: string]: unknown;\r\n  };\r\n}\r\n/**\r\n * Component specification. Describes the metadata (name, description, source), the interface (inputs and outputs) and the implementation of the component.\r\n */\r\nexport interface ComponentSpec {\r\n  name?: string;\r\n  description?: string;\r\n  inputs?: InputSpec[];\r\n  outputs?: OutputSpec[];\r\n  implementation: ImplementationType;\r\n  metadata?: MetadataSpec;\r\n}\r\n/**\r\n * Component reference. Contains information that can be used to locate and load a component by name, digest or URL\r\n */\r\nexport interface ComponentReference {\r\n  name?: string;\r\n  digest?: string;\r\n  tag?: string;\r\n  url?: string;\r\n  spec?: ComponentSpec;\r\n}\r\n/**\r\n * Represents the component argument value that comes from the graph component input.\r\n */\r\nexport interface GraphInputArgument {\r\n  /**\r\n   * References the input of the graph/pipeline.\r\n   */\r\n  graphInput: {\r\n    inputName: string;\r\n    type?: TypeSpecType;\r\n  };\r\n}\r\n/**\r\n * Represents the component argument value that comes from the output of a sibling task.\r\n */\r\nexport interface TaskOutputArgument {\r\n  /**\r\n   * References the output of a sibling task.\r\n   */\r\n  taskOutput: {\r\n    taskId: string;\r\n    outputName: string;\r\n    type?: TypeSpecType;\r\n  };\r\n}\r\nexport type ArgumentType = string | GraphInputArgument | TaskOutputArgument;\r\n/**\r\n * Pair of operands for a binary operation.\r\n */\r\nexport interface TwoArgumentOperands {\r\n  op1: ArgumentType;\r\n  op2: ArgumentType;\r\n}\r\n/**\r\n * Pair of operands for a binary logical operation.\r\n */\r\nexport interface TwoLogicalOperands {\r\n  op1: PredicateType;\r\n  op2: PredicateType;\r\n}\r\n/**\r\n * Optional configuration that specifies how the task should be executed. Can be used to set some platform-specific options.\r\n */\r\nexport type PredicateType =\r\n  | {\r\n      \"==\": TwoArgumentOperands;\r\n    }\r\n  | {\r\n      \"!=\": TwoArgumentOperands;\r\n    }\r\n  | {\r\n      \">\": TwoArgumentOperands;\r\n    }\r\n  | {\r\n      \">=\": TwoArgumentOperands;\r\n    }\r\n  | {\r\n      \"<\": TwoArgumentOperands;\r\n    }\r\n  | {\r\n      \"<=\": TwoArgumentOperands;\r\n    }\r\n  | {\r\n      and: TwoLogicalOperands;\r\n    }\r\n  | {\r\n      or: TwoLogicalOperands;\r\n    }\r\n  | {\r\n      not: PredicateType;\r\n    };\r\n\r\n/**\r\n * Optional configuration that specifies how the task should be retried if it fails.\r\n */\r\nexport interface RetryStrategySpec {\r\n  maxRetries?: number;\r\n}\r\n/**\r\n * Optional configuration that specifies how the task execution may be skipped if the output data exist in cache.\r\n */\r\nexport interface CachingStrategySpec {\r\n  maxCacheStaleness?: string;\r\n}\r\n\r\nexport interface ExecutionOptionsSpec {\r\n  retryStrategy?: RetryStrategySpec;\r\n  cachingStrategy?: CachingStrategySpec;\r\n}\r\n/**\r\n * 'Task specification. Task is a configured component - a component supplied with arguments and other applied configuration changes.\r\n */\r\nexport interface TaskSpec {\r\n  componentRef: ComponentReference;\r\n  arguments?: {\r\n    [k: string]: ArgumentType;\r\n  };\r\n  isEnabled?: PredicateType;\r\n  executionOptions?: ExecutionOptionsSpec;\r\n  annotations?: {\r\n    [k: string]: unknown;\r\n  };\r\n}\r\n/**\r\n * Describes the graph component implementation. It represents a graph of component tasks connected to the upstream sources of data using the argument specifications. It also describes the sources of graph output values.\r\n */\r\nexport interface GraphSpec {\r\n  tasks: {\r\n    [k: string]: TaskSpec;\r\n  };\r\n  outputValues?: {\r\n    [k: string]: TaskOutputArgument;\r\n  };\r\n}\r\n/**\r\n * Represents the graph component implementation.\r\n */\r\nexport interface GraphImplementation {\r\n  graph: GraphSpec;\r\n}\r\n\r\n// Type guards\r\nexport const isValidComponentSpec = (obj: any): obj is ComponentSpec =>\r\n  typeof obj === \"object\" && \"implementation\" in obj;\r\n\r\nexport const isContainerImplementation = (\r\n  implementation: ImplementationType\r\n): implementation is ContainerImplementation => \"container\" in implementation;\r\n\r\nexport const isGraphImplementation = (\r\n  implementation: ImplementationType\r\n): implementation is GraphImplementation => \"graph\" in implementation;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport { ComponentSpec } from \"../componentSpec\";\r\nimport { downloadComponentDataWithCache } from \"../github\";\r\n\r\nconst preloadComponentReferences = async (\r\n  componentSpec: ComponentSpec,\r\n  componentMap?: Map<string, ComponentSpec>\r\n) => {\r\n  // This map is needed to improve efficiency and handle recursive components.\r\n  if (componentMap === undefined) {\r\n    componentMap = new Map<string, ComponentSpec>();\r\n  }\r\n  if (\"graph\" in componentSpec.implementation) {\r\n    for (const taskSpec of Object.values(\r\n      componentSpec.implementation.graph.tasks\r\n    )) {\r\n      const componentUrl = taskSpec.componentRef.url;\r\n      if (\r\n        taskSpec.componentRef.spec === undefined &&\r\n        componentUrl !== undefined\r\n      ) {\r\n        let taskComponentSpec = componentMap.get(componentUrl);\r\n        if (taskComponentSpec === undefined) {\r\n          taskComponentSpec = await downloadComponentDataWithCache(\r\n            componentUrl\r\n          );\r\n          componentMap.set(componentUrl, taskComponentSpec);\r\n        }\r\n        taskSpec.componentRef.spec = taskComponentSpec;\r\n        await preloadComponentReferences(taskComponentSpec, componentMap);\r\n      }\r\n    }\r\n  }\r\n  return componentSpec;\r\n};\r\n\r\nconst loadComponentFromUrl = async (\r\n  url: string,\r\n  preloadChildComponentSpecs = true\r\n) => {\r\n  let componentSpec = await downloadComponentDataWithCache(url);\r\n  if (preloadChildComponentSpecs) {\r\n    componentSpec = await preloadComponentReferences(componentSpec);\r\n  }\r\n  return componentSpec;\r\n};\r\n\r\nexport { loadComponentFromUrl, preloadComponentReferences };\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport { useState } from \"react\";\r\nimport { ArgumentType, TaskSpec } from \"../componentSpec\";\r\nimport ArgumentsEditor from \"./ArgumentsEditor\";\r\n\r\ninterface ArgumentsEditorDialogProps {\r\n  taskSpec: TaskSpec;\r\n  closeEditor?: () => void;\r\n  setArguments?: (args: Record<string, ArgumentType>) => void;\r\n}\r\n\r\nconst ArgumentsEditorDialog = ({\r\n  taskSpec,\r\n  closeEditor,\r\n  setArguments,\r\n}: ArgumentsEditorDialogProps) => {\r\n  const [currentArguments, setCurrentArguments] = useState<\r\n    Record<string, ArgumentType>\r\n  >({ ...taskSpec.arguments });\r\n\r\n  const componentSpec = taskSpec.componentRef.spec;\r\n  if (componentSpec === undefined) {\r\n    console.error(\r\n      \"ArgumentsEditor called with missing taskSpec.componentRef.spec\",\r\n      taskSpec\r\n    );\r\n    return <></>;\r\n  }\r\n\r\n  return (\r\n    <form\r\n      onSubmit={async (e) => {\r\n        e.preventDefault();\r\n      }}\r\n      // Does not work\r\n      // draggable={false}\r\n      style={{\r\n        position: \"fixed\",\r\n        background: \"white\",\r\n        border: \"1px solid black\",\r\n        borderRadius: \"4px\",\r\n        padding: \"15px\",\r\n        // Does not work\r\n        // zIndex: 11,\r\n      }}\r\n    >\r\n      <legend>Input arguments for {componentSpec.name}</legend>\r\n      <ArgumentsEditor\r\n        componentSpec={componentSpec}\r\n        componentArguments={currentArguments}\r\n        setComponentArguments={setCurrentArguments}\r\n      />\r\n      <button type=\"button\" onClick={closeEditor}>\r\n        Close\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        onClick={(e) => {\r\n          setArguments?.(currentArguments);\r\n          closeEditor?.();\r\n        }}\r\n      >\r\n        Apply\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ArgumentsEditorDialog;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport { CSSProperties, memo, useState } from 'react';\r\nimport {\r\n  ArgumentType,\r\n  InputSpec,\r\n  OutputSpec,\r\n  TaskSpec,\r\n} from '../componentSpec';\r\n\r\nimport { Handle, Position, Node, NodeProps, HandleType } from 'react-flow-renderer';\r\n\r\nimport ArgumentsEditorDialog from './ArgumentsEditorDialog';\r\n\r\nconst inputHandlePosition = Position.Top;\r\nconst outputHandlePosition = Position.Bottom;\r\n\r\ntype InputOrOutputSpec = InputSpec | OutputSpec;\r\n\r\nconst MISSING_ARGUMENT_CLASS_NAME = \"missing-argument\";\r\n\r\nconst NODE_WIDTH_IN_PX = 180;\r\n\r\nexport const isComponentTaskNode = (node: Node): node is Node<ComponentTaskNodeProps> =>\r\n  node.type === \"task\" && node.data !== undefined && \"taskSpec\" in node.data;\r\n\r\nfunction generateHandles(\r\n  ioSpecs: InputOrOutputSpec[],\r\n  handleType: HandleType,\r\n  position: Position,\r\n  idPrefix: string,\r\n  inputsWithMissingArguments?: string[],\r\n): JSX.Element[] {\r\n  let handleComponents = [];\r\n  const numHandles = ioSpecs.length;\r\n  for (let i = 0; i < numHandles; i++) {\r\n    const ioSpec = ioSpecs[i];\r\n    const id = idPrefix + ioSpec.name;\r\n    const relativePosition = (i + 1) / (numHandles + 1);\r\n    const positionPercentString = String(100 * relativePosition) + \"%\";\r\n    const style =\r\n      position === Position.Top || position === Position.Bottom\r\n        ? { left: positionPercentString }\r\n        : { top: positionPercentString };\r\n    // TODO: Handle complex type specs\r\n    const ioTypeName = ioSpec.type?.toString() ?? \"Any\";\r\n    let classNames = [`handle_${idPrefix}${ioTypeName}`.replace(\" \", \"_\")];\r\n    const isInvalid = (inputsWithMissingArguments ?? []).includes(ioSpec.name);\r\n    if (isInvalid) {\r\n      classNames.push(MISSING_ARGUMENT_CLASS_NAME);\r\n    }\r\n    classNames = classNames.map((className) => className.replace(\" \", \"_\"));\r\n\r\n    const [labelClasses, labelStyle] = generateLabelStyle(position, numHandles);\r\n    handleComponents.push(\r\n      <Handle\r\n        key={id}\r\n        type={handleType}\r\n        position={position}\r\n        id={id}\r\n        style={style}\r\n        isConnectable={true}\r\n        title={ioSpec.name + \" : \" + ioTypeName}\r\n        className={classNames.join(\" \")}\r\n      >\r\n        <div className={labelClasses} style={labelStyle}>\r\n          {ioSpec.name}\r\n        </div>\r\n      </Handle>\r\n    );\r\n  }\r\n  return handleComponents;\r\n}\r\n\r\n\r\nfunction generateLabelStyle(\r\n  position: Position,\r\n  numHandles: number\r\n): [string, CSSProperties] {\r\n  let maxLabelWidthPx = NODE_WIDTH_IN_PX;\r\n  // By default, we want to place the label on the same side of the handle as the handle is on the side of the node.\r\n  let labelClasses = \"label\";\r\n  // When there are too many inputs/outputs, we need to move the label so it starts from the handle.\r\n  // Based on my tests, we always want this for >4 handles (top/bottom), so the rotated default placement is never used at all.\r\n\r\n  if (position === Position.Top || position === Position.Bottom) {\r\n    if (numHandles > 1) {\r\n      // For single handle max width is the node width, while the formula would give half of that\r\n      maxLabelWidthPx = NODE_WIDTH_IN_PX / (numHandles + 1);\r\n    }\r\n    //if (numHandles > 4) {\r\n    if (maxLabelWidthPx < 35) {\r\n      maxLabelWidthPx = 50;\r\n      labelClasses += \" label-angled\";\r\n    }\r\n  } else {\r\n    maxLabelWidthPx = 60;\r\n  }\r\n\r\n  const labelStyle: CSSProperties = { maxWidth: `${maxLabelWidthPx}px` };\r\n  return [labelClasses, labelStyle];\r\n}\r\n\r\nfunction generateInputHandles(inputSpecs: InputSpec[], inputsWithInvalidArguments?: string[]): JSX.Element[] {\r\n  return generateHandles(inputSpecs, \"target\", inputHandlePosition, \"input_\", inputsWithInvalidArguments);\r\n}\r\n\r\nfunction generateOutputHandles(outputSpecs: OutputSpec[]): JSX.Element[] {\r\n  return generateHandles(outputSpecs, \"source\", outputHandlePosition, \"output_\");\r\n}\r\n\r\nexport interface ComponentTaskNodeProps {\r\n  taskSpec: TaskSpec,\r\n  taskId?: string,\r\n  setArguments?: (args: Record<string, ArgumentType>) => void;\r\n};\r\n\r\nconst ComponentTaskNode = ({ data }: NodeProps<ComponentTaskNodeProps>) => {\r\n  const [isArgumentsEditorOpen, setIsArgumentsEditorOpen] = useState(false);\r\n\r\n  const taskSpec = data.taskSpec;\r\n  const componentSpec = taskSpec.componentRef.spec;\r\n  if (componentSpec === undefined) {\r\n    return (<></>);\r\n  }\r\n\r\n  const label = componentSpec.name ?? \"<component>\";\r\n  let title = \"Task ID: \" + data.taskId;\r\n  if (componentSpec.name) {\r\n    title += \"\\nComponent: \" + componentSpec.name;\r\n  }\r\n  if (taskSpec.componentRef.url) {\r\n    title += \"\\nUrl: \" + taskSpec.componentRef.url;\r\n  }\r\n  if (taskSpec.componentRef.digest) {\r\n    title += \"\\nDigest: \" + taskSpec.componentRef.digest;\r\n  }\r\n  const inputsWithInvalidArguments = (componentSpec.inputs ?? [])\r\n    .filter(\r\n      (inputSpec) =>\r\n        inputSpec.optional !== true &&\r\n        inputSpec.default === undefined &&\r\n        !(inputSpec.name in (taskSpec.arguments ?? {}))\r\n    )\r\n    .map((inputSpec) => inputSpec.name);\r\n  const inputHandles = generateInputHandles(componentSpec.inputs ?? [], inputsWithInvalidArguments);\r\n  const outputHandles = generateOutputHandles(componentSpec.outputs ?? []);\r\n  const handleComponents = inputHandles.concat(outputHandles);\r\n\r\n  const closeArgumentsEditor = () => {\r\n    setIsArgumentsEditorOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      onDoubleClick={() => {\r\n        setIsArgumentsEditorOpen(!isArgumentsEditorOpen);\r\n      }}\r\n      title={title}\r\n    >\r\n      {label}\r\n      {handleComponents}\r\n      {isArgumentsEditorOpen && (\r\n        <ArgumentsEditorDialog\r\n          taskSpec={taskSpec}\r\n          closeEditor={closeArgumentsEditor}\r\n          setArguments={data.setArguments}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(ComponentTaskNode);\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport React, { DragEvent, useState } from \"react\";\r\nimport ReactFlow, {\r\n  ArrowHeadType,\r\n  Connection,\r\n  Edge,\r\n  ElementId,\r\n  Elements,\r\n  isEdge,\r\n  isNode,\r\n  Node,\r\n  OnLoadParams,\r\n  ReactFlowProps,\r\n  XYPosition,\r\n} from \"react-flow-renderer\";\r\n\r\nimport {\r\n  ArgumentType,\r\n  ComponentSpec,\r\n  GraphInputArgument,\r\n  GraphSpec,\r\n  InputSpec,\r\n  OutputSpec,\r\n  TaskOutputArgument,\r\n  TaskSpec,\r\n  isGraphImplementation,\r\n} from \"../componentSpec\";\r\nimport ComponentTaskNode, { ComponentTaskNodeProps, isComponentTaskNode } from \"./ComponentTaskNode\";\r\n\r\n\r\nconst NODE_LAYOUT_ANNOTATION_KEY = \"editor.position\";\r\nconst SDK_ANNOTATION_KEY = \"sdk\";\r\nconst SDK_ANNOTATION_VALUE = \"https://cloud-pipelines.net/pipeline-editor/\";\r\n\r\nconst taskIdToNodeId = (id: string) => \"task_\" + id;\r\nconst inputNameToNodeId = (name: string) => \"input_\" + name;\r\nconst outputNameToNodeId = (name: string) => \"output_\" + name;\r\n\r\nconst nodeIdToTaskId = (id: string) => id.replace(/^task_/, \"\");\r\nconst nodeIdToInputName = (id: string) => id.replace(/^input_/, \"\");\r\nconst nodeIdToOutputName = (id: string) => id.replace(/^output_/, \"\");\r\n\r\nexport const augmentComponentSpec = (\r\n  componentSpec: ComponentSpec,\r\n  nodes: Node[],\r\n  includeSpecs = false,\r\n  includePositions = true\r\n) => {\r\n  componentSpec = { ...componentSpec };\r\n\r\n  const getNodePositionAnnotation = (node: Node) =>\r\n    JSON.stringify({\r\n      // node.position cannot be used since set at 1st drop and never updated\r\n      x: node.__rf.position.x,\r\n      y: node.__rf.position.y,\r\n      width: node.__rf.width,\r\n      height: node.__rf.height,\r\n    });\r\n\r\n  const nodeXPositionComparer = (n1: Node, n2: Node) => {\r\n    const deltaX = n1.__rf.position.x - n2.__rf.position.x;\r\n    const deltaY = n1.__rf.position.y - n2.__rf.position.y;\r\n    return deltaX !== 0 ? deltaX : deltaY;\r\n  };\r\n  const nodeYPositionComparer = (n1: Node, n2: Node) => {\r\n    const deltaX = n1.__rf.position.x - n2.__rf.position.x;\r\n    const deltaY = n1.__rf.position.y - n2.__rf.position.y;\r\n    return deltaY !== 0 ? deltaY : deltaX;\r\n  };\r\n\r\n  // Input and output nodes\r\n  // Sorting them by horizontal position to make reordering inputs and outputs easy.\r\n  const inputNodes = nodes\r\n    .filter((node) => node.type === \"input\")\r\n    .sort(nodeXPositionComparer);\r\n  const outputNodes = nodes\r\n    .filter((node) => node.type === \"output\")\r\n    .sort(nodeXPositionComparer);\r\n  const taskNodes = nodes\r\n    .filter(isComponentTaskNode)\r\n    .sort(nodeYPositionComparer);\r\n\r\n  const inputPositionMap = new Map<string, string>(\r\n    inputNodes.map((node) => [\r\n      nodeIdToInputName(node.id),\r\n      getNodePositionAnnotation(node),\r\n    ])\r\n  );\r\n  const inputOrderMap = new Map<string, number>(\r\n    inputNodes.map((node, index) => [nodeIdToInputName(node.id), index])\r\n  );\r\n  const inputOrderComparer = (a: InputSpec, b: InputSpec) =>\r\n    (inputOrderMap.get(a.name) ?? Infinity) -\r\n    (inputOrderMap.get(b.name) ?? Infinity);\r\n  const outputPositionMap = new Map<string, string>(\r\n    outputNodes.map((node) => [\r\n      nodeIdToOutputName(node.id),\r\n      getNodePositionAnnotation(node),\r\n    ])\r\n  );\r\n  const outputOrderMap = new Map<string, number>(\r\n    outputNodes.map((node, index) => [nodeIdToOutputName(node.id), index])\r\n  );\r\n  const outputOrderComparer = (a: OutputSpec, b: OutputSpec) =>\r\n    (outputOrderMap.get(a.name) ?? Infinity) -\r\n    (outputOrderMap.get(b.name) ?? Infinity);\r\n  const taskPositionMap = new Map<string, string>(\r\n    taskNodes.map((node) => [\r\n      nodeIdToTaskId(node.id),\r\n      getNodePositionAnnotation(node),\r\n    ])\r\n  );\r\n  const taskOrderMap = new Map<string, number>(\r\n    taskNodes.map((node, index) => [nodeIdToTaskId(node.id), index])\r\n  );\r\n  const taskOrderComparer = (\r\n    pairA: [string, TaskSpec],\r\n    pairB: [string, TaskSpec]\r\n  ) =>\r\n    (taskOrderMap.get(pairA[0]) ?? Infinity) -\r\n    (taskOrderMap.get(pairB[0]) ?? Infinity);\r\n\r\n  componentSpec.inputs = componentSpec.inputs\r\n    ?.map((inputSpec) => {\r\n      if (!inputPositionMap.has(inputSpec.name) || !inputOrderMap.has(inputSpec.name)) {\r\n        throw Error(`The nodes array does not have input node ${inputSpec.name}`);\r\n      }\r\n      let newAnnotations = { ...inputSpec.annotations };\r\n      if (includePositions) {\r\n        newAnnotations[NODE_LAYOUT_ANNOTATION_KEY] = inputPositionMap.get(\r\n          inputSpec.name\r\n        );\r\n      } else {\r\n        delete newAnnotations[NODE_LAYOUT_ANNOTATION_KEY];\r\n      }\r\n      let newInputSpec: InputSpec = {\r\n        ...inputSpec,\r\n        annotations: newAnnotations,\r\n      };\r\n      if (Object.keys(newAnnotations).length === 0) {\r\n        delete newInputSpec.annotations;\r\n      }\r\n      return newInputSpec;\r\n    })\r\n    .sort(inputOrderComparer);\r\n\r\n  componentSpec.outputs = componentSpec.outputs\r\n    ?.map((outputSpec) => {\r\n      if (!outputPositionMap.has(outputSpec.name) || !outputOrderMap.has(outputSpec.name)) {\r\n        throw Error(`The nodes array does not have output node ${outputSpec.name}`);\r\n      }\r\n      let newAnnotations = { ...outputSpec.annotations };\r\n      if (includePositions) {\r\n        newAnnotations[NODE_LAYOUT_ANNOTATION_KEY] = outputPositionMap.get(\r\n          outputSpec.name\r\n        );\r\n      } else {\r\n        delete newAnnotations[NODE_LAYOUT_ANNOTATION_KEY];\r\n      }\r\n      let newOutputSpec: OutputSpec = {\r\n        ...outputSpec,\r\n        annotations: newAnnotations,\r\n      };\r\n      if (\r\n        newAnnotations === undefined ||\r\n        Object.keys(newAnnotations).length === 0\r\n      ) {\r\n        delete newOutputSpec.annotations;\r\n      }\r\n      return newOutputSpec;\r\n    })\r\n    .sort(outputOrderComparer);\r\n\r\n  if (!isGraphImplementation(componentSpec.implementation)) {\r\n    return componentSpec;\r\n  }\r\n\r\n  let graphSpec: GraphSpec = { ...componentSpec.implementation.graph };\r\n  const newTasks = Object.fromEntries(\r\n    Object.entries(graphSpec.tasks || {})\r\n      .map(([taskId, taskSpec]) => {\r\n        if (!taskPositionMap.has(taskId) || !taskOrderMap.has(taskId)) {\r\n          throw Error(`The nodes array does not have task node ${taskId}`);\r\n        }\r\n        let newAnnotations = { ...taskSpec.annotations };\r\n        if (includePositions) {\r\n          newAnnotations[NODE_LAYOUT_ANNOTATION_KEY] =\r\n            taskPositionMap.get(taskId);\r\n        } else {\r\n          delete newAnnotations[NODE_LAYOUT_ANNOTATION_KEY];\r\n        }\r\n        let newTaskSpec: TaskSpec = {\r\n          ...taskSpec,\r\n          annotations: newAnnotations,\r\n        };\r\n        if (\r\n          newAnnotations === undefined ||\r\n          Object.keys(newAnnotations).length === 0\r\n        ) {\r\n          delete newTaskSpec.annotations;\r\n        }\r\n        // TODO: Sort the arguments based on the ordering of the component inputs.\r\n        if (\r\n          !includeSpecs &&\r\n          newTaskSpec.componentRef.spec !== undefined &&\r\n          newTaskSpec.componentRef.url !== undefined\r\n        ) {\r\n          newTaskSpec.componentRef = { ...newTaskSpec.componentRef };\r\n          delete newTaskSpec.componentRef.spec;\r\n        }\r\n        return [taskId, newTaskSpec] as [string, TaskSpec];\r\n      })\r\n      .sort(taskOrderComparer)\r\n  );\r\n  if (newTasks !== undefined) {\r\n    graphSpec.tasks = newTasks;\r\n  }\r\n  componentSpec = {\r\n    ...componentSpec,\r\n    implementation: { ...componentSpec.implementation, graph: graphSpec },\r\n  };\r\n\r\n  componentSpec = {\r\n    ...componentSpec,\r\n    metadata: {\r\n      ...componentSpec.metadata,\r\n      annotations: {\r\n        ...componentSpec.metadata?.annotations,\r\n        [SDK_ANNOTATION_KEY]: SDK_ANNOTATION_VALUE\r\n      }\r\n    }\r\n  }\r\n\r\n  // Reordering the attributes and removing the undefined ones\r\n  const rebuildComponentSpec = ({\r\n    name,\r\n    description,\r\n    metadata,\r\n    inputs,\r\n    outputs,\r\n    implementation,\r\n    ...rest\r\n  }: ComponentSpec): ComponentSpec => ({\r\n    ...(name && { name: name }),\r\n    ...(description && { description: description }),\r\n    ...(metadata && { metadata: metadata }),\r\n    ...(inputs && { inputs: inputs }),\r\n    ...(outputs && { outputs: outputs }),\r\n    implementation: implementation,\r\n    ...rest,\r\n  });\r\n  componentSpec = rebuildComponentSpec(componentSpec);\r\n\r\n  return componentSpec;\r\n};\r\n\r\nexport interface GraphComponentSpecFlowProps\r\n  extends Omit<ReactFlowProps, \"elements\"> {\r\n  componentSpec: ComponentSpec,\r\n  setComponentSpec: (componentSpec: ComponentSpec) => void,\r\n}\r\n\r\nconst nodeTypes = {\r\n  task: ComponentTaskNode,\r\n};\r\n\r\nconst GraphComponentSpecFlow = ({\r\n  children,\r\n  componentSpec = { implementation: { graph: { tasks: {} } } },\r\n  setComponentSpec,\r\n  ...rest\r\n}: GraphComponentSpecFlowProps) => {\r\n  const [reactFlowInstance, setReactFlowInstance] = useState<OnLoadParams>();\r\n\r\n  if (! ('graph' in componentSpec.implementation)) {\r\n    // Only graph components are supported\r\n    return <></>;\r\n  }\r\n  let graphSpec = componentSpec.implementation.graph;\r\n\r\n  const nodes = Object.entries(graphSpec.tasks).map<Node<ComponentTaskNodeProps>>(\r\n    ([taskId, taskSpec]) => {\r\n      let position: XYPosition = { x: 0, y: 0 };\r\n      if (taskSpec.annotations !== undefined) {\r\n        try {\r\n          const layoutAnnotation = taskSpec.annotations[\r\n            \"editor.position\"\r\n          ] as string;\r\n          const decodedPosition = JSON.parse(layoutAnnotation);\r\n          position = { x: decodedPosition[\"x\"], y: decodedPosition[\"y\"] };\r\n        } catch (err) {}\r\n      }\r\n\r\n      return {\r\n        id: taskIdToNodeId(taskId),\r\n        data: {\r\n          taskSpec: taskSpec,\r\n          taskId: taskId,\r\n          setArguments: (args) => setTaskArguments(taskId, args),\r\n        },\r\n        position: position,\r\n        type: \"task\",\r\n      };\r\n    }\r\n  );\r\n\r\n  const inputNodes = (componentSpec.inputs ?? []).map<Node>(\r\n    (inputSpec) => {\r\n      let position: XYPosition = { x: 0, y: 0 };\r\n      if (inputSpec.annotations !== undefined) {\r\n        try {\r\n          const layoutAnnotation = inputSpec.annotations[\r\n            \"editor.position\"\r\n          ] as string;\r\n          const decodedPosition = JSON.parse(layoutAnnotation);\r\n          position = { x: decodedPosition[\"x\"], y: decodedPosition[\"y\"] };\r\n        } catch (err) {}\r\n      }\r\n      return {\r\n        id: inputNameToNodeId(inputSpec.name),\r\n        data: { label: inputSpec.name },\r\n        position: position,\r\n        type: \"input\",\r\n      };\r\n    }\r\n  );\r\n\r\n  const outputNodes = (componentSpec.outputs ?? []).map<Node>(\r\n    (outputSpec) => {\r\n      let position: XYPosition = { x: 0, y: 0 };\r\n      if (outputSpec.annotations !== undefined) {\r\n        try {\r\n          const layoutAnnotation = outputSpec.annotations[\r\n            \"editor.position\"\r\n          ] as string;\r\n          const decodedPosition = JSON.parse(layoutAnnotation);\r\n          position = { x: decodedPosition[\"x\"], y: decodedPosition[\"y\"] };\r\n        } catch (err) {}\r\n      }\r\n      return {\r\n        id: outputNameToNodeId(outputSpec.name),\r\n        data: { label: outputSpec.name },\r\n        position: position,\r\n        type: \"output\",\r\n      };\r\n    }\r\n  );\r\n\r\n  const edges: Edge[] = Object.entries(graphSpec.tasks).flatMap(\r\n    ([taskId, taskSpec]) => {\r\n      return Object.entries(taskSpec.arguments ?? {}).flatMap(\r\n        ([inputName, argument]) => {\r\n          if (typeof argument === \"string\") {\r\n            return [];\r\n          }\r\n          if (\"taskOutput\" in argument) {\r\n            const taskOutput = argument.taskOutput;\r\n            const edge: Edge = {\r\n              id: `${taskOutput.taskId}_${taskOutput.outputName}-${taskId}_${inputName}`,\r\n              source: taskIdToNodeId(taskOutput.taskId),\r\n              sourceHandle: `output_${taskOutput.outputName}`,\r\n              target: taskIdToNodeId(taskId),\r\n              targetHandle: `input_${inputName}`,\r\n              arrowHeadType: ArrowHeadType.ArrowClosed,\r\n            };\r\n            return [edge];\r\n          } else if (\"graphInput\" in argument) {\r\n            const graphInput = argument.graphInput;\r\n            const edge: Edge = {\r\n              id: `Input_${graphInput.inputName}-${taskId}_${inputName}`,\r\n              source: inputNameToNodeId(graphInput.inputName),\r\n              //sourceHandle: undefined,\r\n              //sourceHandle: \"Input\",\r\n              sourceHandle: null,\r\n              target: taskIdToNodeId(taskId),\r\n              targetHandle: `input_${inputName}`,\r\n              arrowHeadType: ArrowHeadType.ArrowClosed,\r\n            };\r\n            return [edge];\r\n          } else {\r\n            console.error(\"Impossible task input argument kind: \", argument);\r\n            return [];\r\n          }\r\n        }\r\n      );\r\n    }\r\n  );\r\n\r\n  const outputEdges: Edge[] = Object.entries(graphSpec.outputValues ?? {}).map(\r\n    ([outputName, argument]) => {\r\n      const taskOutput = argument.taskOutput;\r\n      const edge: Edge = {\r\n        id: `${taskOutput.taskId}_${taskOutput.outputName}-Output_${outputName}`,\r\n        source: taskIdToNodeId(taskOutput.taskId),\r\n        sourceHandle: `output_${taskOutput.outputName}`,\r\n        target: outputNameToNodeId(outputName),\r\n        //targetHandle: undefined,\r\n        //targetHandle: \"Output\",\r\n        targetHandle: null,\r\n        arrowHeadType: ArrowHeadType.ArrowClosed,\r\n      };\r\n      return edge;\r\n    }\r\n  );\r\n\r\n  const elements = (nodes as Elements).concat(inputNodes).concat(outputNodes).concat(edges).concat(outputEdges);\r\n  \r\n  const replaceComponentSpec = (newComponentSpec: ComponentSpec) => {\r\n    componentSpec = newComponentSpec;\r\n    setComponentSpec(newComponentSpec);\r\n  };\r\n\r\n  const replaceGraphSpec = (newGraphSpec: GraphSpec) => {\r\n    graphSpec = newGraphSpec;\r\n    replaceComponentSpec({ ...componentSpec, implementation: { graph: graphSpec } });\r\n  };\r\n\r\n  const setTaskArguments = (\r\n    taskId: string,\r\n    taskArguments?: Record<string, ArgumentType>,\r\n  ) => {\r\n    let newGraphSpec: GraphSpec = {\r\n      ...graphSpec,\r\n      tasks: { ...graphSpec.tasks },\r\n    };\r\n    newGraphSpec.tasks[taskId] = {\r\n      ...graphSpec.tasks[taskId],\r\n      arguments: taskArguments,\r\n    };\r\n    replaceGraphSpec(newGraphSpec);\r\n  };\r\n\r\n  const setTaskArgument = (\r\n    taskId: string,\r\n    inputName: string,\r\n    argument?: ArgumentType\r\n  ) => {\r\n    const oldTaskSpec = graphSpec.tasks[taskId];\r\n    const oldTaskSpecArguments = oldTaskSpec.arguments;\r\n    let newTaskSpecArguments: Record<string, ArgumentType> = {\r\n      ...oldTaskSpecArguments,\r\n    };\r\n    if (argument === undefined) {\r\n      delete newTaskSpecArguments[inputName];\r\n    } else {\r\n      newTaskSpecArguments[inputName] = argument;\r\n    }\r\n    setTaskArguments(taskId, newTaskSpecArguments);\r\n  };\r\n\r\n  const removeTaskArgument = (taskId: string, inputName: string) =>\r\n    setTaskArgument(taskId, inputName, undefined);\r\n\r\n  const setGraphOutputValue = (\r\n    outputName: string,\r\n    outputValue?: TaskOutputArgument\r\n  ) => {\r\n    let newGraphOutputValues = { ...graphSpec.outputValues };\r\n    if (outputValue === undefined) {\r\n      delete newGraphOutputValues[outputName];\r\n    } else {\r\n      newGraphOutputValues[outputName] = outputValue;\r\n    }\r\n    graphSpec = { ...graphSpec, outputValues: newGraphOutputValues };\r\n    replaceGraphSpec(graphSpec);\r\n  };\r\n\r\n  const removeGraphOutputValue = (outputName: string) =>\r\n    setGraphOutputValue(outputName);\r\n\r\n  const addConnection = (connection: Connection | Edge) => {\r\n    if (connection.source === null || connection.target === null) {\r\n      console.error(\r\n        \"addConnection called with missing source or target: \",\r\n        connection\r\n      );\r\n      return;\r\n    }\r\n\r\n    const targetTaskInputName = connection.targetHandle?.replace(/^input_/, \"\");\r\n    const sourceTaskOutputName = connection.sourceHandle?.replace(/^output_/, \"\");\r\n\r\n    if (sourceTaskOutputName !== undefined) {\r\n      // Source is task output\r\n      const taskOutputArgument: TaskOutputArgument = {\r\n        taskOutput: {\r\n          taskId: nodeIdToTaskId(connection.source),\r\n          outputName: sourceTaskOutputName,\r\n        },\r\n      };\r\n\r\n      if (targetTaskInputName !== undefined) {\r\n        // Target is task input\r\n        setTaskArgument(\r\n          nodeIdToTaskId(connection.target),\r\n          targetTaskInputName,\r\n          taskOutputArgument\r\n        );\r\n      } else {\r\n        // Target is graph output\r\n        setGraphOutputValue(\r\n          nodeIdToOutputName(connection.target),\r\n          taskOutputArgument\r\n        );\r\n        // TODO: Perhaps propagate type information\r\n      }\r\n    } else {\r\n      // Source is graph input\r\n      const graphInputName = nodeIdToInputName(connection.source);\r\n      const graphInputArgument: GraphInputArgument = {\r\n        graphInput: {\r\n          inputName: graphInputName,\r\n        },\r\n      };\r\n      if (targetTaskInputName !== undefined) {\r\n        // Target is task input\r\n        setTaskArgument(\r\n          nodeIdToTaskId(connection.target),\r\n          targetTaskInputName,\r\n          graphInputArgument\r\n        );\r\n        // TODO: Perhaps propagate type information\r\n      } else {\r\n        // Target is graph output\r\n        console.error(\r\n          \"addConnection: Cannot directly connect graph input to graph output: \",\r\n          connection\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const onConnect = (params: Connection | Edge) => {\r\n    addConnection(params);\r\n  };\r\n\r\n  const removeEdge = (edge: Edge) => {\r\n    const inputName = edge.targetHandle?.replace(/^input_/, \"\");\r\n\r\n    if (inputName !== undefined) {\r\n      removeTaskArgument(nodeIdToTaskId(edge.target), inputName);\r\n    } else {\r\n      removeGraphOutputValue(nodeIdToOutputName(edge.target));\r\n    }\r\n  };\r\n\r\n  const removeComponentInput = (inputNameToRemove: string) => {\r\n    // Removing the outcoming edges\r\n    // Not really needed since react-flow sends the node's incoming and outcoming edges for deletion when a node is deleted\r\n    for (const [taskId, taskSpec] of Object.entries(graphSpec.tasks)) {\r\n      for (const [inputName, argument] of Object.entries(\r\n        taskSpec.arguments ?? {}\r\n      )) {\r\n        if (typeof argument !== \"string\" && \"graphInput\" in argument) {\r\n          if (argument.graphInput.inputName === inputNameToRemove) {\r\n            removeTaskArgument(taskId, inputName);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // Not checking the sources of graph outputs, since they cannot be directly connected to the graph inputs\r\n\r\n    // Removing the input itself\r\n    const newInputs = (componentSpec.inputs ?? []).filter(\r\n      (inputSpec) => inputSpec.name !== inputNameToRemove\r\n    );\r\n    componentSpec = { ...componentSpec, inputs: newInputs };\r\n    replaceComponentSpec(componentSpec);\r\n  };\r\n\r\n  const removeComponentOutput = (outputNameToRemove: string) => {\r\n    removeGraphOutputValue(outputNameToRemove);\r\n    // Removing the output itself\r\n    const newOutputs = (componentSpec.outputs ?? []).filter(\r\n      (outputSpec) => outputSpec.name !== outputNameToRemove\r\n    );\r\n    componentSpec = { ...componentSpec, outputs: newOutputs };\r\n    replaceComponentSpec(componentSpec);\r\n  };\r\n\r\n  const removeTask = (taskIdToRemove: string) => {\r\n    // Removing the outcoming edges\r\n    // Not really needed since react-flow sends the node's incoming and outcoming edges for deletion when a node is deleted\r\n    for (const [taskId, taskSpec] of Object.entries(graphSpec.tasks)) {\r\n      for (const [inputName, argument] of Object.entries(\r\n        taskSpec.arguments ?? {}\r\n      )) {\r\n        if (typeof argument !== \"string\" && \"taskOutput\" in argument) {\r\n          if (argument.taskOutput.taskId === taskIdToRemove) {\r\n            removeTaskArgument(taskId, inputName);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Removing outcoming edges that go to graph outputs.\r\n    // ? Should we delete the outputs themselves\r\n    const newGraphOutputValues = Object.fromEntries(\r\n      Object.entries(graphSpec.outputValues ?? {}).filter(\r\n        ([_, argument]) => argument.taskOutput.taskId !== taskIdToRemove\r\n      )\r\n    );\r\n    graphSpec = { ...graphSpec, outputValues: newGraphOutputValues };\r\n\r\n    // Removing the task\r\n    let newGraphSpec: GraphSpec = {\r\n      ...graphSpec,\r\n      tasks: { ...graphSpec.tasks },\r\n    };\r\n    delete newGraphSpec.tasks[taskIdToRemove];\r\n    replaceGraphSpec(newGraphSpec);\r\n  };\r\n\r\n  const removeNode = (node: Node) => {\r\n    // TODO: Use global constants for node types\r\n    if (node.type === \"input\") {\r\n      const inputName = nodeIdToInputName(node.id);\r\n      removeComponentInput(inputName);\r\n    } else if (node.type === \"output\") {\r\n      const outputName = nodeIdToOutputName(node.id);\r\n      removeComponentOutput(outputName);\r\n    } else if (node.type === \"task\") {\r\n      const taskId = nodeIdToTaskId(node.id);\r\n      removeTask(taskId);\r\n    } else {\r\n      console.log(\"removeNode: Unexpected note type: \", node);\r\n    }\r\n  };\r\n\r\n  const onElementsRemove = (elementsToRemove: Elements) => {\r\n    for (const element of elementsToRemove) {\r\n      if (isEdge(element)) {\r\n        removeEdge(element);\r\n      }\r\n    }\r\n    for (const element of elementsToRemove) {\r\n      if (isNode(element)) {\r\n        removeNode(element);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onEdgeUpdate = (oldEdge: Edge, newConnection: Connection) => {\r\n    removeEdge(oldEdge);\r\n    addConnection(newConnection);\r\n  };\r\n\r\n  const onLoad = (_reactFlowInstance: OnLoadParams) =>\r\n    setReactFlowInstance(_reactFlowInstance);\r\n\r\n  const onDragOver = (event: DragEvent) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = \"move\";\r\n  };\r\n\r\n  const makeNameUniqueByAddingIndex = (name: string, existingNames: Set<string>): ElementId => {\r\n    let finalName = name;\r\n    let index = 1;\r\n    while (existingNames.has(finalName)) {\r\n      index++;\r\n      finalName = name + \" \" + index.toString();\r\n    }\r\n    return finalName;\r\n  };\r\n\r\n  const getUniqueInputName = (name: string = \"Input\") => {\r\n    return makeNameUniqueByAddingIndex(\r\n      name,\r\n      new Set(componentSpec.inputs?.map((inputSpec) => inputSpec.name))\r\n    );\r\n  };\r\n\r\n  const getUniqueOutputName = (name: string = \"Output\") => {\r\n    return makeNameUniqueByAddingIndex(\r\n      name,\r\n      new Set(componentSpec.outputs?.map((outputSpec) => outputSpec.name))\r\n    );\r\n  };\r\n\r\n  const getUniqueTaskName = (name: string = \"Task\") => {\r\n    return makeNameUniqueByAddingIndex(\r\n      name,\r\n      new Set(Object.keys(graphSpec.tasks))\r\n    );\r\n  };\r\n\r\n  const onDrop = (event: DragEvent) => {\r\n    event.preventDefault();\r\n\r\n    if (reactFlowInstance) {\r\n      const droppedData = event.dataTransfer.getData(\"application/reactflow\");\r\n      if (droppedData === \"\") {\r\n        return;\r\n      }\r\n      const droppedDataObject = JSON.parse(droppedData);\r\n      const nodeType = Object.keys(droppedDataObject)[0];\r\n      const nodeData = droppedDataObject[nodeType];\r\n      \r\n      // Correcting the position using the drag point location information\r\n      let dragOffsetX = 0;\r\n      let dragOffsetY = 0;\r\n      const dragStartOffsetData = event.dataTransfer.getData(\"DragStart.offset\");\r\n      if (dragStartOffsetData !== \"\") {\r\n        const dragStartOffset = JSON.parse(dragStartOffsetData);\r\n        // Hack to work around Chrome's draggable anchor bug. TODO: Remove once Chrome is fixed\r\n        dragOffsetX = dragStartOffset.offsetX * 0.68 ?? 0;\r\n        dragOffsetY = dragStartOffset.offsetY * 0.64 ?? 0;\r\n      }\r\n\r\n      // Node position. Offsets should be included in projection, so that they snap to the grid.\r\n      // Otherwise the dropped nodes will be out of phase with the rest of the nodes even when snapping.\r\n      let position = reactFlowInstance.project({\r\n        x: event.clientX - dragOffsetX,\r\n        y: event.clientY - dragOffsetY,\r\n      });\r\n\r\n      const nodePosition = { x: position.x, y: position.y };\r\n      const positionAnnotations = {\r\n        \"editor.position\": JSON.stringify(nodePosition),\r\n      }\r\n      if (nodeType === \"task\") {\r\n        const taskSpec = nodeData as TaskSpec;\r\n        const mergedAnnotations = {\r\n          ...taskSpec.annotations,\r\n          ...positionAnnotations,\r\n        };\r\n        taskSpec.annotations = mergedAnnotations;\r\n        const taskSpecWithAnnotation: TaskSpec = {\r\n          ...taskSpec,\r\n          annotations: mergedAnnotations,\r\n        };\r\n        const taskId = getUniqueTaskName(taskSpec.componentRef.spec?.name ?? \"Task\");\r\n        graphSpec = { ...graphSpec, tasks: { ...graphSpec.tasks } };\r\n        graphSpec.tasks[taskId] = taskSpecWithAnnotation;\r\n        replaceGraphSpec(graphSpec);\r\n      } else if (nodeType === \"input\") {\r\n        const inputId = getUniqueInputName();\r\n        const inputSpec: InputSpec = {\r\n          name: inputId,\r\n          annotations: positionAnnotations,\r\n        };\r\n        const inputs = (componentSpec.inputs ?? []).concat([inputSpec]);\r\n        componentSpec = { ...componentSpec, inputs: inputs };\r\n        replaceComponentSpec(componentSpec);\r\n      } else if (nodeType === \"output\") {\r\n        const outputId = getUniqueOutputName();\r\n        const outputSpec: OutputSpec = {\r\n          name: outputId,\r\n          annotations: positionAnnotations,\r\n        };\r\n        const outputs = (componentSpec.outputs ?? []).concat([outputSpec]);\r\n        componentSpec = { ...componentSpec, outputs: outputs };\r\n        replaceComponentSpec(componentSpec);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ReactFlow\r\n      {...rest}\r\n      elements={elements}\r\n      nodeTypes={nodeTypes}\r\n      onConnect={onConnect}\r\n      onDragOver={onDragOver}\r\n      onDrop={onDrop}\r\n      onEdgeUpdate={onEdgeUpdate}\r\n      onElementsRemove={onElementsRemove}\r\n      onLoad={onLoad}\r\n    >\r\n      {children}\r\n    </ReactFlow>\r\n  );\r\n};\r\n\r\nexport default GraphComponentSpecFlow;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport yaml from \"js-yaml\";\r\nimport localForage from \"localforage\";\r\nimport { httpGetWithCache } from \"./cacheUtils\";\r\nimport {\r\n  ComponentSpec,\r\n  ComponentReference,\r\n  isValidComponentSpec,\r\n} from \"./componentSpec\";\r\nimport { preloadComponentReferences } from \"./DragNDrop/samplePipelines\";\r\n\r\n// const COMPONENT_FILE_NAME_SUFFIX = \"component.yaml\";\r\n// const COMPONENT_FILE_MAX_SIZE = 100000;\r\nconst SEARCH_CACHE_NAME = \"https://api.github.com/search\";\r\nconst BLOB_CACHE_NAME = \"raw.githubusercontent.com/.../component.yaml\";\r\n\r\n// IndexedDB: DB and table names\r\nconst DB_NAME = \"components\";\r\nconst HASH_TO_CONTENT_DB_TABLE_NAME = \"hash_to_data\";\r\nconst HASH_TO_COMPONENT_NAME_DB_TABLE_NAME = \"hash_to_component_name\";\r\nconst URL_TO_HASH_DB_TABLE_NAME = \"url_to_hash\";\r\nconst HASH_TO_URL_DB_TABLE_NAME = \"hash_to_url\";\r\nconst URL_PROCESSING_VERSION_TABLE_NAME = \"url_version\";\r\nconst CURRENT_URL_PROCESSING_VERSION = 1;\r\nconst BAD_HASHES_TABLE_NAME = \"bad_hashes\";\r\n\r\nconst getSingleGitHubCodeSearchPageWithCache = async (\r\n  query: string,\r\n  page = 1,\r\n  sort = \"indexed\",\r\n  order = \"desc\"\r\n): Promise<any> => {\r\n  // TODO: Paging\r\n  const encodedQuery = encodeURIComponent(query);\r\n  const encodedSort = encodeURIComponent(sort);\r\n  const encodedOrder = encodeURIComponent(order);\r\n  const searchUrl = `https://api.github.com/search/code?q=${encodedQuery}&sort=${encodedSort}&order=${encodedOrder}&per_page=100&page=${page}`;\r\n  const response = await httpGetWithCache(searchUrl, SEARCH_CACHE_NAME, true);\r\n  return response.json();\r\n};\r\n\r\nconst githubHtmlUrlToDownloadUrl = (htmlUrl: string): string => {\r\n  // https://github.com/               kubeflow/pipelines/blob/24bc9162a56c2fe3c50947d655ef280f71ba058f/components/gcp/dataflow/launch_flex_template/component.yaml\r\n  // https://raw.githubusercontent.com/kubeflow/pipelines     /24bc9162a56c2fe3c50947d655ef280f71ba058f/components/gcp/dataflow/launch_flex_template/component.yaml\r\n  return htmlUrl\r\n    .replace(\"https://github.com/\", \"https://raw.githubusercontent.com/\")\r\n    .replace(\"/blob/\", \"/\");\r\n};\r\n\r\ntype UrlAndHash = {\r\n  url: string;\r\n  hash: string;\r\n};\r\n\r\nasync function* searchComponentsOnGitHubToGetUrlsAndHashes(\r\n  searchLocations: string[]\r\n) {\r\n  let urlsAndHashes: UrlAndHash[] = [];\r\n  // TODO: If the number of components exceeds 1000 we should issue separate query for each location.\r\n  // TODO: Perhaps try to filter by component contents (inputValue, inputPath, outputPath, graph, implementation)\r\n  const queryParts = [\"filename:component.yaml\"].concat(searchLocations);\r\n  const query = queryParts.join(\" \");\r\n  for (let page = 1; page < 100; page++) {\r\n    const searchResults = await getSingleGitHubCodeSearchPageWithCache(\r\n      query,\r\n      page\r\n    );\r\n    // \"total_count\": 512,\r\n    // \"incomplete_results\": false,\r\n    // \"items\": [\r\n    const items: any[] = searchResults.items;\r\n    if (items.length === 0) {\r\n      break;\r\n    }\r\n    for (let item of items) {\r\n      yield {\r\n        url: githubHtmlUrlToDownloadUrl(item.html_url),\r\n        hash: item.sha as string,\r\n      };\r\n    }\r\n    await new Promise((resolve) =>\r\n      setTimeout(resolve, ((60 * 1000) / 10) * (1 + 0.1))\r\n    );\r\n  }\r\n  return urlsAndHashes;\r\n}\r\n\r\nexport const downloadComponentDataWithCache = async (url: string) => {\r\n  // FIX?: This does not update if in cache\r\n  const response = await httpGetWithCache(url, BLOB_CACHE_NAME);\r\n  const data = await response.blob();\r\n  const componentText = await data.text();\r\n  const componentSpecObj = yaml.load(componentText);\r\n  if (typeof componentSpecObj !== \"object\" || componentSpecObj === null) {\r\n    throw Error(\r\n      `componentText is not a YAML-encoded object: ${componentSpecObj}`\r\n    );\r\n  }\r\n  if (!isValidComponentSpec(componentSpecObj)) {\r\n    throw Error(\r\n      `componentText does not encode a valid pipeline component: ${componentSpecObj}`\r\n    );\r\n  }\r\n  const componentSpec = componentSpecObj;\r\n  return componentSpec;\r\n};\r\n\r\nconst importComponentsFromGitHubSearch = async (searchLocations: string[]) => {\r\n  console.debug(\"Starting importComponentsFromGitHubSearch\");\r\n  const urlsAndHashesIterator =\r\n    searchComponentsOnGitHubToGetUrlsAndHashes(searchLocations);\r\n\r\n  // const cache = await caches.open(BLOB_CACHE_NAME);\r\n  const urlToHashDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_TO_HASH_DB_TABLE_NAME,\r\n  });\r\n  const hashToUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_URL_DB_TABLE_NAME,\r\n  });\r\n  const hashToContentDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_CONTENT_DB_TABLE_NAME,\r\n  });\r\n  const hashToComponentNameDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_COMPONENT_NAME_DB_TABLE_NAME,\r\n  });\r\n  const urlProcessingVersionDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_PROCESSING_VERSION_TABLE_NAME,\r\n  });\r\n  const badHashesDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: BAD_HASHES_TABLE_NAME,\r\n  });\r\n  for await (const item of urlsAndHashesIterator) {\r\n    const hash = item.hash.toLowerCase();\r\n    const htmlUrl = item.url;\r\n    const badHashReason = await badHashesDb.getItem<string>(hash);\r\n    if (badHashReason !== null) {\r\n      console.debug(\r\n        `Skipping url ${htmlUrl} with hash ${hash} due to error: \"${badHashReason}\"`\r\n      );\r\n      continue;\r\n    }\r\n    try {\r\n      const downloadUrl: string = githubHtmlUrlToDownloadUrl(htmlUrl);\r\n      if (!downloadUrl.endsWith(\"component.yaml\")) {\r\n        console.debug(\r\n          `Skipping url ${downloadUrl} since it does not end with \"component.yaml\"`\r\n        );\r\n        continue;\r\n      }\r\n      // Sanity check\r\n      const cachedHash = await urlToHashDb.getItem<string>(downloadUrl);\r\n      if (cachedHash !== null && cachedHash !== hash) {\r\n        console.error(\r\n          `Component cache is broken. Stored hash for ${downloadUrl}: ${cachedHash} != ${hash}.`\r\n        );\r\n      }\r\n      // Check whether the processing is complete\r\n      const urlVersion = await urlProcessingVersionDb.getItem<string>(\r\n        downloadUrl\r\n      );\r\n\r\n      if (\r\n        cachedHash !== null && // Not sure we should check this, but it improves the sanity\r\n        urlVersion !== null &&\r\n        Number.parseInt(urlVersion) >= CURRENT_URL_PROCESSING_VERSION\r\n      ) {\r\n        continue;\r\n      }\r\n\r\n      console.debug(`Processing new component candidate: ${downloadUrl}.`);\r\n      const response = await httpGetWithCache(downloadUrl, BLOB_CACHE_NAME);\r\n      let componentSpec: ComponentSpec;\r\n      let componentText: string;\r\n      try {\r\n        const data = await response.blob();\r\n        componentText = await data.text();\r\n        const componentSpecObj = yaml.load(componentText);\r\n        if (typeof componentSpecObj !== \"object\" || componentSpecObj === null) {\r\n          throw Error(\r\n            `componentText is not a YAML-encoded object: ${componentSpecObj}`\r\n          );\r\n        }\r\n        if (!isValidComponentSpec(componentSpecObj)) {\r\n          throw Error(\r\n            `componentText does not encode a valid pipeline component: ${componentSpecObj}`\r\n          );\r\n        }\r\n        componentSpec = componentSpecObj;\r\n      } catch (err) {\r\n        const errorMessage =\r\n          typeof err === \"object\" && err ? err.toString() : String(err);\r\n        badHashesDb.setItem(hash, errorMessage);\r\n        continue;\r\n      }\r\n      if (componentSpec.implementation === undefined) {\r\n        badHashesDb.setItem(\r\n          hash,\r\n          'Component lacks the \"implementation\" section.'\r\n        );\r\n        continue;\r\n      }\r\n\r\n      // Blobs are cumbersome (need await to get text) - store text instead\r\n      // await hashToContentDb.setItem(hash, data);\r\n      await hashToContentDb.setItem(hash, componentText);\r\n\r\n      // Only adding hash -> URL once\r\n      const urlForHash = await hashToUrlDb.getItem<string>(hash);\r\n      if (urlForHash === null) {\r\n        await hashToUrlDb.setItem(hash, downloadUrl);\r\n      }\r\n\r\n      // Only storing names when they exist\r\n      if (componentSpec.name) {\r\n        await hashToComponentNameDb.setItem(hash, componentSpec.name);\r\n      }\r\n\r\n      await urlToHashDb.setItem(downloadUrl, hash);\r\n\r\n      // Marking the processing as completed\r\n      await urlProcessingVersionDb.setItem(\r\n        downloadUrl,\r\n        CURRENT_URL_PROCESSING_VERSION\r\n      );\r\n    } catch (err) {\r\n      console.error(\r\n        `Error when processing component candidate ${htmlUrl} Error: ${err}.`\r\n      );\r\n    }\r\n  }\r\n  console.debug(\"Finished importComponentsFromGitHubSearch\");\r\n};\r\n\r\ninterface ComponentFeedEntry {\r\n  componentRef: ComponentReference;\r\n  annotations?: {\r\n    [k: string]: unknown;\r\n  };\r\n  data: string;\r\n}\r\n\r\ninterface ComponentFeed {\r\n  annotations?: {\r\n    [k: string]: unknown;\r\n  };\r\n  components: ComponentFeedEntry[];\r\n}\r\n\r\n// Type guards\r\nconst isComponentFeedEntry = (obj: any): obj is ComponentFeedEntry =>\r\n  \"componentRef\" in obj;\r\n\r\nconst isComponentFeedEntryArray = (obj: any): obj is ComponentFeedEntry[] =>\r\n  Array.isArray(obj) && obj.every(isComponentFeedEntry);\r\n\r\nconst isComponentFeed = (obj: any): obj is ComponentFeed =>\r\n  typeof obj === \"object\" &&\r\n  \"components\" in obj &&\r\n  isComponentFeedEntryArray(obj[\"components\"]);\r\n\r\nfunction notUndefined<T>(x: T | undefined): x is T {\r\n  return x !== undefined;\r\n}\r\n\r\nconst calculateGitBlobSha1HashHex = async (data: string | ArrayBuffer) => {\r\n  // TODO: Avoid string roundtrip\r\n  const dataString =\r\n    typeof data === \"string\" ? data : new TextDecoder().decode(data);\r\n  const gitDataString =\r\n    \"blob \" + dataString.length.toString() + \"\\0\" + dataString;\r\n  const gitDataBytes = new TextEncoder().encode(gitDataString);\r\n  const hashBuffer = await crypto.subtle.digest(\"SHA-1\", gitDataBytes);\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n  const hashHex = hashArray\r\n    .map((b) => b.toString(16).padStart(2, \"0\"))\r\n    .join(\"\");\r\n  return hashHex;\r\n};\r\n\r\nconst importComponentsFromFeed = async (componentFeedUrl: string) => {\r\n  console.debug(\"Starting importComponentsFromFeed\");\r\n  console.debug(`Downloading component feed: ${componentFeedUrl}.`);\r\n  const response = await fetch(componentFeedUrl);\r\n  const componentFeedCandidateBlob = await response.blob();\r\n  const componentFeedCandidateText = await componentFeedCandidateBlob.text();\r\n  const componentFeedCandidateObject = yaml.load(componentFeedCandidateText);\r\n  if (!isComponentFeed(componentFeedCandidateObject)) {\r\n    throw new Error(\r\n      `Component feed loaded from \"${componentFeedUrl}\" had invalid content inside.`\r\n    );\r\n  }\r\n  const componentFeed = componentFeedCandidateObject;\r\n\r\n  const urlsHashesAndData = (\r\n    await Promise.all(\r\n      componentFeed.components.map(async (entry) => {\r\n        const url = entry.componentRef.url;\r\n        if (url === undefined) {\r\n          console.error(\"Component feed entry has no reference URL.\");\r\n          return undefined;\r\n        }\r\n        return {\r\n          url: url,\r\n          hash: await calculateGitBlobSha1HashHex(entry.data),\r\n          data: entry.data,\r\n        };\r\n      })\r\n    )\r\n  ).filter(notUndefined);\r\n\r\n  // const cache = await caches.open(BLOB_CACHE_NAME);\r\n  const urlToHashDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_TO_HASH_DB_TABLE_NAME,\r\n  });\r\n  const hashToUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_URL_DB_TABLE_NAME,\r\n  });\r\n  const hashToContentDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_CONTENT_DB_TABLE_NAME,\r\n  });\r\n  const hashToComponentNameDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_COMPONENT_NAME_DB_TABLE_NAME,\r\n  });\r\n  const urlProcessingVersionDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_PROCESSING_VERSION_TABLE_NAME,\r\n  });\r\n  const badHashesDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: BAD_HASHES_TABLE_NAME,\r\n  });\r\n  for await (const item of urlsHashesAndData) {\r\n    const hash = item.hash.toLowerCase();\r\n    const htmlUrl = item.url;\r\n    const badHashReason = await badHashesDb.getItem<string>(hash);\r\n    if (badHashReason !== null) {\r\n      console.debug(\r\n        `Skipping url ${htmlUrl} with hash ${hash} due to error: \"${badHashReason}\"`\r\n      );\r\n      continue;\r\n    }\r\n    try {\r\n      const downloadUrl = item.url;\r\n      // Sanity check\r\n      const cachedHash = await urlToHashDb.getItem<string>(downloadUrl);\r\n      if (cachedHash !== null && cachedHash !== hash) {\r\n        console.error(\r\n          `Component cache is broken. Stored hash for ${downloadUrl}: ${cachedHash} != ${hash}.`\r\n        );\r\n      }\r\n      // Check whether the processing is complete\r\n      const urlVersion = await urlProcessingVersionDb.getItem<string>(\r\n        downloadUrl\r\n      );\r\n\r\n      if (\r\n        cachedHash !== null && // Not sure we should check this, but it improves the sanity\r\n        urlVersion !== null &&\r\n        Number.parseInt(urlVersion) >= CURRENT_URL_PROCESSING_VERSION\r\n      ) {\r\n        continue;\r\n      }\r\n\r\n      console.debug(`Processing new component candidate: ${downloadUrl}.`);\r\n      let componentText = item.data;\r\n      if (componentText === undefined) {\r\n        const response = await httpGetWithCache(downloadUrl, BLOB_CACHE_NAME);\r\n        try {\r\n          const data = await response.blob();\r\n          componentText = await data.text();\r\n        } catch (err) {\r\n          const error_message =\r\n            err instanceof Error ? err.name + \": \" + err.message : String(err);\r\n          badHashesDb.setItem(hash, error_message);\r\n          continue;\r\n        }\r\n      }\r\n      const componentSpecObj = yaml.load(componentText);\r\n      if (typeof componentSpecObj !== \"object\" || componentSpecObj === null) {\r\n        throw Error(\r\n          `componentText is not a YAML-encoded object: ${componentSpecObj}`\r\n        );\r\n      }\r\n      if (!isValidComponentSpec(componentSpecObj)) {\r\n        throw Error(\r\n          `componentText does not encode a valid pipeline component: ${componentSpecObj}`\r\n        );\r\n      }\r\n      const componentSpec = componentSpecObj;\r\n      if (componentSpec.implementation === undefined) {\r\n        badHashesDb.setItem(\r\n          hash,\r\n          'Component lacks the \"implementation\" section.'\r\n        );\r\n        continue;\r\n      }\r\n\r\n      // Blobs are cumbersome (need await to get text) - store text instead\r\n      // await hashToContentDb.setItem(hash, data);\r\n      await hashToContentDb.setItem(hash, componentText);\r\n\r\n      // Only adding hash -> URL once\r\n      const urlForHash = await hashToUrlDb.getItem<string>(hash);\r\n      if (urlForHash === null) {\r\n        await hashToUrlDb.setItem(hash, downloadUrl);\r\n      }\r\n\r\n      // Only storing names when they exist\r\n      if (componentSpec.name) {\r\n        await hashToComponentNameDb.setItem(hash, componentSpec.name);\r\n      }\r\n\r\n      await urlToHashDb.setItem(downloadUrl, hash);\r\n\r\n      // Marking the processing as completed\r\n      await urlProcessingVersionDb.setItem(\r\n        downloadUrl,\r\n        CURRENT_URL_PROCESSING_VERSION\r\n      );\r\n    } catch (err) {\r\n      console.error(\r\n        `Error when processing component candidate ${htmlUrl} Error: ${err}.`\r\n      );\r\n    }\r\n  }\r\n  console.debug(\"Finished importComponentsFromFeed\");\r\n};\r\n\r\nexport interface ComponentSearchConfig {\r\n  ComponentFeedUrls?: string[];\r\n  GitHubSearchLocations?: string[];\r\n}\r\n\r\nexport const refreshComponentDb = async (\r\n  componentSearchConfig: ComponentSearchConfig\r\n) => {\r\n  if (componentSearchConfig.ComponentFeedUrls) {\r\n    for (const componentFeedUrl of componentSearchConfig.ComponentFeedUrls) {\r\n      try {\r\n        await importComponentsFromFeed(componentFeedUrl);\r\n      } catch (error) {\r\n        console.error(\r\n          `Error importing component feed \"${componentFeedUrl}\": ${error}`\r\n        );\r\n      }\r\n    }\r\n  }\r\n  if (componentSearchConfig.GitHubSearchLocations !== undefined) {\r\n    await importComponentsFromGitHubSearch(\r\n      componentSearchConfig.GitHubSearchLocations\r\n    );\r\n  }\r\n};\r\n\r\nexport const getAllComponentsAsRefs = async () => {\r\n  // Perhaps use urlProcessingVersionDb as source of truth. Hmm. It is URL-based\r\n  const hashToUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_URL_DB_TABLE_NAME,\r\n  });\r\n  const hashToContentDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_CONTENT_DB_TABLE_NAME,\r\n  });\r\n  let hashToComponentRef = new Map<string, ComponentReference>();\r\n\r\n  // !!! Iterating using hashToContentDb.iterate<string, void> causes all values to be `[object Blob]`\r\n  //await hashToContentDb.iterate<Blob, void>(\r\n  await hashToContentDb.iterate<string, void>(\r\n    // !!! async processor causes only 1 item to be processed since it returns Promise instead of undefined.\r\n    //async (componentData, hash, iterationNumber) => {\r\n    (componentText, hash, iterationNumber) => {\r\n      //const componentText = await componentData.text();\r\n      try {\r\n        const componentSpec = yaml.load(componentText) as ComponentSpec;\r\n        preloadComponentReferences(componentSpec);\r\n        hashToComponentRef.set(hash, {\r\n          spec: componentSpec,\r\n        });\r\n      } catch (err) {\r\n        console.error(\r\n          `Error when parsing cached component. Hash: ${hash}. Error: ${err}. Component text: ${componentText}`\r\n        );\r\n      }\r\n    }\r\n  );\r\n  await hashToUrlDb.iterate<string, void>((url, hash, iterationNumber) => {\r\n    let componentRef = hashToComponentRef.get(hash);\r\n    if (componentRef === undefined) {\r\n      console.error(\r\n        `Component db corrupted: Component with url ${url} and hash ${hash} has no content in the DB.`\r\n      );\r\n    } else {\r\n      componentRef.url = url;\r\n    }\r\n  });\r\n  let componentRefs: ComponentReference[] = [];\r\n  // TODO: Improve the iteration once TypeScript property supports it\r\n  hashToComponentRef.forEach((componentRef, hash) => {\r\n    if (componentRef.url === undefined) {\r\n      console.error(\r\n        `Component db corrupted: Component with hash ${hash} has content, but no URL in the DB.`\r\n      );\r\n    } else {\r\n      componentRefs.push(componentRef);\r\n    }\r\n  });\r\n  return componentRefs;\r\n};\r\n\r\nexport const isComponentDbEmpty = async () => {\r\n  const hashToContentDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_CONTENT_DB_TABLE_NAME,\r\n  });\r\n  return (await hashToContentDb.length()) === 0;\r\n};\r\n\r\nexport const searchComponentsByName = async (name: string) => {\r\n  const componentRefs = await getAllComponentsAsRefs();\r\n  return componentRefs.filter(\r\n    (ref) => ref.spec?.name?.toLowerCase().includes(name.toLowerCase()) ?? false\r\n  );\r\n};\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nexport const httpGetWithCache = async (\r\n  urlOrRequest: string | RequestInfo,\r\n  cacheName: string,\r\n  updateIfInCache: boolean = false\r\n): Promise<Response> => {\r\n  const cache = await caches.open(cacheName);\r\n  const response = await cache.match(urlOrRequest);\r\n  if (response !== undefined) {\r\n    if (updateIfInCache) {\r\n      cache.add(urlOrRequest);\r\n    }\r\n    return response;\r\n  }\r\n  await cache.add(urlOrRequest);\r\n  const response2 = await cache.match(urlOrRequest);\r\n  if (response2 === undefined) {\r\n    return Promise.reject(\"Added object to cache, but could not find it\");\r\n  }\r\n  return response2;\r\n};\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport { DragEvent } from \"react\";\r\n\r\nimport { ComponentReference, TaskSpec } from \"../componentSpec\";\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  event.dataTransfer.setData(\"application/reactflow\", JSON.stringify(nodeData));\r\n  event.dataTransfer.setData(\r\n    \"DragStart.offset\",\r\n    JSON.stringify({\r\n      offsetX: event.nativeEvent.offsetX,\r\n      offsetY: event.nativeEvent.offsetY,\r\n    })\r\n  );\r\n  event.dataTransfer.effectAllowed = \"move\";\r\n};\r\n\r\ninterface DraggableComponentProps\r\n  extends React.DetailedHTMLProps<\r\n    React.HTMLAttributes<HTMLDivElement>,\r\n    HTMLDivElement\r\n  > {\r\n  componentReference: ComponentReference;\r\n}\r\n\r\nconst DraggableComponent = ({\r\n  componentReference,\r\n  ...props\r\n}: DraggableComponentProps) => {\r\n  let title = componentReference.spec?.name;\r\n  if (componentReference.url) {\r\n    title += \"\\nUrl: \" + componentReference.url;\r\n  }\r\n  if (componentReference.digest) {\r\n    title += \"\\nDigest: \" + componentReference.digest;\r\n  }\r\n  return (\r\n    <div\r\n      className=\"react-flow__node react-flow__node-task sidebar-node\"\r\n      draggable\r\n      onDragStart={(event: DragEvent) => {\r\n        const taskSpec: TaskSpec = {\r\n          componentRef: componentReference,\r\n        };\r\n        return onDragStart(event, { task: taskSpec });\r\n      }}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {componentReference.spec?.name ?? \"Component\"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DraggableComponent;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport { ArgumentType, ComponentSpec, TypeSpecType } from \"../componentSpec\";\r\n\r\ninterface ArgumentsEditorProps {\r\n  componentSpec: ComponentSpec;\r\n  componentArguments: Record<string, ArgumentType>;\r\n  setComponentArguments: (args: Record<string, ArgumentType>) => void;\r\n  shrinkToWidth?: boolean;\r\n}\r\n\r\nconst getPatternForTypeSpec = (typeSpec?: TypeSpecType) => {\r\n  // TODO: Implement\r\n  return undefined;\r\n};\r\n\r\nconst typeSpecToString = (typeSpec?: TypeSpecType): string => {\r\n  if (typeSpec === undefined) {\r\n    return \"Any\";\r\n  }\r\n  if (typeof typeSpec === \"string\") {\r\n    return typeSpec;\r\n  }\r\n  return JSON.stringify(typeSpec);\r\n};\r\n\r\nconst ArgumentsEditor = ({\r\n  componentSpec,\r\n  componentArguments,\r\n  setComponentArguments,\r\n  shrinkToWidth = false,\r\n}: ArgumentsEditorProps) => {\r\n  return (\r\n    <div\r\n      className=\"highlight-invalid-inputs\"\r\n      style={{\r\n        display: \"table\",\r\n        borderSpacing: \"5px\",\r\n        // Enables shrinking the table. But also makes all columns same width regardless of the content\r\n        tableLayout: shrinkToWidth ? \"fixed\" : \"auto\",\r\n        // Width is needed for table-layout: \"fixed\" to work\r\n        width: \"100%\",\r\n      }}\r\n    >\r\n      {(componentSpec.inputs ?? []).map((inputSpec) => {\r\n        const inputName = inputSpec.name;\r\n        let value: string | undefined = undefined;\r\n        let placeholder: string | undefined = undefined;\r\n        const argument = componentArguments[inputName];\r\n        if (argument === undefined) {\r\n          value = inputSpec.default;\r\n        } else {\r\n          if (typeof argument === \"string\") {\r\n            value = argument;\r\n          } else if (\"taskOutput\" in argument) {\r\n            placeholder = `<from task ${argument.taskOutput.taskId} / ${argument.taskOutput.outputName}>`;\r\n          } else if (\"graphInput\" in argument) {\r\n            placeholder = `<from graph input ${argument.graphInput.inputName}>`;\r\n          } else {\r\n            placeholder = \"<reference>\";\r\n          }\r\n        }\r\n\r\n        const argumentIsRequiredButMissing =\r\n          !(inputName in componentArguments) &&\r\n          inputSpec.optional !== true &&\r\n          inputSpec.default === undefined;\r\n\r\n        const typeSpecString =\r\n          typeSpecToString(inputSpec.type) +\r\n          (inputSpec.optional === true ? \"?\" : \"\");\r\n\r\n        return (\r\n          <div\r\n            key={inputName}\r\n            style={{\r\n              display: \"table-row\",\r\n            }}\r\n          >\r\n            <label\r\n              title={`${inputName} (${typeSpecString})`}\r\n              style={{\r\n                textAlign: \"right\",\r\n                display: \"table-cell\",\r\n                whiteSpace: \"nowrap\",\r\n                overflow: \"hidden\",\r\n                textOverflow: \"ellipsis\",\r\n              }}\r\n            >\r\n              <span>\r\n                {inputName} (\r\n                <span\r\n                  style={{\r\n                    textOverflow: \"ellipsis\",\r\n                    overflow: \"hidden\",\r\n                    maxWidth: \"90px\",\r\n                    display: \"inline-block\",\r\n                    verticalAlign: \"bottom\",\r\n                  }}\r\n                  title={typeSpecString}\r\n                >\r\n                  {typeSpecString}\r\n                </span>\r\n                )\r\n              </span>\r\n            </label>\r\n            <input\r\n              style={{\r\n                display: \"table-cell\",\r\n                // Prevents border flickering and disappearing on movement\r\n                borderWidth: \"1px\",\r\n                // Overriding both min-width and max-width to enable the input element shrinking\r\n                minWidth: \"50px\",\r\n                maxWidth: \"100%\",\r\n              }}\r\n              placeholder={placeholder}\r\n              required={argumentIsRequiredButMissing}\r\n              value={value ?? \"\"}\r\n              pattern={getPatternForTypeSpec(inputSpec.type)}\r\n              onChange={(e) => {\r\n                componentArguments[inputName] = e.target.value;\r\n                setComponentArguments({ ...componentArguments });\r\n              }}\r\n            />\r\n            <div\r\n              style={{\r\n                display: \"table-cell\",\r\n                // Setting explicit width to make the button column smaller. Otherwise it takes 1/3 of the total width when the table-layout is set to fixed.\r\n                // The width should have been set to \"min-content\", but that does not work for some reason\r\n                width: \"30px\",\r\n              }}\r\n            >\r\n              <button\r\n                type=\"button\"\r\n                title=\"Reset to default\"\r\n                onClick={(e) => {\r\n                  delete componentArguments[inputName];\r\n                  setComponentArguments({ ...componentArguments });\r\n                }}\r\n                disabled={!(inputName in componentArguments)}\r\n              >\r\n                ⌧\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ArgumentsEditor;\r\n","/**\r\n * @license\r\n * Copyright 2022 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2022 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\n// Settings: Default values and local storage configuration keys\r\nconst COMPONENT_LIBRARY_URL_DEFAULT_VALUE =\r\n  process.env.PUBLIC_URL + \"/component_library.yaml\";\r\nconst COMPONENT_LIBRARY_URL_LOCAL_STORAGE_KEY =\r\n  \"ComponentLibrary/component_library_url\";\r\n\r\nconst PIPELINE_LIBRARY_URL_DEFAULT_VALUE =\r\n  process.env.PUBLIC_URL + \"/pipeline_library.yaml\";\r\nconst PIPELINE_LIBRARY_URL_LOCAL_STORAGE_KEY =\r\n  \"PipelineLibrary/pipeline_library_url\";\r\n\r\n// TODO: Remove this setting in favor of taking the first pipeline from the pipeline library\r\nconst DEFAULT_PIPELINE_URL_DEFAULT_VALUE =\r\n  \"https://raw.githubusercontent.com/Ark-kun/pipelines/2edfd25b5ee3a4aa149c24a225a50041fbd3662d/components/XGBoost/_samples/sample_pipeline.pipeline.component.yaml\";\r\nconst DEFAULT_PIPELINE_URL_LOCAL_STORAGE_KEY = \"App/default_pipeline_url\";\r\n\r\nconst COMPONENT_FEED_URLS_DEFAULT_VALUE = [\r\n  \"https://raw.githubusercontent.com/Ark-kun/pipeline_components/pipeline_component_feed/pipeline_component_feed.yaml\",\r\n];\r\nconst COMPONENT_FEED_URLS_LOCAL_STORAGE_KEY =\r\n  \"ComponentSearch/component_feed_urls\";\r\n\r\nconst GITHUB_SEARCH_LOCATIONS_DEFAULT_VALUE = [\r\n  \"repo:Ark-kun/pipeline_components path:components\",\r\n];\r\nconst GITHUB_SEARCH_LOCATIONS_LOCAL_STORAGE_KEY =\r\n  \"ComponentSearch/github_search_locations\";\r\n\r\nconst GOOGLE_CLOUD_OAUTH_CLIENT_ID_DEFAULT_VALUE =\r\n  \"640001104961-2m8hs192tmd9f9nssbr5thr5o3uhmita.apps.googleusercontent.com\";\r\nconst GOOGLE_CLOUD_OAUTH_CLIENT_ID_LOCAL_STORAGE_KEY =\r\n  \"GoogleCloud/google_cloud_oauth_client_id\";\r\n\r\n// Settings interfaces and classes\r\ninterface Setting<T> {\r\n  get value(): T;\r\n  set value(value: T);\r\n  resetToDefault(): T;\r\n  isOverridden(): boolean;\r\n}\r\n\r\nabstract class SettingBackedByLocalStorage<T> implements Setting<T> {\r\n  _defaultValue: T;\r\n  _storageKey: string;\r\n\r\n  constructor(storageKey: string, defaultValue: T) {\r\n    this._defaultValue = defaultValue;\r\n    this._storageKey = storageKey;\r\n  }\r\n\r\n  get value() {\r\n    // Defensive programming.\r\n    // The window.localStorage should never be missing, null or undefined.\r\n    // And localStorage.getItem should never fail.\r\n    // However in practice there are reports of failures on the Internet for one reason or another.\r\n    // So I'm being extra cautious here.\r\n    try {\r\n      const stringValue = window.localStorage.getItem(this._storageKey);\r\n      if (stringValue !== null) {\r\n        return this.deserialize(stringValue);\r\n      }\r\n    } catch (err) {\r\n      console.error(\r\n        \"window.localStorage.getItem was unavailable or threw an exception. This should not happen.\"\r\n      );\r\n      console.error(err);\r\n    }\r\n\r\n    return this._defaultValue;\r\n  }\r\n\r\n  set value(value: T) {\r\n    const valueString = this.serialize(value);\r\n    const defaultValueString = this.serialize(this._defaultValue);\r\n    if (valueString === defaultValueString) {\r\n      window.localStorage.removeItem(this._storageKey);\r\n    } else {\r\n      window.localStorage.setItem(this._storageKey, valueString);\r\n    }\r\n  }\r\n\r\n  abstract serialize(value: T): string;\r\n  abstract deserialize(stringValue: string): T;\r\n\r\n  resetToDefault() {\r\n    window.localStorage.removeItem(this._storageKey);\r\n    return this._defaultValue;\r\n  }\r\n\r\n  isOverridden() {\r\n    return window.localStorage.getItem(this._storageKey) !== null;\r\n  }\r\n}\r\n\r\nclass StringSettingBackedByLocalStorage extends SettingBackedByLocalStorage<string> {\r\n  serialize(value: string): string {\r\n    return value;\r\n  }\r\n  deserialize(stringValue: string): string {\r\n    return stringValue;\r\n  }\r\n}\r\n\r\nclass StringArraySettingBackedByLocalStorage extends SettingBackedByLocalStorage<\r\n  string[]\r\n> {\r\n  serialize(value: string[]): string {\r\n    return JSON.stringify(value);\r\n  }\r\n  deserialize(stringValue: string): string[] {\r\n    return JSON.parse(stringValue);\r\n  }\r\n}\r\n\r\nexport interface MutableAppSettings {\r\n  componentLibraryUrl: Setting<string>;\r\n  pipelineLibraryUrl: Setting<string>;\r\n  defaultPipelineUrl: Setting<string>;\r\n  componentFeedUrls: Setting<string[]>;\r\n  gitHubSearchLocations: Setting<string[]>;\r\n  googleCloudOAuthClientId: Setting<string>;\r\n}\r\n\r\nclass AppSettingsBackedByLocalStorage implements MutableAppSettings {\r\n  componentLibraryUrl = new StringSettingBackedByLocalStorage(\r\n    COMPONENT_LIBRARY_URL_LOCAL_STORAGE_KEY,\r\n    COMPONENT_LIBRARY_URL_DEFAULT_VALUE\r\n  );\r\n  pipelineLibraryUrl = new StringSettingBackedByLocalStorage(\r\n    PIPELINE_LIBRARY_URL_LOCAL_STORAGE_KEY,\r\n    PIPELINE_LIBRARY_URL_DEFAULT_VALUE\r\n  );\r\n  defaultPipelineUrl = new StringSettingBackedByLocalStorage(\r\n    DEFAULT_PIPELINE_URL_LOCAL_STORAGE_KEY,\r\n    DEFAULT_PIPELINE_URL_DEFAULT_VALUE\r\n  );\r\n  componentFeedUrls = new StringArraySettingBackedByLocalStorage(\r\n    COMPONENT_FEED_URLS_LOCAL_STORAGE_KEY,\r\n    COMPONENT_FEED_URLS_DEFAULT_VALUE\r\n  );\r\n  gitHubSearchLocations = new StringArraySettingBackedByLocalStorage(\r\n    GITHUB_SEARCH_LOCATIONS_LOCAL_STORAGE_KEY,\r\n    GITHUB_SEARCH_LOCATIONS_DEFAULT_VALUE\r\n  );\r\n  googleCloudOAuthClientId = new StringSettingBackedByLocalStorage(\r\n    GOOGLE_CLOUD_OAUTH_CLIENT_ID_LOCAL_STORAGE_KEY,\r\n    GOOGLE_CLOUD_OAUTH_CLIENT_ID_DEFAULT_VALUE\r\n  );\r\n}\r\n\r\nexport interface AppSettings {\r\n  componentLibraryUrl: string;\r\n  pipelineLibraryUrl: string;\r\n  defaultPipelineUrl: string;\r\n  componentFeedUrls: string[];\r\n  gitHubSearchLocations: string[];\r\n  googleCloudOAuthClientId: string;\r\n}\r\n\r\nexport const getMutableAppSettings = (): MutableAppSettings =>\r\n  new AppSettingsBackedByLocalStorage();\r\n\r\nexport const getAppSettings = (): AppSettings => {\r\n  const mutableAppSettings = getMutableAppSettings();\r\n  return {\r\n    componentLibraryUrl: mutableAppSettings.componentLibraryUrl.value,\r\n    pipelineLibraryUrl: mutableAppSettings.pipelineLibraryUrl.value,\r\n    defaultPipelineUrl: mutableAppSettings.defaultPipelineUrl.value,\r\n    componentFeedUrls: mutableAppSettings.componentFeedUrls.value,\r\n    gitHubSearchLocations: mutableAppSettings.gitHubSearchLocations.value,\r\n    googleCloudOAuthClientId: mutableAppSettings.googleCloudOAuthClientId.value,\r\n  };\r\n};\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\n// Manually converted from https://github.com/kubeflow/pipelines/blob/master/api/v2alpha1/pipeline_spec.proto\r\n\r\n// The spec of a pipeline job.\r\nexport interface PipelineJob {\r\n  // Name of the job.\r\n  name?: string;\r\n\r\n  // User friendly display name\r\n  displayName?: string;\r\n  // Definition of the pipeline that is being executed.\r\n  pipelineSpec: PipelineSpec;\r\n\r\n  // The labels with user-defined metadata to organize PipelineJob.\r\n  labels?: { [k: string]: string };\r\n\r\n  // Runtime config of the pipeline.\r\n  runtimeConfig: RuntimeConfig;\r\n}\r\n\r\n// The runtime config of a PipelineJob.\r\nexport interface RuntimeConfig {\r\n  // The runtime parameters of the PipelineJob. The parameters will be\r\n  // passed into [PipelineJob.pipeline_spec][] to replace the placeholders\r\n  // at runtime.\r\n  parameters?: { [k: string]: MlmdValue };\r\n\r\n  // A path in a Cloud Storage bucket which will be treated as the root\r\n  // output directory of the pipeline. It is used by the system to\r\n  // generate the paths of output artifacts.\r\n  // This is a GCP-specific optimization.\r\n  gcsOutputDirectory: string;\r\n}\r\n\r\n// The spec of a pipeline.\r\nexport interface PipelineSpec {\r\n  // The metadata of the pipeline.\r\n  pipelineInfo?: PipelineInfo;\r\n\r\n  // The deployment config of the pipeline.\r\n  // The deployment config can be extended to provide platform specific configs.\r\n  deploymentSpec: PipelineDeploymentConfig;\r\n\r\n  // The version of the sdk, which compiles the spec.\r\n  sdkVersion?: string;\r\n\r\n  // The version of the schema.\r\n  schemaVersion?: string;\r\n\r\n  // The map of name to definition of all components used in this pipeline.\r\n  components: { [k: string]: ComponentSpec };\r\n\r\n  // The definition of the main pipeline.  Execution of the pipeline is\r\n  // completed upon the completion of this component.\r\n  root: ComponentSpec;\r\n}\r\n\r\n// Definition of a component.\r\nexport interface ComponentSpec {\r\n  // Definition of the input parameters and artifacts of the component.\r\n  inputDefinitions?: ComponentInputsSpec;\r\n\r\n  // Definition of the output parameters and artifacts of the component.\r\n  outputDefinitions?: ComponentOutputsSpec;\r\n\r\n  // Either a DAG or a single execution.\r\n  //oneof implementation {\r\n  dag?: DagSpec;\r\n  executorLabel?: string;\r\n  //}\r\n}\r\n\r\n// A DAG contains multiple tasks.\r\nexport interface DagSpec {\r\n  // The tasks inside the dag.\r\n  tasks: { [k: string]: PipelineTaskSpec };\r\n\r\n  // Defines how the outputs of the dag are linked to the sub tasks.\r\n  outputs?: DagOutputsSpec;\r\n}\r\n\r\n// Definition of the output artifacts and parameters of the DAG component.\r\nexport interface DagOutputsSpec {\r\n  // Name to the output artifact channel of the DAG.\r\n  artifacts?: { [k: string]: DagOutputArtifactSpec };\r\n\r\n  // The name to the output parameter.\r\n  parameters?: { [k: string]: DagOutputParameterSpec };\r\n}\r\n\r\n// Selects a defined output artifact from a sub task of the DAG.\r\nexport interface ArtifactSelectorSpec {\r\n  // The name of the sub task which produces the output that matches with\r\n  // the `output_artifact_key`.\r\n  producerSubtask: string;\r\n\r\n  // The key of [ComponentOutputsSpec.artifacts][] map of the producer task.\r\n  outputArtifactKey: string;\r\n}\r\n\r\n// Selects a list of output artifacts that will be aggregated to the single\r\n// output artifact channel of the DAG.\r\nexport interface DagOutputArtifactSpec {\r\n  // The selected artifacts will be aggregated as output as a single\r\n  // output channel of the DAG.\r\n  artifactSelectors: ArtifactSelectorSpec[];\r\n}\r\n\r\n// Selects a defined output parameter from a sub task of the DAG.\r\nexport interface ParameterSelectorSpec {\r\n  // The name of the sub task which produces the output that matches with\r\n  // the `output_parameter_key`.\r\n  producerSubtask: string;\r\n\r\n  // The key of [ComponentOutputsSpec.parameters][] map of the producer task.\r\n  outputParameterKey: string;\r\n}\r\n\r\n// Aggregate output parameters from sub tasks into a list object.\r\nexport interface ParameterSelectorsSpec {\r\n  parameterSelectors: ParameterSelectorSpec[];\r\n}\r\n\r\n// Aggregates output parameters from sub tasks into a map object.\r\nexport interface MapParameterSelectorsSpec {\r\n  mappedParameters: { [k: string]: ParameterSelectorSpec };\r\n}\r\n\r\n// We support four ways to fan-in output parameters from sub tasks to the DAG\r\n// parent task.\r\n// 1. Directly expose a single output parameter from a sub task,\r\n// 2. (Conditional flow) Expose a list of output from multiple tasks\r\n// (some might be skipped) but allows only one of the output being generated.\r\n// 3. Expose a list of outputs from multiple tasks (e.g. iterator flow).\r\n// 4. Expose the aggregation of output parameters as a name-value map.\r\nexport type DagOutputParameterSpec =\r\n  // Returns the sub-task parameter as a DAG parameter.  The selected\r\n  // parameter must have the same type as the DAG parameter type.\r\n  | { valueFromParameter: ParameterSelectorSpec }\r\n  // Returns one of the sub-task parameters as a DAG parameter. If there are\r\n  // multiple values are available to select, the DAG will fail. All the\r\n  // selected parameters must have the same type as the DAG parameter type.\r\n  | { valueFromOneof: ParameterSelectorsSpec };\r\n\r\n// Definition specification of the component input parameters and artifacts.\r\nexport interface ComponentInputsSpec {\r\n  // Name to artifact input.\r\n  artifacts?: { [k: string]: InputArtifactSpec };\r\n\r\n  // Name to parameter input.\r\n  parameters?: { [k: string]: InputParameterSpec };\r\n}\r\n\r\n// Definition of an artifact input.\r\nexport interface InputArtifactSpec {\r\n  artifactType: ArtifactTypeSchema;\r\n}\r\n\r\n// Definition of a parameter input.\r\nexport interface InputParameterSpec {\r\n  type: PrimitiveTypeEnum;\r\n}\r\n\r\n// Definition specification of the component output parameters and artifacts.\r\nexport interface ComponentOutputsSpec {\r\n  // Name to artifact output.\r\n  artifacts?: { [k: string]: OutputArtifactSpec };\r\n\r\n  // Name to parameter output.\r\n  parameters?: { [k: string]: OutputParameterSpec };\r\n}\r\n\r\n// Definition of an artifact output.\r\nexport interface OutputArtifactSpec {\r\n  artifactType: ArtifactTypeSchema;\r\n\r\n  // Properties of the Artifact.\r\n  metadata?: { [k: string]: any };\r\n}\r\n\r\n// Definition of a parameter output.\r\nexport interface OutputParameterSpec {\r\n  type: PrimitiveTypeEnum;\r\n}\r\n\r\n// The spec of task inputs.\r\n//export interface TaskInputsSpec {\r\nexport interface TaskArgumentsSpec {\r\n  // A map of input parameters which are small values, stored by the system and\r\n  // can be queried.\r\n  parameters?: { [k: string]: ParameterArgumentSpec };\r\n  // A map of input artifacts.\r\n  artifacts?: { [k: string]: ArtifactArgumentSpec };\r\n}\r\n\r\n// The specification of a task input artifact.\r\n//export type InputArtifactSpec =\r\nexport type ArtifactArgumentSpec =\r\n  // Pass the input artifact from another task within the same parent\r\n  // component.\r\n  | { taskOutputArtifact: TaskOutputArtifactSpec }\r\n  // Pass the input artifact from parent component input artifact.\r\n  | { componentInputArtifact: string };\r\n\r\nexport interface TaskOutputArtifactSpec {\r\n  // The name of the upstream task which produces the output that matches\r\n  // with the `output_artifact_key`.\r\n  producerTask: string;\r\n\r\n  // The key of [TaskOutputsSpec.artifacts][] map of the producer task.\r\n  outputArtifactKey: string;\r\n}\r\n\r\n// Represents an input parameter. The value can be taken from an upstream\r\n// task's output parameter (if specifying `producer_task` and\r\n// `output_parameter_key`, or it can be a runtime value, which can either be\r\n// determined at compile-time, or from a pipeline parameter.\r\n//export interface InputParameterSpec {\r\nexport interface ParameterArgumentSpec {\r\n  //oneof kind {\r\n  // Output parameter from an upstream task.\r\n  taskOutputParameter?: TaskOutputParameterSpec;\r\n  // A constant value or runtime parameter.\r\n  runtimeValue?: ValueOrRuntimeParameter;\r\n  // Pass the input parameter from parent component input parameter.\r\n  componentInputParameter?: string;\r\n  // The final status of an upstream task.\r\n  taskFinalStatus?: TaskFinalStatus;\r\n  //}\r\n\r\n  // Selector expression of Common Expression Language (CEL)\r\n  // that applies to the parameter found from above kind.\r\n  //\r\n  // The expression is applied to the Value type\r\n  // [Value][].  For example,\r\n  // 'size(string_value)' will return the size of the Value.string_value.\r\n  //\r\n  // After applying the selection, the parameter will be returned as a\r\n  // [Value][].  The type of the Value is either deferred from the input\r\n  // definition in the corresponding\r\n  // [ComponentSpec.input_definitions.parameters][], or if not found,\r\n  // automatically deferred as either string value or double value.\r\n  //\r\n  // In addition to the builtin functions in CEL, The value.string_value can\r\n  // be treated as a json string and parsed to the [google.protobuf.Value][]\r\n  // proto message. Then, the CEL expression provided in this field will be\r\n  // used to get the requested field. For examples,\r\n  //  - if Value.string_value is a json array of \"[1.1, 2.2, 3.3]\",\r\n  //  'parseJson(string_value)[i]' will pass the ith parameter from the list\r\n  //  to the current task, or\r\n  //  - if the Value.string_value is a json map of \"{\"a\": 1.1, \"b\": 2.2,\r\n  //  \"c\": 3.3}, 'parseJson(string_value)[key]' will pass the map value from\r\n  //  the struct map to the current task.\r\n  //\r\n  // If unset, the value will be passed directly to the current task.\r\n  parameterExpressionSelector?: string;\r\n}\r\n\r\n// Represents an upstream task's output parameter.\r\nexport interface TaskOutputParameterSpec {\r\n  // The name of the upstream task which produces the output parameter that\r\n  // matches with the `output_parameter_key`.\r\n  producerTask: string;\r\n\r\n  // The key of [TaskOutputsSpec.parameters][] map of the producer task.\r\n  outputParameterKey: string;\r\n}\r\n\r\n// Represents an upstream task's final status. The field can only be set if\r\n// the schema version is `2.0.0`. The resolved input parameter will be a\r\n// json payload in string type.\r\nexport interface TaskFinalStatus {\r\n  // The name of the upsteram task where the final status is coming from.\r\n  producerTask: string;\r\n}\r\n\r\n// The spec of task outputs.\r\nexport interface TaskOutputsSpec {\r\n  // A map of output parameters which are small values, stored by the system and\r\n  // can be queried. The output key is used\r\n  // by [TaskInputsSpec.InputParameterSpec][] of the downstream task to specify\r\n  // the data dependency. The same key will also be used by\r\n  // [ExecutorInput.Inputs][] to reference the output parameter.\r\n  parameters?: { [k: string]: OutputParameterSpec };\r\n  // A map of output artifacts. Keyed by output key. The output key is used\r\n  // by [TaskInputsSpec.InputArtifactSpec][] of the downstream task to specify\r\n  // the data dependency. The same key will also be used by\r\n  // [ExecutorInput.Inputs][] to reference the output artifact.\r\n  artifacts?: { [k: string]: OutputArtifactSpec };\r\n}\r\n\r\n// The specification of a task output artifact.\r\nexport interface OutputArtifactSpec {\r\n  // The type of the artifact.\r\n  artifactType: ArtifactTypeSchema;\r\n\r\n  // The properties of the artifact, which are determined either at\r\n  // compile-time, or at pipeline submission time through runtime parameters\r\n  properties?: { [k: string]: ValueOrRuntimeParameter };\r\n\r\n  // The custom properties of the artifact, which are determined either at\r\n  // compile-time, or at pipeline submission time through runtime parameters\r\n  customProperties?: { [k: string]: ValueOrRuntimeParameter };\r\n}\r\n\r\n// Specification for output parameters produced by the task.\r\nexport interface OutputParameterSpec {\r\n  // Required field. The type of the output parameter.\r\n  type: PrimitiveTypeEnum;\r\n}\r\n\r\n// Represent primitive types.\r\nexport enum PrimitiveTypeEnum {\r\n  PRIMITIVE_TYPE_UNSPECIFIED = \"PRIMITIVE_TYPE_UNSPECIFIED\",\r\n  INT = \"INT\",\r\n  DOUBLE = \"DOUBLE\",\r\n  STRING = \"STRING\",\r\n}\r\n\r\n// The spec of a pipeline task.\r\nexport interface PipelineTaskSpec {\r\n  // Basic info of a pipeline task.\r\n  taskInfo?: PipelineTaskInfo;\r\n\r\n  // Specification for task inputs which contains parameters and artifacts.\r\n  // <Alexey Volkov>: This should have been named: `arguments: TaskArguments`\r\n  inputs?: TaskArgumentsSpec;\r\n\r\n  // A list of names of upstream tasks that do not provide input\r\n  // artifacts for this task, but nonetheless whose completion this task depends\r\n  // on.\r\n  dependentTasks?: string[];\r\n\r\n  cachingOptions?: CachingOptions;\r\n\r\n  // Reference to a component.  Use this field to define either a DAG or an\r\n  // executor.\r\n  componentRef: ComponentRef;\r\n\r\n  // Trigger policy of the task.\r\n  triggerPolicy?: TriggerPolicy;\r\n\r\n  // Iterator supports fanning out the task into multiple sub-tasks based on the\r\n  // values of input artifact or parameter. The current task will become the\r\n  // parent of all the fan-out tasks. The output of the current task follows\r\n  // the following conventions:\r\n  // * Output artifacts with the same name of each iteration will be merged\r\n  //   into one output artifact channel of the parent iterator task.\r\n  // * Output parameters with the same name of each iteration will be merged\r\n  //   into a string output parameter with the same name with content being a\r\n  //   JSON array.\r\n  //\r\n  // For example, if an iterator starts two sub-tasks (t1 and t2) with the\r\n  // following outputs.\r\n  //\r\n  // t1.outputs.parameters = { 'p': 'v1' }\r\n  // t1.outputs.artifacts = { 'a': [a1] }\r\n  // t2.outputs.parameters = { 'p': 'v2' }\r\n  // t2.outputs.artifacts = { 'a': [a2] }\r\n  // parent_task.outputs.parameters = { 'p': '[\"v1\", \"v2\"]' }\r\n  // parent_task.outputs.artifacts = { 'a': [a1, a2] }\r\n  //oneof iterator {\r\n  // Iterator to iterate over an artifact input.\r\n  artifactIterator?: ArtifactIteratorSpec;\r\n  // Iterator to iterate over a parameter input.\r\n  parameterIterator?: ParameterIteratorSpec;\r\n  //}\r\n}\r\n\r\nexport interface CachingOptions {\r\n  // Whether or not to enable cache for this task. Defaults to false.\r\n  enableCache: boolean;\r\n}\r\n\r\n// Trigger policy defines how the task gets triggered. If a task is not\r\n// triggered, it will run into SKIPPED state.\r\nexport interface TriggerPolicy {\r\n  // An expression which will be evaluated into a boolean value. True to\r\n  // trigger the task to run. The expression follows the language of\r\n  // [CEL Spec][https://github.com/google/cel-spec]. It can access the data\r\n  // from [ExecutorInput][] message of the task.\r\n  // For example:\r\n  // - `inputs.artifacts['model'][0].properties['accuracy']*100 > 90`\r\n  // - `inputs.parameters['type'] == 'foo' && inputs.parameters['num'] == 1`\r\n  condition: string;\r\n\r\n  // The trigger strategy of this task.  The `strategy` and `condition` are\r\n  // in logic \"AND\", as a task will only be tested for the `condition` when\r\n  // the `strategy` is meet.\r\n  // Unset or set to default value of TRIGGER_STRATEGY_UNSPECIFIED behaves the\r\n  // same as ALL_UPSTREAM_TASKS_SUCCEEDED.\r\n  strategy: TriggerStrategy;\r\n}\r\n\r\n// An enum defines the trigger strategy of when the task will be ready to be\r\n// triggered.\r\n// ALL_UPSTREAM_TASKS_SUCCEEDED - all upstream tasks in succeeded state.\r\n// ALL_UPSTREAM_TASKS_COMPLETED - all upstream tasks in any final state.\r\n// (Note that CANCELLED is also a final state but job will not trigger new\r\n// tasks when job is in CANCELLING state, so that the task with the trigger\r\n// policy at ALL_UPSTREAM_TASKS_COMPLETED will not start when job\r\n// cancellation is in progress.)\r\nenum TriggerStrategy {\r\n  // Unspecified.  Behave the same as ALL_UPSTREAM_TASKS_SUCCEEDED.\r\n  TRIGGER_STRATEGY_UNSPECIFIED = \"TRIGGER_STRATEGY_UNSPECIFIED\",\r\n  // Specifies that all upstream tasks are in succeeded state.\r\n  ALL_UPSTREAM_TASKS_SUCCEEDED = \"ALL_UPSTREAM_TASKS_SUCCEEDED\",\r\n  // Specifies that all upstream tasks are in any final state.\r\n  ALL_UPSTREAM_TASKS_COMPLETED = \"ALL_UPSTREAM_TASKS_COMPLETED\",\r\n}\r\n\r\n// The spec of an artifact iterator. It supports fan-out a workflow from a list\r\n// of artifacts.\r\nexport interface ArtifactIteratorSpec {\r\n  // The items to iterate.\r\n  items: ArtifactItemsSpec;\r\n  // The name of the input artifact channel which has the artifact item from the\r\n  // [items][] collection.\r\n  itemInput: string;\r\n}\r\n// Specifies the name of the artifact channel which contains the collection of\r\n// items to iterate. The iterator will create a sub-task for each item of\r\n// the collection and pass the item as a new input artifact channel as\r\n// specified by [item_input][].\r\nexport interface ArtifactItemsSpec {\r\n  // The name of the input artifact.\r\n  inputArtifact: string;\r\n}\r\n\r\n// The spec of a parameter iterator. It supports fan-out a workflow from a\r\n// string parameter which contains a JSON array.\r\nexport interface ParameterIteratorSpec {\r\n  // The items to iterate.\r\n  items: ParameterItemsSpec;\r\n  // The name of the input parameter which has the item value from the\r\n  // [items][] collection.\r\n  itemInput: string;\r\n}\r\n\r\n// Specifies the spec to describe the parameter items to iterate.\r\nexport type ParameterItemsSpec =\r\n  // Specifies where to get the collection of items to iterate. The iterator\r\n  // will create a sub-task for each item of the collection and pass the item\r\n  // as a new input parameter as specified by [item_input][].\r\n  // The raw JSON array.\r\n  | { raw: string }\r\n  // The name of the input parameter whose value has the items collection.\r\n  // The parameter must be in STRING type and its content can be parsed\r\n  // as a JSON array.\r\n  | { input_parameter: string };\r\n\r\nexport interface ComponentRef {\r\n  // The name of a component. Refer to the key of the\r\n  // [PipelineSpec.components][] map.\r\n  name: string;\r\n}\r\n\r\n// Basic info of a pipeline.\r\nexport interface PipelineInfo {\r\n  // Required field. The name of the pipeline.\r\n  // The name will be used to create or find pipeline context in MLMD.\r\n  name: string;\r\n}\r\n\r\n// The definition of a artifact type in MLMD.\r\nexport type ArtifactTypeSchema =\r\n  // The name of the type. The format of the title must be:\r\n  // `<namespace>.<title>.<version>`.\r\n  // Examples:\r\n  //  - `aiplatform.Model.v1`\r\n  //  - `acme.CustomModel.v2`\r\n  // When this field is set, the export type must be pre-registered in the MLMD\r\n  // store.\r\n  | { schemaTitle: string }\r\n\r\n  // Points to a YAML file stored on Google Cloud Storage describing the\r\n  // format.\r\n  | { schemaUri: string }\r\n\r\n  // Contains a raw YAML string, describing the format of\r\n  // the properties of the type.\r\n  | { instanceSchema: string };\r\n\r\n// The basic info of a task.\r\nexport interface PipelineTaskInfo {\r\n  // The unique name of the task within the pipeline definition. This name\r\n  // will be used in downstream tasks to indicate task and data dependencies.\r\n  // <Alexey Volkov>: This ^^^ does not seem to be true. This name seems to be used only as display name.\r\n  name: string;\r\n}\r\n\r\n// Definition for a value or reference to a runtime parameter. A\r\n// ValueOrRuntimeParameter instance can be either a field value that is\r\n// determined during compilation time, or a runtime parameter which will be\r\n// determined during runtime.\r\nexport type ValueOrRuntimeParameter =\r\n  // Constant value which is determined in compile time.\r\n  | { constantValue: MlmdValue }\r\n  // The runtime parameter refers to the parent component input parameter.\r\n  | { runtimeParameter: string };\r\n\r\nexport type MlmdValue =\r\n  | {\r\n      stringValue: string;\r\n    }\r\n  | {\r\n      intValue: number;\r\n    }\r\n  | {\r\n      doubleValue: number;\r\n    };\r\n\r\n// The definition of the deployment config of the pipeline. It contains the\r\n// the platform specific executor configs for KFP OSS.\r\nexport interface PipelineDeploymentConfig {\r\n  // Map from executor label to executor spec.\r\n  executors: { [k: string]: ExecutorSpec };\r\n}\r\n\r\n// The specification on a container invocation.\r\n// The string fields of the message support string based placeholder contract\r\n// defined in [ExecutorInput](). The output of the container follows the\r\n// contract of [ExecutorOutput]().\r\nexport interface PipelineContainerSpec {\r\n  // The image uri of the container.\r\n  image: string;\r\n  // The main entrypoint commands of the container to run. If not provided,\r\n  // fallback to use the entry point command defined in the container image.\r\n  command?: string[];\r\n  // The arguments to pass into the main entrypoint of the container.\r\n  args?: string[];\r\n\r\n  // The lifecycle hooks of the container executor.\r\n  // lifecycle: Lifecycle;\r\n\r\n  resources?: ResourceSpec;\r\n\r\n  // Environment variables to be passed to the container.\r\n  env?: EnvVar[];\r\n}\r\n\r\n// The specification on the resource requirements of a container execution.\r\n// This can include specification of vCPU, memory requirements, as well as\r\n// accelerator types and counts.\r\nexport interface ResourceSpec {\r\n  // The limit of the number of vCPU cores. This container execution needs\r\n  // at most cpu_limit vCPU to run.\r\n  cpuLimit: number;\r\n\r\n  // The memory limit in GB. This container execution needs at most\r\n  // memory_limit RAM to run.\r\n  memoryLimit: number;\r\n\r\n  accelerator: AcceleratorConfig;\r\n}\r\n\r\n// Environment variables to be passed to the container.\r\n// Represents an environment variable present in a container.\r\nexport interface EnvVar {\r\n  // Name of the environment variable. Must be a valid C identifier. It can\r\n  // be composed of characters such as uppercase, lowercase characters,\r\n  // underscore, digits, but the leading character should be either a\r\n  // letter or an underscore.\r\n  name: string;\r\n\r\n  // Variables that reference a $(VAR_NAME) are expanded using the previous\r\n  // defined environment variables in the container and any environment\r\n  // variables defined by the platform runtime that executes this pipeline.\r\n  // If a variable cannot be resolved, the reference in the input string\r\n  // will be unchanged. The $(VAR_NAME) syntax can be escaped with a double\r\n  // $$, ie: $$(VAR_NAME). Escaped references will never be expanded,\r\n  // regardless of whether the variable exists or not.\r\n  value: string;\r\n}\r\n\r\n// The specification of the executor.\r\nexport type ExecutorSpec =\r\n  // Starts a container.\r\n  { container: PipelineContainerSpec };\r\n// Import an artifact.\r\n//| { importer: ImporterSpec }\r\n// Resolves an existing artifact.\r\n//| { resolver: ResolverSpec }\r\n// Starts a Google Cloud AI Platform CustomJob.\r\n//| { custom_job: AIPlatformCustomJobSpec };\r\n\r\n// The specification on the accelerators being attached to this container.\r\nexport interface AcceleratorConfig {\r\n  // The type of accelerators.\r\n  type: string;\r\n  // The number of accelerators.\r\n  count: number;\r\n}\r\n\r\n// Missing: Lifecycle\r\n// Missing: ImporterSpec\r\n// Missing: ResolverSpec\r\n// Missing: RuntimeArtifact\r\n// Missing: ArtifactList\r\n// Missing: ExecutorInput\r\n// Missing: ExecutorOutput\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport {\r\n  ArgumentType,\r\n  ComponentSpec,\r\n  StringOrPlaceholder,\r\n  TypeSpecType,\r\n  isContainerImplementation,\r\n  isGraphImplementation,\r\n  InputSpec,\r\n} from \"../../componentSpec\";\r\n\r\nimport * as vertex from \"./vertexPipelineSpec\";\r\n\r\n// # How to handle I/O:\r\n// Rules (might have exceptions)\r\n// output = output artifact\r\n// inputValue => input parameter\r\n// inputPath => input artifact\r\n// # Fixing conflicts:\r\n// 1) Artifact (may only come from task output) is consumed as value.\r\n//   Solution 1) (implemented): Change input from parameter to artifact and use the input.artifact.value placeholder.\r\n//      Cons: The downstream component input definitions depend on arguments. (Some inputs are changed from parameter to artifact.)\r\n//   Solution 2): Add parameter output (with the same name as the artifact output) to the upstream component. The paths should be the same, so a single file will be treated as both parameter and output.\r\n//      Cons: The upstream component output definitions depend on downstream consumption style. (Although parameter outputs are added, not changed.)\r\n//   Solution 3): Insert a \"Downloader\" task between upstream and downstream.\r\n//      Cons: Extra container task\r\n// 2) Parameter (pipeline input or constant value) is consumed as artifact (as file).\r\n//   Solution 1): Insert a \"Uploader\" task to convert parameter to artifact.\r\n//      Cons: Extra container task\r\n\r\nconst sanitizePipelineInfoName = (pipelineContextName: string) => {\r\n  return pipelineContextName.toLowerCase().replace(/\\W/, \"-\");\r\n};\r\n\r\ntype ResolvedCommandLineAndArgs = {\r\n  command?: string[];\r\n  args?: string[];\r\n  env?: Record<string, string>;\r\n  inputsConsumedAsParameter: Set<string>;\r\n  inputsConsumedAsArtifact: Set<string>;\r\n};\r\n\r\nconst resolveCommandLine = (\r\n  componentSpec: ComponentSpec,\r\n  taskArguments: Record<string, ArgumentType>,\r\n  inputsThatHaveParameterArguments: Set<string>\r\n): ResolvedCommandLineAndArgs => {\r\n  if (!isContainerImplementation(componentSpec.implementation)) {\r\n    throw Error(\"resolveCommandLine only supports container components\");\r\n  }\r\n  const containerSpec = componentSpec.implementation.container;\r\n\r\n  const inputsConsumedAsParameter = new Set<string>();\r\n  const inputsConsumedAsArtifact = new Set<string>();\r\n  const convertArg = (arg: StringOrPlaceholder): string[] => {\r\n    if (typeof arg == \"string\") {\r\n      return [arg];\r\n    } else if (\"inputValue\" in arg) {\r\n      const inputName = arg.inputValue;\r\n      if (!inputsThatHaveParameterArguments.has(inputName)) {\r\n        // ! Important details:\r\n        // In this branch, the argument comes from task output (or graph input with artifact argument).\r\n        // All outputs are artifacts by default, so this argument is an artifact argument.\r\n        // We can either try to change the argument to parameter or make the input to be an artifact to solve the conflict.\r\n        // I choose to make the input to be artifact.\r\n        // Adding input name to inputsConsumedAsPath to make the input rendered as an artifact input.\r\n        inputsConsumedAsArtifact.add(inputName);\r\n        return [`{{$.inputs.artifacts['${inputName}'].value}}`];\r\n      } else {\r\n        inputsConsumedAsParameter.add(inputName);\r\n        return [`{{$.inputs.parameters['${inputName}']}}`];\r\n      }\r\n    } else if (\"inputPath\" in arg) {\r\n      const inputName = arg.inputPath;\r\n      inputsConsumedAsArtifact.add(inputName);\r\n      return [`{{$.inputs.artifacts['${inputName}'].path}}`];\r\n    } else if (\"outputPath\" in arg) {\r\n      const outputName = arg.outputPath;\r\n      return [`{{$.outputs.artifacts['${outputName}'].path}}`];\r\n    } else if (\"if\" in arg) {\r\n      const [ifCond, ifThen, ifElse] = [arg.if.cond, arg.if.then, arg.if.else];\r\n      // TODO: Check false values, not just check for true\r\n      let condEvaluatesToTrue = false;\r\n      if (typeof ifCond === \"string\") {\r\n        condEvaluatesToTrue = ifCond.toLowerCase() === \"true\";\r\n      } else if (typeof ifCond === \"boolean\") {\r\n        condEvaluatesToTrue = ifCond;\r\n      } else if (\"isPresent\" in ifCond) {\r\n        const inputName = ifCond.isPresent;\r\n        condEvaluatesToTrue = inputName in taskArguments;\r\n      } else if (\"inputValue\" in ifCond) {\r\n        const inputName = ifCond.inputValue;\r\n        if (!(inputName in taskArguments)) {\r\n          condEvaluatesToTrue = false;\r\n        } else {\r\n          const taskArgument = taskArguments[inputName];\r\n          if (typeof taskArgument === \"string\") {\r\n            condEvaluatesToTrue = taskArgument.toLowerCase() === \"true\";\r\n          } else {\r\n            throw Error(\r\n              \"Using runtime conditions in component command line placeholders is not supported yet.\"\r\n            );\r\n          }\r\n        }\r\n      } else {\r\n        throw Error(\"Unexpected condition kind: \" + ifCond);\r\n      }\r\n      const unresolvedArgs = condEvaluatesToTrue ? ifThen : ifElse;\r\n      if (unresolvedArgs === undefined) {\r\n        return [];\r\n      }\r\n      return unresolvedArgs.flatMap(convertArg);\r\n    } else if (\"concat\" in arg) {\r\n      const concatArgs = arg.concat;\r\n      return [concatArgs.flatMap(convertArg).join(\"\")];\r\n    } else {\r\n      throw Error(`Unknown kind of command-line argument: ${arg}`);\r\n    }\r\n  };\r\n\r\n  const envValues =\r\n    containerSpec.env &&\r\n    Object.fromEntries(\r\n      Object.entries(containerSpec.env).map(([key, value]) => {\r\n        const resolvedArgArray = convertArg(value);\r\n        if (resolvedArgArray.length !== 1) {\r\n          throw Error(\r\n            `Environment variable value must resolve to a single value, but got ${resolvedArgArray}`\r\n          );\r\n        }\r\n        const resolvedValue = resolvedArgArray[0];\r\n        return [key, resolvedValue];\r\n      })\r\n    );\r\n\r\n  const result: ResolvedCommandLineAndArgs = {\r\n    command: containerSpec.command?.flatMap(convertArg),\r\n    args: containerSpec.args?.flatMap(convertArg),\r\n    env: envValues,\r\n    inputsConsumedAsParameter: inputsConsumedAsParameter,\r\n    inputsConsumedAsArtifact: inputsConsumedAsArtifact,\r\n  };\r\n  return result;\r\n};\r\n\r\nconst typeSpecToVertexPrimitiveTypeEnum = (\r\n  typeSpec: TypeSpecType | undefined\r\n): vertex.PrimitiveTypeEnum => {\r\n  if (typeof typeSpec === \"string\") {\r\n    if ([\"integer\"].includes(typeSpec.toLowerCase())) {\r\n      return vertex.PrimitiveTypeEnum.INT;\r\n    }\r\n    if ([\"float\", \"double\"].includes(typeSpec.toLowerCase())) {\r\n      return vertex.PrimitiveTypeEnum.DOUBLE;\r\n    }\r\n  }\r\n  return vertex.PrimitiveTypeEnum.STRING;\r\n};\r\n\r\nconst typeSpecToVertexParameterSpec = (\r\n  typeSpec: TypeSpecType | undefined\r\n): vertex.InputParameterSpec => {\r\n  return {\r\n    type: typeSpecToVertexPrimitiveTypeEnum(typeSpec),\r\n  };\r\n};\r\n\r\nconst typeSpecToVertexArtifactTypeSchema = (\r\n  typeSpec: TypeSpecType | undefined\r\n): vertex.ArtifactTypeSchema => {\r\n  // TODO: Implement better mapping\r\n  const artifactTypeSchema = {\r\n    schemaTitle: \"system.Artifact\",\r\n  };\r\n  return artifactTypeSchema;\r\n};\r\n\r\nconst typeSpecToVertexArtifactSpec = (\r\n  typeSpec: TypeSpecType | undefined\r\n): vertex.InputArtifactSpec => {\r\n  return {\r\n    artifactType: typeSpecToVertexArtifactTypeSchema(typeSpec),\r\n  };\r\n};\r\n// const typeSpecToVertexArtifactType(typeSpec: TypeSpecType) => {\r\n//     return typeof typeSpec === \"string\" && [\"String\", \"Integer\", \"Float\", \"Double\", \"Boolean\", ]\r\n// }\r\n\r\nconst stringToMlmdValue = (\r\n  constantString: string,\r\n  primitiveType: vertex.PrimitiveTypeEnum\r\n): vertex.MlmdValue => {\r\n  switch (primitiveType) {\r\n    case vertex.PrimitiveTypeEnum.STRING:\r\n      return {\r\n        stringValue: constantString,\r\n      };\r\n    case vertex.PrimitiveTypeEnum.INT:\r\n      return {\r\n        intValue: parseInt(constantString),\r\n      };\r\n    case vertex.PrimitiveTypeEnum.DOUBLE:\r\n      return {\r\n        doubleValue: parseFloat(constantString),\r\n      };\r\n    default:\r\n      throw Error(`Unknown primitive type ${primitiveType}`);\r\n  }\r\n};\r\n\r\nconst MAKE_ARTIFACT_COMPONENT_ID = \"_make_artifact\";\r\nconst MAKE_ARTIFACT_EXECUTOR_ID = \"_make_artifact\";\r\nconst MAKE_ARTIFACT_INPUT_NAME = \"parameter\";\r\nconst MAKE_ARTIFACT_OUTPUT_NAME = \"artifact\";\r\n\r\nconst buildMakeArtifactTaskSpec = (\r\n  parameterArgumentSpec: vertex.ParameterArgumentSpec\r\n): vertex.PipelineTaskSpec => {\r\n  const taskSpec: vertex.PipelineTaskSpec = {\r\n    componentRef: {\r\n      name: MAKE_ARTIFACT_COMPONENT_ID,\r\n    },\r\n    taskInfo: {\r\n      name: \"Make artifact\",\r\n    },\r\n    inputs: {\r\n      parameters: {\r\n        [MAKE_ARTIFACT_INPUT_NAME]: parameterArgumentSpec,\r\n      },\r\n    },\r\n    cachingOptions: {\r\n      enableCache: true,\r\n    },\r\n  };\r\n  return taskSpec;\r\n};\r\n\r\nconst makeArtifactComponentSpec: vertex.ComponentSpec = {\r\n  executorLabel: MAKE_ARTIFACT_EXECUTOR_ID,\r\n  inputDefinitions: {\r\n    parameters: {\r\n      [MAKE_ARTIFACT_INPUT_NAME]: {\r\n        type: vertex.PrimitiveTypeEnum.STRING,\r\n      },\r\n    },\r\n  },\r\n  outputDefinitions: {\r\n    artifacts: {\r\n      [MAKE_ARTIFACT_OUTPUT_NAME]: {\r\n        artifactType: {\r\n          schemaTitle: \"system.Artifact\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst makeArtifactExecutorSpec: vertex.ExecutorSpec = {\r\n  container: {\r\n    image: \"alpine\",\r\n    command: [\r\n      \"sh\",\r\n      \"-ec\",\r\n      'mkdir -p \"$(dirname \"$1\")\"; printf \"%s\" \"$0\" > \"$1\"',\r\n      `{{$.inputs.parameters['${MAKE_ARTIFACT_INPUT_NAME}']}}`,\r\n      `{{$.outputs.artifacts['${MAKE_ARTIFACT_OUTPUT_NAME}'].path}}`,\r\n    ],\r\n  },\r\n};\r\n\r\nfunction buildVertexParameterArgumentSpec(\r\n  taskArgument: ArgumentType | undefined,\r\n  inputSpec: InputSpec\r\n) {\r\n  if (taskArgument === undefined) {\r\n    if (inputSpec.default !== undefined) {\r\n      taskArgument = inputSpec.default;\r\n    } else {\r\n      if (inputSpec.optional === true) {\r\n        // TODO: Decide what the behavior should be\r\n        // throw Error(`Input \"${inputSpec.name}\" is optional, but command-line still uses it when when it's not present.`);\r\n        console.error(\r\n          `Input \"${inputSpec.name}\" is optional, but command-line still uses it when when it's not present.`\r\n        );\r\n        taskArgument = \"\";\r\n      } else {\r\n        throw Error(\r\n          `Argument was not provided for required input \"${inputSpec.name}\"`\r\n        );\r\n      }\r\n    }\r\n  }\r\n  let result: vertex.ParameterArgumentSpec;\r\n  if (typeof taskArgument === \"string\") {\r\n    result = {\r\n      runtimeValue: {\r\n        constantValue: stringToMlmdValue(\r\n          taskArgument,\r\n          typeSpecToVertexPrimitiveTypeEnum(inputSpec.type)\r\n        ),\r\n      },\r\n    };\r\n    return result;\r\n  } else if (\"graphInput\" in taskArgument) {\r\n    result = {\r\n      componentInputParameter: taskArgument.graphInput.inputName,\r\n    };\r\n    return result;\r\n  } else if (\"taskOutput\" in taskArgument) {\r\n    result = {\r\n      taskOutputParameter: {\r\n        producerTask: taskArgument.taskOutput.taskId,\r\n        outputParameterKey: taskArgument.taskOutput.outputName,\r\n      },\r\n    };\r\n    return result;\r\n  } else {\r\n    throw Error(`Unknown kind of task argument: \"${taskArgument}\"`);\r\n  }\r\n}\r\n\r\nfunction buildVertexArtifactArgumentSpec(\r\n  taskArgument: ArgumentType | undefined,\r\n  inputSpec: InputSpec,\r\n  upstreamCannotBeArtifact: boolean,\r\n  addMakeArtifactTaskAndGetArtifactArgumentSpec: (\r\n    parameterArgumentSpec: vertex.ParameterArgumentSpec,\r\n    namePrefix?: string\r\n  ) => vertex.ArtifactArgumentSpec\r\n) {\r\n  //if (! (inputName in taskArguments)) {\r\n  if (taskArgument === undefined) {\r\n    // Checking for default value\r\n    if (inputSpec.default !== undefined) {\r\n      taskArgument = inputSpec.default;\r\n    } else {\r\n      if (inputSpec.optional === true) {\r\n        // TODO: Decide what the behavior should be\r\n        // throw Error(`Input \"${inputSpec.name}\" is optional, but command-line still uses it when when it's not present.`);\r\n        console.error(\r\n          `Input \"${inputSpec.name}\" is optional, but command-line still uses it when when it's not present.`\r\n        );\r\n        taskArgument = \"\";\r\n      } else {\r\n        throw Error(\r\n          `Argument was not provided for required input \"${inputSpec.name}\"`\r\n        );\r\n      }\r\n    }\r\n  }\r\n  let result: vertex.ArtifactArgumentSpec;\r\n  if (typeof taskArgument === \"string\") {\r\n    const parameterArgumentSpec: vertex.ParameterArgumentSpec = {\r\n      runtimeValue: {\r\n        constantValue: {\r\n          // TODO: Check whether string is always OK here\r\n          stringValue: taskArgument,\r\n        },\r\n      },\r\n    };\r\n    // TODO: Maybe use the taskArgument as part of the name?\r\n    const convertedArtifactArgumentSpec =\r\n      addMakeArtifactTaskAndGetArtifactArgumentSpec(\r\n        parameterArgumentSpec,\r\n        \"Make artifact\"\r\n      );\r\n    result = convertedArtifactArgumentSpec;\r\n    return result;\r\n  } else if (\"graphInput\" in taskArgument) {\r\n    // Workaround for root DAG where all inputs must be parameters\r\n    if (upstreamCannotBeArtifact) {\r\n      const parameterArgumentSpec: vertex.ParameterArgumentSpec = {\r\n        componentInputParameter: taskArgument.graphInput.inputName,\r\n      };\r\n      // We only need one task for each pipeline input parameter\r\n      const convertedArtifactArgumentSpec =\r\n        addMakeArtifactTaskAndGetArtifactArgumentSpec(\r\n          parameterArgumentSpec,\r\n          \"Make artifact for \" + taskArgument.graphInput.inputName\r\n        );\r\n      result = convertedArtifactArgumentSpec;\r\n    } else {\r\n      result = {\r\n        componentInputArtifact: taskArgument.graphInput.inputName,\r\n      };\r\n    }\r\n    return result;\r\n  } else if (\"taskOutput\" in taskArgument) {\r\n    result = {\r\n      taskOutputArtifact: {\r\n        producerTask: taskArgument.taskOutput.taskId,\r\n        outputArtifactKey: taskArgument.taskOutput.outputName,\r\n      },\r\n    };\r\n    return result;\r\n  } else {\r\n    throw Error(`Unknown kind of task argument: \"${taskArgument}\"`);\r\n  }\r\n}\r\n\r\nconst assertDefined = <T>(obj: T | undefined) => {\r\n  if (obj === undefined) {\r\n    throw TypeError(\"Object is undefined\");\r\n  }\r\n  return obj;\r\n};\r\n\r\nconst transformRecordValues = <T1, T2>(\r\n  record: Record<string, T1>,\r\n  transform: (value: T1) => T2\r\n) =>\r\n  Object.fromEntries(\r\n    Object.entries(record).map(([key, value]) => [key, transform(value)])\r\n  );\r\n\r\nfunction buildVertexComponentSpecFromContainerComponentSpec(\r\n  componentSpec: ComponentSpec,\r\n  taskArguments: Record<string, ArgumentType>,\r\n  inputsThatHaveParameterArguments: Set<string>,\r\n  addExecutorAndGetId: (\r\n    executor: vertex.ExecutorSpec,\r\n    namePrefix?: string | undefined\r\n  ) => string\r\n) {\r\n  if (!isContainerImplementation(componentSpec.implementation)) {\r\n    throw Error(\"Only container components are supported by this function\");\r\n  }\r\n\r\n  const containerSpec = componentSpec.implementation.container;\r\n\r\n  const resolvedCommandLine = resolveCommandLine(\r\n    componentSpec,\r\n    taskArguments,\r\n    inputsThatHaveParameterArguments\r\n  );\r\n\r\n  const vertexExecutorSpec: vertex.ExecutorSpec = {\r\n    container: {\r\n      image: containerSpec.image,\r\n      command: resolvedCommandLine.command,\r\n      args: resolvedCommandLine.args,\r\n      env:\r\n        resolvedCommandLine.env &&\r\n        Object.entries(resolvedCommandLine.env).map(([name, value]) => ({\r\n          name: name,\r\n          value: value,\r\n        })),\r\n    },\r\n  };\r\n\r\n  const vertexExecutorId = addExecutorAndGetId(\r\n    vertexExecutorSpec,\r\n    componentSpec.name ?? \"Component\"\r\n  );\r\n\r\n  const inputMap = new Map(\r\n    (componentSpec.inputs ?? []).map((inputSpec) => [inputSpec.name, inputSpec])\r\n  );\r\n\r\n  const vertexComponentInputsSpec: vertex.ComponentInputsSpec = {\r\n    parameters: Object.fromEntries(\r\n      Array.from(resolvedCommandLine.inputsConsumedAsParameter.values()).map(\r\n        (inputName) => [\r\n          inputName,\r\n          typeSpecToVertexParameterSpec(inputMap.get(inputName)?.type),\r\n        ]\r\n      )\r\n    ),\r\n    artifacts: Object.fromEntries(\r\n      Array.from(resolvedCommandLine.inputsConsumedAsArtifact.values()).map(\r\n        (inputName) => [\r\n          inputName,\r\n          typeSpecToVertexArtifactSpec(inputMap.get(inputName)?.type),\r\n        ]\r\n      )\r\n    ),\r\n  };\r\n\r\n  const vertexComponentOutputsSpec: vertex.ComponentOutputsSpec = {\r\n    parameters: {},\r\n    artifacts: Object.fromEntries(\r\n      (componentSpec.outputs ?? []).map((outputSpec) => [\r\n        outputSpec.name,\r\n        typeSpecToVertexArtifactSpec(outputSpec.type),\r\n      ])\r\n    ),\r\n  };\r\n\r\n  const vertexComponentSpec: vertex.ComponentSpec = {\r\n    inputDefinitions: vertexComponentInputsSpec,\r\n    outputDefinitions: vertexComponentOutputsSpec,\r\n    // dag\r\n    executorLabel: vertexExecutorId,\r\n  };\r\n  return vertexComponentSpec;\r\n}\r\n\r\nfunction buildVertexComponentSpecFromGraphComponentSpec(\r\n  componentSpec: ComponentSpec,\r\n  taskArguments: Record<string, ArgumentType>,\r\n  inputsThatHaveParameterArguments: Set<string>,\r\n  addExecutorAndGetId: (\r\n    executor: vertex.ExecutorSpec,\r\n    namePrefix?: string\r\n  ) => string,\r\n  addComponentAndGetId: (\r\n    component: vertex.ComponentSpec,\r\n    namePrefix?: string\r\n  ) => string\r\n) {\r\n  if (!isGraphImplementation(componentSpec.implementation)) {\r\n    throw Error(\"Only graph components are supported by this function\");\r\n  }\r\n\r\n  const graphSpec = componentSpec.implementation.graph;\r\n\r\n  const inputsConsumedAsParameter = new Set<string>();\r\n  const inputsConsumedAsArtifact = new Set<string>();\r\n\r\n  let vertexTasks: Record<string, vertex.PipelineTaskSpec> = {};\r\n  const taskStringToTaskId = new Map<string, string>();\r\n\r\n  const addTaskAndGetId = (\r\n    task: vertex.PipelineTaskSpec,\r\n    namePrefix: string = \"Task\"\r\n  ) => {\r\n    const serializedSpec = JSON.stringify(task);\r\n    const existingId = taskStringToTaskId.get(serializedSpec);\r\n    if (existingId !== undefined) {\r\n      return existingId;\r\n    }\r\n    const usedIds = new Set(Object.keys(vertexTasks));\r\n    const id = makeNameUniqueByAddingIndex(namePrefix, usedIds);\r\n    taskStringToTaskId.set(serializedSpec, id);\r\n    vertexTasks[id] = task;\r\n    return id;\r\n  };\r\n\r\n  const addMakeArtifactTaskAndGetArtifactArgumentSpec = (\r\n    parameterArgumentSpec: vertex.ParameterArgumentSpec,\r\n    namePrefix: string = \"Make artifact\"\r\n  ) => {\r\n    // These system names are expected to not conflict with user task names\r\n    const makeArtifactExecutorId = addExecutorAndGetId(\r\n      makeArtifactExecutorSpec,\r\n      MAKE_ARTIFACT_EXECUTOR_ID\r\n    );\r\n    const makeArtifactComponentSpecCopy = {\r\n      ...makeArtifactComponentSpec,\r\n      executorLabel: makeArtifactExecutorId,\r\n    };\r\n    const makeArtifactComponentsId = addComponentAndGetId(\r\n      makeArtifactComponentSpecCopy,\r\n      MAKE_ARTIFACT_COMPONENT_ID\r\n    );\r\n    const makeArtifactTaskSpec = buildMakeArtifactTaskSpec(\r\n      parameterArgumentSpec\r\n    );\r\n    makeArtifactTaskSpec.componentRef.name = makeArtifactComponentsId;\r\n    const taskId = addTaskAndGetId(makeArtifactTaskSpec, namePrefix);\r\n    const artifactArgumentSpec: vertex.ArtifactArgumentSpec = {\r\n      taskOutputArtifact: {\r\n        producerTask: taskId,\r\n        outputArtifactKey: MAKE_ARTIFACT_OUTPUT_NAME,\r\n      },\r\n    };\r\n    return artifactArgumentSpec;\r\n  };\r\n\r\n  for (const [taskId, taskSpec] of Object.entries(graphSpec.tasks)) {\r\n    if (taskSpec.componentRef.spec === undefined) {\r\n      throw Error(`Task \"${taskId}\" does not have taskSpec.componentRef.spec.`);\r\n    }\r\n    try {\r\n      const vertexTaskSpec = buildVertexTaskSpecFromTaskSpec(\r\n        taskSpec.componentRef.spec,\r\n        taskSpec.arguments ?? {},\r\n        inputsThatHaveParameterArguments,\r\n        addExecutorAndGetId,\r\n        addComponentAndGetId,\r\n        addMakeArtifactTaskAndGetArtifactArgumentSpec\r\n      );\r\n      if (taskId in vertexTasks) {\r\n        throw Error(\r\n          `Task ID \"${taskId}\" is not unique. This cannot happen (unless user task ID clashes with special task ID).`\r\n        );\r\n      }\r\n      vertexTasks[taskId] = vertexTaskSpec;\r\n\r\n      for (const argument of Object.values(\r\n        vertexTaskSpec.inputs?.parameters ?? {}\r\n      )) {\r\n        if (argument.componentInputParameter !== undefined) {\r\n          inputsConsumedAsParameter.add(argument.componentInputParameter);\r\n        }\r\n      }\r\n      for (const argument of Object.values(\r\n        vertexTaskSpec.inputs?.artifacts ?? {}\r\n      )) {\r\n        if (\"componentInputArtifact\" in argument) {\r\n          inputsConsumedAsArtifact.add(argument.componentInputArtifact);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      if (err instanceof Error) {\r\n        err.message = `Error compiling task ${taskId}: ` + err.message;\r\n      }\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  // Sanity checks\r\n  const inputNamesThatAreUsedBothAsParameterAndArtifact = Array.from(\r\n    inputsConsumedAsParameter\r\n  ).filter((x) => inputsConsumedAsArtifact.has(x));\r\n  if (inputNamesThatAreUsedBothAsParameterAndArtifact.length > 0) {\r\n    throw Error(\r\n      `Compiler error: When compiling component \"${componentSpec.name}\" some inputs are used both as parameter and artifact: \"${inputNamesThatAreUsedBothAsParameterAndArtifact}\". Please file a bug report.`\r\n    );\r\n  }\r\n  const inputNamesThatAreParametersButAreConsumedAsArtifacts = Array.from(\r\n    inputsThatHaveParameterArguments\r\n  ).filter((x) => inputsConsumedAsArtifact.has(x));\r\n  if (inputNamesThatAreParametersButAreConsumedAsArtifacts.length > 0) {\r\n    throw Error(\r\n      `Compiler error: When compiling component \"${componentSpec.name}\" some parameter arguments are consumed as artifact: \"${inputNamesThatAreParametersButAreConsumedAsArtifacts}\". Please file a bug report.`\r\n    );\r\n  }\r\n\r\n  const dagOutputArtifactSpecs = transformRecordValues(\r\n    graphSpec.outputValues ?? {},\r\n    (taskOutputArgument) => {\r\n      const result: vertex.DagOutputArtifactSpec = {\r\n        artifactSelectors: [\r\n          {\r\n            producerSubtask: taskOutputArgument.taskOutput.taskId,\r\n            outputArtifactKey: taskOutputArgument.taskOutput.outputName,\r\n          },\r\n        ],\r\n      };\r\n      return result;\r\n    }\r\n  );\r\n\r\n  const inputMap = new Map(\r\n    (componentSpec.inputs ?? []).map((inputSpec) => [inputSpec.name, inputSpec])\r\n  );\r\n\r\n  const vertexComponentInputsSpec: vertex.ComponentInputsSpec = {\r\n    parameters: Object.fromEntries(\r\n      Array.from(inputsConsumedAsParameter.values()).map((inputName) => [\r\n        inputName,\r\n        typeSpecToVertexParameterSpec(inputMap.get(inputName)?.type),\r\n      ])\r\n    ),\r\n    artifacts: Object.fromEntries(\r\n      Array.from(inputsConsumedAsArtifact.values()).map((inputName) => [\r\n        inputName,\r\n        typeSpecToVertexArtifactSpec(inputMap.get(inputName)?.type),\r\n      ])\r\n    ),\r\n  };\r\n\r\n  const vertexComponentOutputsSpec: vertex.ComponentOutputsSpec = {\r\n    // parameters: {},\r\n    artifacts: Object.fromEntries(\r\n      (componentSpec.outputs ?? []).map((outputSpec) => [\r\n        outputSpec.name,\r\n        typeSpecToVertexArtifactSpec(outputSpec.type),\r\n      ])\r\n    ),\r\n  };\r\n\r\n  const vertexComponentSpec: vertex.ComponentSpec = {\r\n    inputDefinitions: vertexComponentInputsSpec,\r\n    outputDefinitions: vertexComponentOutputsSpec,\r\n    dag: {\r\n      tasks: vertexTasks,\r\n      outputs: {\r\n        artifacts: dagOutputArtifactSpecs,\r\n        // parameters: {},\r\n      },\r\n    },\r\n  };\r\n  return vertexComponentSpec;\r\n}\r\n\r\nfunction buildVertexComponentSpecFromComponentSpec(\r\n  componentSpec: ComponentSpec,\r\n  taskArguments: Record<string, ArgumentType>,\r\n  inputsThatHaveParameterArguments: Set<string>,\r\n  addExecutorAndGetId: (\r\n    executor: vertex.ExecutorSpec,\r\n    namePrefix?: string\r\n  ) => string,\r\n  addComponentAndGetId: (\r\n    component: vertex.ComponentSpec,\r\n    namePrefix?: string\r\n  ) => string\r\n) {\r\n  if (isContainerImplementation(componentSpec.implementation)) {\r\n    return buildVertexComponentSpecFromContainerComponentSpec(\r\n      componentSpec,\r\n      taskArguments,\r\n      inputsThatHaveParameterArguments,\r\n      addExecutorAndGetId\r\n    );\r\n  } else if (isGraphImplementation(componentSpec.implementation)) {\r\n    return buildVertexComponentSpecFromGraphComponentSpec(\r\n      componentSpec,\r\n      taskArguments,\r\n      inputsThatHaveParameterArguments,\r\n      addExecutorAndGetId,\r\n      addComponentAndGetId\r\n    );\r\n  } else {\r\n    throw Error(\r\n      `Unsupported component implementation kind: ${componentSpec.implementation}`\r\n    );\r\n  }\r\n}\r\n\r\nconst buildVertexTaskSpecFromTaskSpec = (\r\n  componentSpec: ComponentSpec,\r\n  //passedArgumentNames: string[],\r\n  taskArguments: Record<string, ArgumentType>,\r\n  graphInputsWithParameterArguments: Set<string>,\r\n  addExecutorAndGetId: (\r\n    executor: vertex.ExecutorSpec,\r\n    namePrefix?: string\r\n  ) => string,\r\n  addComponentAndGetId: (\r\n    component: vertex.ComponentSpec,\r\n    namePrefix?: string\r\n  ) => string,\r\n  addMakeArtifactTaskAndGetArtifactArgumentSpec: (\r\n    parameterArgumentSpec: vertex.ParameterArgumentSpec,\r\n    namePrefix?: string\r\n  ) => vertex.ArtifactArgumentSpec\r\n) => {\r\n  // So-called \"parameter\" arguments can either be constant arguments\r\n  // or come from the arguments to the graph component of the current task.\r\n  // In the current implementation the parameter arguments cannot come from task outputs since all task outputs are artifacts.\r\n  const inputsThatHaveParameterArguments = new Set(\r\n    (componentSpec.inputs ?? [])\r\n      .map((inputSpec) => inputSpec.name)\r\n      .filter((inputName) => {\r\n        const taskArgument = taskArguments[inputName];\r\n        if (taskArgument === undefined) {\r\n          // Missing arguments fall back to default values which are constant strings which are parameters.\r\n          return true;\r\n        }\r\n        if (typeof taskArgument === \"string\") {\r\n          return true;\r\n        }\r\n        if (\"graphInput\" in taskArgument) {\r\n          if (\r\n            graphInputsWithParameterArguments.has(\r\n              taskArgument.graphInput.inputName\r\n            )\r\n          ) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      })\r\n  );\r\n\r\n  const inputMap = new Map(\r\n    (componentSpec.inputs ?? []).map((inputSpec) => [inputSpec.name, inputSpec])\r\n  );\r\n\r\n  const vertexComponentSpec: vertex.ComponentSpec =\r\n    buildVertexComponentSpecFromComponentSpec(\r\n      componentSpec,\r\n      taskArguments,\r\n      inputsThatHaveParameterArguments,\r\n      addExecutorAndGetId,\r\n      addComponentAndGetId\r\n    );\r\n\r\n  const vertexComponentId = addComponentAndGetId(\r\n    vertexComponentSpec,\r\n    componentSpec.name ?? \"Component\"\r\n  );\r\n\r\n  const vertexTaskParameterArguments = Object.fromEntries(\r\n    Object.keys(vertexComponentSpec.inputDefinitions?.parameters ?? {}).map(\r\n      (inputName) => [\r\n        inputName,\r\n        buildVertexParameterArgumentSpec(\r\n          taskArguments[inputName],\r\n          assertDefined(inputMap.get(inputName))\r\n        ),\r\n      ]\r\n    )\r\n  );\r\n\r\n  const vertexTaskArtifactArguments = Object.fromEntries(\r\n    Object.keys(vertexComponentSpec.inputDefinitions?.artifacts ?? {}).map(\r\n      (inputName) => [\r\n        inputName,\r\n        buildVertexArtifactArgumentSpec(\r\n          taskArguments[inputName],\r\n          assertDefined(inputMap.get(inputName)),\r\n          inputsThatHaveParameterArguments.has(inputName),\r\n          addMakeArtifactTaskAndGetArtifactArgumentSpec\r\n        ),\r\n      ]\r\n    )\r\n  );\r\n\r\n  const vertexTaskSpec: vertex.PipelineTaskSpec = {\r\n    taskInfo: {\r\n      // This is the task display name, not an ID\r\n      name: componentSpec.name ?? \"Component\",\r\n    },\r\n    inputs: {\r\n      parameters: vertexTaskParameterArguments,\r\n      artifacts: vertexTaskArtifactArguments,\r\n    },\r\n    // dependent_tasks: [],\r\n    cachingOptions: {\r\n      enableCache: true,\r\n    },\r\n    componentRef: {\r\n      name: vertexComponentId,\r\n    },\r\n    // triggerPolicy: {\r\n    //     condition: \"...\",\r\n    //     strategy: \"ALL_UPSTREAM_TASKS_SUCCEEDED\",\r\n    // },\r\n    // iterator: {\r\n    //     artifactIterator: {...},\r\n    //     parameterIterator: {...},\r\n    // },\r\n  };\r\n\r\n  return vertexTaskSpec;\r\n};\r\n\r\nconst makeNameUniqueByAddingIndex = (\r\n  name: string,\r\n  existingNames: Set<string>\r\n): string => {\r\n  let finalName = name;\r\n  let index = 1;\r\n  while (existingNames.has(finalName)) {\r\n    index++;\r\n    finalName = name + \" \" + index.toString();\r\n  }\r\n  return finalName;\r\n};\r\n\r\nexport const buildVertexPipelineSpecFromGraphComponentSpec = (\r\n  componentSpec: ComponentSpec,\r\n  pipelineContextName = \"pipeline\"\r\n) => {\r\n  let vertexExecutors: Record<string, vertex.ExecutorSpec> = {};\r\n  const executorStringToExecutorId = new Map<string, string>();\r\n  let vertexComponents: Record<string, vertex.ComponentSpec> = {};\r\n  const componentStringToComponentId = new Map<string, string>();\r\n\r\n  const addExecutorAndGetId = (\r\n    executor: vertex.ExecutorSpec,\r\n    namePrefix: string = \"Executor\"\r\n  ) => {\r\n    const serializedSpec = JSON.stringify(executor);\r\n    const existingId = executorStringToExecutorId.get(serializedSpec);\r\n    if (existingId !== undefined) {\r\n      return existingId;\r\n    }\r\n    const usedIds = new Set(Object.keys(vertexExecutors));\r\n    const id = makeNameUniqueByAddingIndex(namePrefix, usedIds);\r\n    executorStringToExecutorId.set(serializedSpec, id);\r\n    vertexExecutors[id] = executor;\r\n    return id;\r\n  };\r\n\r\n  const addComponentAndGetId = (\r\n    component: vertex.ComponentSpec,\r\n    namePrefix: string = \"Component\"\r\n  ) => {\r\n    const serializedSpec = JSON.stringify(component);\r\n    const existingId = componentStringToComponentId.get(serializedSpec);\r\n    if (existingId !== undefined) {\r\n      return existingId;\r\n    }\r\n    const usedIds = new Set(Object.keys(vertexComponents));\r\n    const id = makeNameUniqueByAddingIndex(namePrefix, usedIds);\r\n    componentStringToComponentId.set(serializedSpec, id);\r\n    vertexComponents[id] = component;\r\n    return id;\r\n  };\r\n\r\n  // All root graph inputs are parameters\r\n  const graphInputsWithParameterArguments = new Set(\r\n    (componentSpec.inputs ?? []).map((inputSpec) => inputSpec.name)\r\n  );\r\n\r\n  const pipelineArguments: Record<string, ArgumentType> = Object.fromEntries(\r\n    (componentSpec.inputs ?? []).map((inputSpec) => {\r\n      const argument: ArgumentType = {\r\n        graphInput: { inputName: inputSpec.name },\r\n      };\r\n      return [inputSpec.name, argument];\r\n    })\r\n  );\r\n  const pipelineComponentSpec = buildVertexComponentSpecFromComponentSpec(\r\n    componentSpec,\r\n    pipelineArguments,\r\n    graphInputsWithParameterArguments,\r\n    addExecutorAndGetId,\r\n    addComponentAndGetId\r\n  );\r\n\r\n  const vertexPipelineSpec: vertex.PipelineSpec = {\r\n    pipelineInfo: {\r\n      name: sanitizePipelineInfoName(pipelineContextName),\r\n    },\r\n    sdkVersion: \"Cloud-Pipelines\",\r\n    schemaVersion: \"2.0.0\",\r\n    deploymentSpec: {\r\n      executors: vertexExecutors,\r\n    },\r\n    components: vertexComponents,\r\n    root: pipelineComponentSpec,\r\n  };\r\n  return vertexPipelineSpec;\r\n};\r\n\r\nexport const buildVertexPipelineJobFromGraphComponent = (\r\n  componentSpec: ComponentSpec,\r\n  gcsOutputDirectory: string,\r\n  pipelineArguments?: Map<string, string>,\r\n  pipelineContextName = \"pipeline\"\r\n) => {\r\n  // The pipelineContextName affects caching\r\n\r\n  const pipelineSpec = buildVertexPipelineSpecFromGraphComponentSpec(\r\n    componentSpec,\r\n    pipelineContextName\r\n  );\r\n  const inputParameterDefinitions =\r\n    (pipelineSpec.root.inputDefinitions ?? {}).parameters ?? {};\r\n\r\n  // Adding the default values\r\n  pipelineArguments = pipelineArguments || new Map();\r\n  const defaultInputValuePairs = (componentSpec.inputs ?? [])\r\n    .filter((inputSpec) => inputSpec.default !== undefined)\r\n    .map((inputSpec): [string, string] => [\r\n      inputSpec.name,\r\n      String(inputSpec.default),\r\n    ]);\r\n  const allPipelineArguments = new Map(\r\n    defaultInputValuePairs.concat(Array.from(pipelineArguments.entries()))\r\n  );\r\n\r\n  // Converting the pipeline arguments\r\n  let convertedPipelineArguments: Record<string, any> = {};\r\n  for (const [key, value] of Array.from(allPipelineArguments.entries())) {\r\n    if (!(key in inputParameterDefinitions)) {\r\n      console.error(\r\n        `A pipeline argument was provided for the input \"${key}\" that does not exist in the pipeline spec.`\r\n      );\r\n      continue;\r\n    }\r\n    convertedPipelineArguments[key] = stringToMlmdValue(\r\n      value,\r\n      inputParameterDefinitions[key].type\r\n    );\r\n  }\r\n\r\n  const pipelineJob: vertex.PipelineJob = {\r\n    // name: \"<>\",\r\n    // Does not show up in the UX\r\n    displayName: componentSpec.name ?? \"Pipeline\",\r\n    // labels: {},\r\n    runtimeConfig: {\r\n      parameters: convertedPipelineArguments,\r\n      gcsOutputDirectory: gcsOutputDirectory,\r\n    },\r\n    pipelineSpec: pipelineSpec,\r\n    // encryptionSpec: {},\r\n    // serviceAccount: \"<>\",\r\n    // network: {},\r\n  };\r\n  return pipelineJob;\r\n};\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport { DragEvent, useState } from 'react';\r\n\r\nimport ComponentLibrary from './ComponentLibrary'\r\nimport ComponentSearch from './ComponentSearch'\r\nimport GraphComponentExporter from './GraphComponentExporter'\r\nimport VertexAiExporter from './VertexAiExporter'\r\nimport { ComponentSpec } from '../componentSpec';\r\nimport UserComponentLibrary from \"./UserComponentLibrary\";\r\nimport PipelineLibrary from \"./PipelineLibrary\";\r\nimport { AppSettings } from '../appSettings';\r\nimport PipelineSubmitter from \"./PipelineSubmitter\";\r\nimport AppSettingsDialog from './AppSettingsDialog';\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  event.dataTransfer.setData('application/reactflow', JSON.stringify(nodeData));\r\n  event.dataTransfer.setData(\r\n    \"DragStart.offset\",\r\n    JSON.stringify({\r\n      offsetX: event.nativeEvent.offsetX,\r\n      offsetY: event.nativeEvent.offsetY,\r\n    })\r\n  );\r\n  event.dataTransfer.effectAllowed = 'move';\r\n};\r\n\r\ninterface SidebarProps {\r\n  componentSpec?: ComponentSpec,\r\n  setComponentSpec?: (componentSpec: ComponentSpec) => void,\r\n  appSettings: AppSettings;\r\n}\r\n\r\nconst Sidebar = ({\r\n  componentSpec,\r\n  setComponentSpec,\r\n  appSettings\r\n}: SidebarProps) => {\r\n  const [isSettingsDialogOpen, setIsSettingsDialogOpen] = useState(false);\r\n\r\n  // Do not include the DebugScratch in the production build\r\n  let DebugScratchElement = () => null;\r\n  if (process?.env?.NODE_ENV === \"development\") {\r\n    try {\r\n      const DebugScratch = require(\"./DebugScratch\").default;\r\n      DebugScratchElement = () =>\r\n        DebugScratch({\r\n          componentSpec: componentSpec,\r\n          setComponentSpec: setComponentSpec,\r\n        });\r\n    } catch (e) {}\r\n  }\r\n\r\n  return (\r\n    <aside className=\"nodeList\">\r\n      <details style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary style={{ borderWidth: \"1px\", padding: \"4px\", fontWeight: \"bold\" }}>Save/Load pipeline</summary>\r\n        <PipelineLibrary\r\n          componentSpec={componentSpec}\r\n          setComponentSpec={setComponentSpec}\r\n          samplePipelineLibraryUrl={appSettings.pipelineLibraryUrl}\r\n        />\r\n      </details>\r\n      <details style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary style={{ borderWidth: \"1px\", padding: \"4px\", fontWeight: \"bold\" }}>Run pipeline</summary>\r\n        <PipelineSubmitter\r\n          componentSpec={componentSpec}\r\n          googleCloudOAuthClientId={appSettings.googleCloudOAuthClientId}\r\n        />\r\n      </details>\r\n      <h3>Drag components to the canvas:</h3>\r\n      <details style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary><strong>Special</strong></summary>\r\n        <div className=\"react-flow__node react-flow__node-input sidebar-node\" onDragStart={(event: DragEvent) => onDragStart(event, { input: { label: \"Input\" } })} draggable>\r\n          Input\r\n        </div>\r\n        <div className=\"react-flow__node react-flow__node-output sidebar-node\" onDragStart={(event: DragEvent) => onDragStart(event, { output: { label: \"Output\" } })} draggable>\r\n          Output\r\n        </div>\r\n      </details>\r\n      <ComponentLibrary url={appSettings.componentLibraryUrl} />\r\n      <details style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary style={{ borderWidth: \"1px\", padding: \"4px\", fontWeight: \"bold\" }}>User components</summary>\r\n        <UserComponentLibrary/>\r\n      </details>\r\n      <details open style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary style={{ borderWidth: \"1px\", padding: \"4px\", fontWeight: \"bold\" }}>Component search</summary>\r\n        <ComponentSearch\r\n          componentFeedUrls={appSettings.componentFeedUrls}\r\n          gitHubSearchLocations={appSettings.gitHubSearchLocations}\r\n        />\r\n      </details>\r\n      {/* Unmounting the dialog control to reset the state when closed. */}\r\n      {isSettingsDialogOpen && (\r\n        <AppSettingsDialog\r\n          isOpen={isSettingsDialogOpen}\r\n          handleClose={() => {\r\n            setIsSettingsDialogOpen(false);\r\n          }}\r\n        />\r\n      )}\r\n      <details>\r\n        <summary>Debug and developer tools</summary>\r\n        <button\r\n          onClick={(e) => {\r\n            setIsSettingsDialogOpen(true);\r\n          }}\r\n        >\r\n          Settings\r\n        </button>\r\n        {componentSpec && <GraphComponentExporter componentSpec={componentSpec}/>}\r\n        {componentSpec && <VertexAiExporter componentSpec={componentSpec}/>}\r\n        <DebugScratchElement/>\r\n      </details>\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport yaml from \"js-yaml\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport { downloadComponentDataWithCache } from \"../github\";\r\nimport { httpGetWithCache } from \"../cacheUtils\";\r\nimport { ComponentReference, ComponentSpec } from \"../componentSpec\";\r\nimport DraggableComponent from \"./DraggableComponent\";\r\n\r\ntype ComponentLibraryFolder = {\r\n  name: string;\r\n  folders: ComponentLibraryFolder[];\r\n  components: ComponentReference[];\r\n};\r\n\r\ntype ComponentLibraryStruct = {\r\n  annotations?: {\r\n    [k: string]: unknown;\r\n  };\r\n  folders: ComponentLibraryFolder[];\r\n};\r\n\r\nexport const isValidComponentLibraryStruct = (\r\n  obj: object\r\n): obj is ComponentLibraryStruct => \"folders\" in obj;\r\n\r\nconst DraggableComponentRow = ({ componentUrl }: { componentUrl: string }) => {\r\n  const [componentSpec, setComponentSpec] = useState<ComponentSpec | undefined>(\r\n    undefined\r\n  );\r\n  useEffect(() => {\r\n    // TODO: Validate the component\r\n    downloadComponentDataWithCache(componentUrl).then(setComponentSpec);\r\n  }, [componentUrl]);\r\n\r\n  if (componentSpec === undefined) {\r\n    return <div>Loading...</div>;\r\n  } else {\r\n    return (\r\n      <DraggableComponent\r\n        componentReference={{\r\n          url: componentUrl,\r\n          spec: componentSpec,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n};\r\n\r\nconst SingleFolderVis = ({\r\n  folder,\r\n  isOpen = false,\r\n}: {\r\n  folder: ComponentLibraryFolder;\r\n  isOpen?: boolean;\r\n}) => {\r\n  return (\r\n    <details\r\n      key={folder.name}\r\n      open={isOpen}\r\n      style={{\r\n        border: \"1px solid #aaa\",\r\n        borderRadius: \"4px\",\r\n        padding: \"4px\",\r\n        paddingLeft: \"10px\",\r\n      }}\r\n    >\r\n      <summary style={{ borderWidth: \"1px\", padding: \"4px\" }}>\r\n        <strong>{folder.name}</strong>\r\n      </summary>\r\n      {folder.folders &&\r\n        Array.from(folder.folders).map((componentFolder, index) => (\r\n          <SingleFolderVis\r\n            key={componentFolder.name}\r\n            folder={componentFolder}\r\n            isOpen={isOpen && index === 0}\r\n          />\r\n        ))}\r\n      {folder.components &&\r\n        Array.from(folder.components).map(\r\n          (componentReference) =>\r\n            componentReference.url && (\r\n              <DraggableComponentRow\r\n                key={componentReference.url}\r\n                componentUrl={componentReference.url}\r\n              />\r\n            )\r\n        )}\r\n    </details>\r\n  );\r\n};\r\n\r\nconst ComponentLibraryVisFromStruct = ({\r\n  componentLibraryStruct,\r\n}: {\r\n  componentLibraryStruct?: ComponentLibraryStruct;\r\n}) => {\r\n  return (\r\n    <details open>\r\n      <summary\r\n        style={{\r\n          border: \"1px solid #aaa\",\r\n          padding: \"4px\",\r\n          borderRadius: \"4px\",\r\n        }}\r\n      >\r\n        <strong>Component library</strong>\r\n      </summary>\r\n      <div style={{ paddingLeft: \"10px\" }}>\r\n        {componentLibraryStruct === undefined\r\n          ? \"The library is not loaded\"\r\n          : Array.from(componentLibraryStruct.folders).map(\r\n              (componentFolder, index) => (\r\n                <SingleFolderVis\r\n                  key={componentFolder.name}\r\n                  folder={componentFolder}\r\n                  isOpen={index === 0}\r\n                />\r\n              )\r\n            )}\r\n      </div>\r\n    </details>\r\n  );\r\n};\r\n\r\nconst loadComponentLibraryStruct = async (url: string) => {\r\n  const response = await httpGetWithCache(url, \"cache\", true);\r\n  const data = await response.arrayBuffer();\r\n  const componentLibrary = yaml.load(new TextDecoder().decode(data));\r\n  if (typeof componentLibrary !== \"object\" || componentLibrary === null) {\r\n    throw Error(\r\n      `Component library data is not a YAML-encoded object: ${componentLibrary}`\r\n    );\r\n  }\r\n  if (!isValidComponentLibraryStruct(componentLibrary)) {\r\n    throw Error(\r\n      `Invalid Component library data structure: ${componentLibrary}`\r\n    );\r\n  }\r\n  return componentLibrary;\r\n};\r\n\r\nconst ComponentLibraryVisFromUrl = ({ url }: { url: string }) => {\r\n  const [componentLibraryStruct, setComponentLibraryStruct] = useState<\r\n    ComponentLibraryStruct | undefined\r\n  >();\r\n\r\n  useEffect(() => {\r\n    if (componentLibraryStruct === undefined) {\r\n      (async () => {\r\n        try {\r\n          const loadedComponentLibrary = await loadComponentLibraryStruct(url);\r\n          setComponentLibraryStruct(loadedComponentLibrary);\r\n        } catch (err) {\r\n          console.error(err);\r\n        }\r\n      })();\r\n    }\r\n  }, [componentLibraryStruct, url]);\r\n\r\n  return (\r\n    <ComponentLibraryVisFromStruct\r\n      componentLibraryStruct={componentLibraryStruct}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ComponentLibraryVisFromUrl;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport { useState } from \"react\";\r\nimport { ComponentReference } from \"../componentSpec\";\r\nimport {\r\n  isComponentDbEmpty,\r\n  refreshComponentDb,\r\n  searchComponentsByName,\r\n} from \"../github\";\r\nimport DraggableComponent from \"./DraggableComponent\";\r\n\r\ninterface ComponentSearchProps {\r\n  componentFeedUrls?: string[],\r\n  gitHubSearchLocations?: string[],\r\n};\r\n\r\nconst SearchPanel = ({\r\n  componentFeedUrls,\r\n  gitHubSearchLocations,\r\n}: ComponentSearchProps) => {\r\n  const [error, setError] = useState<string | undefined>(undefined);\r\n  const [firstTime, setFirstTime] = useState(true);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [items, setItems] = useState<ComponentReference[]>([]);\r\n\r\n  const onQueryChange = (e: any) => {\r\n    setQuery(e.target.value);\r\n  };\r\n\r\n  async function fetchData(query: string) {\r\n    // If the DB is populated, return results immediately, then refresh the DB and update the results.\r\n    try {\r\n      if (!(await isComponentDbEmpty())) {\r\n        const componentRefs = await searchComponentsByName(query);\r\n        setIsLoaded(true);\r\n        setItems(componentRefs);\r\n      } else {\r\n        console.debug(\"Component DB is empty. Need to populate the DB first.\");\r\n      }\r\n      await refreshComponentDb({\r\n        ComponentFeedUrls: componentFeedUrls,\r\n        GitHubSearchLocations: gitHubSearchLocations,\r\n      });\r\n      setIsLoaded(true);\r\n      const componentRefs = await searchComponentsByName(query);\r\n      setItems(componentRefs);\r\n    } catch (error: any) {\r\n      setError(error.message);\r\n    }\r\n  }\r\n\r\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (query !== \"\") {\r\n      setFirstTime(false);\r\n      fetchData(query);\r\n    }\r\n    (window as any).gtag?.(\"event\", \"ComponentSearch_search\", {});\r\n  };\r\n\r\n  let results = <span></span>;\r\n  if (firstTime) {\r\n    results = <div>Enter search query</div>;\r\n  } else if (error !== undefined) {\r\n    results = <div>Error: {error}</div>;\r\n  } else if (!firstTime && !isLoaded) {\r\n    results = <div>Searching...</div>;\r\n  } else if (items !== undefined) {\r\n    const componentElements = items.map((componentRef) => (\r\n      <DraggableComponent\r\n        key={componentRef.digest ?? componentRef.url}\r\n        componentReference={componentRef}\r\n      />\r\n    ));\r\n    results = <>{componentElements}</>;\r\n  }\r\n  return (\r\n    <div className=\"nodeList\">\r\n      <form onSubmit={onSubmit}>\r\n        <input type=\"search\" placeholder=\"XGBoost\" onChange={onQueryChange} />\r\n        <input type=\"submit\" />\r\n      </form>\r\n      <div>{results}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPanel;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport {\r\n  useStoreState,\r\n} from \"react-flow-renderer\";\r\n\r\nimport { ComponentSpec } from \"../componentSpec\";\r\nimport { augmentComponentSpec } from './GraphComponentSpecFlow'\r\nimport { componentSpecToYaml } from \"../componentStore\";\r\nimport { useState } from \"react\";\r\n\r\ninterface GraphComponentExporterProps {\r\n  componentSpec: ComponentSpec,\r\n}\r\n\r\nconst GraphComponentExporter = ({\r\n  componentSpec,\r\n}: GraphComponentExporterProps) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n  const [includeComponentSpecs, ] = useState(false);\r\n\r\n  let componentText = \"\";\r\n  try {\r\n    const graphComponent = augmentComponentSpec(componentSpec, nodes, includeComponentSpecs, true);\r\n    componentText = componentSpecToYaml(graphComponent);\r\n  } catch(err) {\r\n    componentText = String(err);\r\n  }\r\n\r\n  const componentTextBlob = new Blob([componentText], { type: \"text/yaml\" }); // Or application/x-yaml (which leads to downloading)\r\n  const downloadLink = <a href={URL.createObjectURL(componentTextBlob)} download={\"component.yaml\"}>component.yaml</a>\r\n\r\n  return (\r\n    <details>\r\n      <summary>Graph {downloadLink}</summary>\r\n      <pre style={{overflow: \"auto\"}}>{componentText}</pre>\r\n    </details>\r\n  );\r\n};\r\n\r\nexport default GraphComponentExporter;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport {\r\n  useStoreState,\r\n} from \"react-flow-renderer\";\r\n\r\nimport { ComponentSpec } from \"../componentSpec\";\r\nimport { augmentComponentSpec } from \"./GraphComponentSpecFlow\";\r\nimport { buildVertexPipelineSpecFromGraphComponentSpec } from '../compilers/GoogleCloudVertexAIPipelines/vertexAiCompiler'\r\n\r\ninterface VertexAiExporterProps {\r\n  componentSpec: ComponentSpec;\r\n}\r\n\r\nconst VertexAiExporter = ({componentSpec}: VertexAiExporterProps) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n\r\n  let vertexPipelineSpecText = \"\";\r\n  try {\r\n    // Augmenting the componentSpec might be useless right now, but it can stabilize the output (e.g. ordering).\r\n    // Also, in the future, the original spec might be included in the vertexPipelineSpec\r\n    componentSpec = augmentComponentSpec(componentSpec, nodes, true, true);\r\n    const vertexPipelineSpec = buildVertexPipelineSpecFromGraphComponentSpec(componentSpec);\r\n    vertexPipelineSpecText = JSON.stringify(vertexPipelineSpec, undefined, 2);\r\n  } catch(err) {\r\n    vertexPipelineSpecText = String(err);\r\n  }\r\n\r\n  const vertexPipelineSpecTextBlob = new Blob([vertexPipelineSpecText], { type: \"application/json\" }); // Or application/x-yaml (which leads to downloading)\r\n  // TODO: Call vertexPipelineSpecTextBlobUrl.revokeObjectURL in the future\r\n  const vertexPipelineSpecTextBlobUrl = URL.createObjectURL(vertexPipelineSpecTextBlob);\r\n\r\n  return (\r\n    <details>\r\n      <summary>\r\n        Cloud IR <a\r\n          href={vertexPipelineSpecTextBlobUrl}\r\n          download={\"vertex_pipeline_spec.json\"}\r\n        >\r\n          vertex_pipeline_spec.json\r\n        </a>\r\n      </summary>\r\n      <pre style={{ overflow: \"auto\" }}>{vertexPipelineSpecText}</pre>\r\n    </details>\r\n  );\r\n};\r\n\r\nexport default VertexAiExporter;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Menu,\r\n  MenuItem,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { useCallback, useState, useEffect, useRef } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport {\r\n  addComponentToListByText,\r\n  deleteComponentFileFromList,\r\n  ComponentFileEntry,\r\n  getAllComponentFilesFromList,\r\n  addComponentToListByUrl,\r\n} from \"../componentStore\";\r\nimport DraggableComponent from \"./DraggableComponent\";\r\n\r\nconst USER_COMPONENTS_LIST_NAME = \"user_components\";\r\n\r\nconst UserComponentLibrary = () => {\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [componentFiles, setComponentFiles] = useState(\r\n    new Map<string, ComponentFileEntry>()\r\n  );\r\n  const [contextMenuFileName, setContextMenuFileName] = useState<string>();\r\n  const [contextMenuAnchor, setContextMenuAnchor] = useState<HTMLElement>();\r\n  const [isImportComponentDialogOpen, setIsImportComponentDialogOpen] =\r\n    useState(false);\r\n\r\n  const refreshComponents = useCallback(() => {\r\n    getAllComponentFilesFromList(USER_COMPONENTS_LIST_NAME).then(\r\n      setComponentFiles\r\n    );\r\n  }, [setComponentFiles]);\r\n\r\n  useEffect(refreshComponents, [refreshComponents]);\r\n\r\n  const onDrop = useCallback((acceptedFiles: File[]) => {\r\n    acceptedFiles.forEach((file) => {\r\n      const reader = new FileReader();\r\n      reader.onabort = () => console.log(\"file reading was aborted\");\r\n      reader.onerror = () => console.log(\"file reading has failed\");\r\n      reader.onload = async () => {\r\n        const binaryStr = reader.result;\r\n        if (binaryStr === null || binaryStr === undefined) {\r\n          console.error(`Dropped file reader result was ${binaryStr}`);\r\n          return;\r\n        }\r\n        try {\r\n          const componentRefPlusData = await addComponentToListByText(\r\n            USER_COMPONENTS_LIST_NAME,\r\n            binaryStr,\r\n          );\r\n          const componentRef = componentRefPlusData.componentRef;\r\n          console.debug(\"storeComponentText succeeded\", componentRef);\r\n          (window as any).gtag?.(\"event\", \"UserComponents_component_import\", {\r\n            result: \"succeeded\",\r\n          });\r\n          setErrorMessage(\"\");\r\n          refreshComponents();\r\n        } catch (err) {\r\n          const errorMessage =\r\n            typeof err === \"object\" && err ? err.toString() : String(err);\r\n          setErrorMessage(\r\n            `Error parsing the dropped file as component: ${errorMessage}.`\r\n          );\r\n          console.error(\"Error parsing the dropped file as component\", err);\r\n          (window as any).gtag?.(\"event\", \"UserComponents_component_import\", {\r\n            result: \"failed\",\r\n          });\r\n        }\r\n      };\r\n      reader.readAsArrayBuffer(file);\r\n    });\r\n  }, [refreshComponents]);\r\n\r\n  const onImportFromUrl = useCallback(\r\n    async (url: string) => {\r\n      try {\r\n        const componentFileEntry = await addComponentToListByUrl(\r\n          USER_COMPONENTS_LIST_NAME,\r\n          url\r\n        );\r\n        const componentRef = componentFileEntry.componentRef;\r\n        console.debug(\"addComponentToListByUrl succeeded\", componentRef);\r\n        (window as any).gtag?.(\r\n          \"event\",\r\n          \"UserComponents_component_import_from_url_succeeded\"\r\n        );\r\n        setErrorMessage(\"\");\r\n        refreshComponents();\r\n        setIsImportComponentDialogOpen(false);\r\n      } catch (err) {\r\n        const errorMessage =\r\n          typeof err === \"object\" && err ? err.toString() : String(err);\r\n        setErrorMessage(\r\n          `Error parsing the file as component: ${errorMessage}.`\r\n        );\r\n        console.error(\"Error importing component from the URL\", err);\r\n        (window as any).gtag?.(\r\n          \"event\",\r\n          \"UserComponents_component_import_from_url_failed\"\r\n        );\r\n      }\r\n    },\r\n    [refreshComponents]\r\n  );\r\n\r\n  const handleContextMenuDelete = async () => {\r\n    if (contextMenuFileName) {\r\n      setContextMenuFileName(undefined);\r\n      await deleteComponentFileFromList(\r\n        USER_COMPONENTS_LIST_NAME,\r\n        contextMenuFileName\r\n      );\r\n      refreshComponents();\r\n    }\r\n  };\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    accept: \".yaml\",\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={(e) => setIsImportComponentDialogOpen(true)}\r\n        style={{ marginBottom: \"4px\" }}\r\n      >\r\n        Import from URL\r\n      </button>\r\n      <div {...getRootProps()}>\r\n        <input {...getInputProps()} />\r\n        <div\r\n          style={{\r\n            border: \"1px solid black\",\r\n            padding: \"4px\",\r\n            minHeight: \"3em\",\r\n          }}\r\n        >\r\n          {isDragActive\r\n            ? \"Drop the files here ...\"\r\n            : errorMessage ||\r\n              \"Drag and drop component.yaml files or click to select files\"}\r\n          {Array.from(componentFiles.entries()).map(([fileName, fileEntry]) => (\r\n            <DraggableComponent\r\n              key={fileName}\r\n              componentReference={fileEntry.componentRef}\r\n              onContextMenu={(e) => {\r\n                e.preventDefault();\r\n                setContextMenuAnchor(e.currentTarget);\r\n                setContextMenuFileName(fileName);\r\n              }}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <Menu\r\n        open={contextMenuFileName !== undefined}\r\n        anchorEl={contextMenuAnchor}\r\n        onClose={() => {\r\n          setContextMenuFileName(undefined);\r\n        }}\r\n      >\r\n        <MenuItem dense={true} onClick={handleContextMenuDelete}>\r\n          Delete\r\n        </MenuItem>\r\n      </Menu>\r\n      <ImportComponentFromUrlDialog\r\n        isOpen={isImportComponentDialogOpen}\r\n        onCancel={() => setIsImportComponentDialogOpen(false)}\r\n        initialValue={\"https://raw.githubusercontent.com/.../component.yaml\"}\r\n        onImport={onImportFromUrl}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserComponentLibrary;\r\n\r\ninterface SaveAsDialogProps {\r\n  isOpen: boolean;\r\n  onImport: (name: string) => void;\r\n  onCancel: () => void;\r\n  initialValue: string | undefined;\r\n}\r\n\r\nconst ImportComponentFromUrlDialog = ({\r\n  isOpen,\r\n  onImport,\r\n  onCancel,\r\n  initialValue,\r\n}: SaveAsDialogProps) => {\r\n  const urlInputRef = useRef<HTMLInputElement>();\r\n  return (\r\n    <Dialog open={isOpen} fullWidth>\r\n      <DialogTitle>{\"Import component\"}</DialogTitle>\r\n      <form\r\n        onSubmit={(e) => {\r\n          if (urlInputRef.current) {\r\n            onImport(urlInputRef.current.value);\r\n          }\r\n          e.preventDefault();\r\n        }}\r\n      >\r\n        <DialogContent>\r\n          <TextField\r\n            id=\"name\"\r\n            type=\"text\"\r\n            placeholder={initialValue}\r\n            label=\"Component URL\"\r\n            inputRef={urlInputRef}\r\n            required\r\n            autoFocus\r\n            fullWidth\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={onCancel}>Cancel</Button>\r\n          <Button color=\"primary\" type=\"submit\" autoFocus>\r\n            Import\r\n          </Button>\r\n        </DialogActions>\r\n      </form>\r\n    </Dialog>\r\n  );\r\n};\r\n","/**\r\n * @license\r\n * Copyright 2022 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2022 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport { getMutableAppSettings } from \"../appSettings\";\r\n\r\ntype AppSettingsDialogProps = {\r\n  isOpen: boolean;\r\n  handleClose: () => void;\r\n};\r\n\r\nconst AppSettingsDialog = ({ isOpen, handleClose }: AppSettingsDialogProps) => {\r\n  const appSettings = getMutableAppSettings();\r\n\r\n  const [componentLibraryUrl, setComponentLibraryUrl] = useState(\r\n    appSettings.componentLibraryUrl.value\r\n  );\r\n  const [pipelineLibraryUrl, setPipelineLibraryUrl] = useState(\r\n    appSettings.pipelineLibraryUrl.value\r\n  );\r\n  const [defaultPipelineUrl, setDefaultPipelineUrl] = useState(\r\n    appSettings.defaultPipelineUrl.value\r\n  );\r\n  const [componentFeedUrls, setComponentFeedUrls] = useState(\r\n    appSettings.componentFeedUrls.value\r\n  );\r\n  const [gitHubSearchLocations, setGitHubSearchLocations] = useState(\r\n    appSettings.gitHubSearchLocations.value\r\n  );\r\n  const [googleCloudOAuthClientId, setGoogleCloudOAuthClientId] = useState(\r\n    appSettings.googleCloudOAuthClientId.value\r\n  );\r\n\r\n  const handleSave = () => {\r\n    appSettings.componentLibraryUrl.value = componentLibraryUrl;\r\n    appSettings.pipelineLibraryUrl.value = pipelineLibraryUrl;\r\n    appSettings.defaultPipelineUrl.value = defaultPipelineUrl;\r\n    appSettings.componentFeedUrls.value = componentFeedUrls;\r\n    appSettings.gitHubSearchLocations.value = gitHubSearchLocations;\r\n    appSettings.googleCloudOAuthClientId.value = googleCloudOAuthClientId;\r\n    handleClose();\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setComponentLibraryUrl(appSettings.componentLibraryUrl.resetToDefault());\r\n    setPipelineLibraryUrl(appSettings.pipelineLibraryUrl.resetToDefault());\r\n    setDefaultPipelineUrl(appSettings.defaultPipelineUrl.resetToDefault());\r\n    setComponentFeedUrls(appSettings.componentFeedUrls.resetToDefault());\r\n    setGitHubSearchLocations(\r\n      appSettings.gitHubSearchLocations.resetToDefault()\r\n    );\r\n    setGoogleCloudOAuthClientId(\r\n      appSettings.googleCloudOAuthClientId.resetToDefault()\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Dialog open={isOpen} onClose={handleClose}>\r\n      <DialogTitle>Settings</DialogTitle>\r\n      <DialogContent>\r\n        {/* <DialogContentText>Application settings</DialogContentText> */}\r\n        <TextField\r\n          id=\"component_library_url\"\r\n          label=\"Component library URL\"\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          fullWidth\r\n          value={componentLibraryUrl}\r\n          onChange={(e) => setComponentLibraryUrl(e.target.value)}\r\n        />\r\n        <TextField\r\n          id=\"pipeline_library_url\"\r\n          label=\"Pipeline library URL\"\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          fullWidth\r\n          value={pipelineLibraryUrl}\r\n          onChange={(e) => setPipelineLibraryUrl(e.target.value)}\r\n        />\r\n        <TextField\r\n          id=\"default_pipeline_url\"\r\n          label=\"Default pipeline URL\"\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          fullWidth\r\n          value={defaultPipelineUrl}\r\n          onChange={(e) => setDefaultPipelineUrl(e.target.value)}\r\n        />\r\n        <TextField\r\n          id=\"component_search_feed_urls\"\r\n          label=\"Component search feed URLs\"\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          fullWidth\r\n          multiline\r\n          value={componentFeedUrls.join(\"\\n\")}\r\n          onChange={(e) => setComponentFeedUrls(e.target.value.split(\"\\n\"))}\r\n        />\r\n        <TextField\r\n          id=\"component_search_locations_github\"\r\n          label=\"Component search locations - GitHub\"\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          fullWidth\r\n          multiline\r\n          value={gitHubSearchLocations.join(\"\\n\")}\r\n          onChange={(e) => setGitHubSearchLocations(e.target.value.split(\"\\n\"))}\r\n        />\r\n        <TextField\r\n          id=\"google_cloud_client_id\"\r\n          label=\"Google Cloud OAuth client ID\"\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          fullWidth\r\n          value={googleCloudOAuthClientId}\r\n          onChange={(e) => setGoogleCloudOAuthClientId(e.target.value)}\r\n        />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClose} color=\"default\">\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={handleSave} color=\"primary\">\r\n          Save\r\n        </Button>\r\n        <Button onClick={handleReset} color=\"secondary\">\r\n          Reset\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default AppSettingsDialog;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\n/* global gapi */\r\n\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport { ComponentSpec } from '../componentSpec';\r\nimport { buildVertexPipelineJobFromGraphComponent } from '../compilers/GoogleCloudVertexAIPipelines/vertexAiCompiler'\r\nimport { PipelineJob } from '../compilers/GoogleCloudVertexAIPipelines/vertexPipelineSpec';\r\n\r\nconst LOCAL_STORAGE_GCS_OUTPUT_DIRECTORY_KEY = \"GoogleCloudSubmitter/gcsOutputDirectory\";\r\nconst LOCAL_STORAGE_PROJECT_ID_KEY = \"GoogleCloudSubmitter/projectId\";\r\nconst LOCAL_STORAGE_REGION_KEY = \"GoogleCloudSubmitter/region\";\r\nconst LOCAL_STORAGE_PROJECT_IDS_KEY = \"GoogleCloudSubmitter/projectIds\";\r\n\r\nconst VERTEX_AI_PIPELINES_REGIONS = [\r\n  'us-central1',\r\n  'us-east1',\r\n  'us-west1',\r\n  'europe-west1',\r\n  'europe-west2',\r\n  'europe-west4',\r\n  'asia-east1',\r\n  'asia-southeast1',\r\n  'northamerica-northeast1',\r\n];\r\n\r\nconst VERTEX_AI_PIPELINES_DEFAULT_REGION = 'us-central1';\r\n\r\nconst authorizeGoogleCloudClient = async (\r\n  clientId: string,\r\n  scopes: string[],\r\n  immediate = false, // Setting immediate to true prevents auth window showing every time. But it needs to be false the first time (when cookies are not set).\r\n) => {\r\n  return new Promise<GoogleApiOAuth2TokenObject>(\r\n    (resolve, reject) => {\r\n      gapi.auth.authorize(\r\n        {\r\n          client_id: clientId,\r\n          scope: scopes,\r\n          immediate: immediate,\r\n        },\r\n        (authResult) => {\r\n          // console.debug(\"authorizeGoogleCloudClient: called back\");\r\n          if (authResult === undefined) {\r\n            console.error(\"authorizeGoogleCloudClient failed\");\r\n            reject(\"gapi.auth.authorize result is undefined\");\r\n          } else if (authResult.error) {\r\n            console.error(\r\n              \"authorizeGoogleCloudClient failed\",\r\n              authResult.error\r\n            );\r\n            reject(authResult.error);\r\n          } else {\r\n            // console.debug(\"authorizeGoogleCloudClient: Success\");\r\n            // Working around the Google Auth bug: The request succeeds, but the returned token does not have the requested scopes.\r\n            // See https://github.com/google/google-api-javascript-client/issues/743\r\n            const receivedScopesString = (authResult as any).scope as string | undefined;\r\n            const receivedScopes = receivedScopesString?.split(\" \");\r\n            if (receivedScopes === undefined || !scopes.every((scope) => receivedScopes.includes(scope))) {\r\n              const errorMessage = `Authorization call succeeded, but the returned scopes are ${receivedScopesString}`;\r\n              console.error(errorMessage);\r\n              reject(errorMessage);\r\n            } else {\r\n              resolve(authResult);\r\n            }\r\n          }\r\n        }\r\n      );\r\n    }\r\n  );\r\n};\r\n\r\nexport const ensureGoogleCloudAuthorizesScopes = async (\r\n  googleCloudOAuthClientId: string,\r\n  scopes: string[]\r\n) => {\r\n  try {\r\n    // console.debug('Before ensureGoogleCloudAuthorizesScopes(immediate=true)');\r\n    const oauthToken = await authorizeGoogleCloudClient(\r\n      googleCloudOAuthClientId,\r\n      scopes,\r\n      true,\r\n    );\r\n    // console.debug('After ensureGoogleCloudAuthorizesScopes(immediate=true)');\r\n    (window as any).gtag?.(\"event\", \"GoogleCloud_auth\", {\r\n      result: \"succeeded\",\r\n      immediate: \"true\"\r\n    });\r\n    return oauthToken;\r\n  } catch (err) {\r\n    // console.error('ensureGoogleCloudAuthorizesScopes(immediate=true)', err);\r\n    try {\r\n      const oauthToken = await authorizeGoogleCloudClient(\r\n        googleCloudOAuthClientId,\r\n        scopes,\r\n        false\r\n      );\r\n      (window as any).gtag?.(\"event\", \"GoogleCloud_auth\", {\r\n        result: \"succeeded\",\r\n        immediate: \"false\"\r\n      });\r\n      return oauthToken;\r\n    } catch (err) {\r\n      // console.error('ensureGoogleCloudAuthorizesScopes(immediate=false)', err);\r\n      (window as any).gtag?.(\"event\", \"GoogleCloud_auth\", {\r\n        result: \"failed\",\r\n        immediate: \"false\"\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nconst cloudresourcemanagerListProjects = async (\r\n  googleCloudOAuthClientId: string\r\n) => {\r\n  await ensureGoogleCloudAuthorizesScopes(\r\n    googleCloudOAuthClientId,\r\n    [\"https://www.googleapis.com/auth/cloud-platform\"]\r\n  );\r\n  const response = await gapi.client.request({\r\n    path: \"https://cloudresourcemanager.googleapis.com/v1/projects/\",\r\n  });\r\n  return response.result;\r\n}\r\n\r\nconst aiplatformCreatePipelineJob = async (\r\n  projectId: string,\r\n  region = \"us-central1\",\r\n  pipelineJob: Record<string, any>,\r\n  googleCloudOAuthClientId: string,\r\n  pipelineJobId?: string,\r\n) => {\r\n  await ensureGoogleCloudAuthorizesScopes(\r\n    googleCloudOAuthClientId,\r\n    [\"https://www.googleapis.com/auth/cloud-platform\"]\r\n  );\r\n  const response = await gapi.client.request({\r\n    path: `https://${region}-aiplatform.googleapis.com/v1beta1/projects/${projectId}/locations/${region}/pipelineJobs?pipelineJobId=${pipelineJobId}`,\r\n    method: \"POST\",\r\n    body: JSON.stringify(pipelineJob),\r\n  });\r\n  (window as any).gtag?.(\"event\", \"GoogleCloud_submit_pipeline_job\", {\r\n    result: \"succeeded\"\r\n  });\r\n  return response.result;\r\n}\r\n\r\ninterface GoogleCloudSubmitterProps {\r\n  componentSpec?: ComponentSpec,\r\n  pipelineArguments?: Map<string, string>,\r\n  googleCloudOAuthClientId: string;\r\n};\r\n\r\nconst GoogleCloudSubmitter = ({\r\n  componentSpec,\r\n  pipelineArguments,\r\n  googleCloudOAuthClientId\r\n}: GoogleCloudSubmitterProps) => {\r\n  const [projects, setProjects] = useState<string[]>(\r\n    () => JSON.parse(window.localStorage?.getItem(LOCAL_STORAGE_PROJECT_IDS_KEY) ?? \"[]\")\r\n  );\r\n  const [project, setProject] = useState<string>(\r\n    () => window.localStorage?.getItem(LOCAL_STORAGE_PROJECT_ID_KEY) ?? \"\"\r\n  ); // undefined causes error: https://reactjs.org/docs/forms.html#controlled-components https://stackoverflow.com/a/47012342\r\n  const [region, setRegion] = useState(\r\n    () => window.localStorage?.getItem(LOCAL_STORAGE_REGION_KEY) ?? VERTEX_AI_PIPELINES_DEFAULT_REGION\r\n  );\r\n  const [error, setError] = useState(\"\");\r\n  const [gcsOutputDirectory, setGcsOutputDirectory] = useState(\r\n    () => window.localStorage?.getItem(LOCAL_STORAGE_GCS_OUTPUT_DIRECTORY_KEY) ?? \"\"\r\n  );\r\n  const [pipelineJobWebUrl, setPipelineJobWebUrl] = useState<\r\n    string | undefined\r\n  >(undefined);\r\n  const [compilationError, setCompilationError] = useState<string | undefined>(\r\n    undefined\r\n  );\r\n  const [vertexPipelineJob, setVertexPipelineJob] = useState<\r\n    PipelineJob | undefined\r\n  >(undefined);\r\n  const [vertexPipelineJsonBlobUrl, setVertexPipelineJsonBlobUrl] = useState<\r\n    string | undefined\r\n  >(undefined);\r\n\r\n  useEffect(() => {\r\n    if (componentSpec !== undefined) {\r\n      try {\r\n        const vertexPipelineJob = buildVertexPipelineJobFromGraphComponent(\r\n          componentSpec,\r\n          gcsOutputDirectory,\r\n          pipelineArguments\r\n        );\r\n        setCompilationError(undefined);\r\n        vertexPipelineJob.labels = {\r\n          sdk: \"cloud-pipelines-editor\",\r\n          \"cloud-pipelines-editor-version\": \"0-0-1\",\r\n        };\r\n        setVertexPipelineJob(vertexPipelineJob);\r\n        const vertexPipelineJobJson = JSON.stringify(\r\n          vertexPipelineJob,\r\n          undefined,\r\n          2\r\n        );\r\n        const vertexPipelineJsonBlobUrl = URL.createObjectURL(\r\n          new Blob([vertexPipelineJobJson], { type: \"application/json\" })\r\n        );\r\n        setVertexPipelineJsonBlobUrl(vertexPipelineJsonBlobUrl);\r\n      } catch (err) {\r\n        const errorMessage =\r\n          typeof err === \"object\" && err instanceof Error\r\n            ? err.toString()\r\n            : String(err);\r\n        setCompilationError(errorMessage);\r\n        setVertexPipelineJob(undefined);\r\n        setVertexPipelineJsonBlobUrl(undefined);\r\n      }\r\n    }\r\n  }, [componentSpec, pipelineArguments, gcsOutputDirectory]);\r\n\r\n  const readyToSubmit =\r\n    project !== \"\" && region !== \"\" && vertexPipelineJob !== undefined;\r\n\r\n  return (\r\n    <form\r\n      onSubmit={async (e) => {\r\n        e.preventDefault();\r\n        if (vertexPipelineJob === undefined) {\r\n          return;\r\n        }\r\n        setPipelineJobWebUrl(undefined);\r\n        try {\r\n          // setItem might throw exception on iOS in incognito mode\r\n          try {\r\n            window.localStorage?.setItem(LOCAL_STORAGE_GCS_OUTPUT_DIRECTORY_KEY, gcsOutputDirectory);\r\n            window.localStorage?.setItem(LOCAL_STORAGE_PROJECT_ID_KEY, project);\r\n            window.localStorage?.setItem(LOCAL_STORAGE_REGION_KEY, region);\r\n          } catch(err) {\r\n            console.error(\"GoogleCloudSubmitter: Error writing properties to the localStorage\", err);\r\n          }\r\n          const displayName = (\r\n            (componentSpec?.name ?? \"Pipeline\") +\r\n            \" \" +\r\n            new Date().toISOString().replace(\"T\", \" \").replace(\"Z\", \"\")\r\n          ).substring(0, 127);\r\n          const desiredPipelineJobId = displayName\r\n            .toLowerCase()\r\n            .replace(/[^-a-z0-9]/g, \"-\")\r\n            .replace(/^-+/, \"\"); // No leading dashes\r\n          vertexPipelineJob.displayName = displayName;\r\n          const result = await aiplatformCreatePipelineJob(\r\n            project,\r\n            region,\r\n            vertexPipelineJob,\r\n            googleCloudOAuthClientId,\r\n            desiredPipelineJobId\r\n          );\r\n          const pipelineJobName: string = result.name;\r\n          const pipelineJobId = pipelineJobName.split('/').slice(-1)[0];\r\n          const pipelineJobWebUrl = `https://console.cloud.google.com/vertex-ai/locations/${region}/pipelines/runs/${pipelineJobId}?project=${project}`;\r\n          setPipelineJobWebUrl(pipelineJobWebUrl);\r\n          setError(\"\");\r\n        } catch (err: any) {\r\n          console.error(err);\r\n          setError(err?.result?.error?.message ?? \"Error\");\r\n          (window as any).gtag?.(\"event\", \"GoogleCloud_submit_pipeline_job\", {\r\n            result: \"failed\"\r\n          });\r\n        }\r\n      }}\r\n    >\r\n      <div style={{\r\n        whiteSpace: \"nowrap\",\r\n        margin: \"5px\",\r\n      }}>\r\n        <label htmlFor=\"project\">Project: </label>\r\n        <input\r\n          id=\"project\"\r\n          required\r\n          type=\"text\"\r\n          list=\"projects\"\r\n          placeholder=\"<my-project-id>\"\r\n          value={project}\r\n          onChange={(e) => setProject(e.target.value)}\r\n        />\r\n        <datalist id=\"projects\">\r\n          {projects.map((projectId) => (\r\n            <option key={projectId} value={projectId} />\r\n          ))}\r\n        </datalist>\r\n        <button\r\n          type=\"button\" // The default button type is \"submit\", not \"button\". WTF!?\r\n          onClick={async (e) => {\r\n            try {\r\n              const result = await cloudresourcemanagerListProjects(\r\n                googleCloudOAuthClientId\r\n              );\r\n              const projectIds = (result.projects as any[]).map<string>(\r\n                (projectInfo) => projectInfo.projectId\r\n              );\r\n              setProjects(projectIds);\r\n              setError(\"\");\r\n              try {\r\n                window.localStorage?.setItem(LOCAL_STORAGE_PROJECT_IDS_KEY, JSON.stringify(projectIds));\r\n              } catch(err) {\r\n                console.error(\"GoogleCloudSubmitter: Error writing properties to the localStorage\", err);\r\n              }\r\n              (window as any).gtag?.(\"event\", \"GoogleCloud_list_projects\", { result: \"succeeded\" });\r\n            } catch (err: any) {\r\n              console.error(err);\r\n              setError(err?.result?.error?.message ?? \"Error\");\r\n              (window as any).gtag?.(\"event\", \"GoogleCloud_list_projects\", { result: \"failed\" });\r\n            }\r\n          }}\r\n        >\r\n          ⟳{/* 🗘⭯ ⭮ ↺ ↻ ⟲ ⟳ 🔃🔄 */}\r\n        </button>\r\n      </div>\r\n      <div style={{\r\n        whiteSpace: \"nowrap\",\r\n        margin: \"5px\",\r\n      }}>\r\n        <label htmlFor=\"region\">Region: </label>\r\n        <input\r\n          id=\"region\"\r\n          required\r\n          type=\"text\"\r\n          list=\"regions\"\r\n          value={region}\r\n          onChange={(e) => setRegion(e.target.value)}\r\n        />\r\n        <datalist id=\"regions\">\r\n          {VERTEX_AI_PIPELINES_REGIONS.map((region) => (\r\n            <option key={region} value={region} />\r\n          ))}\r\n        </datalist>\r\n      </div>\r\n      <div style={{\r\n        whiteSpace: \"nowrap\",\r\n        margin: \"5px\",\r\n      }}>\r\n        <label htmlFor=\"region\">GCS dir: </label>\r\n        <input\r\n          id=\"gcsOutputDirectory\"\r\n          required\r\n          type=\"text\"\r\n          value={gcsOutputDirectory}\r\n          onChange={(e) => setGcsOutputDirectory(e.target.value)}\r\n        />\r\n      </div>\r\n      <div style={{\r\n        whiteSpace: \"nowrap\",\r\n        margin: \"5px\",\r\n      }}>\r\n        <input\r\n          type=\"submit\"\r\n          disabled={!readyToSubmit}\r\n          value=\"Submit pipeline job\"\r\n        />\r\n        {pipelineJobWebUrl && <a href={pipelineJobWebUrl} target=\"_blank\" rel=\"noreferrer\" style={{ margin: \"5px\" }}>Job</a>}\r\n      </div>\r\n      {vertexPipelineJsonBlobUrl !== undefined && (\r\n        <div\r\n          style={{\r\n            margin: \"5px\",\r\n          }}\r\n        >\r\n          Or download the{\" \"}\r\n          <a href={vertexPipelineJsonBlobUrl} download={\"vertex_pipeline_job.json\"}>\r\n            pipeline_job.json\r\n          </a>{\" \"}\r\n          file, then go to{\" \"}\r\n          <a href=\"https://console.cloud.google.com/vertex-ai/pipelines\">\r\n            Vertex Pipelines\r\n          </a>{\" \"}\r\n          and{\" \"}\r\n          <a href=\"https://cloud.google.com/vertex-ai/docs/pipelines/run-pipeline#console\">\r\n            create a new run\r\n          </a>\r\n          .\r\n        </div>\r\n      )}\r\n      {compilationError && <div>{compilationError}</div>}\r\n      {error && <div>Error: {error}</div>}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default GoogleCloudSubmitter;\r\n","/**\r\n * @license\r\n * Copyright 2022 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2022 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nexport function assertDefined<T>(obj: T | undefined) {\r\n  if (obj === undefined) {\r\n    throw TypeError(\"Object is undefined\");\r\n  }\r\n  return obj;\r\n}\r\n\r\nexport function notUndefined<T>(x: T | undefined): x is T {\r\n  return x !== undefined;\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2022 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2022 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport {\r\n  ArgumentType,\r\n  ComponentSpec,\r\n  StringOrPlaceholder,\r\n  isContainerImplementation,\r\n  isGraphImplementation,\r\n  InputSpec,\r\n} from \"../../componentSpec\";\r\n\r\nimport { assertDefined, notUndefined } from \"../../utils\";\r\n\r\nimport * as argo from \"./argo-workflows/ui/src/models/workflows\";\r\n\r\nexport type {\r\n  Workflow,\r\n  WorkflowSpec,\r\n} from \"./argo-workflows/ui/src/models/workflows\";\r\n\r\n// # How to handle I/O:\r\n// Rules (might have exceptions)\r\n// output = output artifact\r\n// inputValue => input parameter\r\n// inputPath => input artifact\r\n// # Fixing conflicts:\r\n// 1) Artifact (may only come from task output) is consumed as value.\r\n//   Solution 1): Change input from parameter to artifact and use the input.artifact.value placeholder.\r\n//      Cons: The downstream component input definitions depend on arguments. (Some inputs are changed from parameter to artifact.)\r\n//            Argo does not support artifact value placeholder.\r\n//   Solution 2): Add parameter output (with the same name as the artifact output) to the upstream component. The paths should be the same, so a single file will be treated as both parameter and output.\r\n//      Cons: The upstream component output definitions depend on downstream consumption style. (Although parameter outputs are added, not changed.)\r\n//   Solution 3) (implemented): Insert a \"Downloader\" task (artifact to parameter) between upstream and downstream.\r\n//      Cons: Extra container task\r\n// 2) Parameter (pipeline input or constant value) is consumed as artifact (as file).\r\n//   Solution 0) (used): Argo directly supports \"raw\" artifacts.\r\n//   Solution 1): Insert an \"Uploader\" task to convert parameter to artifact.\r\n//      Cons: Extra container task\r\n\r\n// Argo directly supports pipeline artifact arguments.\r\n// Argo supports raw artifacts. So consuming constant strings is trivial. (Also parameter task outputs if they existed)\r\n// Argo does *not* support artifact.value placeholder.\r\n//\r\n// Problem: Artifact is consumed as parameter (as value):\r\n//   In the Kubeflow Pipelines compiler I've implemented Solution 2: I modify the upstream template to produce output parameter in addition to output artifact\r\n//   In this compiler I've implemented artifact-to-parameter converter task (~Solution 3)\r\n\r\n// General compilation logic sequence to compile artifacts vs parameters:\r\n// 1. Generate command line (in some cases (e.g. Vertex Pipelines) following hints about the argument source kind).\r\n// 2. Generate input definitions based on how the arguments are consumed.\r\n// 3. Generate task arguments based on task arguments and input definitions. Insert converters if incompatible.\r\n\r\n// TODO: Include the KFP-compatible original component spec in the compiled workflow (as a template annotation).\r\n// TODO: Include the KFP-compatible input/output name and type mapping in the compiled workflow (as a template annotation).\r\n\r\nconst CONTAINER_INPUTS_DIR = \"/tmp/inputs\";\r\nconst CONTAINER_OUTPUTS_DIR = \"/tmp/outputs\";\r\nconst IO_FILE_NAME = \"data\";\r\n\r\nconst sanitizeParameterOrArtifactName = (name: string) => {\r\n  return name.replaceAll(/[^-a-zA-Z0-9_]/g, \"-\");\r\n};\r\n\r\nconst sanitizeID = (name: string) => {\r\n  const sanitized1 = name.replaceAll(/[^-a-zA-Z0-9]/g, \"-\");\r\n  const sanitized2 =\r\n    sanitized1.length === 0 || sanitized1[0].match(/[^a-zA-Z0-9]/g)\r\n      ? \"id\" + sanitized1\r\n      : sanitized1;\r\n  return sanitized2;\r\n};\r\n\r\ntype ResolvedCommandLineAndArgs = {\r\n  command?: string[];\r\n  args?: string[];\r\n  inputsConsumedAsParameter: Set<string>;\r\n  inputsConsumedAsArtifact: Set<string>;\r\n};\r\n\r\nconst resolveCommandLine = (\r\n  componentSpec: ComponentSpec,\r\n  taskArguments: Record<string, ArgumentType>\r\n): ResolvedCommandLineAndArgs => {\r\n  if (!isContainerImplementation(componentSpec.implementation)) {\r\n    throw Error(\"resolveCommandLine only supports container components\");\r\n  }\r\n  const containerSpec = componentSpec.implementation.container;\r\n\r\n  const inputsConsumedAsParameter = new Set<string>();\r\n  const inputsConsumedAsArtifact = new Set<string>();\r\n  const convertArg = (arg: StringOrPlaceholder): string[] => {\r\n    if (typeof arg == \"string\") {\r\n      return [arg];\r\n    } else if (\"inputValue\" in arg) {\r\n      const inputName = arg.inputValue;\r\n      // Argo does not support {{inputs.artifacts.${inputName}.value}}, so there is only one way\r\n      inputsConsumedAsParameter.add(inputName);\r\n      return [`{{inputs.parameters.${inputName}}}`];\r\n    } else if (\"inputPath\" in arg) {\r\n      const inputName = arg.inputPath;\r\n      inputsConsumedAsArtifact.add(inputName);\r\n      return [`{{inputs.artifacts.${inputName}.path}}`];\r\n    } else if (\"outputPath\" in arg) {\r\n      const outputName = arg.outputPath;\r\n      return [`{{outputs.artifacts.${outputName}.path}}`];\r\n    } else if (\"if\" in arg) {\r\n      const [ifCond, ifThen, ifElse] = [arg.if.cond, arg.if.then, arg.if.else];\r\n      // TODO: Check false values, not just check for true\r\n      let condEvaluatesToTrue = false;\r\n      if (typeof ifCond === \"string\") {\r\n        condEvaluatesToTrue = ifCond.toLowerCase() === \"true\";\r\n      } else if (typeof ifCond === \"boolean\") {\r\n        condEvaluatesToTrue = ifCond;\r\n      } else if (\"isPresent\" in ifCond) {\r\n        const inputName = ifCond.isPresent;\r\n        condEvaluatesToTrue = inputName in taskArguments;\r\n      } else if (\"inputValue\" in ifCond) {\r\n        const inputName = ifCond.inputValue;\r\n        if (!(inputName in taskArguments)) {\r\n          condEvaluatesToTrue = false;\r\n        } else {\r\n          const taskArgument = taskArguments[inputName];\r\n          if (typeof taskArgument === \"string\") {\r\n            condEvaluatesToTrue = taskArgument.toLowerCase() === \"true\";\r\n          } else {\r\n            throw Error(\r\n              \"Using runtime conditions in component command line placeholders is not supported yet.\"\r\n            );\r\n          }\r\n        }\r\n      } else {\r\n        throw Error(\"Unexpected condition kind: \" + ifCond);\r\n      }\r\n      const unresolvedArgs = condEvaluatesToTrue ? ifThen : ifElse;\r\n      if (unresolvedArgs === undefined) {\r\n        return [];\r\n      }\r\n      return unresolvedArgs.flatMap(convertArg);\r\n    } else if (\"concat\" in arg) {\r\n      const concatArgs = arg.concat;\r\n      return [concatArgs.flatMap(convertArg).join(\"\")];\r\n    } else {\r\n      throw Error(`Unknown kind of command-line argument: ${arg}`);\r\n    }\r\n  };\r\n\r\n  const result = {\r\n    command: containerSpec.command?.flatMap(convertArg),\r\n    args: containerSpec.args?.flatMap(convertArg),\r\n    inputsConsumedAsParameter: inputsConsumedAsParameter,\r\n    inputsConsumedAsArtifact: inputsConsumedAsArtifact,\r\n  };\r\n  return result;\r\n};\r\n\r\nconst MAKE_PARAMETER_TEMPLATE_ID = \"Convert artifact to parameter\";\r\nconst MAKE_PARAMETER_INPUT_NAME = \"artifact\";\r\nconst MAKE_PARAMETER_OUTPUT_NAME = \"parameter\";\r\n\r\nconst buildMakeParameterTaskSpec = (\r\n  artifactArgument: argo.Artifact\r\n): argo.DAGTask => {\r\n  const taskId = artifactArgument.from?.match(/{{tasks.([^.]+)./)?.[1];\r\n  const taskSpec: argo.DAGTask = {\r\n    name: \"<to be set later>\",\r\n    template: MAKE_PARAMETER_TEMPLATE_ID,\r\n    arguments: {\r\n      artifacts: [\r\n        // Setting the argument name\r\n        { ...artifactArgument, name: MAKE_PARAMETER_INPUT_NAME },\r\n      ],\r\n    },\r\n    dependencies: taskId === undefined ? undefined : [taskId],\r\n  };\r\n  return taskSpec;\r\n};\r\n\r\nconst makeParameterTemplate: argo.Template = {\r\n  name: MAKE_PARAMETER_TEMPLATE_ID,\r\n  inputs: {\r\n    artifacts: [\r\n      {\r\n        name: MAKE_PARAMETER_INPUT_NAME,\r\n        path:\r\n          CONTAINER_INPUTS_DIR +\r\n          \"/\" +\r\n          MAKE_PARAMETER_INPUT_NAME +\r\n          \"/\" +\r\n          IO_FILE_NAME,\r\n      },\r\n    ],\r\n  },\r\n  outputs: {\r\n    parameters: [\r\n      {\r\n        name: MAKE_PARAMETER_OUTPUT_NAME,\r\n        valueFrom: {\r\n          path:\r\n            CONTAINER_INPUTS_DIR +\r\n            \"/\" +\r\n            MAKE_PARAMETER_OUTPUT_NAME +\r\n            \"/\" +\r\n            IO_FILE_NAME,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  container: {\r\n    name: \"main\",\r\n    image: \"alpine\",\r\n    command: [\r\n      \"sh\",\r\n      \"-ec\",\r\n      'mkdir -p \"$(dirname \"$1\")\"; cp \"$0\" \"$1\"',\r\n      `{{inputs.artifacts.${MAKE_PARAMETER_INPUT_NAME}.path}}`,\r\n      `{{outputs.parameters.${MAKE_PARAMETER_OUTPUT_NAME}.path}}`,\r\n    ],\r\n  },\r\n};\r\n\r\nfunction buildArgoParameterArgument(\r\n  taskArgument: ArgumentType | undefined,\r\n  inputSpec: InputSpec,\r\n  upstreamCannotBeParameter: boolean,\r\n  addMakeParameterTaskAndGetParameterArgument: (\r\n    artifactArgument: argo.Artifact,\r\n    namePrefix?: string\r\n  ) => argo.Parameter\r\n): argo.Parameter {\r\n  if (taskArgument === undefined) {\r\n    if (inputSpec.default !== undefined) {\r\n      taskArgument = inputSpec.default;\r\n    } else {\r\n      if (inputSpec.optional === true) {\r\n        // TODO: Decide what the behavior should be\r\n        // throw Error(`Input \"${inputSpec.name}\" is optional, but command-line still uses it when when it's not present.`);\r\n        console.error(\r\n          `Input \"${inputSpec.name}\" is optional, but command-line still uses it when when it's not present.`\r\n        );\r\n        taskArgument = \"\";\r\n      } else {\r\n        throw Error(\r\n          `Argument was not provided for required input \"${inputSpec.name}\"`\r\n        );\r\n      }\r\n    }\r\n  }\r\n  const argoInputName = sanitizeParameterOrArtifactName(inputSpec.name);\r\n  let result: argo.Parameter = {\r\n    name: argoInputName,\r\n  };\r\n  if (typeof taskArgument === \"string\") {\r\n    result.value = taskArgument;\r\n    return result;\r\n  } else if (\"graphInput\" in taskArgument) {\r\n    const argoGraphInputName = sanitizeParameterOrArtifactName(\r\n      taskArgument.graphInput.inputName\r\n    );\r\n    if (upstreamCannotBeParameter) {\r\n      const artifactArgument: argo.Artifact = {\r\n        name: \"<to be set later>\",\r\n        from: `{{inputs.artifacts.${argoGraphInputName}}}`,\r\n      };\r\n      const convertedParameterArgument =\r\n        addMakeParameterTaskAndGetParameterArgument(\r\n          artifactArgument,\r\n          \"Make parameter for \" + taskArgument.graphInput.inputName\r\n        );\r\n      result.value = convertedParameterArgument.value;\r\n    } else {\r\n      result.value = `{{inputs.parameters.${argoGraphInputName}}}`;\r\n    }\r\n\r\n    return result;\r\n  } else if (\"taskOutput\" in taskArgument) {\r\n    const taskOutputArgoOutputName = sanitizeParameterOrArtifactName(\r\n      taskArgument.taskOutput.outputName\r\n    );\r\n    // FIX: !! Sanitizing the ID here is not enough. There needs to be proper ID mapping.\r\n    // FIX: Task IDs might conflict after sanitization\r\n    const taskOutputArgoTaskId = sanitizeID(taskArgument.taskOutput.taskId);\r\n    const artifactArgument: argo.Artifact = {\r\n      name: \"<to be set later>\",\r\n      from: `{{tasks.${taskOutputArgoTaskId}.outputs.artifacts.${taskOutputArgoOutputName}}}`,\r\n    };\r\n    // TODO: Maybe use the taskArgument as part of the name?\r\n    const convertedParameterArgument =\r\n      addMakeParameterTaskAndGetParameterArgument(\r\n        artifactArgument,\r\n        `Make parameter for ${taskArgument.taskOutput.taskId} output ${taskArgument.taskOutput.outputName}`\r\n      );\r\n    result.value = convertedParameterArgument.value;\r\n    return result;\r\n  } else {\r\n    throw Error(`Unknown kind of task argument: \"${taskArgument}\"`);\r\n  }\r\n}\r\n\r\nfunction buildArgoArtifactArgument(\r\n  taskArgument: ArgumentType | undefined,\r\n  inputSpec: InputSpec\r\n) {\r\n  //if (! (inputName in taskArguments)) {\r\n  if (taskArgument === undefined) {\r\n    // Checking for default value\r\n    if (inputSpec.default !== undefined) {\r\n      taskArgument = inputSpec.default;\r\n    } else {\r\n      if (inputSpec.optional === true) {\r\n        // TODO: Decide what the behavior should be\r\n        // throw Error(`Input \"${inputSpec.name}\" is optional, but command-line still uses it when when it's not present.`);\r\n        console.error(\r\n          `Input \"${inputSpec.name}\" is optional, but command-line still uses it when when it's not present.`\r\n        );\r\n        taskArgument = \"\";\r\n      } else {\r\n        throw Error(\r\n          `Argument was not provided for required input \"${inputSpec.name}\"`\r\n        );\r\n      }\r\n    }\r\n  }\r\n  const inputArgoName = sanitizeParameterOrArtifactName(inputSpec.name);\r\n  let result: argo.Artifact = {\r\n    name: inputArgoName,\r\n  };\r\n  if (typeof taskArgument === \"string\") {\r\n    result.raw = {\r\n      data: taskArgument,\r\n    };\r\n    return result;\r\n  } else if (\"graphInput\" in taskArgument) {\r\n    const graphInputArgoName = sanitizeParameterOrArtifactName(\r\n      taskArgument.graphInput.inputName\r\n    );\r\n    result.from = `{{inputs.artifacts.${graphInputArgoName}}}`;\r\n    return result;\r\n  } else if (\"taskOutput\" in taskArgument) {\r\n    // FIX: Task IDs might conflict after sanitization\r\n    // FIX: !! Need proper task ID mapping\r\n    const upstreamTaskOutputArgoName = sanitizeParameterOrArtifactName(\r\n      taskArgument.taskOutput.outputName\r\n    );\r\n    const upstreamTaskArgoId = sanitizeID(taskArgument.taskOutput.taskId);\r\n    result.from = `{{tasks.${upstreamTaskArgoId}.outputs.artifacts.${upstreamTaskOutputArgoName}}}`;\r\n    return result;\r\n  } else {\r\n    throw Error(`Unknown kind of task argument: \"${taskArgument}\"`);\r\n  }\r\n}\r\n\r\nfunction buildArgoContainerTemplateFromContainerComponentSpec(\r\n  componentSpec: ComponentSpec,\r\n  taskArguments: Record<string, ArgumentType>\r\n) {\r\n  if (!isContainerImplementation(componentSpec.implementation)) {\r\n    throw Error(\"Only container components are supported by this function\");\r\n  }\r\n\r\n  const containerSpec = componentSpec.implementation.container;\r\n\r\n  const resolvedCommandLine = resolveCommandLine(componentSpec, taskArguments);\r\n\r\n  const argoTemplateInputs: argo.Inputs = {\r\n    parameters: Array.from(\r\n      resolvedCommandLine.inputsConsumedAsParameter.values()\r\n    ).map(\r\n      (inputName): argo.Parameter => ({\r\n        name: inputName,\r\n        // TODO: Enable if needed (after verifying that it works).\r\n        // default: inputMap.get(inputName)?.default,\r\n        // TODO: Enable after verifying the required Argo version.\r\n        // description: inputMap.get(inputName)?.description,\r\n      })\r\n    ),\r\n    artifacts: Array.from(\r\n      resolvedCommandLine.inputsConsumedAsArtifact.values()\r\n    ).map(\r\n      (inputName): argo.Artifact => ({\r\n        name: inputName,\r\n        path: CONTAINER_INPUTS_DIR + \"/\" + inputName + \"/\" + IO_FILE_NAME,\r\n        // TODO: Enable this default value feature if needed (after verifying that it works).\r\n        //raw: { data: inputMap.get(inputName)?.default },\r\n      })\r\n    ),\r\n  };\r\n\r\n  const argoTemplateOutputs: argo.Outputs = {\r\n    parameters: [],\r\n    artifacts: (componentSpec.outputs ?? []).map(\r\n      (outputSpec): argo.Artifact => ({\r\n        name: outputSpec.name,\r\n        path:\r\n          CONTAINER_OUTPUTS_DIR + \"/\" + outputSpec.name + \"/\" + IO_FILE_NAME,\r\n      })\r\n    ),\r\n  };\r\n\r\n  const argoTemplate: argo.Template = {\r\n    name: \"<to be set later>\",\r\n    inputs: argoTemplateInputs,\r\n    outputs: argoTemplateOutputs,\r\n    container: {\r\n      name: \"main\",\r\n      image: containerSpec.image,\r\n      command: resolvedCommandLine.command,\r\n      args: resolvedCommandLine.args,\r\n      // TODO: env:\r\n    },\r\n  };\r\n  return argoTemplate;\r\n}\r\n\r\nfunction buildArgoDagTemplateFromGraphComponentSpec(\r\n  componentSpec: ComponentSpec,\r\n  inputsThatHaveParameterArguments: Set<string>,\r\n  addTemplateAndGetId: (template: argo.Template, namePrefix?: string) => string\r\n) {\r\n  if (!isGraphImplementation(componentSpec.implementation)) {\r\n    throw Error(\"Only graph components are supported by this function\");\r\n  }\r\n\r\n  const graphSpec = componentSpec.implementation.graph;\r\n\r\n  const inputsConsumedAsParameter = new Set<string>();\r\n  const inputsConsumedAsArtifact = new Set<string>();\r\n\r\n  let argoTasks: Record<string, argo.DAGTask> = {};\r\n  const taskStringToTaskId = new Map<string, string>();\r\n\r\n  const addTaskAndGetId = (task: argo.DAGTask, namePrefix: string = \"Task\") => {\r\n    // Erasing the name, so that the structure can be used for lookup.\r\n    // We will generate the ID in this function and set name to it.\r\n    const taskCopyForHash: argo.DAGTask = { ...task, name: \"\" };\r\n    const serializedSpec = JSON.stringify(taskCopyForHash);\r\n    const existingId = taskStringToTaskId.get(serializedSpec);\r\n    if (existingId !== undefined) {\r\n      return existingId;\r\n    }\r\n    const usedIds = new Set(Object.keys(argoTasks));\r\n    const id = sanitizeID(makeNameUniqueByAddingIndex(namePrefix, usedIds));\r\n    taskStringToTaskId.set(serializedSpec, id);\r\n    argoTasks[id] = task;\r\n    // Setting the task name to the generated ID\r\n    task.name = id;\r\n    return id;\r\n  };\r\n\r\n  const addMakeParameterTaskAndGetParameterArgument = (\r\n    artifactArgument: argo.Artifact,\r\n    namePrefix: string = \"Make artifact\"\r\n  ) => {\r\n    // These system names are expected to not conflict with user task names\r\n    const makeArtifactTemplateId = addTemplateAndGetId(\r\n      makeParameterTemplate,\r\n      MAKE_PARAMETER_TEMPLATE_ID\r\n    );\r\n    const makeArtifactTaskSpec = buildMakeParameterTaskSpec(artifactArgument);\r\n    makeArtifactTaskSpec.template = makeArtifactTemplateId;\r\n    const taskId = addTaskAndGetId(makeArtifactTaskSpec, namePrefix);\r\n    const parameterArgument: argo.Parameter = {\r\n      name: \"<to be set later>\",\r\n      value: `{{tasks.${taskId}.outputs.parameters.${MAKE_PARAMETER_OUTPUT_NAME}}}`,\r\n    };\r\n    return parameterArgument;\r\n  };\r\n\r\n  for (const [taskId, taskSpec] of Object.entries(graphSpec.tasks)) {\r\n    if (taskSpec.componentRef.spec === undefined) {\r\n      throw Error(`Task \"${taskId}\" does not have taskSpec.componentRef.spec.`);\r\n    }\r\n    try {\r\n      const argoTask = buildArgoDagTaskFromTaskSpec(\r\n        taskSpec.componentRef.spec,\r\n        taskSpec.arguments ?? {},\r\n        inputsThatHaveParameterArguments,\r\n        addTemplateAndGetId,\r\n        addMakeParameterTaskAndGetParameterArgument\r\n      );\r\n      if (taskId in argoTasks) {\r\n        throw Error(\r\n          `Task ID \"${taskId}\" is not unique. This cannot happen (unless user task ID clashes with special task ID).`\r\n        );\r\n      }\r\n      // FIX: !! Need to establish task id->name mappings\r\n      addTaskAndGetId(argoTask, taskId);\r\n    } catch (err) {\r\n      if (err instanceof Error) {\r\n        err.message = `Error compiling task ${taskId}: ` + err.message;\r\n      }\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  // Scanning the compiled tasks to understand how the inputs are consumed.\r\n  for (const argoTask of Object.values(argoTasks)) {\r\n    for (const argument of Object.values(\r\n      argoTask.arguments?.parameters ?? {}\r\n    )) {\r\n      const argoInputName = argument.value?.match(\r\n        /\\{\\{inputs\\.parameters\\.([^}]+)}}/\r\n      )?.[1];\r\n      if (argoInputName !== undefined) {\r\n        // TODO: Input name mapping\r\n        inputsConsumedAsParameter.add(argoInputName);\r\n      }\r\n    }\r\n    for (const argument of Object.values(argoTask.arguments?.artifacts ?? {})) {\r\n      const argoInputName = argument.from?.match(\r\n        /\\{\\{inputs\\.artifacts\\.([^}]+)}}/\r\n      )?.[1];\r\n      if (argoInputName !== undefined) {\r\n        inputsConsumedAsArtifact.add(argoInputName);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Sanity checks\r\n  // This is probably not an error for this Argo compiler.\r\n  // There are two options when dealing with inputs consumed both ways: Deal with at the lowest level it happens or let it propagate upstream (using this strategy for now).\r\n  // const inputNamesThatAreUsedBothAsParameterAndArtifact = Array.from(\r\n  //   inputsConsumedAsParameter\r\n  // ).filter((x) => inputsConsumedAsArtifact.has(x));\r\n  // if (inputNamesThatAreUsedBothAsParameterAndArtifact.length > 0) {\r\n  //   throw Error(\r\n  //     `Compiler error: When compiling component \"${componentSpec.name}\" some inputs are used both as parameter and artifact: \"${inputNamesThatAreUsedBothAsParameterAndArtifact}\". Please file a bug report.`\r\n  //   );\r\n  // }\r\n  // const inputNamesThatAreParametersButAreConsumedAsArtifacts = Array.from(\r\n  //   inputsThatHaveParameterArguments\r\n  // ).filter((x) => inputsConsumedAsArtifact.has(x));\r\n  // if (inputNamesThatAreParametersButAreConsumedAsArtifacts.length > 0) {\r\n  //   throw Error(\r\n  //     `Compiler error: When compiling component \"${componentSpec.name}\" some parameter arguments are consumed as artifact: \"${inputNamesThatAreParametersButAreConsumedAsArtifacts}\". Please file a bug report.`\r\n  //   );\r\n  // }\r\n\r\n  // We assume that the graphSpec.outputValues has same set of keys as component outputs.\r\n  // However even if there is discrepancy, the graphSpec.outputValues is the \"practical\" source of truth.\r\n  const dagOutputArtifactSources = Object.entries(\r\n    graphSpec.outputValues ?? {}\r\n  ).map(([outputName, taskOutputArgument]) => {\r\n    const outputArgoName = sanitizeParameterOrArtifactName(outputName);\r\n    const upstreamTaskOutputArgoName = sanitizeParameterOrArtifactName(\r\n      taskOutputArgument.taskOutput.outputName\r\n    );\r\n    // FIX: !! Need proper id mapping\r\n    const upstreamTaskArgoId = sanitizeID(taskOutputArgument.taskOutput.taskId);\r\n    const result: argo.Artifact = {\r\n      name: outputArgoName,\r\n      from: `{{tasks.${upstreamTaskArgoId}.outputs.artifacts.${upstreamTaskOutputArgoName}}}`,\r\n    };\r\n    return result;\r\n  });\r\n\r\n  const argoTemplateInputs: argo.Inputs = {\r\n    parameters: Array.from(inputsConsumedAsParameter.values()).map(\r\n      (inputName): argo.Parameter => ({\r\n        name: inputName,\r\n      })\r\n    ),\r\n    artifacts: Array.from(inputsConsumedAsArtifact.values()).map(\r\n      (inputName): argo.Artifact => ({ name: inputName })\r\n    ),\r\n  };\r\n\r\n  const argoTemplateOutputs: argo.Outputs = {\r\n    // parameters: [], // ! Dag output parameters use .valueFrom.parameter\r\n    artifacts: dagOutputArtifactSources,\r\n  };\r\n\r\n  const vertexComponentSpec: argo.Template = {\r\n    name: \"<to be set later>\",\r\n    inputs: argoTemplateInputs,\r\n    outputs: argoTemplateOutputs,\r\n    // Argo also supports containerSet. It's like a DAG template, but runs in a single Pod and can share data via shared volume.\r\n    dag: {\r\n      // TODO: Stabilize the ordering\r\n      tasks: Object.values(argoTasks),\r\n    },\r\n  };\r\n  return vertexComponentSpec;\r\n}\r\n\r\nfunction buildArgoTemplateFromComponentSpec(\r\n  componentSpec: ComponentSpec,\r\n  taskArguments: Record<string, ArgumentType>,\r\n  inputsThatHaveParameterArguments: Set<string>,\r\n  addTemplateAndGetId: (template: argo.Template, namePrefix?: string) => string\r\n) {\r\n  if (isContainerImplementation(componentSpec.implementation)) {\r\n    return buildArgoContainerTemplateFromContainerComponentSpec(\r\n      componentSpec,\r\n      taskArguments\r\n    );\r\n  } else if (isGraphImplementation(componentSpec.implementation)) {\r\n    return buildArgoDagTemplateFromGraphComponentSpec(\r\n      componentSpec,\r\n      inputsThatHaveParameterArguments,\r\n      addTemplateAndGetId\r\n    );\r\n  } else {\r\n    throw Error(\r\n      `Unsupported component implementation kind: ${componentSpec.implementation}`\r\n    );\r\n  }\r\n}\r\n\r\nconst buildArgoDagTaskFromTaskSpec = (\r\n  componentSpec: ComponentSpec,\r\n  //passedArgumentNames: string[],\r\n  taskArguments: Record<string, ArgumentType>,\r\n  graphInputsWithParameterArguments: Set<string>,\r\n  addTemplateAndGetId: (template: argo.Template, namePrefix?: string) => string,\r\n  addMakeParameterTaskAndGetParameterArgument: (\r\n    artifactArgument: argo.Artifact,\r\n    namePrefix?: string\r\n  ) => argo.Parameter\r\n) => {\r\n  // FIX: !! This part is likely broken or not needed.\r\n  // So-called \"parameter\" arguments can either be constant arguments\r\n  // or come from the arguments to the graph component of the current task.\r\n  // In the current implementation the parameter arguments cannot come from task outputs since all task outputs are artifacts.\r\n  const inputsThatHaveParameterArguments = new Set(\r\n    (componentSpec.inputs ?? [])\r\n      .map((inputSpec) => inputSpec.name)\r\n      .filter((inputName) => {\r\n        const taskArgument = taskArguments[inputName];\r\n        if (taskArgument === undefined) {\r\n          // Missing arguments fall back to default values which are constant strings which are parameters.\r\n          return true;\r\n        }\r\n        if (typeof taskArgument === \"string\") {\r\n          return true;\r\n        }\r\n        if (\"graphInput\" in taskArgument) {\r\n          if (\r\n            graphInputsWithParameterArguments.has(\r\n              taskArgument.graphInput.inputName\r\n            )\r\n          ) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      })\r\n  );\r\n\r\n  const inputMap = new Map(\r\n    (componentSpec.inputs ?? []).map((inputSpec) => [inputSpec.name, inputSpec])\r\n  );\r\n\r\n  const argoTemplate: argo.Template = buildArgoTemplateFromComponentSpec(\r\n    componentSpec,\r\n    taskArguments,\r\n    inputsThatHaveParameterArguments,\r\n    addTemplateAndGetId\r\n  );\r\n\r\n  const argoTemplateId = addTemplateAndGetId(\r\n    argoTemplate,\r\n    componentSpec.name ?? \"Component\"\r\n  );\r\n\r\n  const argoTaskParameterArguments: argo.Parameter[] = (\r\n    argoTemplate.inputs?.parameters ?? []\r\n  ).map((parameter) => ({\r\n    ...buildArgoParameterArgument(\r\n      taskArguments[parameter.name],\r\n      assertDefined(inputMap.get(parameter.name)),\r\n      inputsThatHaveParameterArguments.has(parameter.name),\r\n      addMakeParameterTaskAndGetParameterArgument\r\n    ),\r\n    // buildArgoParameterArgument does not set parameter name, so we set it here.\r\n    name: parameter.name,\r\n  }));\r\n\r\n  const argoTaskArtifactArguments: argo.Artifact[] = (\r\n    argoTemplate.inputs?.artifacts ?? []\r\n  ).map((artifact) => ({\r\n    ...buildArgoArtifactArgument(\r\n      taskArguments[artifact.name],\r\n      assertDefined(inputMap.get(artifact.name))\r\n    ),\r\n    // buildArgoArtifactArgument does not set artifact name, so we set it here.\r\n    name: artifact.name,\r\n  }));\r\n  // We need to scan compiled arguments: The upstream could have been changed to a \"convert artifact to parameter\" task.\r\n  // So it's better to extract the dependency data from the compiled arguments instead of using the original argument map.\r\n  // const upstreamTaskIds = new Set(\r\n  //   Object.values(taskArguments)\r\n  //     .map((argument) => {\r\n  //       if (typeof argument !== \"string\" && \"taskOutput\" in argument) {\r\n  //         return argument.taskOutput.taskId;\r\n  //       } else {\r\n  //         return undefined;\r\n  //       }\r\n  //     })\r\n  //     .filter(notUndefined)\r\n  // );\r\n  // // FIX: !! Need proper id mapping\r\n  // const upstreamArgoTaskIds = Array.from(upstreamTaskIds.keys()).map(\r\n  //   sanitizeID\r\n  // );\r\n  const argoArgumentValues = argoTaskParameterArguments\r\n    .map((arg) => arg.value)\r\n    .concat(argoTaskArtifactArguments.map((arg) => arg.from))\r\n    .filter(notUndefined);\r\n  // Dependencies should be unique. Otherwise Argo considers the workflow to be invalid.\r\n  const upstreamArgoTaskIds = new Set(\r\n    argoArgumentValues\r\n      .map((arg) => arg.match(/{{tasks.([^.]+).outputs./)?.[1])\r\n      .filter(notUndefined)\r\n  );\r\n\r\n  const argoDagTask: argo.DAGTask = {\r\n    name: \"<to be set later>\",\r\n    template: argoTemplateId,\r\n    arguments: {\r\n      parameters: argoTaskParameterArguments,\r\n      artifacts: argoTaskArtifactArguments,\r\n    },\r\n    // FIX: Fix Argo's behavior when depending on conditionally skipped tasks\r\n    dependencies: Array.from(upstreamArgoTaskIds.values()).sort(),\r\n  };\r\n\r\n  return argoDagTask;\r\n};\r\n\r\nconst makeNameUniqueByAddingIndex = (\r\n  name: string,\r\n  existingNames: Set<string>,\r\n  delimiter: string = \"-\"\r\n): string => {\r\n  let finalName = name;\r\n  let index = 1;\r\n  while (existingNames.has(finalName)) {\r\n    index++;\r\n    finalName = name + delimiter + index.toString();\r\n  }\r\n  return finalName;\r\n};\r\n\r\nexport const buildArgoWorkflowSpecFromGraphComponentSpec = (\r\n  componentSpec: ComponentSpec\r\n) => {\r\n  let argoTemplates: Record<string, argo.Template> = {};\r\n\r\n  const templateStringToTemplateId = new Map<string, string>();\r\n\r\n  const addTemplateAndGetId = (\r\n    template: argo.Template,\r\n    namePrefix: string = \"Component\"\r\n  ) => {\r\n    // Erasing the name, so that the structure can be used for lookup.\r\n    // We will generate the ID in this function and set name to it.\r\n    const templateCopyForHash: argo.Template = { ...template, name: \"\" };\r\n    const serializedSpec = JSON.stringify(templateCopyForHash);\r\n    const existingId = templateStringToTemplateId.get(serializedSpec);\r\n    if (existingId !== undefined) {\r\n      return existingId;\r\n    }\r\n    const usedIds = new Set(Object.keys(argoTemplates));\r\n    const id = sanitizeID(\r\n      makeNameUniqueByAddingIndex(namePrefix, usedIds, \"-\")\r\n    );\r\n    templateStringToTemplateId.set(serializedSpec, id);\r\n    argoTemplates[id] = template;\r\n    // Setting the template name to the generated ID\r\n    template.name = id;\r\n    return id;\r\n  };\r\n\r\n  // Argo supports both pipeline and artifact arguments for pipeline.\r\n  const graphInputsWithParameterArguments = new Set<string>();\r\n\r\n  const pipelineArguments: Record<string, ArgumentType> = Object.fromEntries(\r\n    (componentSpec.inputs ?? []).map((inputSpec) => {\r\n      const argument: ArgumentType = {\r\n        graphInput: { inputName: inputSpec.name },\r\n      };\r\n      return [inputSpec.name, argument];\r\n    })\r\n  );\r\n  const rootArgoTemplate = buildArgoTemplateFromComponentSpec(\r\n    componentSpec,\r\n    pipelineArguments,\r\n    graphInputsWithParameterArguments,\r\n    addTemplateAndGetId\r\n  );\r\n\r\n  const rootArgoTemplateId = addTemplateAndGetId(\r\n    rootArgoTemplate,\r\n    componentSpec.name ?? \"Root\"\r\n  );\r\n\r\n  const workflowSpec: argo.WorkflowSpec = {\r\n    // Arguments will be set later\r\n    // arguments: {\r\n    //   parameters: [],\r\n    //   artifacts: [],\r\n    // },\r\n    entrypoint: rootArgoTemplateId,\r\n    // FIX: ! Stabilize template order\r\n    templates: Object.values(argoTemplates),\r\n  };\r\n  return workflowSpec;\r\n};\r\n\r\nexport const buildArgoWorkflowFromGraphComponent = (\r\n  componentSpec: ComponentSpec,\r\n  pipelineArguments: Map<string, string>\r\n) => {\r\n  const workflowSpec =\r\n    buildArgoWorkflowSpecFromGraphComponentSpec(componentSpec);\r\n\r\n  // Adding the default values\r\n  const defaultInputValuePairs = (componentSpec.inputs ?? [])\r\n    .filter((inputSpec) => inputSpec.default !== undefined)\r\n    .map((inputSpec): [string, string] => [\r\n      inputSpec.name,\r\n      String(inputSpec.default),\r\n    ]);\r\n  // TODO: Throw exception when non-default arguments are missing.\r\n  const allPipelineArguments = new Map(\r\n    defaultInputValuePairs.concat(Array.from(pipelineArguments.entries()))\r\n  );\r\n\r\n  // Converting the pipeline arguments\r\n  const templateMap = new Map(\r\n    workflowSpec.templates?.map((template) => [template.name, template])\r\n  );\r\n  const rootTemplate = assertDefined(\r\n    templateMap.get(assertDefined(workflowSpec.entrypoint))\r\n  );\r\n  const inputParameterNames =\r\n    rootTemplate?.inputs?.parameters?.map((parameter) => parameter.name) ?? [];\r\n  const inputArtifactsNames =\r\n    rootTemplate?.inputs?.artifacts?.map((artifact) => artifact.name) ?? [];\r\n\r\n  const pipelineArgumentsWithArgoNames = new Map(\r\n    Array.from(allPipelineArguments.entries()).map(([key, value]) => [\r\n      sanitizeParameterOrArtifactName(key),\r\n      value,\r\n    ])\r\n  );\r\n  const convertedPipelineArguments: argo.Arguments = {\r\n    parameters: inputParameterNames\r\n      .filter((name) => pipelineArgumentsWithArgoNames.has(name))\r\n      .map(\r\n        (argoInputName): argo.Parameter => ({\r\n          name: argoInputName,\r\n          value: pipelineArgumentsWithArgoNames.get(argoInputName),\r\n        })\r\n      ),\r\n    artifacts: inputArtifactsNames\r\n      .filter((name) => pipelineArgumentsWithArgoNames.has(name))\r\n      .map(\r\n        (argoInputName): argo.Artifact => ({\r\n          name: argoInputName,\r\n          raw: {\r\n            data: assertDefined(\r\n              pipelineArgumentsWithArgoNames.get(argoInputName)\r\n            ),\r\n          },\r\n        })\r\n      ),\r\n  };\r\n\r\n  // Setting the pipeline arguments\r\n  workflowSpec.arguments = convertedPipelineArguments;\r\n\r\n  // TODO: Sanitize better\r\n  const workflowKubernetesName = (\r\n    componentSpec.name?.toLowerCase().replace(/[^-a-z0-9.]/g, \"-\") || \"Pipeline\"\r\n  ).substring(0, 240); // 253 max\r\n\r\n  const workflow: argo.Workflow = {\r\n    apiVersion: \"argoproj.io/v1alpha1\",\r\n    kind: \"Workflow\",\r\n    metadata: {\r\n      generateName: workflowKubernetesName,\r\n      annotations: {\r\n        \"cloud-pipelines.net/pipeline-editor\": \"true\",\r\n      },\r\n    },\r\n    spec: workflowSpec,\r\n  };\r\n  return workflow;\r\n};\r\n","/**\r\n * @license\r\n * Copyright 2022 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2022 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport yaml from \"js-yaml\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  buildArgoWorkflowFromGraphComponent,\r\n  Workflow,\r\n} from \"../compilers/Argo/argoCompiler\";\r\nimport { ComponentSpec } from \"../componentSpec\";\r\nimport { ensureGoogleCloudAuthorizesScopes } from \"./GoogleCloud\";\r\n\r\nconst LOCAL_STORAGE_ENDPOINT_KEY = \"KubeflowPipelinesSubmitter/endpoint\";\r\nconst LOCAL_STORAGE_AUTH_TOKEN_KEY = \"KubeflowPipelinesSubmitter/auth_token\";\r\n\r\nconst kfpSubmitPipelineRun = async (\r\n  argoWorkflowSpec: Record<string, any>,\r\n  endpoint: string,\r\n  authToken?: string,\r\n  googleCloudOAuthClientId?: string,\r\n  runName?: string\r\n) => {\r\n  // https://www.kubeflow.org/docs/components/pipelines/reference/api/kubeflow-pipeline-api-spec/#/definitions/apiRun\r\n  const kfpRun = {\r\n    name: runName ?? argoWorkflowSpec.name ?? \"Pipeline\",\r\n    pipeline_spec: {\r\n      workflow_manifest: JSON.stringify(argoWorkflowSpec),\r\n    },\r\n  };\r\n  if (!endpoint.includes(\"://\")) {\r\n    console.warn(\"Endpoint URL does not specify a protocol. Using HTTPS.\");\r\n    endpoint = \"https://\" + endpoint;\r\n  }\r\n  if (!endpoint.endsWith(\"/\")) {\r\n    endpoint = endpoint + \"/\";\r\n  }\r\n  const apiUrl = endpoint + \"apis/v1beta1/runs\";\r\n  if (!authToken) {\r\n    // Auth token not specified. Authenticating the request using Google Cloud\r\n    if (googleCloudOAuthClientId) {\r\n      const oauthToken = await ensureGoogleCloudAuthorizesScopes(\r\n        googleCloudOAuthClientId,\r\n        [\"https://www.googleapis.com/auth/cloud-platform\"]\r\n      );\r\n      authToken = oauthToken?.access_token;\r\n    }\r\n  }\r\n  const response = await fetch(apiUrl, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(kfpRun),\r\n    headers: new Headers({\r\n      Authorization: \"Bearer \" + authToken,\r\n    }),\r\n  });\r\n  (window as any).gtag?.(\r\n    \"event\",\r\n    \"KubeflowPipelinesSubmitter_submit_pipeline_run_succeeded\",\r\n    {}\r\n  );\r\n  return response.json();\r\n};\r\n\r\nconst generateKfpRunUrl = (endpoint: string, runId: string) => {\r\n  //https://xxx-dot-us-central2.pipelines.googleusercontent.com/#/runs/details/<runId>\r\n  if (!endpoint.includes(\"://\")) {\r\n    endpoint = \"https://\" + endpoint;\r\n  }\r\n  if (!endpoint.endsWith(\"/\")) {\r\n    endpoint = endpoint + \"/\";\r\n  }\r\n  return endpoint + \"#/runs/details/\" + runId;\r\n};\r\n\r\ninterface KubeflowPipelinesSubmitterProps {\r\n  componentSpec?: ComponentSpec;\r\n  pipelineArguments?: Map<string, string>;\r\n  googleCloudOAuthClientId?: string;\r\n}\r\n\r\nconst KubeflowPipelinesSubmitter = ({\r\n  componentSpec,\r\n  pipelineArguments,\r\n  googleCloudOAuthClientId,\r\n}: KubeflowPipelinesSubmitterProps) => {\r\n  const [argoWorkflow, setArgoWorkflow] = useState<Workflow | undefined>(\r\n    undefined\r\n  );\r\n  const [argoWorkflowYamlBlobUrl, setArgoWorkflowYamlBlobUrl] = useState<\r\n    string | undefined\r\n  >(undefined);\r\n  const [compilationError, setCompilationError] = useState<string | undefined>(\r\n    undefined\r\n  );\r\n  const [submissionError, setSubmissionError] = useState<string | undefined>(\r\n    undefined\r\n  );\r\n  const [endpoint, setEndpoint] = useState<string>(\r\n    () => window.localStorage?.getItem(LOCAL_STORAGE_ENDPOINT_KEY) ?? \"\"\r\n  );\r\n  const [authToken, setAuthToken] = useState<string>(\r\n    () => window.localStorage?.getItem(LOCAL_STORAGE_AUTH_TOKEN_KEY) ?? \"\"\r\n  );\r\n  const [, setPipelineRunId] = useState<string | undefined>(undefined);\r\n  const [, setWorkflowResourceName] = useState<string | undefined>(undefined);\r\n  const [pipelineRunWebUrl, setPipelineRunWebUrl] = useState<\r\n    string | undefined\r\n  >(undefined);\r\n\r\n  useEffect(() => {\r\n    if (componentSpec !== undefined) {\r\n      try {\r\n        const argoWorkflow = buildArgoWorkflowFromGraphComponent(\r\n          componentSpec,\r\n          pipelineArguments ?? new Map()\r\n        );\r\n        argoWorkflow.metadata.labels = {\r\n          sdk: \"cloud-pipelines-editor\",\r\n          \"cloud-pipelines.net/pipeline-editor\": \"true\",\r\n          \"pipelines.kubeflow.org/pipeline-sdk-type\": \"cloud-pipelines-editor\",\r\n        };\r\n        setArgoWorkflow(argoWorkflow);\r\n        const argoWorkflowYaml = yaml.dump(argoWorkflow, {\r\n          lineWidth: -1, // Don't fold long strings\r\n          quotingType: '\"',\r\n        });\r\n        const newArgoWorkflowYamlBlobUrl = URL.createObjectURL(\r\n          new Blob([argoWorkflowYaml], { type: \"application/yaml\" })\r\n        );\r\n        // Updating the workflow blob URL (revoking the old workflow blob URL first).\r\n        setArgoWorkflowYamlBlobUrl((currentArgoWorkflowYamlBlobUrl) => {\r\n          if (currentArgoWorkflowYamlBlobUrl !== undefined) {\r\n            URL.revokeObjectURL(currentArgoWorkflowYamlBlobUrl);\r\n          }\r\n          return newArgoWorkflowYamlBlobUrl;\r\n        });\r\n        setCompilationError(undefined);\r\n      } catch (err) {\r\n        const errorMessage =\r\n          typeof err === \"object\" && err instanceof Error\r\n            ? err.toString()\r\n            : String(err);\r\n        setCompilationError(errorMessage);\r\n      }\r\n    }\r\n  }, [componentSpec, pipelineArguments]);\r\n\r\n  const readyToSubmit = endpoint && argoWorkflow;\r\n\r\n  return (\r\n    <form\r\n      onSubmit={async (e) => {\r\n        e.preventDefault();\r\n        if (!endpoint || !argoWorkflow) {\r\n          return;\r\n        }\r\n        setPipelineRunWebUrl(undefined);\r\n        try {\r\n          // setItem might throw exception on iOS in incognito mode\r\n          try {\r\n            window.localStorage?.setItem(LOCAL_STORAGE_ENDPOINT_KEY, endpoint);\r\n            window.localStorage?.setItem(\r\n              LOCAL_STORAGE_AUTH_TOKEN_KEY,\r\n              authToken\r\n            );\r\n          } catch (err) {\r\n            console.error(\r\n              \"KubeflowPipelinesSubmitter: Error writing properties to the localStorage\",\r\n              err\r\n            );\r\n          }\r\n          const runName =\r\n            (componentSpec?.name ?? \"Pipeline\") +\r\n            \" \" +\r\n            new Date().toISOString().replace(\"T\", \" \").replace(\"Z\", \"\");\r\n          const result = await kfpSubmitPipelineRun(\r\n            argoWorkflow,\r\n            endpoint,\r\n            authToken,\r\n            googleCloudOAuthClientId,\r\n            runName\r\n          );\r\n          console.debug(result);\r\n          const runId = result?.run?.id;\r\n          if (typeof runId === \"string\") {\r\n            setPipelineRunId(runId);\r\n            const runUrl = generateKfpRunUrl(endpoint, runId);\r\n            setPipelineRunWebUrl(runUrl);\r\n          }\r\n          const runtimeWorkflowManifestString =\r\n            result?.pipeline_runtime?.workflow_manifest;\r\n          if (typeof runtimeWorkflowManifestString === \"string\") {\r\n            const runtimeWorkflowManifest = JSON.parse(\r\n              runtimeWorkflowManifestString\r\n            );\r\n            const resourceName = runtimeWorkflowManifest?.metadata?.name;\r\n            if (resourceName) {\r\n              setWorkflowResourceName(resourceName);\r\n            }\r\n          }\r\n          setSubmissionError(undefined);\r\n        } catch (err: any) {\r\n          console.error(err);\r\n          const errorMessage =\r\n            typeof err === \"object\" && err instanceof Error\r\n              ? err.toString()\r\n              : String(err);\r\n          setSubmissionError(errorMessage);\r\n          (window as any).gtag?.(\r\n            \"event\",\r\n            \"KubeflowPipelinesSubmitter_submit_pipeline_run_failed\",\r\n            {}\r\n          );\r\n        }\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          whiteSpace: \"nowrap\",\r\n          margin: \"5px\",\r\n        }}\r\n      >\r\n        <label htmlFor=\"Endpoint\">Endpoint: </label>\r\n        <input\r\n          id=\"Endpoint\"\r\n          required\r\n          type=\"text\"\r\n          placeholder=\"https://xxx.pipelines.googleusercontent.com/\"\r\n          title=\"https://xxx-dot-us-central2.pipelines.googleusercontent.com/\"\r\n          value={endpoint}\r\n          onChange={(e) => setEndpoint(e.target.value)}\r\n        />\r\n      </div>\r\n      <div\r\n        style={{\r\n          whiteSpace: \"nowrap\",\r\n          margin: \"5px\",\r\n        }}\r\n      >\r\n        <label htmlFor=\"Token\">Token: </label>\r\n        <input\r\n          id=\"Token\"\r\n          type=\"text\"\r\n          placeholder=\"ya29...\"\r\n          title=\"Authorization Bearer token\"\r\n          value={authToken}\r\n          onChange={(e) => setAuthToken(e.target.value)}\r\n        />\r\n      </div>\r\n      <div\r\n        style={{\r\n          whiteSpace: \"nowrap\",\r\n          margin: \"5px\",\r\n        }}\r\n      >\r\n        <input\r\n          type=\"submit\"\r\n          disabled={!readyToSubmit}\r\n          value=\"Submit pipeline\"\r\n        />\r\n        {pipelineRunWebUrl && (\r\n          <a\r\n            href={pipelineRunWebUrl}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n            style={{ margin: \"5px\" }}\r\n          >\r\n            Run\r\n          </a>\r\n        )}\r\n      </div>\r\n      {argoWorkflowYamlBlobUrl && (\r\n        <div\r\n          style={{\r\n            margin: \"5px\",\r\n          }}\r\n        >\r\n          {/* TODO: Use pipeline name for the file name */}\r\n          Or download the{\" \"}\r\n          <a href={argoWorkflowYamlBlobUrl} download={\"kubeflow_pipeline.yaml\"}>\r\n            kubeflow_pipeline.yaml\r\n          </a>\r\n        </div>\r\n      )}\r\n      {compilationError && <div>{compilationError}</div>}\r\n      {submissionError && <div>Error: {submissionError}</div>}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default KubeflowPipelinesSubmitter;\r\n","/**\r\n * @license\r\n * Copyright 2022 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2022 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { ArgumentType, ComponentSpec } from \"../componentSpec\";\r\nimport ArgumentsEditor from \"./ArgumentsEditor\";\r\nimport GoogleCloudSubmitter from \"./GoogleCloud\";\r\nimport KubeflowPipelinesSubmitter from \"./KubeflowPipelinesSubmitter\";\r\n\r\ninterface PipelineSubmitterProps {\r\n  componentSpec?: ComponentSpec;\r\n  googleCloudOAuthClientId: string;\r\n}\r\n\r\nconst PipelineSubmitter = ({\r\n  componentSpec,\r\n  googleCloudOAuthClientId,\r\n}: PipelineSubmitterProps) => {\r\n  const [pipelineArguments, setPipelineArguments] = useState<\r\n    Record<string, ArgumentType>\r\n  >({});\r\n\r\n  const [stringPipelineArguments, setStringPipelineArguments] =\r\n    useState<Map<string, string>>(new Map());\r\n\r\n  useEffect(() => {\r\n    // This filtering is just for typing as the pipeline arguments can only be strings here.\r\n    const newStringPipelineArguments = new Map(\r\n      Object.entries(pipelineArguments).filter(\r\n        // Type guard predicate\r\n        (pair): pair is [string, string] => typeof pair[1] === \"string\"\r\n      )\r\n    );\r\n    setStringPipelineArguments(newStringPipelineArguments)\r\n  }, [pipelineArguments]);\r\n\r\n  return (\r\n    <>\r\n      {componentSpec === undefined || // This check is redundant, but TypeScript needs it.\r\n      (componentSpec?.inputs?.length ?? 0) === 0 ? undefined : (\r\n        <fieldset\r\n          style={{\r\n            // Reduce the default padding\r\n            padding: \"2px\",\r\n            marginBottom: \"4px\",\r\n          }}\r\n        >\r\n          <legend>Arguments</legend>\r\n          <ArgumentsEditor\r\n            componentSpec={componentSpec}\r\n            componentArguments={pipelineArguments}\r\n            setComponentArguments={setPipelineArguments}\r\n            shrinkToWidth={true}\r\n          />\r\n        </fieldset>\r\n      )}\r\n      <details\r\n        style={{\r\n          border: \"1px solid #aaa\",\r\n          borderRadius: \"4px\",\r\n          padding: \"4px\",\r\n        }}\r\n      >\r\n        <summary\r\n          style={{ borderWidth: \"1px\", padding: \"4px\", fontWeight: \"bold\" }}\r\n        >\r\n          Submit to Google Cloud\r\n        </summary>\r\n        <GoogleCloudSubmitter\r\n          componentSpec={componentSpec}\r\n          pipelineArguments={stringPipelineArguments}\r\n          googleCloudOAuthClientId={googleCloudOAuthClientId}\r\n        />\r\n      </details>\r\n      <details\r\n        style={{\r\n          border: \"1px solid #aaa\",\r\n          borderRadius: \"4px\",\r\n          padding: \"4px\",\r\n        }}\r\n      >\r\n        <summary\r\n          style={{ borderWidth: \"1px\", padding: \"4px\", fontWeight: \"bold\" }}\r\n        >\r\n          Submit to Kubeflow Pipelines\r\n        </summary>\r\n        <KubeflowPipelinesSubmitter\r\n          componentSpec={componentSpec}\r\n          pipelineArguments={stringPipelineArguments}\r\n          googleCloudOAuthClientId={googleCloudOAuthClientId}\r\n        />\r\n      </details>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PipelineSubmitter;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport { useStoreState } from \"react-flow-renderer\";\r\n\r\nimport { ComponentSpec } from \"../componentSpec\";\r\nimport { componentSpecToYaml } from \"../componentStore\";\r\nimport { augmentComponentSpec } from \"./GraphComponentSpecFlow\";\r\n\r\ninterface GraphComponentLinkProps {\r\n  componentSpec: ComponentSpec;\r\n  downloadFileName?: string;\r\n  linkText?: string;\r\n  linkRef?: React.Ref<HTMLAnchorElement>;\r\n  style?: React.CSSProperties;\r\n}\r\n\r\nconst GraphComponentLink = ({\r\n  componentSpec,\r\n  downloadFileName = \"component.yaml\",\r\n  linkText = \"component.yaml\",\r\n  linkRef,\r\n  style,\r\n}: GraphComponentLinkProps) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n\r\n  try {\r\n    componentSpec = augmentComponentSpec(componentSpec, nodes, false, true);\r\n  } catch (err: any) {\r\n    if (err?.message?.startsWith(\"The nodes array does not\") !== true) {\r\n      console.error(err);\r\n      return <>err.toString()</>;\r\n    }\r\n  }\r\n  const componentText = componentSpecToYaml(componentSpec);\r\n  const componentTextBlob = new Blob([componentText], { type: \"text/yaml\" }); // Or application/x-yaml (which leads to downloading)\r\n  return (\r\n    <a\r\n      ref={linkRef}\r\n      href={URL.createObjectURL(componentTextBlob)}\r\n      download={downloadFileName}\r\n      style={style}\r\n    >\r\n      {linkText}\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default GraphComponentLink;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport yaml from \"js-yaml\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { httpGetWithCache } from \"../cacheUtils\";\r\nimport { ComponentReference, ComponentSpec } from \"../componentSpec\";\r\nimport {\r\n  storeComponentFromUrl,\r\n  ComponentReferenceWithSpec,\r\n} from \"../componentStore\";\r\nimport { preloadComponentReferences } from \"./samplePipelines\";\r\n\r\ntype PipelineLibraryStruct = {\r\n  annotations?: {\r\n    [k: string]: unknown;\r\n  };\r\n  components: ComponentReference[];\r\n};\r\n\r\nconst isValidPipelineLibraryStruct = (\r\n  obj: object\r\n): obj is PipelineLibraryStruct => \"components\" in obj;\r\n\r\nconst loadPipelineLibraryStruct = async (url: string) => {\r\n  const response = await httpGetWithCache(url, \"cache\", true);\r\n  const data = await response.arrayBuffer();\r\n  const pipelineLibrary = yaml.load(new TextDecoder().decode(data));\r\n  if (typeof pipelineLibrary !== \"object\" || pipelineLibrary === null) {\r\n    throw Error(\r\n      `Component library data is not a YAML-encoded object: ${pipelineLibrary}`\r\n    );\r\n  }\r\n  if (!isValidPipelineLibraryStruct(pipelineLibrary)) {\r\n    throw Error(`Invalid Component library data structure: ${pipelineLibrary}`);\r\n  }\r\n  return pipelineLibrary;\r\n};\r\n\r\nfunction notUndefined<T>(x: T | undefined): x is T {\r\n  return x !== undefined;\r\n}\r\n\r\ninterface PipelineLibraryProps {\r\n  pipelineLibraryUrl: string;\r\n  setComponentSpec?: (componentSpec: ComponentSpec) => void;\r\n}\r\n\r\nconst SamplePipelineLibrary = ({\r\n  pipelineLibraryUrl,\r\n  setComponentSpec,\r\n}: PipelineLibraryProps) => {\r\n  const [componentRefs, setComponentRefs] = useState<\r\n    ComponentReferenceWithSpec[]\r\n  >([]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (componentRefs.length === 0) {\r\n        try {\r\n          const loadedComponentLibrary = await loadPipelineLibraryStruct(\r\n            pipelineLibraryUrl\r\n          );\r\n          const pipelineUrls = loadedComponentLibrary.components\r\n            .map((componentRef) => componentRef.url)\r\n            .filter(notUndefined);\r\n          const loadedComponentRefs = await Promise.all(\r\n            pipelineUrls.map(async (url) => {\r\n              const componentRefPlusData = await storeComponentFromUrl(url);\r\n              const componentRef = componentRefPlusData.componentRef;\r\n              await preloadComponentReferences(componentRef.spec);\r\n              return componentRef;\r\n            })\r\n          );\r\n          setComponentRefs(loadedComponentRefs);\r\n        } catch (err) {\r\n          console.error(err);\r\n        }\r\n      }\r\n    })();\r\n  }, [pipelineLibraryUrl, componentRefs.length]);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        //border: \"1px solid black\",\r\n        overflow: \"auto\",\r\n        whiteSpace: \"nowrap\",\r\n      }}\r\n    >\r\n      <div style={{ overflow: \"auto\", marginLeft: \"10px\" }}>\r\n        {componentRefs.map((componentRef) => (\r\n          <div key={componentRef.digest}>\r\n            ⋮ {/* ⋮ ≡ ⋅ */}\r\n            <button\r\n              className=\"link-button\"\r\n              onClick={(e) => {\r\n                setComponentSpec?.(componentRef.spec);\r\n              }}\r\n            >\r\n              {componentRef.spec.name ?? \"<Pipeline>\"}\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SamplePipelineLibrary;\r\n","/**\r\n * @license\r\n * Copyright 2021 Alexey Volkov\r\n * SPDX-License-Identifier: Apache-2.0\r\n * @author         Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n * @copyright 2021 Alexey Volkov <alexey.volkov+oss@ark-kun.com>\r\n */\r\n\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Menu,\r\n  MenuItem,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { useCallback, useState, useEffect, useRef } from \"react\";\r\nimport { useStoreState } from \"react-flow-renderer\";\r\nimport { ComponentSpec, isGraphImplementation } from \"../componentSpec\";\r\nimport {\r\n  loadComponentAsRefFromText,\r\n  getAllComponentFilesFromList,\r\n  ComponentFileEntry,\r\n  addComponentToListByText,\r\n  componentSpecToYaml,\r\n  writeComponentToFileListFromText,\r\n  getComponentFileFromList,\r\n  deleteComponentFileFromList,\r\n} from \"../componentStore\";\r\nimport GraphComponentLink from \"./GraphComponentLink\";\r\nimport { augmentComponentSpec } from \"./GraphComponentSpecFlow\";\r\nimport SamplePipelineLibrary from \"./SamplePipelineLibrary\";\r\nimport { preloadComponentReferences } from \"./samplePipelines\";\r\n\r\nconst USER_PIPELINES_LIST_NAME = \"user_pipelines\";\r\n\r\ninterface PipelineLibraryProps {\r\n  componentSpec?: ComponentSpec;\r\n  setComponentSpec?: (componentSpec: ComponentSpec) => void;\r\n  samplePipelineLibraryUrl?: string;\r\n}\r\n\r\nconst removeSuffixes = (s: string, suffixes: string[]) => {\r\n  for (const suffix of suffixes) {\r\n    if (s.endsWith(suffix)) {\r\n      s = s.substring(0, s.length - suffix.length);\r\n    }\r\n  }\r\n  return s;\r\n};\r\n\r\ninterface SavePipelineAsDialogProps {\r\n  isOpen: boolean;\r\n  onPipelineSave: (name: string, overwrite: boolean) => Promise<void>;\r\n  onCancel: () => void;\r\n  initialName?: string;\r\n}\r\n\r\nconst SavePipelineAsDialog = ({\r\n  isOpen,\r\n  onPipelineSave,\r\n  onCancel,\r\n  initialName,\r\n}: SavePipelineAsDialogProps) => {\r\n  const [fileName, setFileName] = useState<string | undefined>(initialName);\r\n  const [isOverwriteDialogOpen, setIsOverwriteDialogOpen] = useState(false);\r\n\r\n  const handleSave = async (name: string) => {\r\n    setFileName(name);\r\n    try {\r\n      await onPipelineSave(name, false);\r\n    } catch {\r\n      setIsOverwriteDialogOpen(true);\r\n    }\r\n  };\r\n\r\n  const handleOverwriteOk = () => {\r\n    if (fileName) {\r\n      setIsOverwriteDialogOpen(false);\r\n      onPipelineSave(fileName, true);\r\n    }\r\n  };\r\n\r\n  const handleOverwriteCancel = () => {\r\n    setIsOverwriteDialogOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SaveAsDialog\r\n        isOpen={isOpen}\r\n        onSave={handleSave}\r\n        onCancel={onCancel}\r\n        initialValue={fileName}\r\n        inputLabel=\"Pipeline name\"\r\n      />\r\n      <OkCancelDialog\r\n        isOpen={isOpen && isOverwriteDialogOpen}\r\n        title=\"Overwrite?\"\r\n        okButtonText=\"Overwrite\"\r\n        onOk={handleOverwriteOk}\r\n        onCancel={handleOverwriteCancel}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\ninterface OkCancelDialogProps {\r\n  isOpen: boolean;\r\n  title: string;\r\n  okButtonText?: string;\r\n  cancelButtonText?: string;\r\n  onOk: () => void;\r\n  onCancel: () => void;\r\n}\r\n\r\nconst OkCancelDialog = ({\r\n  isOpen,\r\n  title,\r\n  okButtonText = \"OK\",\r\n  cancelButtonText = \"Cancel\",\r\n  onOk,\r\n  onCancel,\r\n}: OkCancelDialogProps) => {\r\n  return (\r\n    <Dialog open={isOpen} aria-labelledby=\"alert-dialog-title\">\r\n      <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\r\n      <DialogActions>\r\n        <Button color=\"primary\" onClick={onCancel}>\r\n          {cancelButtonText}\r\n        </Button>\r\n        <Button color=\"secondary\" onClick={onOk}>\r\n          {okButtonText}\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\ninterface SaveAsDialogProps {\r\n  isOpen: boolean;\r\n  onSave: (name: string) => void;\r\n  onCancel: () => void;\r\n  initialValue: string | undefined;\r\n  inputLabel: string;\r\n}\r\n\r\nconst SaveAsDialog = ({\r\n  isOpen,\r\n  onSave,\r\n  onCancel,\r\n  initialValue,\r\n  inputLabel = \"Pipeline name\",\r\n}: SaveAsDialogProps) => {\r\n  const nameInputRef = useRef<HTMLInputElement>();\r\n  return (\r\n    <Dialog open={isOpen} aria-labelledby=\"alert-dialog-title\">\r\n      <DialogTitle id=\"alert-dialog-title\">{\"Save pipeline\"}</DialogTitle>\r\n      <form\r\n        onSubmit={(e) => {\r\n          if (nameInputRef.current) {\r\n            onSave(nameInputRef.current.value);\r\n          }\r\n          e.preventDefault();\r\n        }}\r\n      >\r\n        <DialogContent>\r\n          <TextField\r\n            id=\"name\"\r\n            type=\"text\"\r\n            defaultValue={initialValue}\r\n            label={inputLabel}\r\n            inputRef={nameInputRef}\r\n            required\r\n            autoFocus\r\n            fullWidth\r\n            margin=\"dense\"\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={onCancel}>Cancel</Button>\r\n          <Button color=\"primary\" type=\"submit\" autoFocus>\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </form>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nconst PipelineLibrary = ({\r\n  componentSpec,\r\n  setComponentSpec,\r\n  samplePipelineLibraryUrl,\r\n}: PipelineLibraryProps) => {\r\n  // const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [componentFiles, setComponentFiles] = useState(\r\n    new Map<string, ComponentFileEntry>()\r\n  );\r\n  const [pipelineFile, setPipelineFile] = useState<ComponentFileEntry>();\r\n  const [saveAsDialogIsOpen, setSaveAsDialogIsOpen] = useState(false);\r\n  const nodes = useStoreState((store) => store.nodes);\r\n\r\n  const [contextMenuFileName, setContextMenuFileName] = useState<string>();\r\n  const [contextMenuAnchor, setContextMenuAnchor] = useState<HTMLElement>();\r\n\r\n  const refreshPipelines = useCallback(() => {\r\n    getAllComponentFilesFromList(USER_PIPELINES_LIST_NAME).then(\r\n      setComponentFiles\r\n    );\r\n  }, [setComponentFiles]);\r\n\r\n  useEffect(refreshPipelines, [refreshPipelines]);\r\n\r\n  const openPipelineFile = useCallback(\r\n    async (fileEntry: ComponentFileEntry) => {\r\n      // Loading all child components\r\n      // TODO: Move this functionality to the setComponentSpec function\r\n      await preloadComponentReferences(fileEntry.componentRef.spec);\r\n      setComponentSpec?.(fileEntry.componentRef.spec);\r\n      setPipelineFile(fileEntry);\r\n    },\r\n    [setComponentSpec, setPipelineFile]\r\n  );\r\n\r\n  const onDrop = useCallback(\r\n    (acceptedFiles: File[]) => {\r\n      acceptedFiles.forEach((file) => {\r\n        const reader = new FileReader();\r\n        reader.onabort = () => console.log(\"file reading was aborted\");\r\n        reader.onerror = () => console.log(\"file reading has failed\");\r\n        reader.onload = async () => {\r\n          const binaryStr = reader.result;\r\n          if (binaryStr === null || binaryStr === undefined) {\r\n            console.error(`Dropped file reader result was ${binaryStr}`);\r\n            return;\r\n          }\r\n          const fileName =\r\n            removeSuffixes(file.name, [\r\n              \".pipeline.component.yaml\",\r\n              \".component.yaml\",\r\n              \".pipeline.yaml\",\r\n              \".yaml\",\r\n            ]) || \"Pipeline\";\r\n          try {\r\n            const componentRefPlusData1 = await loadComponentAsRefFromText(\r\n              binaryStr\r\n            );\r\n            const componentRef1 = componentRefPlusData1.componentRef;\r\n            if (!isGraphImplementation(componentRef1.spec.implementation)) {\r\n              console.error(\"Dropped component is not a graph component\");\r\n              return;\r\n            }\r\n            // Caching the child components\r\n            await preloadComponentReferences(componentRef1.spec);\r\n            // TODO: Do not load the component twice\r\n            const componentRefPlusData = await addComponentToListByText(\r\n              USER_PIPELINES_LIST_NAME,\r\n              binaryStr,\r\n              fileName\r\n            );\r\n            const componentRef = componentRefPlusData.componentRef;\r\n            console.debug(\"storeComponentText succeeded\", componentRef);\r\n            (window as any).gtag?.(\"event\", \"PipelineLibrary_pipeline_import\", {\r\n              result: \"succeeded\",\r\n            });\r\n            // setErrorMessage(\"\");\r\n            refreshPipelines();\r\n          } catch (err) {\r\n            // setErrorMessage(\r\n            //   `Error parsing the dropped file as component: ${err.toString()}.`\r\n            // );\r\n            console.error(\"Error parsing the dropped file as component\", err);\r\n            (window as any).gtag?.(\"event\", \"PipelineLibrary_pipeline_import\", {\r\n              result: \"failed\",\r\n            });\r\n          }\r\n        };\r\n        reader.readAsArrayBuffer(file);\r\n      });\r\n    },\r\n    [refreshPipelines]\r\n  );\r\n\r\n  const openSaveAsDialog = useCallback(() => {\r\n    setSaveAsDialogIsOpen(true);\r\n  }, [setSaveAsDialogIsOpen]);\r\n\r\n  const closeSaveAsDialog = useCallback(() => {\r\n    setSaveAsDialogIsOpen(false);\r\n  }, [setSaveAsDialogIsOpen]);\r\n\r\n  const handlePipelineSave = useCallback(\r\n    async (name: string, overwrite: boolean = false) => {\r\n      if (!overwrite) {\r\n        const existingFileEntry = await getComponentFileFromList(\r\n          USER_PIPELINES_LIST_NAME,\r\n          name\r\n        );\r\n        if (existingFileEntry !== null) {\r\n          throw Error(`File \"${name}\" already exists.`);\r\n        }\r\n      }\r\n      if (!componentSpec) {\r\n        return;\r\n      }\r\n      const graphComponent = augmentComponentSpec(\r\n        componentSpec,\r\n        nodes,\r\n        false,\r\n        true\r\n      );\r\n      graphComponent.name = name;\r\n      const componentText = componentSpecToYaml(graphComponent);\r\n      const fileEntry = await writeComponentToFileListFromText(\r\n        USER_PIPELINES_LIST_NAME,\r\n        name,\r\n        componentText\r\n      );\r\n      await openPipelineFile(fileEntry);\r\n      closeSaveAsDialog();\r\n      refreshPipelines();\r\n    },\r\n    [\r\n      componentSpec,\r\n      closeSaveAsDialog,\r\n      nodes,\r\n      openPipelineFile,\r\n      refreshPipelines,\r\n    ]\r\n  );\r\n\r\n  const handleContextMenuDelete = async () => {\r\n    if (contextMenuFileName) {\r\n      setContextMenuFileName(undefined);\r\n      await deleteComponentFileFromList(\r\n        USER_PIPELINES_LIST_NAME,\r\n        contextMenuFileName\r\n      );\r\n      refreshPipelines();\r\n    }\r\n  };\r\n\r\n  const handleContextMenuOpen = async () => {\r\n    if (contextMenuFileName) {\r\n      setContextMenuFileName(undefined);\r\n      const fileEntry = await getComponentFileFromList(\r\n        USER_PIPELINES_LIST_NAME,\r\n        contextMenuFileName\r\n      );\r\n      if (!fileEntry) {\r\n        console.error(\r\n          `handleContextMenuOpen: File ${contextMenuFileName} does not exist.`\r\n        );\r\n        return;\r\n      }\r\n      await openPipelineFile(fileEntry);\r\n    }\r\n  };\r\n\r\n  const fileInput = useRef<HTMLInputElement>(null);\r\n  const componentLink = useRef<HTMLAnchorElement>(null);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        //border: \"1px solid black\",\r\n        overflow: \"auto\",\r\n        whiteSpace: \"nowrap\",\r\n      }}\r\n    >\r\n      <div style={{ margin: \"5px\" }}>\r\n        <button\r\n          onClick={(e) => {\r\n            if (pipelineFile) {\r\n              handlePipelineSave(pipelineFile?.name, true);\r\n            } else {\r\n              openSaveAsDialog();\r\n            }\r\n          }}\r\n        >\r\n          Save\r\n        </button>\r\n        <button onClick={openSaveAsDialog}>Save as</button>\r\n        {componentSpec && (\r\n          <SavePipelineAsDialog\r\n            initialName={componentSpec.name}\r\n            isOpen={saveAsDialogIsOpen}\r\n            onCancel={closeSaveAsDialog}\r\n            onPipelineSave={handlePipelineSave}\r\n          />\r\n        )}\r\n        <input\r\n          ref={fileInput}\r\n          type=\"file\"\r\n          accept=\".yaml\"\r\n          onChange={(e) => onDrop(Array.from(e.target.files ?? []))}\r\n          style={{ display: \"none\" }}\r\n        />\r\n        <button onClick={(e) => fileInput.current?.click()}>+ Import</button>\r\n        <button\r\n          onClick={(e) => {\r\n            componentLink.current?.click();\r\n          }}\r\n        >\r\n          Export\r\n        </button>\r\n        {componentSpec && (\r\n          <GraphComponentLink\r\n            linkRef={componentLink}\r\n            componentSpec={componentSpec}\r\n            linkText=\"🔗\"\r\n            downloadFileName={\r\n              (componentSpec.name ? componentSpec.name + \".\" : \"\") +\r\n              \"pipeline.component.yaml\"\r\n            }\r\n            style={{ textDecoration: \"none\" }}\r\n          />\r\n        )}\r\n      </div>\r\n      <div style={{ overflow: \"auto\", marginLeft: \"10px\" }}>\r\n        {Array.from(componentFiles.entries()).map(([fileName, fileEntry]) => (\r\n          <div key={fileName}>\r\n            ⋮ {/* ⋮ ≡ ⋅ */}\r\n            <button\r\n              className=\"link-button\"\r\n              onClick={(e) => openPipelineFile(fileEntry)}\r\n              style={\r\n                fileName === pipelineFile?.name\r\n                  ? { fontWeight: \"bold\" }\r\n                  : undefined\r\n              }\r\n              onContextMenu={(e) => {\r\n                e.preventDefault();\r\n                setContextMenuAnchor(e.currentTarget);\r\n                setContextMenuFileName(fileName);\r\n              }}\r\n            >\r\n              {fileName}\r\n            </button>\r\n          </div>\r\n        ))}\r\n        <Menu\r\n          open={contextMenuFileName !== undefined}\r\n          anchorEl={contextMenuAnchor}\r\n          onClose={() => {\r\n            setContextMenuFileName(undefined);\r\n          }}\r\n        >\r\n          <MenuItem dense={true} onClick={handleContextMenuOpen}>\r\n            Open\r\n          </MenuItem>\r\n          <MenuItem dense={true} onClick={handleContextMenuDelete}>\r\n            Delete\r\n          </MenuItem>\r\n        </Menu>\r\n      </div>\r\n      <details\r\n        open\r\n        style={{\r\n          border: \"1px solid #aaa\",\r\n          borderRadius: \"4px\",\r\n          padding: \"4px\",\r\n        }}\r\n      >\r\n        <summary>\r\n          <strong>Sample pipelines</strong>\r\n        </summary>\r\n        {samplePipelineLibraryUrl === undefined ? (\r\n          \"Sample pipeline library URL is undefined\"\r\n        ) : (\r\n          <SamplePipelineLibrary\r\n            setComponentSpec={setComponentSpec}\r\n            pipelineLibraryUrl={samplePipelineLibraryUrl}\r\n          />\r\n        )}\r\n      </details>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PipelineLibrary;\r\n"],"sourceRoot":""}