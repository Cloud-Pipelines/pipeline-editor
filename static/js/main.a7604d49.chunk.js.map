{"version":3,"sources":["componentStore.ts","DragNDrop/graphComponentFromFlow.ts","DragNDrop/GraphComponentExporter.tsx","DragNDrop/Sidebar.tsx","github.ts","DragNDrop/ComponentSearch.tsx","DragNDrop/MultiHandleNode.tsx","DragNDrop/ComponentTaskNode.tsx","DragNDrop/index.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["url","a","fetch","then","response","text","yaml","load","getNodePositionAnnotations","node","JSON","stringify","x","__rf","position","y","width","height","nodeOrderComparer","n1","n2","GraphComponentExporter","pipelineName","graphComponent","nodes","edges","name","annotations","includePositions","includeSpecs","inputNodes","filter","type","sort","outputNodes","taskNodes","map","inputSpecs","spec","id","outputSpecs","taskMap","reduce","accumulator","taskSpec","data","undefined","Object","assign","componentRef","graphOutputValues","edge","sourceTaskId","source","sourceOutputName","sourceHandle","replace","targetTaskId","target","targetInputName","targetHandle","argument","taskOutput","taskId","outputName","graphInput","inputName","targetTask","arguments","taskOutputArgument","console","error","inputs","outputs","metadata","implementation","graph","tasks","outputValues","length","keys","createGraphComponentSpecFromFlowElements","useStoreState","store","componentText","dump","lineWidth","componentTextBlob","Blob","downloadLink","href","URL","createObjectURL","download","style","overflow","onDragStart","event","nodeData","dataTransfer","setData","effectAllowed","Sidebar","useState","componentSpec","setComponentSpec","componentUrl","useEffect","loadComponentFromUrl","className","input","label","draggable","default","output","multihandle","handles","top","ids","bottom","left","right","inputNames","inputSpec","outputNames","outputSpec","componentName","task","SEARCH_CACHE_NAME","BLOB_CACHE_NAME","DB_NAME","HASH_TO_CONTENT_DB_TABLE_NAME","HASH_TO_COMPONENT_NAME_DB_TABLE_NAME","URL_TO_HASH_DB_TABLE_NAME","HASH_TO_URL_DB_TABLE_NAME","URL_PROCESSING_VERSION_TABLE_NAME","BAD_HASHES_TABLE_NAME","httpGetWithCache","urlOrRequest","cacheName","updateIfInCache","caches","open","cache","match","add","response2","Promise","reject","searchGitHubCodeWithCache","query","page","order","encodedQuery","encodeURIComponent","encodedSort","encodedOrder","searchUrl","json","githubHtmlUrlToDownloadUrl","htmlUrl","getComponentUrlsAndHashes","users","urlsAndHashes","user","join","searchResults","items","item","html_url","hash","sha","resolve","setTimeout","cacheAllComponents","debug","urlsAndHashesIterator","urlToHashDb","localForage","createInstance","storeName","hashToUrlDb","hashToContentDb","hashToComponentNameDb","urlProcessingVersionDb","badHashesDb","toLowerCase","getItem","badHashReason","downloadUrl","endsWith","cachedHash","urlVersion","Number","parseInt","blob","setItem","message","getAllComponentsAsRefs","hashToComponentRef","Map","cachePromise","iterate","iterationNumber","set","err","get","componentRefs","forEach","push","searchComponentsByName","ref","includes","COMPONENT_ORGS","SearchPanel","props","setError","firstTime","setFirstTime","isLoaded","setIsLoaded","setQuery","setItems","results","componentElements","title","onSubmit","e","preventDefault","fetchData","placeholder","onChange","value","MultiHandleNode","handleComponents","sideHandles","numHandles","i","positionPercentString","String","Position","Top","Bottom","isConnectable","memo","inputHandlePosition","outputHandlePosition","generateHandles","ioSpecs","handleType","idPrefix","ioSpec","ioTypeName","toString","ComponentTaskNode","inputHandles","outputHandles","concat","nodeTypes","initialElements","onDragOver","dropEffect","DnDFlow","reactFlowInstance","setReactFlowInstance","elements","setElements","onConnect","params","els","addEdge","onElementsRemove","elementsToRemove","removeElements","onEdgeUpdateStart","_","log","onEdgeUpdateEnd","onEdgeUpdate","oldEdge","newConnection","updateEdge","onLoad","_reactFlowInstance","onDrop","droppedData","getData","droppedDataObject","parse","nodeType","project","clientX","clientY","newNode","es","deleteKeyCode","multiSelectionKeyCode","snapToGrid","snapGrid","gap","ComponentSearch","App","minWidth","minHeight","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","process","origin","addEventListener","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.a7604d49.chunk.js","sourcesContent":["import yaml from \"js-yaml\";\r\n\r\nimport { ComponentSpec } from \"./componentSpec\";\r\n\r\nexport async function loadComponentFromUrl(\r\n  url: string\r\n): Promise<ComponentSpec> {\r\n  return fetch(url)\r\n    .then((response) => response.text())\r\n    .then((response) => yaml.load(response) as ComponentSpec);\r\n}\r\n","import {\r\n  Node,\r\n  Edge,\r\n} from \"react-flow-renderer\";\r\n\r\nimport {\r\n  ComponentSpec,\r\n  TaskSpec,\r\n  InputSpec,\r\n  OutputSpec,\r\n  ArgumentType,\r\n  GraphInputArgument,\r\n  TaskOutputArgument,\r\n  GraphImplementation,\r\n} from \"../componentSpec\";\r\n\r\nconst getNodePositionAnnotations = (node: Node): { [k: string]: string } => ({\r\n  \"editor.position\": JSON.stringify({\r\n    // node.position cannot be used since set at 1st drop and never updated\r\n    x: node.__rf.position.x,\r\n    y: node.__rf.position.y,\r\n    width: node.__rf.width,\r\n    height: node.__rf.height,\r\n  }),\r\n});\r\n\r\nconst nodeOrderComparer = (n1: Node, n2: Node) =>\r\n  n1.__rf.position.x - n2.__rf.position.x;\r\n\r\nconst createGraphComponentSpecFromFlowElements = (\r\n  nodes: Node[],\r\n  edges: Edge[],\r\n  name = \"Component\",\r\n  annotations: Record<string, string> = {},\r\n  includePositions: boolean = true,\r\n  includeSpecs: boolean = false\r\n): ComponentSpec => {\r\n  // Input and output nodes\r\n  // Sorting them by horisontal position to make reordering inputs and outputs easy.\r\n  const inputNodes = nodes.filter((node) => node.type === \"input\").sort(nodeOrderComparer);\r\n  const outputNodes = nodes.filter((node) => node.type === \"output\").sort(nodeOrderComparer);\r\n  // Task nodes. They should all be ComponentTaskNode components\r\n  const taskNodes = nodes\r\n    .filter((node) => node.type === \"task\")\r\n    .map((node) => node as Node<TaskSpec>);\r\n  \r\n  const inputSpecs = inputNodes.map<InputSpec>((node) => {\r\n    let spec: InputSpec = { name: node.id };\r\n    if (includePositions) {\r\n      spec.annotations = getNodePositionAnnotations(node);\r\n    }\r\n    return spec;\r\n  });\r\n\r\n  const outputSpecs = outputNodes.map<OutputSpec>((node) => {\r\n    let spec: OutputSpec = { name: node.id };\r\n    if (includePositions) {\r\n      spec.annotations = spec.annotations = getNodePositionAnnotations(node);\r\n    }\r\n    return spec;\r\n  });\r\n\r\n  // const originalTaskMap = taskNodes.reduce((map, node) => {\r\n  //   const taskSpec = node.data;\r\n  //   if (taskSpec !== undefined) {\r\n  //     map.set(node.id, taskSpec);\r\n  //   }\r\n  //   return map;\r\n  // }, new Map<string, TaskSpec>());\r\n\r\n  const taskMap = taskNodes.reduce((accumulator, node) => {\r\n    let taskSpec = node.data;\r\n    if (taskSpec !== undefined) {\r\n      // Cloning the spec to modify it\r\n      taskSpec = Object.assign({}, taskSpec);\r\n      if (!includeSpecs) {\r\n        taskSpec.componentRef = Object.assign({}, taskSpec.componentRef);\r\n        delete taskSpec.componentRef.spec;\r\n      }\r\n      if (includePositions) {\r\n        taskSpec.annotations = getNodePositionAnnotations(node);\r\n      }\r\n      accumulator[node.id] = taskSpec;\r\n    }\r\n    return accumulator;\r\n  }, {} as Record<string, TaskSpec>);\r\n\r\n  let graphOutputValues: Record<string, TaskOutputArgument> = {};\r\n\r\n  for (const edge of edges) {\r\n    const sourceTaskId = edge.source;\r\n    const sourceOutputName = edge.sourceHandle?.replace(/^output_/, '');\r\n    const targetTaskId = edge.target;\r\n    const targetInputName = edge.targetHandle?.replace(/^input_/, '');\r\n\r\n    // if (!sourceOutputName || !targetInputName) {\r\n    //   console.error(\"Enexpected edge without a source or target handle:\", edge);\r\n    //   continue;\r\n    // }\r\n\r\n    // FIX: For now, detecting the graph inputs and outputs by sourceOutputName or targetInputName being null\r\n    const argument: ArgumentType =\r\n      !!sourceOutputName\r\n        ? ({\r\n            taskOutput: { taskId: sourceTaskId, outputName: sourceOutputName },\r\n          } as TaskOutputArgument)\r\n        : ({\r\n            // Using input node ID as graph input name\r\n            graphInput: { inputName: sourceTaskId },\r\n          } as GraphInputArgument);\r\n    if (!!targetInputName) {\r\n      let targetTask = taskMap[targetTaskId];\r\n      if (targetTask.arguments === undefined) {\r\n        targetTask.arguments = {};\r\n      }\r\n      targetTask.arguments[targetInputName] = argument;\r\n    } else {\r\n      // graph output\r\n      // Using output node ID as graph output name\r\n      const taskOutputArgument = argument as TaskOutputArgument;\r\n      // FIX BUG This check does not work to guard against incompatible arguments\r\n      if (!!taskOutputArgument) {\r\n        graphOutputValues[targetTaskId] = taskOutputArgument;\r\n      } else {\r\n        console.error(\"Graph outputs can only come from task outputs.\")\r\n      }\r\n    }\r\n  }\r\n\r\n  // // Verify arguments\r\n  // // TODO: Also sort them\r\n  // for (const [taskId, taskSpec] of Object.entries(taskMap)) {\r\n    \r\n  // }\r\n\r\n  const graphComponent: ComponentSpec = {\r\n    name: name,\r\n    inputs: inputSpecs,\r\n    outputs: outputSpecs,\r\n    metadata: {\r\n      annotations: annotations\r\n    },\r\n    implementation: {\r\n      graph: {\r\n        tasks: taskMap,\r\n        outputValues: graphOutputValues,\r\n      },\r\n    },\r\n  };\r\n\r\n  // Cleanup.\r\n  // I could have prevented these attributes from being added, but then the attribute serialization ordering will be ugly\r\n  // (the first attribute would be \"implementation\" since it's required).\r\n  if (inputSpecs.length === 0) {\r\n    delete graphComponent.inputs;\r\n  }\r\n  if (outputSpecs.length === 0) {\r\n    delete graphComponent.outputs;\r\n  }\r\n  if (Object.keys(annotations).length === 0) {\r\n    delete graphComponent.metadata;\r\n  }\r\n  if (Object.keys(graphOutputValues).length === 0) {\r\n    delete (graphComponent.implementation as GraphImplementation).graph.outputValues;\r\n  }\r\n  return graphComponent;\r\n};\r\n\r\nexport { createGraphComponentSpecFromFlowElements };\r\n","import {\r\n  useStoreState,\r\n} from \"react-flow-renderer\";\r\nimport yaml from \"js-yaml\";\r\n\r\nimport {createGraphComponentSpecFromFlowElements} from './graphComponentFromFlow'\r\n\r\nconst GraphComponentExporter = ({pipelineName}: {pipelineName?: string}) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n  const edges = useStoreState((store) => store.edges);\r\n\r\n  pipelineName = pipelineName ?? \"Pipeline\";\r\n\r\n  const graphComponent = createGraphComponentSpecFromFlowElements(nodes, edges, pipelineName);\r\n  const componentText = yaml.dump(graphComponent, { lineWidth: 10000 });\r\n\r\n  const componentTextBlob = new Blob([componentText], { type: \"text/yaml\" }); // Or application/x-yaml (which leads to downloading)\r\n  const downloadLink = <a href={URL.createObjectURL(componentTextBlob)} download={\"component.yaml\"}>component.yaml</a>\r\n\r\n  return (\r\n    <div>\r\n      <h4>Graph component: {downloadLink}</h4>\r\n      <details>\r\n        <summary>Graph component: {downloadLink}</summary>\r\n        <pre style={{overflow: \"auto\"}}>{componentText}</pre>\r\n      </details>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphComponentExporter;\r\n","import React, { DragEvent, useEffect, useState } from 'react';\r\n\r\nimport {loadComponentFromUrl} from '../componentStore'\r\nimport {ComponentSpec, TaskSpec} from '../componentSpec'\r\nimport GraphComponentExporter from './GraphComponentExporter'\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  event.dataTransfer.setData('application/reactflow', JSON.stringify(nodeData));\r\n  event.dataTransfer.effectAllowed = 'move';\r\n};\r\n\r\nconst Sidebar = () => {\r\n  const [componentSpec, setComponentSpec] = useState<ComponentSpec | undefined>(undefined);\r\n\r\n  const componentUrl = \"https://raw.githubusercontent.com/kubeflow/pipelines/603342c4b88fe2d69ff07682f702cd3601e883bb/components/PyTorch/Train_PyTorch_model/from_CSV/component.yaml\";\r\n  useEffect(() => {\r\n    loadComponentFromUrl(componentUrl).then(setComponentSpec);\r\n  }, []);\r\n\r\n  return (\r\n    <aside>\r\n      <div className=\"description\">You can drag these nodes to the pane on the right.</div>\r\n      <div className=\"react-flow__node-input\" onDragStart={(event: DragEvent) => onDragStart(event, { input: { label: \"Input Node\" } })} draggable>\r\n        Input Node\r\n      </div>\r\n      <div className=\"react-flow__node-default\" onDragStart={(event: DragEvent) => onDragStart(event, { default: { label: \"Default Node\" } })} draggable>\r\n        Default Node\r\n      </div>\r\n      <div className=\"react-flow__node-output\" onDragStart={(event: DragEvent) => onDragStart(event, { output: { label: \"Output Node\" } })} draggable>\r\n        Output Node\r\n      </div>\r\n      <div className=\"react-flow__node react-flow__node-multihandle\" draggable\r\n        onDragStart={(event: DragEvent) =>\r\n          onDragStart(event, { multihandle: {\r\n            handles: {\r\n              top: { type: \"target\", ids: [\"top_1\", \"top_2\", \"top_3\"] },\r\n              bottom: { type: \"source\", ids: [\"bottom_1\", \"bottom_2\"] },\r\n              left: { type: \"target\", ids: [\"left_1\"] },\r\n              right: { type: \"source\", ids: [\"right_1\"] },\r\n            },\r\n            label: \"Multi-handle node (3-2-1-1)\",\r\n          }})\r\n        }\r\n      >\r\n        Multi-port Node 3-2-1-1\r\n      </div>\r\n      <div className=\"react-flow__node react-flow__node-multihandle\" draggable\r\n        onDragStart={(event: DragEvent) => {\r\n          // Using await inside onDragStart breaks event.dataTransfer.setData! \r\n          //const componentSpec = await loadComponentFromUrl(\"https://raw.githubusercontent.com/kubeflow/pipelines/603342c4b88fe2d69ff07682f702cd3601e883bb/components/PyTorch/Train_PyTorch_model/from_CSV/component.yaml\");\r\n          if (componentSpec === undefined) {\r\n            return;\r\n          }\r\n          const inputs = componentSpec.inputs ?? []\r\n          const inputNames = inputs.map(inputSpec => inputSpec.name);\r\n          const outputs = componentSpec.outputs ?? []\r\n          const outputNames = outputs.map(outputSpec => outputSpec.name);\r\n          const componentName = componentSpec.name ?? \"Component\"\r\n          return onDragStart(event, { multihandle: {\r\n            handles: {\r\n              top: { type: \"target\", ids: inputNames },\r\n              bottom: { type: \"source\", ids: outputNames },\r\n            },\r\n            label: componentName,\r\n          }});\r\n        }}\r\n      >\r\n        PyTorch/Train_PyTorch_model/from_CSV\r\n      </div>\r\n      {\r\n        componentSpec !== undefined && <div className=\"react-flow__node react-flow__node-multihandle\" draggable\r\n          onDragStart={(event: DragEvent) => {\r\n            const taskSpec: TaskSpec = {\r\n              componentRef: {\r\n                url: componentUrl,\r\n                spec: componentSpec,\r\n              },\r\n            };\r\n            return onDragStart(event, { task: taskSpec});\r\n          }}\r\n        >\r\n          {componentSpec.name}\r\n        </div>\r\n      }\r\n      <GraphComponentExporter/>\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import yaml from \"js-yaml\";\r\nimport localForage from \"localforage\";\r\nimport { ComponentSpec, ComponentReference } from \"./componentSpec\";\r\n\r\n// const COMPONENT_FILE_NAME_SUFFIX = \"component.yaml\";\r\n// const COMPONENT_FILE_MAX_SIZE = 100000;\r\nconst SEARCH_CACHE_NAME = \"https://api.github.com/search\";\r\nconst BLOB_CACHE_NAME = \"raw.githubusercontent.com/.../component.yaml\";\r\n\r\n// IndexedDB: DB and table names\r\nconst DB_NAME = \"components\";\r\nconst HASH_TO_CONTENT_DB_TABLE_NAME = \"hash_to_data\";\r\nconst HASH_TO_COMPONENT_NAME_DB_TABLE_NAME = \"hash_to_component_name\";\r\nconst URL_TO_HASH_DB_TABLE_NAME = \"url_to_hash\";\r\nconst HASH_TO_URL_DB_TABLE_NAME = \"hash_to_url\";\r\nconst URL_PROCESSING_VERSION_TABLE_NAME = \"url_version\";\r\nconst CURRENT_URL_PROCESSING_VERSION = 1;\r\nconst BAD_HASHES_TABLE_NAME = \"bad_hashes\";\r\n\r\n\r\nexport const httpGetWithCache = async (\r\n  urlOrRequest: string | RequestInfo,\r\n  cacheName: string,\r\n  updateIfInCache: boolean = false\r\n): Promise<Response> => {\r\n  const cache = await caches.open(cacheName);\r\n  const response = await cache.match(urlOrRequest);\r\n  if (response !== undefined) {\r\n    if (updateIfInCache) {\r\n      cache.add(urlOrRequest);\r\n    }\r\n    return response;\r\n  }\r\n  await cache.add(urlOrRequest);\r\n  const response2 = await cache.match(urlOrRequest);\r\n  if (response2 === undefined) {\r\n    return Promise.reject(\"Added object to cache, but counld not find it\");\r\n  }\r\n  return response2;\r\n};\r\n\r\n\r\nexport const searchGitHubCodeWithCache = async (\r\n  query: string,\r\n  page = 1,\r\n  sort = \"indexed\",\r\n  order = \"desc\",\r\n): Promise<any> => {\r\n  // TODO: Paging\r\n  const encodedQuery = encodeURIComponent(query);\r\n  const encodedSort = encodeURIComponent(sort);\r\n  const encodedOrder = encodeURIComponent(order);\r\n  const searchUrl = `https://api.github.com/search/code?q=${encodedQuery}&sort=${encodedSort}&order=${encodedOrder}&per_page=100&page=${page}`;\r\n  const response = await httpGetWithCache(searchUrl, SEARCH_CACHE_NAME, true);\r\n  return response.json();\r\n};\r\n\r\n\r\nconst githubHtmlUrlToDownloadUrl = (htmlUrl: string): string => {\r\n  // https://github.com/               kubeflow/pipelines/blob/24bc9162a56c2fe3c50947d655ef280f71ba058f/components/gcp/dataflow/launch_flex_template/component.yaml\r\n  // https://raw.githubusercontent.com/kubeflow/pipelines     /24bc9162a56c2fe3c50947d655ef280f71ba058f/components/gcp/dataflow/launch_flex_template/component.yaml\r\n  return htmlUrl\r\n    .replace(\"https://github.com/\", \"https://raw.githubusercontent.com/\")\r\n    .replace(\"/blob/\", \"/\");\r\n};\r\n\r\n\r\ntype UrlAndHash = {\r\n  url: string;\r\n  hash: string;\r\n};\r\n\r\n\r\nexport async function * getComponentUrlsAndHashes(\r\n  users = [\"kubeflow\", \"Ark-kun\"]\r\n) {\r\n  let urlsAndHashes: UrlAndHash[] = [];\r\n  const query =\r\n    \"filename:component.yaml \" + users.map((user) => \"user:\" + user).join(\" \");\r\n  for (let page = 1; page < 100; page++) {\r\n    const searchResults = await searchGitHubCodeWithCache(query, page);\r\n    // \"total_count\": 512,\r\n    // \"incomplete_results\": false,\r\n    // \"items\": [\r\n    const items: any[] = searchResults.items;\r\n    if (items.length === 0) {\r\n      break;\r\n    }\r\n    for (let item of items) {\r\n      yield { url: githubHtmlUrlToDownloadUrl(item.html_url), hash: item.sha as string };\r\n    }\r\n    await new Promise( resolve => setTimeout(resolve, (60 * 1000 / 10) * (1 + 0.1)));\r\n  }\r\n  return urlsAndHashes;\r\n};\r\n\r\n\r\nexport const cacheComponentCandidateBlobs = async (\r\n  users = [\"kubeflow\", \"Ark-kun\"]\r\n): Promise<any[]> => {\r\n  let urlsAndHashes: UrlAndHash[] = [];\r\n  let urls = [];\r\n  for await (const urlAndHash of getComponentUrlsAndHashes(users)) {\r\n    urlsAndHashes.push(urlAndHash);\r\n    urls.push(urlAndHash.url);\r\n  }\r\n  const cache = await caches.open(BLOB_CACHE_NAME);\r\n  await cache.addAll(urls);\r\n  return urlsAndHashes;\r\n};\r\n\r\n\r\nexport const cacheAllComponents = async (users = [\"kubeflow\", \"Ark-kun\"]) => {\r\n  console.debug(\"Starting cacheAllComponents\");\r\n  const urlsAndHashesIterator = getComponentUrlsAndHashes(users);\r\n\r\n  // const cache = await caches.open(BLOB_CACHE_NAME);\r\n  const urlToHashDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_TO_HASH_DB_TABLE_NAME,\r\n  });\r\n  const hashToUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_URL_DB_TABLE_NAME,\r\n  });\r\n  const hashToContentDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_CONTENT_DB_TABLE_NAME,\r\n  });\r\n  const hashToComponentNameDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_COMPONENT_NAME_DB_TABLE_NAME,\r\n  });\r\n  const urlProcessingVersionDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_PROCESSING_VERSION_TABLE_NAME,\r\n  });\r\n  const badHashesDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: BAD_HASHES_TABLE_NAME,\r\n  });\r\n  for await (const item of urlsAndHashesIterator) {\r\n    const hash = item.hash.toLowerCase();\r\n    const htmlUrl = item.url;\r\n    const badHashReason = await badHashesDb.getItem<string>(hash);\r\n    if (badHashReason !== null) {\r\n      console.debug(`Skipping url ${htmlUrl} with hash ${hash} due to error: \"${badHashReason}\"`);\r\n      continue;\r\n    }\r\n    try {\r\n      const downloadUrl: string = githubHtmlUrlToDownloadUrl(htmlUrl);\r\n      if (!downloadUrl.endsWith(\"component.yaml\")) {\r\n        console.debug(`Skipping url ${downloadUrl} since it does not end with \"component.yaml\"`);\r\n        continue;\r\n      }\r\n      // Sanity check\r\n      const cachedHash = await urlToHashDb.getItem<string>(downloadUrl);\r\n      if (cachedHash !== null && cachedHash !== hash) {\r\n        console.error(\r\n          `Component cache is broken. Stored hash for ${downloadUrl}: ${cachedHash} != ${hash}.`\r\n        );\r\n      }\r\n      // Check whether the processing is complete\r\n      const urlVersion = await urlProcessingVersionDb.getItem<string>(\r\n        downloadUrl\r\n      );\r\n\r\n      if (\r\n        cachedHash !== null && // Not sure we should check this, but it improves the sanity\r\n        urlVersion !== null &&\r\n        Number.parseInt(urlVersion) >= CURRENT_URL_PROCESSING_VERSION\r\n      ) {\r\n        continue;\r\n      }\r\n\r\n      console.debug(`Processing new component candidate: ${downloadUrl}.`);\r\n      const response = await httpGetWithCache(downloadUrl, BLOB_CACHE_NAME);\r\n      let componentSpec: ComponentSpec;\r\n      let componentText: string;\r\n      try {\r\n        const data = await response.blob();\r\n        componentText = await data.text();\r\n        componentSpec = yaml.load(componentText) as ComponentSpec;\r\n      } catch(err) {\r\n        badHashesDb.setItem(hash, err.name + \": \" + err.message);\r\n        continue;\r\n      }\r\n      if (componentSpec.implementation === undefined) {\r\n        badHashesDb.setItem(hash, 'Component lacks the \"impelmentation\" section.');\r\n        continue;\r\n      }\r\n\r\n      // Blobs are cumbersome (need await to get text) - store text instead\r\n      // await hashToContentDb.setItem(hash, data);\r\n      await hashToContentDb.setItem(hash, componentText);\r\n\r\n      // Only adding hash -> URL once\r\n      const urlForHash = await hashToUrlDb.getItem<string>(hash);\r\n      if (urlForHash === null) {\r\n        await hashToUrlDb.setItem(hash, downloadUrl);\r\n      }\r\n\r\n      // Only storing names when they exist\r\n      if (componentSpec.name) {\r\n        await hashToComponentNameDb.setItem(hash, componentSpec.name);\r\n      }\r\n\r\n      await urlToHashDb.setItem(downloadUrl, hash);\r\n\r\n      // Marking the processing as completed\r\n      await urlProcessingVersionDb.setItem(\r\n        downloadUrl,\r\n        CURRENT_URL_PROCESSING_VERSION\r\n      );\r\n    } catch (err) {\r\n      console.error(\r\n        `Error when processing component candidate ${htmlUrl} Error: ${err}.`\r\n      );\r\n    }\r\n  }\r\n  console.debug(\"Finished cacheAllComponents\");\r\n};\r\n\r\n\r\nexport const getAllComponentsAsRefs = async (users = [\"kubeflow\", \"Ark-kun\"]) => {\r\n  // Perhaps use urlProcessingVersionDb as source of truth. Hmm. It is URL-based\r\n  const hashToUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_URL_DB_TABLE_NAME,\r\n  });\r\n  const hashToContentDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_CONTENT_DB_TABLE_NAME,\r\n  });\r\n  let hashToComponentRef = new Map<string, ComponentReference>();\r\n\r\n  const cachePromise = cacheAllComponents(users);\r\n  if ((await hashToContentDb.length()) === 0) {\r\n    await cachePromise;\r\n  }\r\n\r\n  // !!! Iterating using hashToContentDb.iterate<string, void> causes all values to be `[object Blob]`\r\n  //await hashToContentDb.iterate<Blob, void>(\r\n  await hashToContentDb.iterate<string, void>(\r\n    // !!! async processor causes only 1 item to be processed since it returns Promise instead of undefined.\r\n    //async (componentData, hash, iterationNumber) => {\r\n    (componentText, hash, iterationNumber) => {\r\n      //const componentText = await componentData.text();\r\n      try {\r\n        const componentSpec = yaml.load(componentText) as ComponentSpec;\r\n        hashToComponentRef.set(hash, {\r\n          spec: componentSpec,\r\n        });\r\n      } catch (err) {\r\n        console.error(\r\n          `Error when parsing cached component. Hash: ${hash}. Error: ${err}. Component text: ${componentText}`\r\n        );\r\n      }\r\n    }\r\n  );\r\n  await hashToUrlDb.iterate<string, void>((url, hash, iterationNumber) => {\r\n    let componentRef = hashToComponentRef.get(hash);\r\n    if (componentRef === undefined) {\r\n      console.error(\r\n        `Component db corrupted: Component with url ${url} and hash ${hash} has no content in the DB.`\r\n      );\r\n    } else {\r\n      componentRef.url = url;\r\n    }\r\n  });\r\n  let componentRefs: ComponentReference[] = [];\r\n  // TODO: Improve the iteration onve TypeScript propertly supports it\r\n  hashToComponentRef.forEach((componentRef, hash) => {\r\n    if (componentRef.url === undefined) {\r\n      console.error(\r\n        `Component db corrupted: Component with hash ${hash} has content, but no URL in the DB.`\r\n      );\r\n    } else {\r\n      componentRefs.push(componentRef);\r\n    }\r\n  });\r\n  return componentRefs;\r\n};\r\n\r\n\r\nexport const searchComponentsByName = async (name: string, users = [\"kubeflow\", \"Ark-kun\"]) => {\r\n  const componentRefs = await getAllComponentsAsRefs(users);\r\n  return componentRefs.filter((ref) => ref.spec?.name?.toLowerCase().includes(name.toLowerCase()) ?? false);\r\n};\r\n","import React, { DragEvent } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { ComponentReference, TaskSpec } from \"../componentSpec\";\r\nimport { searchComponentsByName } from \"../github\";\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  event.dataTransfer.setData(\"application/reactflow\", JSON.stringify(nodeData));\r\n  event.dataTransfer.effectAllowed = \"move\";\r\n};\r\n\r\nconst COMPONENT_ORGS = [\"kubeflow\", \"Ark-kun\"];\r\n\r\nconst SearchPanel = (props: any) => {\r\n  const [error, setError] = useState<string | undefined>(undefined);\r\n  const [firstTime, setFirstTime] = useState(true);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [items, setItems] = useState<ComponentReference[]>([]);\r\n\r\n  const onQueryChange = (e: any) => {\r\n    setQuery(e.target.value);\r\n  };\r\n\r\n  async function fetchData(query: string) {\r\n    searchComponentsByName(query, COMPONENT_ORGS).then(\r\n      (componentRefs) => {\r\n        setIsLoaded(true);\r\n        setItems(componentRefs);\r\n      },\r\n      (error) => {\r\n        setIsLoaded(true);\r\n        setError(error.message);\r\n      }\r\n    );\r\n  }\r\n\r\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (query !== \"\") {\r\n      setFirstTime(false);\r\n      fetchData(query);\r\n    }\r\n  };\r\n\r\n  let results = <span></span>;\r\n  if (firstTime) {\r\n    results = <div>Enter search query</div>;\r\n  } else if (error !== undefined) {\r\n    results = <div>Error: {error}</div>;\r\n  } else if (!firstTime && !isLoaded) {\r\n    results = <div>Searching...</div>;\r\n  } else if (items !== undefined) {\r\n    const componentElements = items.map((item) => (\r\n      <div\r\n        key={item.url}\r\n        title={item.url}\r\n        className=\"react-flow__node react-flow__node-multihandle\"\r\n        draggable\r\n        onDragStart={(event: DragEvent) => {\r\n          const taskSpec: TaskSpec = {\r\n            componentRef: item,\r\n          };\r\n          return onDragStart(event, { task: taskSpec });\r\n        }}\r\n      >\r\n        {item.spec?.name}\r\n      </div>\r\n    ));\r\n    results = <>{componentElements}</>;\r\n  }\r\n  return (\r\n    <div className=\"nodeList\">\r\n      <form onSubmit={onSubmit}>\r\n        <input placeholder=\"XGBoost\" onChange={onQueryChange} />\r\n        <input type=\"submit\" />\r\n      </form>\r\n      <div>{results}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPanel;\r\n","import React, { memo, FC } from 'react';\r\n\r\nimport { Handle, Position, NodeProps, HandleType } from 'react-flow-renderer';\r\n\r\ntype NodeData = {\r\n  label: string\r\n  handles: NodeHandles\r\n}\r\n\r\ntype NodeHandles = {\r\n  [key: string]: SideHandles // key is Position\r\n}\r\n\r\ntype SideHandles = {\r\n  type: HandleType\r\n  ids: string[]\r\n}\r\n\r\nconst MultiHandleNode: FC<NodeProps<NodeData>> = ({data}) => {\r\n  let handleComponents = [];\r\n  for (const position in data.handles) {\r\n    const sideHandles = data.handles[position];\r\n    const numHandles = sideHandles.ids.length;\r\n    for (let i = 0; i < numHandles; i++) {\r\n      const id = sideHandles.ids[i];\r\n      const relativePosition = (i + 1) / (numHandles + 1);\r\n      const positionPercentString = String(100 * relativePosition) + \"%\";\r\n      const style =\r\n        (position === Position.Top || position === Position.Bottom)\r\n          ? { left: positionPercentString }\r\n          : { top: positionPercentString };\r\n      handleComponents.push(\r\n        <Handle\r\n          key={id}\r\n          type={sideHandles.type}\r\n          position={position as Position}\r\n          id={id}\r\n          style={style}\r\n          isConnectable={true}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {data.label}\r\n      {handleComponents}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(MultiHandleNode);\r\n","import { memo } from 'react';\r\nimport {TaskSpec, InputSpec, OutputSpec} from '../componentSpec';\r\n\r\nimport { Handle, Position, NodeProps, HandleType } from 'react-flow-renderer';\r\n\r\nconst inputHandlePosition = Position.Top;\r\nconst outputHandlePosition = Position.Bottom;\r\n\r\ntype InputOrOutputSpec = InputSpec | OutputSpec;\r\n\r\nfunction generateHandles(\r\n  ioSpecs: InputOrOutputSpec[],\r\n  handleType: HandleType,\r\n  position: Position,\r\n  idPrefix: string,\r\n): JSX.Element[] {\r\n  let handleComponents = [];\r\n  const numHandles = ioSpecs.length;\r\n  for (let i = 0; i < numHandles; i++) {\r\n    const ioSpec = ioSpecs[i];\r\n    const id = idPrefix + ioSpec.name;\r\n    const relativePosition = (i + 1) / (numHandles + 1);\r\n    const positionPercentString = String(100 * relativePosition) + \"%\";\r\n    const style =\r\n      position === Position.Top || position === Position.Bottom\r\n        ? { left: positionPercentString }\r\n        : { top: positionPercentString };\r\n    const ioTypeName = ioSpec.type?.toString() ?? \"Any\";\r\n    const className = ioTypeName; // Need to be sanitized\r\n    handleComponents.push(\r\n      <Handle\r\n        key={id}\r\n        type={handleType}\r\n        position={position}\r\n        id={id}\r\n        style={style}\r\n        isConnectable={true}\r\n        title={ioSpec.name + \" : \" + ioTypeName}\r\n        className={\"handle_\" + className}\r\n      />\r\n    );\r\n  }\r\n  return handleComponents;\r\n}\r\n\r\nfunction generateInputHandles(inputSpecs: InputSpec[]): JSX.Element[] {\r\n  return generateHandles(inputSpecs, \"target\", inputHandlePosition, \"input_\");\r\n}\r\n\r\nfunction generateOutputHandles(outputSpecs: OutputSpec[]): JSX.Element[] {\r\n  return generateHandles(outputSpecs, \"source\", outputHandlePosition, \"output_\");\r\n}\r\n\r\nconst ComponentTaskNode = ({data}: NodeProps<TaskSpec>) => {\r\n  const taskSpec = data;\r\n  const componentSpec = taskSpec.componentRef.spec;\r\n  if (componentSpec === undefined) {\r\n    return (<></>);\r\n  }\r\n\r\n  const label = componentSpec.name ?? \"<component>\";\r\n  const inputHandles = generateInputHandles(componentSpec.inputs ?? []);\r\n  const outputHandles = generateOutputHandles(componentSpec.outputs ?? []);\r\n  const handleComponents = inputHandles.concat(outputHandles);\r\n\r\n  return (\r\n    <>\r\n      {label}\r\n      {handleComponents}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(ComponentTaskNode);\r\n","import React, { useState, DragEvent } from 'react';\r\nimport ReactFlow, {\r\n  ReactFlowProvider,\r\n  addEdge,\r\n  updateEdge,\r\n  removeElements,\r\n  Controls,\r\n  OnLoadParams,\r\n  Elements,\r\n  Connection,\r\n  Edge,\r\n  ElementId,\r\n  Node,\r\n  Background,\r\n  MiniMap,\r\n} from 'react-flow-renderer';\r\n\r\nimport Sidebar from './Sidebar';\r\nimport ComponentSearch from './ComponentSearch'\r\n\r\nimport MultiHandleNode from './MultiHandleNode';\r\nimport ComponentTaskNode from './ComponentTaskNode';\r\n\r\nimport './dnd.css';\r\n\r\nconst GRID_SIZE = 10;\r\n\r\nconst nodeTypes = {\r\n  multihandle: MultiHandleNode,\r\n  task: ComponentTaskNode,\r\n};\r\n\r\nconst initialElements = [{ id: '1', type: 'input', data: { label: 'input node' }, position: { x: 250, y: 10 } }];\r\n\r\nconst onDragOver = (event: DragEvent) => {\r\n  event.preventDefault();\r\n  event.dataTransfer.dropEffect = 'move';\r\n};\r\n\r\nlet id = 0;\r\nconst getId = (): ElementId => `dndnode_${id++}`;\r\n\r\nlet nodeMap: { [id: string] : Node; } = {};\r\n\r\nconst DnDFlow = () => {\r\n  const [reactFlowInstance, setReactFlowInstance] = useState<OnLoadParams>();\r\n  const [elements, setElements] = useState<Elements>(initialElements);\r\n\r\n  // gets called after end of edge gets dragged to another source or target\r\n  const onEdgeUpdate = (oldEdge: Edge, newConnection: Connection) =>\r\n    setElements((els) => updateEdge(oldEdge, newConnection, els));\r\n  const onConnect = (params: Connection | Edge) => setElements((els) => addEdge(params, els));\r\n  const onElementsRemove = (elementsToRemove: Elements) => setElements((els) => removeElements(elementsToRemove, els));\r\n  const onLoad = (_reactFlowInstance: OnLoadParams) => setReactFlowInstance(_reactFlowInstance);\r\n\r\n  const onEdgeUpdateStart = (_: React.MouseEvent, edge: Edge) => console.log('start update', edge);\r\n  const onEdgeUpdateEnd = (_: MouseEvent, edge: Edge) => console.log('end update', edge);\r\n\r\n  const onDrop = (event: DragEvent) => {\r\n    event.preventDefault();\r\n\r\n    if (reactFlowInstance) {\r\n      const droppedData = event.dataTransfer.getData('application/reactflow');\r\n      if (droppedData === \"\") {\r\n        return;\r\n      }\r\n      const droppedDataObject = JSON.parse(droppedData);\r\n      const nodeType = Object.keys(droppedDataObject)[0];\r\n      const nodeData = droppedDataObject[nodeType];\r\n      const position = reactFlowInstance.project({ x: event.clientX, y: event.clientY - 40 });\r\n      const newNode: Node = {\r\n        id: getId(),\r\n        type: nodeType,\r\n        position,\r\n        data: nodeData,\r\n      };\r\n\r\n      setElements((es) => es.concat(newNode));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"dndflow\">\r\n      <ReactFlowProvider>\r\n        <div className=\"reactflow-wrapper\">\r\n          <ReactFlow\r\n            elements={elements}\r\n            onConnect={onConnect}\r\n            onElementsRemove={onElementsRemove}\r\n            onEdgeUpdateStart={onEdgeUpdateStart}\r\n            onEdgeUpdateEnd={onEdgeUpdateEnd}\r\n            onEdgeUpdate={onEdgeUpdate}\r\n            onLoad={onLoad}\r\n            onDrop={onDrop}\r\n            onDragOver={onDragOver}\r\n            nodeTypes={nodeTypes}\r\n            deleteKeyCode='Delete'\r\n            multiSelectionKeyCode='Control'\r\n            snapToGrid={true}\r\n            snapGrid={[GRID_SIZE, GRID_SIZE]}\r\n          >\r\n            <MiniMap/>\r\n            <Controls />\r\n            <Background gap={GRID_SIZE}/>\r\n          </ReactFlow>\r\n        </div>\r\n        <Sidebar />\r\n        <ComponentSearch />\r\n      </ReactFlowProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DnDFlow;\r\n","import './App.css';\r\nimport DnDFlow from './DragNDrop/index';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" style={{width: \"100%\", height: \"100%\", minWidth: \"200px\", minHeight: \"200px\"}}>\r\n      <DnDFlow/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}