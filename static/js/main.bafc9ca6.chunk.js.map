{"version":3,"sources":["DragNDrop/ArgumentsEditor.tsx","DragNDrop/ComponentTaskNode.tsx","DragNDrop/GraphComponentSpecFlow.tsx","github.ts","DragNDrop/ComponentLibrary.tsx","DragNDrop/ComponentSearch.tsx","DragNDrop/graphComponentFromFlow.ts","DragNDrop/GraphComponentExporter.tsx","DragNDrop/vertexAiCompiler.ts","DragNDrop/GoogleCloud.tsx","DragNDrop/VertexAiExporter.tsx","DragNDrop/Sidebar.tsx","DragNDrop/samplePipelines.ts","DragNDrop/index.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["ArgumentsEditor","taskSpec","closeEditor","setArguments","useState","arguments","currentArguments","setCurrentArguments","componentSpec","componentRef","spec","undefined","console","error","inputSpecs","inputs","onSubmit","e","a","preventDefault","style","position","display","borderSpacing","background","border","borderRadius","padding","name","map","inputSpec","inputName","value","placeholder","argument","default","taskOutput","taskId","outputName","graphInput","argumentIsRequiredButMissing","optional","textAlign","whiteSpace","type","toString","required","pattern","onChange","target","title","onClick","disabled","inputHandlePosition","Position","Top","outputHandlePosition","Bottom","generateHandles","ioSpecs","handleType","idPrefix","inputsWithMissingArguments","handleComponents","numHandles","length","i","ioSpec","id","positionPercentString","String","left","top","ioTypeName","classNames","replace","includes","push","className","isConnectable","join","ComponentTaskNode","data","isArgumentsEditorOpen","setIsArgumentsEditorOpen","label","inputsWithInvalidArguments","filter","inputHandles","generateInputHandles","outputHandles","outputs","concat","onDoubleClick","nodeTypes","task","memo","GraphComponentSpecFlow","children","initialComponentSpec","implementation","graph","tasks","rest","reactFlowInstance","setReactFlowInstance","originalComponentSpec","setComponentSpec","graphSpec","nodes","Object","entries","x","y","annotations","layoutAnnotation","decodedPosition","JSON","parse","err","args","setTaskArguments","inputNodes","outputNodes","outputSpec","edges","flatMap","source","sourceHandle","targetHandle","arrowHeadType","ArrowHeadType","ArrowClosed","outputEdges","outputValues","elements","replaceComponentSpec","newComponentSpec","replaceGraphSpec","newGraphSpec","taskArguments","setTaskArgument","oldTaskSpecArguments","newTaskSpecArguments","removeTaskArgument","setGraphOutputValue","outputValue","newGraphOutputValues","removeGraphOutputValue","addConnection","connection","targetTaskInputName","sourceTaskOutputName","taskOutputArgument","graphInputArgument","removeEdge","edge","removeNode","node","newInputs","removeComponentInput","newOutputs","removeComponentOutput","fromEntries","removeTask","log","makeNameUniqueByAddingIndex","existingNames","finalName","index","has","onConnect","params","onDragOver","event","dataTransfer","dropEffect","onDrop","droppedData","getData","droppedDataObject","nodeType","keys","nodeData","dragOffsetX","dragOffsetY","dragStartOffsetData","dragStartOffset","offsetX","offsetY","project","clientX","clientY","nodePosition","positionAnnotations","stringify","mergedAnnotations","taskSpecWithAnnotation","Set","getUniqueTaskName","getUniqueInputName","getUniqueOutputName","onEdgeUpdate","oldEdge","newConnection","onElementsRemove","elementsToRemove","element","isEdge","isNode","onLoad","_reactFlowInstance","SEARCH_CACHE_NAME","BLOB_CACHE_NAME","DB_NAME","HASH_TO_CONTENT_DB_TABLE_NAME","HASH_TO_COMPONENT_NAME_DB_TABLE_NAME","URL_TO_HASH_DB_TABLE_NAME","HASH_TO_URL_DB_TABLE_NAME","URL_PROCESSING_VERSION_TABLE_NAME","BAD_HASHES_TABLE_NAME","httpGetWithCache","urlOrRequest","cacheName","updateIfInCache","caches","open","cache","match","response","add","response2","Promise","reject","searchGitHubCodeWithCache","query","page","sort","order","encodedQuery","encodeURIComponent","encodedSort","encodedOrder","searchUrl","json","githubHtmlUrlToDownloadUrl","htmlUrl","getComponentUrlsAndHashes","users","urlsAndHashes","user","searchResults","items","item","url","html_url","hash","sha","resolve","setTimeout","downloadComponentDataWithCache","blob","text","componentText","yaml","load","cacheAllComponents","debug","urlsAndHashesIterator","urlToHashDb","localForage","createInstance","storeName","hashToUrlDb","hashToContentDb","hashToComponentNameDb","urlProcessingVersionDb","badHashesDb","toLowerCase","getItem","badHashReason","downloadUrl","endsWith","cachedHash","urlVersion","Number","parseInt","setItem","message","getAllComponentsAsRefs","hashToComponentRef","Map","cachePromise","iterate","iterationNumber","set","get","componentRefs","forEach","searchComponentsByName","ref","DraggableComponentRow","componentUrl","useEffect","then","draggable","onDragStart","setData","nativeEvent","effectAllowed","ComponentGroupList","componentGroups","Array","from","category","componentUrls","borderWidth","ComponentLibrary","paddingLeft","COMPONENT_ORGS","SearchPanel","props","setError","firstTime","setFirstTime","isLoaded","setIsLoaded","setQuery","setItems","results","componentElements","fetchData","getNodePositionAnnotations","__rf","width","height","nodeOrderComparer","n1","n2","createGraphComponentSpecFromFlowElements","includePositions","includeSpecs","taskNodes","outputSpecs","taskMap","reduce","accumulator","assign","graphOutputValues","sourceTaskId","sourceOutputName","targetTaskId","targetInputName","targetTask","graphComponent","metadata","GraphComponentExporter","pipelineName","useStoreState","store","dump","lineWidth","componentTextBlob","Blob","downloadLink","href","URL","createObjectURL","download","overflow","typeSpecToVertexPrimitiveTypeEnum","typeSpec","typeSpecToVertexParameterSpec","taskSpecToVertexTaskSpecComponentSpecAndExecutorSpec","Error","containerSpec","container","resolvedCommandLine","inputsConsumedAsValue","inputsConsumedAsPath","convertArg","arg","inputValue","inputPath","outputPath","if","cond","else","ifCond","ifThen","ifElse","condEvaluatesToTrue","isPresent","taskArgument","unresolvedArgs","command","resolveCommandLine","vertexExecutorSpec","image","inputMap","vertexComponentSpec","inputDefinitions","parameters","values","artifacts","artifactType","schemaTitle","outputDefinitions","executorLabel","vertexTaskSpec","taskInfo","runtimeValue","constantValue","stringValue","componentInputParameter","taskOutputParameter","producerTask","outputParameterKey","componentInputArtifact","taskOutputArtifact","outputArtifactKey","cachingOptions","enableCache","graphComponentSpecToVertexPipelineSpec","vertexComponentInputsSpec","vertexExecutors","vertexComponents","vertexTasks","vertexExecutorId","vertexComponentId","vertexTaskId","componentName","pipelineInfo","sdkVersion","schemaVersion","deploymentSpec","executors","components","root","dag","generateVertexPipelineJobFromGraphComponent","gcsOutputDirectory","pipelineArguments","convertedPipelineArguments","key","runtimeConfig","pipelineSpec","LOCAL_STORAGE_GCS_OUTPUT_DIRECTORY_KEY","LOCAL_STORAGE_PROJECT_ID_KEY","LOCAL_STORAGE_REGION_KEY","LOCAL_STORAGE_PROJECT_IDS_KEY","CLIENT_ID","API_KEY","VERTEX_AI_PIPELINES_REGIONS","authorizeGoogleCloudClient","scopes","immediate","apiKey","clientId","gapi","client","setApiKey","auth","authorize","client_id","scope","authResult","ensureGoogleCloudAuthorizesScopes","cloudresourcemanagerListProjects","request","path","result","aiplatformCreatePipelineJob","projetId","region","pipelineJob","method","body","GoogleCloudSubmitter","window","localStorage","projects","setProjects","setProject","setRegion","setGcsOutputDirectory","pipelineJobWebUrl","setPipelineJobWebUrl","vertexPipelineJobJson","vertexPipelineJobUrl","vertexPipelineJob","readyToSubmit","pipelineJobName","pipelineJobId","split","slice","htmlFor","list","projectId","projectIds","projectInfo","rel","VertexAiExporter","vertexPipelineSpecText","vertexPipelineSpec","vertexPipelineSpecTextBlob","vertexPipelineSpecTextBlobUrl","COMPONENT_LIBRARY","Sidebar","fontWeight","GoogleCloud","input","output","ComponentSearch","xgBoostQueryTrainPredictPipeline","dataset","Select","Where","train","training_data","predict","model","label_column","preloadComponentReferences","componentMap","taskComponentSpec","DnDFlow","deleteKeyCode","multiSelectionKeyCode","snapToGrid","snapGrid","gap","App","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","process","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"oTAoJeA,EAtIS,SAAC,GAII,IAAD,EAH1BC,EAG0B,EAH1BA,SACAC,EAE0B,EAF1BA,YACAC,EAC0B,EAD1BA,aAEA,EAAgDC,mBAAQ,eAEjDH,EAASI,YAFhB,mBAAOC,EAAP,KAAyBC,EAAzB,KAIMC,EAAgBP,EAASQ,aAAaC,KAC5C,QAAsBC,IAAlBH,EAKF,OAJAI,QAAQC,MACN,iEACAZ,GAEK,6BAGT,IAAMa,EAAU,UAAGN,EAAcO,cAAjB,QAA2B,GAE3C,OACE,uBACEC,SAAQ,uCAAE,WAAOC,GAAP,SAAAC,EAAA,sDACRD,EAAEE,iBADM,2CAAF,sDAKRC,MAAO,CACLC,SAAU,QACVC,QAAS,QACTC,cAAe,MACfC,WAAY,QACZC,OAAQ,kBACRC,aAAc,MACdC,QAAS,QAbb,UAkBE,0DAA6BnB,EAAcoB,QAC3C,8BACGd,EAAWe,KAAI,SAACC,GAAe,IAAD,MACvBC,EAAYD,EAAUF,KACxBI,OAA4BrB,EAC5BsB,OAAkCtB,EAChCuB,EAAW5B,EAAiByB,QACjBpB,IAAbuB,EACFF,EAAQF,EAAUK,QAEM,kBAAbD,EACTF,EAAQE,EAERD,EADS,eAAgBC,EACd,qBAAiBA,EAASE,WAAWC,OAArC,cAAiDH,EAASE,WAAWE,WAArE,KACF,eAAgBJ,EACd,4BAAwBA,EAASK,WAAWR,UAA5C,KAEG,cAIlB,IAAMS,IACFT,KAAazB,KACQ,IAAvBwB,EAAUW,eACY9B,IAAtBmB,EAAUK,QAEZ,OACE,sBAEEf,MAAO,CACLE,QAAS,aAHb,UAME,uBACEF,MAAO,CACLsB,UAAW,QACXpB,QAAS,aACTqB,WAAY,UAJhB,SAOE,iCACGZ,EADH,yBACgBD,EAAUc,YAD1B,aACgB,EAAgBC,kBADhC,QAC8C,MAD9C,KACuD,SAGzD,uBACEzB,MAAO,CACLE,QAAS,cAEXW,YAAaA,EACba,SAAUN,EACVR,MAAK,UAAEA,SAAF,QAAW,GAChBe,aAA+BjB,EAAUc,KACzCI,SAAU,SAAC/B,GACTX,EAAiByB,GAAad,EAAEgC,OAAOjB,MACvCzB,EAAoB,eAAKD,OAG7B,qBACEc,MAAO,CACLE,QAAS,cAFb,SAKE,wBACEsB,KAAK,SACLM,MAAM,mBACNC,QAAS,SAAClC,UACDX,EAAiByB,GACxBxB,EAAoB,eAAKD,KAE3B8C,WAAYrB,KAAazB,GAP3B,wBAlCGyB,QAkDb,wBAAQa,KAAK,SAASO,QAASjD,EAA/B,mBAGA,wBACE0C,KAAK,SACLO,QAAS,SAAClC,GACI,OAAZd,QAAY,IAAZA,KAAeG,GACJ,OAAXJ,QAAW,IAAXA,QAJJ,uBC1HAmD,EAAsBC,IAASC,IAC/BC,EAAuBF,IAASG,OAMtC,SAASC,EACPC,EACAC,EACAvC,EACAwC,EACAC,GAIA,IAFA,IAAIC,EAAmB,GACjBC,EAAaL,EAAQM,OAClBC,EAAI,EAAGA,EAAIF,EAAYE,IAAK,CAAC,IAAD,IAC7BC,EAASR,EAAQO,GACjBE,EAAKP,EAAWM,EAAOvC,KAEvByC,EAAwBC,OAAO,MADXJ,EAAI,IAAMF,EAAa,KACc,IACzD5C,EACJC,IAAaiC,IAASC,KAAOlC,IAAaiC,IAASG,OAC/C,CAAEc,KAAMF,GACR,CAAEG,IAAKH,GAEPI,EAAU,oBAAGN,EAAOvB,YAAV,aAAG,EAAaC,kBAAhB,QAA8B,MAC1C6B,EAAa,CAAC,iBAAUb,GAAV,OAAqBY,GAAaE,QAAQ,IAAK,OAC/C,OAACb,QAAD,IAACA,IAA8B,IAAIc,SAAST,EAAOvC,OAEnE8C,EAAWG,KAzBmB,oBA2BhCH,EAAaA,EAAW7C,KAAI,SAACiD,GAAD,OAAeA,EAAUH,QAAQ,IAAK,QAClEZ,EAAiBc,KACf,cAAC,IAAD,CAEEjC,KAAMgB,EACNvC,SAAUA,EACV+C,GAAIA,EACJhD,MAAOA,EACP2D,eAAe,EACf7B,MAAOiB,EAAOvC,KAAO,MAAQ6C,EAC7BK,UAAWJ,EAAWM,KAAK,MAPtBZ,IAWX,OAAOL,EAiBT,IAAMkB,EAAoB,SAAC,GAAiD,IAAD,QAA9CC,EAA8C,EAA9CA,KAC3B,EAA0D9E,oBAAS,GAAnE,mBAAO+E,EAAP,KAA8BC,EAA9B,KAEMnF,EAAWiF,EAAKjF,SAChBO,EAAgBP,EAASQ,aAAaC,KAC5C,QAAsBC,IAAlBH,EACF,OAAQ,6BAGV,IAAM6E,EAAK,UAAG7E,EAAcoB,YAAjB,QAAyB,cAC9B0D,GAA6B,UAAC9E,EAAcO,cAAf,QAAyB,IACzDwE,QACC,SAACzD,GAAD,aACyB,IAAvBA,EAAUW,eACY9B,IAAtBmB,EAAUK,WACRL,EAAUF,QAAV,UAAmB3B,EAASI,iBAA5B,QAAyC,QAE9CwB,KAAI,SAACC,GAAD,OAAeA,EAAUF,QAC1B4D,EAhCR,SAA8B1E,EAAyBwE,GACrD,OAAO5B,EAAgB5C,EAAY,SAAUuC,EAAqB,SAAUiC,GA+BvDG,CAAoB,UAACjF,EAAcO,cAAf,QAAyB,GAAIuE,GAChEI,EA5BChC,EA4BoC,UAAClD,EAAcmF,eAAf,QAA0B,GA5BjC,SAAUnC,EAAsB,WA6B9DO,EAAmByB,EAAaI,OAAOF,GAM7C,OACE,sBACEG,cAAe,WACbT,GAA0BD,IAE5BjC,MAAOgC,EAAK7C,OAJd,UAMGgD,EACAtB,EACAoB,GACC,cAAC,EAAD,CACElF,SAAUA,EACVC,YAhBqB,WAC3BkF,GAAyB,IAgBnBjF,aAAc+E,EAAK/E,mB,sCClFvB2F,EAAY,CAChBC,KDwFaC,eAAKf,ICoaLgB,EAzfgB,SAAC,GAII,IAAD,MAHjCC,EAGiC,EAHjCA,SAGiC,IAFjCC,4BAEiC,MAFV,CAAEC,eAAgB,CAAEC,MAAO,CAAEC,MAAO,MAE1B,EAD9BC,EAC8B,iBACjC,EAAkDnG,qBAAlD,mBAAOoG,EAAP,KAA0BC,EAA1B,KACA,EACErG,mBAAwB+F,GAD1B,mBAAOO,EAAP,KAA8BC,EAA9B,KAEInG,EAAgBkG,EAEpB,KAAO,UAAWlG,EAAc4F,gBAE9B,OAAO,6BAET,IAAIQ,EAAYpG,EAAc4F,eAAeC,MAEvCQ,EAAQC,OAAOC,QAAQH,EAAUN,OAAOzE,KAC5C,YAAyB,IAAD,mBAAtBQ,EAAsB,KAAdpC,EAAc,KAClBoB,EAAuB,CAAE2F,EAAG,EAAGC,EAAG,GACtC,QAA6BtG,IAAzBV,EAASiH,YACX,IACE,IAAMC,EAAmBlH,EAASiH,YAChC,mBAEIE,EAAkBC,KAAKC,MAAMH,GACnC9F,EAAW,CAAE2F,EAAGI,EAAe,EAAOH,EAAGG,EAAe,GACxD,MAAOG,IAGX,MAAO,CACLnD,GAAI/B,EACJ6C,KAAM,CACJjF,SAAUA,EACVoC,OAAQA,EACRlC,aAAc,SAACqH,GAAD,OAAUC,EAAiBpF,EAAQmF,KAEnDnG,SAAUA,EACVuB,KAAM,WAKN8E,GAAa,UAAClH,EAAcO,cAAf,QAAyB,IAAIc,KAC9C,SAACC,GACC,IAAIT,EAAuB,CAAE2F,EAAG,EAAGC,EAAG,GACtC,QAA8BtG,IAA1BmB,EAAUoF,YACZ,IACE,IAAMC,EAAmBrF,EAAUoF,YACjC,mBAEIE,EAAkBC,KAAKC,MAAMH,GACnC9F,EAAW,CAAE2F,EAAGI,EAAe,EAAOH,EAAGG,EAAe,GACxD,MAAOG,IAEX,MAAO,CACLnD,GAAItC,EAAUF,KACdsD,KAAM,CAAEG,MAAOvD,EAAUF,MACzBP,SAAUA,EACVuB,KAAM,YAKN+E,GAAc,UAACnH,EAAcmF,eAAf,QAA0B,IAAI9D,KAChD,SAAC+F,GACC,IAAIvG,EAAuB,CAAE2F,EAAG,EAAGC,EAAG,GACtC,QAA+BtG,IAA3BiH,EAAWV,YACb,IACE,IAAMC,EAAmBS,EAAWV,YAClC,mBAEIE,EAAkBC,KAAKC,MAAMH,GACnC9F,EAAW,CAAE2F,EAAGI,EAAe,EAAOH,EAAGG,EAAe,GACxD,MAAOG,IAEX,MAAO,CACLnD,GAAIwD,EAAWhG,KACfsD,KAAM,CAAEG,MAAOuC,EAAWhG,MAC1BP,SAAUA,EACVuB,KAAM,aAKNiF,EAAgBf,OAAOC,QAAQH,EAAUN,OAAOwB,SACpD,YAAyB,IAAD,qBAAtBzF,EAAsB,KAAdpC,EAAc,KACtB,OAAO6G,OAAOC,QAAP,UAAe9G,EAASI,iBAAxB,QAAqC,IAAIyH,SAC9C,YAA4B,IAAD,mBAAzB/F,EAAyB,KAAdG,EAAc,KACzB,GAAwB,kBAAbA,EACT,MAAO,GAET,GAAI,eAAgBA,EAAU,CAC5B,IAAME,EAAaF,EAASE,WAS5B,MAAO,CARY,CACjBgC,GAAG,GAAD,OAAKhC,EAAWC,OAAhB,YAA0BD,EAAWE,WAArC,YAAmDD,EAAnD,YAA6DN,GAC/DgG,OAAQ3F,EAAWC,OACnB2F,aAAa,UAAD,OAAY5F,EAAWE,YACnCW,OAAQZ,EACR4F,aAAa,SAAD,OAAWlG,GACvBmG,cAAeC,IAAcC,cAG1B,GAAI,eAAgBlG,EAAU,CACnC,IAAMK,EAAaL,EAASK,WAW5B,MAAO,CAVY,CACjB6B,GAAG,SAAD,OAAW7B,EAAWR,UAAtB,YAAmCM,EAAnC,YAA6CN,GAC/CgG,OAAQxF,EAAWR,UAGnBiG,aAAc,KACd/E,OAAQZ,EACR4F,aAAa,SAAD,OAAWlG,GACvBmG,cAAeC,IAAcC,cAK/B,OADAxH,QAAQC,MAAM,wCAAyCqB,GAChD,SAOXmG,EAAsBvB,OAAOC,QAAP,UAAeH,EAAU0B,oBAAzB,QAAyC,IAAIzG,KACvE,YAA6B,IAAD,mBAA1BS,EAA0B,KACpBF,EADoB,KACEA,WAW5B,MAVmB,CACjBgC,GAAG,GAAD,OAAKhC,EAAWC,OAAhB,YAA0BD,EAAWE,WAArC,mBAA0DA,GAC5DyF,OAAQ3F,EAAWC,OACnB2F,aAAa,UAAD,OAAY5F,EAAWE,YACnCW,OAAQX,EAGR2F,aAAc,KACdC,cAAeC,IAAcC,gBAM7BG,EAAY1B,EAAmBjB,OAAO8B,GAAY9B,OAAO+B,GAAa/B,OAAOiC,GAAOjC,OAAOyC,GAE3FG,EAAuB,SAACC,GAC5BjI,EAAgBiI,EAChB9B,EAAiB8B,IAGbC,EAAmB,SAACC,GACxB/B,EAAY+B,EACZH,EAAqB,2BAAKhI,GAAN,IAAqB4F,eAAgB,CAAEC,MAAOO,OAG9Da,EAAmB,SACvBpF,EACAuG,GAEA,IAAID,EAAuB,2BACtB/B,GADsB,IAEzBN,MAAM,eAAMM,EAAUN,SAExBqC,EAAarC,MAAMjE,GAAnB,2BACKuE,EAAUN,MAAMjE,IADrB,IAEEhC,UAAWuI,IAEbF,EAAiBC,IAGbE,EAAkB,SACtBxG,EACAN,EACAG,GAEA,IACM4G,EADclC,EAAUN,MAAMjE,GACKhC,UACrC0I,EAAkD,eACjDD,QAEYnI,IAAbuB,SACK6G,EAAqBhH,GAE5BgH,EAAqBhH,GAAaG,EAEpCuF,EAAiBpF,EAAQ0G,IAGrBC,EAAqB,SAAC3G,EAAgBN,GAAjB,OACzB8G,EAAgBxG,EAAQN,OAAWpB,IAE/BsI,EAAsB,SAC1B3G,EACA4G,GAEA,IAAIC,EAAoB,eAAQvC,EAAU0B,mBACtB3H,IAAhBuI,SACKC,EAAqB7G,GAE5B6G,EAAqB7G,GAAc4G,EAErCtC,EAAS,2BAAQA,GAAR,IAAmB0B,aAAca,IAC1CT,EAAiB9B,IAGbwC,EAAyB,SAAC9G,GAAD,OAC7B2G,EAAoB3G,IAEhB+G,EAAgB,SAACC,GAAmC,IAAD,IACvD,GAA0B,OAAtBA,EAAWvB,QAAyC,OAAtBuB,EAAWrG,OAA7C,CAQA,IAAMsG,EAAmB,UAAGD,EAAWrB,oBAAd,aAAG,EAAyBtD,QAAQ,UAAW,IAClE6E,EAAoB,UAAGF,EAAWtB,oBAAd,aAAG,EAAyBrD,QAAQ,WAAY,IAE1E,QAA6BhE,IAAzB6I,EAAoC,CAEtC,IAAMC,EAAyC,CAC7CrH,WAAY,CACVC,OAAQiH,EAAWvB,OACnBzF,WAAYkH,SAIY7I,IAAxB4I,EAEFV,EACES,EAAWrG,OACXsG,EACAE,GAIFR,EAAoBK,EAAWrG,OAAQwG,OAGpC,CAEL,IACMC,EAAyC,CAC7CnH,WAAY,CACVR,UAHmBuH,EAAWvB,cAMNpH,IAAxB4I,EAEFV,EACES,EAAWrG,OACXsG,EACAG,GAKF9I,QAAQC,MACN,uEACAyI,SAnDJ1I,QAAQC,MACN,uDACAyI,IA2DAK,EAAa,SAACC,GAAgB,IAAD,EAC3B7H,EAAS,UAAG6H,EAAK3B,oBAAR,aAAG,EAAmBtD,QAAQ,UAAW,SAEtChE,IAAdoB,EACFiH,EAAmBY,EAAK3G,OAAQlB,GAEhCqH,EAAuBQ,EAAK3G,SAqE1B4G,EAAa,SAACC,GAElB,GAAkB,UAAdA,EAAKlH,MAnEkB,SAACb,GAE5B,IAFmD,IAAD,EAElD,MAAiC+E,OAAOC,QAAQH,EAAUN,OAA1D,eACE,IADG,0BAAOjE,EAAP,KAAepC,EAAf,KACH,MAAoC6G,OAAOC,QAAP,UAClC9G,EAASI,iBADyB,QACZ,IADxB,eAEG,CAAC,IAAD,EAFE,sBAAO0B,EAAP,KAAkBG,EAAlB,KAGqB,kBAAbA,GAAyB,eAAgBA,GAC9CA,EAASK,WAAWR,YAAcA,GACpCiH,EAAmB3G,EAAQN,GAQnC,IAAMgI,GAAY,UAACvJ,EAAcO,cAAf,QAAyB,IAAIwE,QAC7C,SAACzD,GAAD,OAAeA,EAAUF,OAASG,KAEpCvB,EAAa,2BAAQA,GAAR,IAAuBO,OAAQgJ,IAC5CvB,EAAqBhI,GAiDnBwJ,CADkBF,EAAK1F,SAElB,GAAkB,WAAd0F,EAAKlH,KAAmB,EA/CP,SAACN,GAAwB,IAAD,EACpD8G,EAAuB9G,GAEvB,IAAM2H,GAAa,UAACzJ,EAAcmF,eAAf,QAA0B,IAAIJ,QAC/C,SAACqC,GAAD,OAAgBA,EAAWhG,OAASU,KAEtC9B,EAAa,2BAAQA,GAAR,IAAuBmF,QAASsE,IAC7CzB,EAAqBhI,GA0CnB0J,CADmBJ,EAAK1F,SAEnB,GAAkB,SAAd0F,EAAKlH,KAAiB,EAxChB,SAACP,GAElB,IAFsC,IAAD,EAErC,MAAiCyE,OAAOC,QAAQH,EAAUN,OAA1D,eACE,IADG,0BAAOjE,EAAP,KAAepC,EAAf,KACH,MAAoC6G,OAAOC,QAAP,UAClC9G,EAASI,iBADyB,QACZ,IADxB,eAEG,CAAC,IAAD,EAFE,sBAAO0B,EAAP,KAAkBG,EAAlB,KAGqB,kBAAbA,GAAyB,eAAgBA,GAC9CA,EAASE,WAAWC,SAAWA,GACjC2G,EAAmB3G,EAAQN,GAQnC,IAAMoH,EAAuBrC,OAAOqD,YAClCrD,OAAOC,QAAP,UAAeH,EAAU0B,oBAAzB,QAAyC,IAAI/C,QAC3C,oDAA4BnD,WAAWC,SAAWA,MAGtDuE,EAAS,2BAAQA,GAAR,IAAmB0B,aAAca,IAG1C,IAAIR,EAAuB,2BACtB/B,GADsB,IAEzBN,MAAM,eAAMM,EAAUN,gBAEjBqC,EAAarC,MAAMjE,GAC1BqG,EAAiBC,GAafyB,CADeN,EAAK1F,SAGpBxD,QAAQyJ,IAAI,qCAAsCP,IA8BhDQ,EAA8B,SAAC1I,EAAc2I,GAGjD,IAFA,IAAIC,EAAY5I,EACZ6I,EAAQ,EACLF,EAAcG,IAAIF,IAEvBA,EAAY5I,EAAO,OADnB6I,GAC+B5H,WAEjC,OAAO2H,GA+FT,OACE,cAAC,IAAD,2BACMjE,GADN,IAEEgC,SAAUA,EACVzC,UAAWA,EACX6E,UApOc,SAACC,GACjBvB,EAAcuB,IAoOZC,WAjHe,SAACC,GAClBA,EAAM3J,iBACN2J,EAAMC,aAAaC,WAAa,QAgH9BC,OA9EW,SAACH,GAGd,GAFAA,EAAM3J,iBAEFqF,EAAmB,CACrB,IAAM0E,EAAcJ,EAAMC,aAAaI,QAAQ,yBAC/C,GAAoB,KAAhBD,EACF,OAEF,IAAME,EAAoB/D,KAAKC,MAAM4D,GAC/BG,EAAWvE,OAAOwE,KAAKF,GAAmB,GAC1CG,EAAWH,EAAkBC,GAG/BG,EAAc,EACdC,EAAc,EACZC,EAAsBZ,EAAMC,aAAaI,QAAQ,oBACvD,GAA4B,KAAxBO,EAA4B,CAAC,IAAD,IACxBC,EAAkBtE,KAAKC,MAAMoE,GAEnCF,EAAW,UAA6B,IAA1BG,EAAgBC,eAAnB,QAAqC,EAChDH,EAAW,UAA6B,IAA1BE,EAAgBE,eAAnB,QAAqC,EAKlD,IAAIxK,EAAWmF,EAAkBsF,QAAQ,CACvC9E,EAAG8D,EAAMiB,QAAUP,EACnBvE,EAAG6D,EAAMkB,QAAUP,IAGfQ,EAAe,CAAEjF,EAAG3F,EAAS2F,EAAGC,EAAG5F,EAAS4F,GAC5CiF,EAAsB,CAC1B,kBAAmB7E,KAAK8E,UAAUF,IAEpC,GAAiB,SAAbZ,EAAqB,CAAC,IAAD,IACjBpL,EAAWsL,EACXa,EAAiB,2BAClBnM,EAASiH,aACTgF,GAELjM,EAASiH,YAAckF,EACvB,IAAMC,EAAgC,2BACjCpM,GADiC,IAEpCiH,YAAakF,IAET/J,EApDc,WACxB,OAAOiI,EAD4C,uDAAX,OAGtC,IAAIgC,IAAIxF,OAAOwE,KAAK1E,EAAUN,SAiDbiG,CAAiB,oBAACtM,EAASQ,aAAaC,YAAvB,aAAC,EAA4BkB,YAA7B,QAAqC,SACrEgF,EAAS,2BAAQA,GAAR,IAAmBN,MAAM,eAAMM,EAAUN,UACxCA,MAAMjE,GAAUgK,EAC1B3D,EAAiB9B,QACZ,GAAiB,UAAbyE,EAAsB,CAAC,IAAD,EAEzBvJ,EAAuB,CAC3BF,KAzEmB,WAA6B,IAAD,EACrD,OAAO0I,EAD8C,uDAAZ,QAGvC,IAAIgC,IAAJ,UAAQ9L,EAAcO,cAAtB,aAAQ,EAAsBc,KAAI,SAACC,GAAD,OAAeA,EAAUF,UAoEzC4K,GAGdtF,YAAagF,GAETnL,GAAS,UAACP,EAAcO,cAAf,QAAyB,IAAI6E,OAAO,CAAC9D,IACpDtB,EAAa,2BAAQA,GAAR,IAAuBO,OAAQA,IAC5CyH,EAAqBhI,QAChB,GAAiB,WAAb6K,EAAuB,CAAC,IAAD,EAE1BzD,EAAyB,CAC7BhG,KA3EoB,WAA8B,IAAD,EACvD,OAAO0I,EADgD,uDAAb,SAGxC,IAAIgC,IAAJ,UAAQ9L,EAAcmF,eAAtB,aAAQ,EAAuB9D,KAAI,SAAC+F,GAAD,OAAgBA,EAAWhG,UAsE3C6K,GAGfvF,YAAagF,GAETvG,GAAU,UAACnF,EAAcmF,eAAf,QAA0B,IAAIC,OAAO,CAACgC,IACtDpH,EAAa,2BAAQA,GAAR,IAAuBmF,QAASA,IAC7C6C,EAAqBhI,MAavBkM,aA3HiB,SAACC,EAAeC,GACnCjD,EAAWgD,GACXtD,EAAcuD,IA0HZC,iBAzIqB,SAACC,GAAgC,IAAD,gBACjCA,GADiC,IACvD,2BAAwC,CAAC,IAA9BC,EAA6B,QAClCC,YAAOD,IACTpD,EAAWoD,IAHwC,kDAMjCD,GANiC,IAMvD,2BAAwC,CAAC,IAA9BC,EAA6B,QAClCE,YAAOF,IACTlD,EAAWkD,IARwC,gCA0IrDG,OAxHW,SAACC,GAAD,OACb1G,EAAqB0G,IA8GrB,SAWGjH,M,yDClhBDkH,EAAoB,gCACpBC,EAAkB,+CAGlBC,EAAU,aACVC,EAAgC,eAChCC,EAAuC,yBACvCC,EAA4B,cAC5BC,EAA4B,cAC5BC,EAAoC,cAEpCC,EAAwB,aAGjBC,EAAgB,uCAAG,WAC9BC,EACAC,GAF8B,iCAAA7M,EAAA,6DAG9B8M,EAH8B,yCAKVC,OAAOC,KAAKH,GALF,cAKxBI,EALwB,gBAMPA,EAAMC,MAAMN,GANL,eAObnN,KADX0N,EANwB,gCAQxBL,GACFG,EAAMG,IAAIR,GATgB,kBAWrBO,GAXqB,yBAaxBF,EAAMG,IAAIR,GAbc,yBAcNK,EAAMC,MAAMN,GAdN,gBAeZnN,KADZ4N,EAdwB,kDAgBrBC,QAAQC,OAAO,kDAhBM,iCAkBvBF,GAlBuB,4CAAH,wDAsBhBG,EAAyB,uCAAG,WACvCC,GADuC,yCAAAzN,EAAA,6DAEvC0N,EAFuC,+BAEhC,EACPC,EAHuC,+BAGhC,UACPC,EAJuC,+BAI/B,OAGFC,EAAeC,mBAAmBL,GAClCM,EAAcD,mBAAmBH,GACjCK,EAAeF,mBAAmBF,GAClCK,EAViC,+CAUmBJ,EAVnB,iBAUwCE,EAVxC,kBAU6DC,EAV7D,8BAU+FN,GAV/F,SAWhBf,EAAiBsB,EAAW/B,GAAmB,GAX/B,cAWjCiB,EAXiC,yBAYhCA,EAASe,QAZuB,4CAAH,sDAgBhCC,EAA6B,SAACC,GAGlC,OAAOA,EACJ3K,QAAQ,sBAAuB,sCAC/BA,QAAQ,SAAU,MAUhB,SAAiB4K,IAAxB,+B,4CAAO,wDAAArO,EAAA,sDACLsO,EADK,+BACG,CAAC,WAAY,WAEjBC,EAA8B,GAC5Bd,EACJ,2BAA6Ba,EAAM3N,KAAI,SAAC6N,GAAD,MAAU,QAAUA,KAAM1K,KAAK,KAC/D4J,EAAO,EANX,YAMcA,EAAO,KANrB,6CAOyBF,EAA0BC,EAAOC,IAP1D,UAOGe,EAPH,OAYkB,KADfC,EAAeD,EAAcC,OACzB3L,OAZP,mEAec2L,GAfd,2DAgBD,OADOC,EAfN,kBAgBK,CAAEC,IAAKT,EAA2BQ,EAAKE,UAAWC,KAAMH,EAAKI,KAhBlE,8KAkBG,IAAIzB,SAAS,SAAA0B,GAAO,OAAIC,WAAWD,EAAU,IAAD,SAlB/C,QAM0BtB,IAN1B,gDAoBEa,GApBF,kE,sBAwBA,IAcMW,EAA8B,uCAAG,WAAON,GAAP,qBAAA5O,EAAA,sEACrB2M,EAAiBiC,EAAKzC,GADD,cACtCgB,EADsC,gBAEzBA,EAASgC,OAFgB,cAEtCnL,EAFsC,gBAGhBA,EAAKoL,OAHW,cAGtCC,EAHsC,OAItC/P,EAAgBgQ,IAAKC,KAAKF,GAJY,kBAKrC/P,GALqC,4CAAH,sDAQ9BkQ,EAAkB,uCAAG,wFAAAxP,EAAA,sDAAOsO,EAAP,+BAAe,CAAC,WAAY,WAC5D5O,QAAQ+P,MAAM,+BACRC,EAAwBrB,EAA0BC,GAGlDqB,EAAcC,IAAYC,eAAe,CAC7CnP,KAAM0L,EACN0D,UAAWvD,IAEPwD,EAAcH,IAAYC,eAAe,CAC7CnP,KAAM0L,EACN0D,UAAWtD,IAEPwD,EAAkBJ,IAAYC,eAAe,CACjDnP,KAAM0L,EACN0D,UAAWzD,IAEP4D,EAAwBL,IAAYC,eAAe,CACvDnP,KAAM0L,EACN0D,UAAWxD,IAEP4D,EAAyBN,IAAYC,eAAe,CACxDnP,KAAM0L,EACN0D,UAAWrD,IAEP0D,EAAcP,IAAYC,eAAe,CAC7CnP,KAAM0L,EACN0D,UAAWpD,IA3BmB,kCA6BPgD,GA7BO,mIA8BxBZ,GADSH,EA7Be,GA8BZG,KAAKsB,cACjBhC,EAAUO,EAAKC,IA/BS,UAgCFuB,EAAYE,QAAgBvB,GAhC1B,WAiCR,QADhBwB,EAhCwB,gCAkC5B5Q,QAAQ+P,MAAR,uBAA8BrB,EAA9B,sBAAmDU,EAAnD,2BAA0EwB,EAA1E,MAlC4B,8CAsCtBC,EAAsBpC,EAA2BC,IACtCoC,SAAS,kBAvCE,wBAwC1B9Q,QAAQ+P,MAAR,uBAA8Bc,EAA9B,iDAxC0B,iDA4CHZ,EAAYU,QAAgBE,GA5CzB,eA6CT,QADbE,EA5CsB,SA6CDA,IAAe3B,GACxCpP,QAAQC,MAAR,qDACgD4Q,EADhD,aACgEE,EADhE,eACiF3B,EADjF,MA9C0B,UAmDHoB,EAAuBG,QAC9CE,GApD0B,WAmDtBG,EAnDsB,SAwDX,OAAfD,GACe,OAAfC,GACAC,OAAOC,SAASF,IAjKe,GAuGL,+DA+D5BhR,QAAQ+P,MAAR,8CAAqDc,EAArD,MA/D4B,UAgEL5D,EAAiB4D,EAAapE,GAhEzB,eAgEtBgB,EAhEsB,OAiExB7N,OAjEwB,EAkExB+P,OAlEwB,sBAoEPlC,EAASgC,OApEF,eAoEpBnL,EApEoB,iBAqEJA,EAAKoL,OArED,QAqE1BC,EArE0B,OAsE1B/P,EAAgBgQ,IAAKC,KAAKF,GAtEA,0DAwE1Bc,EAAYU,QAAQ/B,EAAM,KAAIpO,KAAO,KAAO,KAAIoQ,SAxEtB,wCA2ESrR,IAAjCH,EAAc4F,eA3EU,wBA4E1BiL,EAAYU,QAAQ/B,EAAM,iDA5EA,iDAkFtBkB,EAAgBa,QAAQ/B,EAAMO,GAlFR,yBAqFHU,EAAYM,QAAgBvB,GArFzB,WAsFT,OAtFS,yCAuFpBiB,EAAYc,QAAQ/B,EAAMyB,GAvFN,YA2FxBjR,EAAcoB,KA3FU,kCA4FpBuP,EAAsBY,QAAQ/B,EAAMxP,EAAcoB,MA5F9B,yBA+FtBiP,EAAYkB,QAAQN,EAAazB,GA/FX,yBAkGtBoB,EAAuBW,QAC3BN,EA1M+B,GAuGL,2DAuG5B7Q,QAAQC,MAAR,oDAC+CyO,EAD/C,8BAvG4B,4TA4GhC1O,QAAQ+P,MAAM,+BA5GkB,iGAAH,qDAgHlBsB,EAAsB,uCAAG,kDAAA/Q,EAAA,6DAAOsO,EAAP,+BAAe,CAAC,WAAY,WAE1DyB,EAAcH,IAAYC,eAAe,CAC7CnP,KAAM0L,EACN0D,UAAWtD,IAEPwD,EAAkBJ,IAAYC,eAAe,CACjDnP,KAAM0L,EACN0D,UAAWzD,IAET2E,EAAqB,IAAIC,IAEvBC,EAAe1B,EAAmBlB,GAZJ,SAazB0B,EAAgBjN,SAbS,sBAaK,IAbL,uCAc5BmO,EAd4B,yBAmB9BlB,EAAgBmB,SAGpB,SAAC9B,EAAeP,EAAMsC,GAEpB,IACE,IAAM9R,EAAgBgQ,IAAKC,KAAKF,GAChC2B,EAAmBK,IAAIvC,EAAM,CAC3BtP,KAAMF,IAER,MAAO+G,GACP3G,QAAQC,MAAR,qDACgDmP,EADhD,oBACgEzI,EADhE,6BACwFgJ,QA/B1D,yBAoC9BU,EAAYoB,SAAsB,SAACvC,EAAKE,EAAMsC,GAClD,IAAI7R,EAAeyR,EAAmBM,IAAIxC,QACrBrP,IAAjBF,EACFG,QAAQC,MAAR,qDACgDiP,EADhD,qBACgEE,EADhE,+BAIAvP,EAAaqP,IAAMA,KA3Ca,eA8ChC2C,EAAsC,GAE1CP,EAAmBQ,SAAQ,SAACjS,EAAcuP,QACfrP,IAArBF,EAAaqP,IACflP,QAAQC,MAAR,sDACiDmP,EADjD,wCAIAyC,EAAc5N,KAAKpE,MAtDa,kBAyD7BgS,GAzD6B,4CAAH,qDA6DtBE,EAAsB,uCAAG,WAAO/Q,GAAP,6BAAAV,EAAA,6DAAqBsO,EAArB,+BAA6B,CAAC,WAAY,WAA1C,SACRyC,EAAuBzC,GADf,cAC9BiD,EAD8B,yBAE7BA,EAAclN,QAAO,SAACqN,GAAD,qCAASA,EAAIlS,YAAb,iBAAS,EAAUkB,YAAnB,aAAS,EAAgB0P,cAAc1M,SAAShD,EAAK0P,sBAArD,aAFQ,2CAAH,sDC9Q7BuB,EAAwB,SAAC,GAA4C,IAA3CC,EAA0C,EAA1CA,aAC9B,EAA0C1S,wBAAoCO,GAA9E,mBAAOH,EAAP,KAAsBmG,EAAtB,KAKA,OAJAoM,qBAAU,WACR3C,EAA+B0C,GAAcE,KAAKrM,KACjD,CAACmM,SAEkBnS,IAAlBH,EACK,8CAGL,qBACEsE,UAAU,yCACVmO,WAAS,EACTC,YAAa,SAACpI,GAOZ,OArCU,SAACA,EAAkBS,GACrCT,EAAMC,aAAaoI,QAAQ,wBAAyB9L,KAAK8E,UAAUZ,IACnET,EAAMC,aAAaoI,QACjB,mBACA9L,KAAK8E,UAAU,CACbP,QAASd,EAAMsI,YAAYxH,QAC3BC,QAASf,EAAMsI,YAAYvH,WAG/Bf,EAAMC,aAAasI,cAAgB,OA4BpBH,CAAYpI,EAAO,CAAE/E,KAND,CACzBtF,aAAc,CACZqP,IAAKgD,EACLpS,KAAMF,OAPd,SAaGA,EAAcoB,QAMjB0R,EAAqB,SAAC,GAAgE,IAA9DC,EAA6D,EAA7DA,gBAC5B,OACE,mCACGC,MAAMC,KAAKF,GAAiB1R,KAC3B,WAA8B4I,GAA9B,IAAGiJ,EAAH,EAAGA,SAAUC,EAAb,EAAaA,cAAb,OACE,0BAAwBzF,KAAgB,IAAVzD,EAAarJ,MAAO,CAAEK,OAAQ,iBAAkBC,aAAc,OAA5F,UACE,yBAASN,MAAO,CAAEwS,YAAa,MAAOjS,QAAS,OAA/C,SACE,iCAAS+R,MAEVC,EAAc9R,KAAI,SAACiR,GAAD,OACjB,cAAC,EAAD,CAA0CA,aAAcA,GAA5BA,QALlBY,SA2BTG,EAbU,SAAC,GAAgE,IAA9DN,EAA6D,EAA7DA,gBAC1B,OACE,0BAASrF,MAAI,EAAb,UACE,yBAAS9M,MAAO,CAAEK,OAAQ,iBAAkBE,QAAS,MAAOD,aAAc,OAA1E,SACE,yDAEF,qBAAKN,MAAO,CAAE0S,YAAa,QAA3B,SACE,cAAC,EAAD,CAAoBP,gBAAiBA,UCnEvCQ,EAAiB,CAAC,WAAY,WAuErBC,EArEK,SAACC,GACnB,MAA0B7T,wBAA6BO,GAAvD,mBAAOE,EAAP,KAAcqT,EAAd,KACA,EAAkC9T,oBAAS,GAA3C,mBAAO+T,EAAP,KAAkBC,EAAlB,KACA,EAAgChU,oBAAS,GAAzC,mBAAOiU,EAAP,KAAiBC,EAAjB,KACA,EAA0BlU,mBAAS,IAAnC,mBAAOuO,EAAP,KAAc4F,EAAd,KACA,EAA0BnU,mBAA+B,IAAzD,mBAAOwP,EAAP,KAAc4E,EAAd,KALkC,4CAWlC,WAAyB7F,GAAzB,SAAAzN,EAAA,sDACEyR,EAAuBhE,EAAOoF,GAAgBf,MAC5C,SAACP,GACC6B,GAAY,GACZE,EAAS/B,MAEX,SAAC5R,GACCyT,GAAY,GACZJ,EAASrT,EAAMmR,YARrB,4CAXkC,sBAwBlC,IAQIyC,EAAU,yBACd,GAAIN,EACFM,EAAU,0DACL,QAAc9T,IAAVE,EACT4T,EAAU,0CAAa5T,UAClB,GAAKsT,GAAcE,GAEnB,QAAc1T,IAAViP,EAAqB,CAC9B,IAAM8E,EAAoB9E,EAAM/N,KAAI,SAACgO,GAAD,aAClC,qBAEE3M,MAAO2M,EAAKC,IACZhL,UAAU,gDACVmO,WAAS,EACTC,YAAa,SAACpI,GAIZ,OAzDU,SAACA,EAAkBS,GACrCT,EAAMC,aAAaoI,QAAQ,wBAAyB9L,KAAK8E,UAAUZ,IACnET,EAAMC,aAAasI,cAAgB,OAuDpBH,CAAYpI,EAAO,CAAE/E,KAHD,CACzBtF,aAAcoP,MAPpB,mBAYGA,EAAKnP,YAZR,aAYG,EAAWkB,MAXPiO,EAAKC,QAcd2E,EAAU,mCAAGC,UAlBbD,EAAU,+CAoBZ,OACE,sBAAK3P,UAAU,WAAf,UACE,uBAAM9D,SApCO,SAACC,GAChBA,EAAEE,iBACY,KAAVwN,IACFyF,GAAa,GA3BiB,oCA4B9BO,CAAUhG,KAgCV,UACE,uBAAO/L,KAAK,SAASX,YAAY,UAAUe,SAtD3B,SAAC/B,GACrBsT,EAAStT,EAAEgC,OAAOjB,UAsDd,uBAAOY,KAAK,cAEd,8BAAM6R,QC3DNG,GAA6B,SAAC9K,GAAD,MAA0C,CAC3E,kBAAmBzC,KAAK8E,UAAU,CAEhCnF,EAAG8C,EAAK+K,KAAKxT,SAAS2F,EACtBC,EAAG6C,EAAK+K,KAAKxT,SAAS4F,EACtB6N,MAAOhL,EAAK+K,KAAKC,MACjBC,OAAQjL,EAAK+K,KAAKE,WAIhBC,GAAoB,SAACC,EAAUC,GAAX,OACxBD,EAAGJ,KAAKxT,SAAS2F,EAAIkO,EAAGL,KAAKxT,SAAS2F,GAElCmO,GAA2C,SAC/CtO,EACAgB,GAKmB,IAAD,EAJlBjG,EAIkB,uDAJX,YACPsF,EAGkB,uDAHoB,GACtCkO,IAEkB,yDADlBC,EACkB,wDAGZ3N,EAAab,EAAMtB,QAAO,SAACuE,GAAD,MAAwB,UAAdA,EAAKlH,QAAkBiM,KAAKmG,IAChErN,EAAcd,EAAMtB,QAAO,SAACuE,GAAD,MAAwB,WAAdA,EAAKlH,QAAmBiM,KAAKmG,IAElEM,EAAYzO,EACftB,QAAO,SAACuE,GAAD,MAAwB,SAAdA,EAAKlH,QACtBf,KAAI,SAACiI,GAAD,OAAUA,KAEXhJ,EAAa4G,EAAW7F,KAAe,SAACiI,GAC5C,IAAIpJ,EAAkB,CAAEkB,KAAMkI,EAAK1F,IAInC,OAHIgR,IACF1U,EAAKwG,YAAc0N,GAA2B9K,IAEzCpJ,KAGH6U,EAAc5N,EAAY9F,KAAgB,SAACiI,GAC/C,IAAIpJ,EAAmB,CAAEkB,KAAMkI,EAAK1F,IAIpC,OAHIgR,IACF1U,EAAKwG,YAAcxG,EAAKwG,YAAc0N,GAA2B9K,IAE5DpJ,KAWH8U,EAAUF,EAAUG,QAAO,SAACC,EAAa5L,GAAU,IAAD,EAClD7J,EAAQ,UAAG6J,EAAK5E,YAAR,aAAG,EAAWjF,SAa1B,YAZiBU,IAAbV,IAEFA,EAAW6G,OAAO6O,OAAO,GAAI1V,GACxBoV,IACHpV,EAASQ,aAAeqG,OAAO6O,OAAO,GAAI1V,EAASQ,qBAC5CR,EAASQ,aAAaC,MAE3B0U,IACFnV,EAASiH,YAAc0N,GAA2B9K,IAEpD4L,EAAY5L,EAAK1F,IAAMnE,GAElByV,IACN,IAECE,EAAwD,GAnD1C,cAqDC/N,GArDD,IAqDlB,2BAA0B,CAAC,IAAD,IAAf+B,EAAe,QAClBiM,EAAejM,EAAK7B,OACpB+N,EAAgB,UAAGlM,EAAK5B,oBAAR,aAAG,EAAmBrD,QAAQ,WAAY,IAC1DoR,EAAenM,EAAK3G,OACpB+S,EAAe,UAAGpM,EAAK3B,oBAAR,aAAG,EAAmBtD,QAAQ,UAAW,IAQ9D,GAAMmR,QAA8CnV,IAA1B6U,EAAQK,GAChCjV,QAAQC,MAAM,+CAAgD+I,OADhE,CAMA,IAAM1H,EACF4T,EACG,CACC1T,WAAY,CAAEC,OAAQwT,EAAcvT,WAAYwT,IAEjD,CAECvT,WAAY,CAAER,UAAW8T,IAEjC,GAAMG,EAAiB,CACrB,IAAIC,EAAaT,EAAQO,GACzB,QAAmBpV,IAAfsV,EAA0B,CAC5BrV,QAAQC,MAAM,+CAAgD+I,GAC9D,cAE2BjJ,IAAzBsV,EAAW5V,YACb4V,EAAW5V,UAAY,IAEzB4V,EAAW5V,UAAU2V,GAAmB9T,MACnC,CAGL,IAAMuH,EAAqBvH,EAErBuH,EACJmM,EAAkBG,GAAgBtM,EAElC7I,QAAQC,MAAM,qDAlGF,8BA6GlB,IAAMqV,EAAgC,CACpCtU,KAAMA,EACNb,OAAQD,EACR6E,QAAS4P,EACTY,SAAU,CACRjP,YAAaA,GAEfd,eAAgB,CACdC,MAAO,CACLC,MAAOkP,EACPlN,aAAcsN,KAoBpB,OAZ0B,IAAtB9U,EAAWmD,eACNiS,EAAenV,OAEG,IAAvBwU,EAAYtR,eACPiS,EAAevQ,QAEgB,IAApCmB,OAAOwE,KAAKpE,GAAajD,eACpBiS,EAAeC,SAEsB,IAA1CrP,OAAOwE,KAAKsK,GAAmB3R,eACzBiS,EAAe9P,eAAuCC,MAAMiC,aAE/D4N,GChJME,GAzBgB,SAAC,GAA6C,IAAD,EAA3CC,EAA2C,EAA3CA,aACzBxP,EAAQyP,aAAc,SAACC,GAAD,OAAWA,EAAM1P,SACvCgB,EAAQyO,aAAc,SAACC,GAAD,OAAWA,EAAM1O,SAE7CwO,EAAY,UAAGA,SAAH,QAAmB,WAE/B,IAAI9F,EAAgB,GACpB,IACE,IAAM2F,EAAiBf,GAAyCtO,EAAOgB,EAAOwO,GAC9E9F,EAAgBC,IAAKgG,KAAKN,EAAgB,CAAEO,UAAW,MACvD,MAAMlP,GACNgJ,EAAgBjM,OAAOiD,GAGzB,IAAMmP,EAAoB,IAAIC,KAAK,CAACpG,GAAgB,CAAE3N,KAAM,cACtDgU,EAAe,mBAAGC,KAAMC,IAAIC,gBAAgBL,GAAoBM,SAAU,iBAA3D,4BAErB,OACE,oCACE,6CAAgBJ,KAChB,qBAAKxV,MAAO,CAAC6V,SAAU,QAAvB,SAAiC1G,QCmEvC,IAAM2G,GAAoC,SAACC,GACvC,GAAwB,kBAAbA,EAAuB,CAC9B,GAAI,CAAC,WAAWvS,SAASuS,EAAS7F,eAC9B,MAAO,MAEX,GAAI,CAAC,QAAS,UAAU1M,SAASuS,EAAS7F,eACtC,MAAO,SAGf,MAAO,UAGL8F,GAAgC,SAACD,GACnC,MAAO,CACHvU,KAAMsU,GAAkCC,KAsB1CE,GAAuD,SACzD7W,EAEAoI,GACE,IAAD,IAID,KA/CO,cA+CwBpI,EAAc4F,gBACzC,MAAMkR,MAAM,iDAOhB,IAAMC,EAAgB/W,EAAc4F,eAAeoR,UAG7CC,EAjIiB,SAACjX,EAA8BoI,GAA6E,IAAD,IAClI,KAAO,cAAepI,EAAc4F,gBAClC,MAAMkR,MAAM,yDAEd,IAAMC,EAAgB/W,EAAc4F,eAAeoR,UAE7CE,EAAwB,IAAIpL,IAC5BqL,EAAuB,IAAIrL,IAC3BsL,EAAa,SAAbA,EAAcC,GAChB,GAAkB,iBAAPA,EACP,MAAO,CAACA,GACL,GAAI,eAAgBA,EAAK,CAC5B,IAAM9V,EAAY8V,EAAIC,WAEtB,OADAJ,EAAsBpJ,IAAIvM,GACnB,CAAC,0BAAD,OAA2BA,EAA3B,SACJ,GAAI,cAAe8V,EAAK,CAC3B,IAAM9V,EAAY8V,EAAIE,UAEtB,OADAJ,EAAqBrJ,IAAIvM,GAClB,CAAC,yBAAD,OAA0BA,EAA1B,cACJ,GAAI,eAAgB8V,EAAK,CAC5B,IAAMvV,EAAauV,EAAIG,WACvB,MAAO,CAAC,0BAAD,OAA2B1V,EAA3B,cACJ,GAAI,OAAQuV,EAAK,CACpB,MAAiC,CAACA,EAAII,GAAGC,KAAML,EAAII,GAAGjF,KAAM6E,EAAII,GAAGE,MAA5DC,EAAP,KAAeC,EAAf,KAAuBC,EAAvB,KAEIC,GAAsB,EAC1B,GAAsB,kBAAXH,EACTG,EAA+C,SAAzBH,EAAO9G,mBACxB,GAAsB,mBAAX8G,EAChBG,EAAsBH,OACjB,GAAI,cAAeA,EAExBG,EADkBH,EAAOI,aACU5P,MAC9B,MAAI,eAAgBwP,GAavB,MAAMd,MAAM,8BAAgCc,GAZ9C,IAAMrW,EAAYqW,EAAON,WACzB,GAAO/V,KAAa6G,EAEb,CACL,IAAM6P,EAAe7P,EAAc7G,GACnC,GAA4B,kBAAjB0W,EAGP,MAAMnB,MAAM,yFAFZiB,EAAqD,SAA/BE,EAAanH,mBAJvCiH,GAAsB,EAY1B,IAAMG,EAAiBH,EAAsBF,EAASC,EACtD,YAAuB3X,IAAnB+X,EACO,GAEJA,EAAe5Q,QAAQ8P,GAC3B,GAAI,WAAYC,EAEnB,OADmBA,EAAIjS,OACLkC,QAAQ8P,GAE1B,MAAMN,MAAM,0CAAD,OAA2CO,KAU9D,MANe,CACXc,QAAO,UAAEpB,EAAcoB,eAAhB,aAAE,EAAuB7Q,QAAQ8P,GACxCpQ,KAAI,UAAE+P,EAAc/P,YAAhB,aAAE,EAAoBM,QAAQ8P,GAClCF,sBAAuBA,EACvBC,qBAAsBA,GAgEEiB,CAAmBpY,EAAeoI,GAExDiQ,EAAqB,CACvBrB,UAAW,CACPsB,MAAOvB,EAAcuB,MACrBH,QAASlB,EAAoBkB,QAC7BnR,KAAMiQ,EAAoBjQ,OAM5BuR,EAAW,IAAI5G,KAAI,UAAC3R,EAAcO,cAAf,QAAyB,IAAIc,KAAI,SAAAC,GAAS,MAAI,CAACA,EAAUF,KAAME,OAiClFkX,EAAsB,CACxBC,iBA9B8B,CAChCC,WAAYpS,OAAOqD,YACjBqJ,MAAMC,KAAKgE,EAAoBC,sBAAsByB,UAAUtX,KAC7D,SAACE,GAAD,YAAe,CACbA,EACAqV,GAA6B,UAAC2B,EAASvG,IAAIzQ,UAAd,aAAC,EAAyBa,WAI7DwW,UAAWtS,OAAOqD,YAChBqJ,MAAMC,KAAKgE,EAAoBE,qBAAqBwB,UAAUtX,KAC5D,SAACE,GAAD,YAAe,CACbA,GAC4B,UAACgX,EAASvG,IAAIzQ,UAAd,OAAC,EAAyBa,KAzDvD,CACHyW,aARuB,CACvBC,YAAa,2BAiFbC,kBAZ+B,CACjCL,WAAY,GACZE,UAAWtS,OAAOqD,aAChB,UAAC3J,EAAcmF,eAAf,QAA0B,IAAI9D,KAAI,SAAC+F,GAAD,MAAgB,CAChDA,EAAWhG,MACkBgG,EAAWhF,KApEvC,CACHyW,aARuB,CACvBC,YAAa,2BAmFbE,cAAe,eAsHnB,MAAO,CAAEC,eAzBc,CACnBC,SAAU,CACN9X,KAAM,eAEVb,OAAQ,CACJmY,WA/F6BpS,OAAOqD,YAAYqJ,MAAMC,KAAKgE,EAAoBC,sBAAsByB,UAAUtX,KAAI,SAAAE,GAAS,MAAI,CAACA,EAAY,SAAAA,GAEjJ,IAAI0W,EAAe7P,EAAc7G,GAEjC,QAAqBpB,IAAjB8X,EAA4B,CAE5B,IAAM3W,EAAYiX,EAASvG,IAAIzQ,GAC/B,QAAkBpB,IAAdmB,EACA,MAAMwV,MAAM,8DAAD,OAA+DvV,EAA/D,oBAEf,QAA0BpB,IAAtBmB,EAAUK,QACVsW,EAAe3W,EAAUK,YACtB,CACH,IAA2B,IAAvBL,EAAUW,SAMV,MAAM6U,MAAM,iDAAD,OAAkDvV,EAAlD,MAHXnB,QAAQC,MAAR,iBAAwBkB,EAAxB,+EACA0W,EAAe,IAM3B,GAA4B,kBAAjBA,EACP,MAAO,CACHkB,aAAc,CACVC,cAAe,CAEXC,YAAapB,KAItB,GAAI,eAAgBA,EACvB,MAAO,CACHqB,wBAAyBrB,EAAalW,WAAWR,WAElD,GAAI,eAAgB0W,EACvB,MAAO,CACHsB,oBAAqB,CACjBC,aAAcvB,EAAarW,WAAWC,OACtC4X,mBAAoBxB,EAAarW,WAAWE,aAIpD,MAAMgV,MAAM,mCAAD,OAAoCmB,EAApC,MA5CkI,CA8ClJ1W,QAkDKqX,UAhD4BtS,OAAOqD,YAAYqJ,MAAMC,KAAKgE,EAAoBE,qBAAqBwB,UAAUtX,KAAI,SAAAE,GAAS,MAAI,CAACA,EAAY,SAAAA,GAE/I,IAAI0W,EAAe7P,EAAc7G,GAEjC,QAAqBpB,IAAjB8X,EAA4B,CAE5B,IAAM3W,EAAYiX,EAASvG,IAAIzQ,GAC/B,QAAkBpB,IAAdmB,EACA,MAAMwV,MAAM,8DAAD,OAA+DvV,EAA/D,oBAEf,QAA0BpB,IAAtBmB,EAAUK,QACVsW,EAAe3W,EAAUK,YACtB,CACH,IAA2B,IAAvBL,EAAUW,SAMV,MAAM6U,MAAM,iDAAD,OAAkDvV,EAAlD,MAHXnB,QAAQC,MAAR,iBAAwBkB,EAAxB,+EACA0W,EAAe,IAM3B,GAA4B,kBAAjBA,EAEP,MAAMnB,MAAM,iEACT,GAAI,eAAgBmB,EACvB,MAAO,CACHyB,uBAAwBzB,EAAalW,WAAWR,WAEjD,GAAI,eAAgB0W,EACvB,MAAO,CACH0B,mBAAoB,CAChBH,aAAcvB,EAAarW,WAAWC,OACtC+X,kBAAmB3B,EAAarW,WAAWE,aAInD,MAAMgV,MAAM,mCAAD,OAAoCmB,EAApC,MAtCgI,CAwChJ1W,SAWCsY,eAAgB,CACZC,aAAa,GAEjB7Z,aAAc,CACZmB,KAAM,gBAYaoX,sBAAqBH,uBAG5C0B,GAAyC,SAAC/Z,GAAkC,IAAD,IAC7E,KAAO,UAAWA,EAAc4F,gBAC5B,MAAMkR,MAAM,+CAoBhB,IAhBA,IAAMkD,EAA4B,CAC9BtB,WAAYpS,OAAOqD,aACjB,UAAC3J,EAAcO,cAAf,QAAyB,IAAIc,KAC3B,SAACC,GAAD,MAAe,CAACA,EAAUF,KAAMwV,GAA8BtV,EAAUc,YAO1EgE,EAAYpG,EAAc4F,eAAeC,MAE3CoU,EAAuC,GACvCC,EAAwC,GACxCC,EAAmC,GAEvC,MAAiC7T,OAAOC,QAAQH,EAAUN,OAA1D,eAAkE,CAAC,IAAD,EAA7D,sBAAOjE,EAAP,KAAepC,EAAf,KACD,QAAmCU,IAA/BV,EAASQ,aAAaC,KACtB,MAAM4W,MAAM,SAAD,OAAUjV,EAAV,gDAEf,MAAkEgV,GAAqDpX,EAASQ,aAAaC,KAAvB,UAA6BT,EAASI,iBAAtC,QAAmD,IAAlKoZ,EAAP,EAAOA,eAAgBT,EAAvB,EAAuBA,oBAAqBH,EAA5C,EAA4CA,mBAGtC+B,EAAmBvY,EAAS,YAC5BwY,EAAoBxY,EAAS,aAC7ByY,EAAezY,EACrBoY,EAAgBG,GAAoB/B,EACpCG,EAAoBQ,cAAgBoB,EACpCF,EAAiBG,GAAqB7B,EACtCS,EAAehZ,aAAamB,KAAOiZ,EACnCpB,EAAeC,SAAS9X,KAAOkZ,EAC/BH,EAAYG,GAAgBrB,EAGhC,IA9V8BsB,EA8VxB1E,EAAY,UAAG7V,EAAcoB,YAAjB,QAAyB,WAmB3C,MAjB2B,CACvBoZ,aAAc,CACVpZ,MAlWsBmZ,EAkWS1E,EAjWhC0E,EAAczJ,cAAc3M,QAAQ,KAAM,OAmW7CsW,WAAY,kBACZC,cAAe,QACfC,eAAgB,CACZC,UAAWX,GAEfY,WAAYX,EACZY,KAAM,CACJrC,iBAAkBuB,EAClBe,IAAK,CACHjV,MAAOqU,MAOba,GAA8C,SAClDhb,EACAib,EACAC,GAIA,IAAIC,EAAkD,GACtD,QAA0Bhb,IAAtB+a,EACF,cAA2BlI,MAAMC,KAAKiI,EAAkB3U,WAAxD,eAAoE,CAA/D,0BAAO6U,EAAP,KAAY5Z,EAAZ,KACH2Z,EAA2BC,GAAO,CAChC/B,YAAa7X,GAsBnB,MAboB,CAIlB6Z,cAAe,CACb3C,WAAYyC,EACZF,mBAAoBA,GAEtBK,aAVmBvB,GAAuC/Z,KCpYxDub,GAAyC,0CACzCC,GAA+B,iCAC/BC,GAA2B,8BAC3BC,GAAgC,kCAElCC,GAAY,2EACZC,GAAU,0CAERC,GAA8B,CAClC,cACA,eACA,cAKIC,GAA0B,uCAAG,WACjCC,GADiC,+BAAArb,EAAA,6DAEjCsb,EAFiC,gCAGjCC,EAHiC,+BAGhBL,GACjBM,EAJiC,+BAIdP,GAJc,kBAM1B,IAAI3N,SACT,SAAC0B,EAASzB,GACRkO,KAAKC,OAAOC,UAAUJ,GACtBE,KAAKG,KAAKC,UACR,CACEC,UAAWN,EACXO,MAAOV,EACPC,UAAWA,IAEb,SAACU,QAEoBvc,IAAfuc,GACFtc,QAAQC,MAAM,qCACd4N,EAAO,4CACEyO,EAAWrc,OACpBD,QAAQC,MACN,oCACAqc,EAAWrc,OAEb4N,EAAOyO,EAAWrc,QAElBqP,EAAQgN,UA3Be,2CAAH,sDAoC1BC,GAAiC,uCAAG,WAAOZ,GAAP,SAAArb,EAAA,+EAGhCob,GAA2BC,GAAQ,GAHH,iFAQ9BD,GAA2BC,GAAQ,GARL,0HAAH,sDAejCa,GAAgC,uCAAG,wCAAAlc,EAAA,sGACjCic,GACJ,CAAC,mDAFoC,uBAIhBR,KAAKC,OAAOS,QAAQ,CACzCC,KAAM,6DAL+B,cAIjCjP,EAJiC,yBAOhCA,EAASkP,QAPuB,2CAAH,qDAUhCC,GAA2B,uCAAG,WAAOC,GAAP,+BAAAvc,EAAA,6DAAyBwc,EAAzB,+BAAgC,cAAeC,EAA/C,gCAC5BR,GACJ,CAAC,mDAF+B,uBAIXR,KAAKC,OAAOS,QAAQ,CACzCC,KAAK,WAAD,OAAaI,EAAb,uDAAkED,EAAlE,sBAAwFC,EAAxF,iBACJE,OAAQ,OACRC,KAAMxW,KAAK8E,UAAUwR,KAPW,cAI5BtP,EAJ4B,yBAS3BA,EAASkP,QATkB,2CAAH,sDAoKlBO,GAxJc,WAC3B,MAAgC1d,oBAC9B,0BAAMiH,KAAKC,MAAL,oBAAWyW,OAAOC,oBAAlB,aAAW,EAAqBzM,QAAQ2K,WAAxC,QAA0E,SADlF,mBAAO+B,EAAP,KAAiBC,EAAjB,KAGA,EAA8B9d,oBAC5B,8CAAM2d,OAAOC,oBAAb,aAAM,EAAqBzM,QAAQyK,WAAnC,QAAoE,MADtE,mBAAOlQ,EAAP,KAAgBqS,EAAhB,KAGA,EAA4B/d,oBAC1B,8CAAM2d,OAAOC,oBAAb,aAAM,EAAqBzM,QAAQ0K,WAAnC,QAnFuC,iBAkFzC,mBAAOyB,EAAP,KAAeU,EAAf,KAGA,EAA0Bhe,mBAAS,IAAnC,mBAAOS,EAAP,KAAcqT,EAAd,KACA,EAAoD9T,oBAClD,8CAAM2d,OAAOC,oBAAb,aAAM,EAAqBzM,QAAQwK,WAAnC,QAA8E,MADhF,mBAAON,EAAP,KAA2B4C,EAA3B,KAGA,EAAkDje,mBAAS,IAA3D,mBAAOke,EAAP,KAA0BC,EAA1B,KAEM1X,EAAQyP,aAAc,SAACC,GAAD,OAAWA,EAAM1P,SACvCgB,EAAQyO,aAAc,SAACC,GAAD,OAAWA,EAAM1O,SAEzC2W,OAA4C7d,EAC5C8d,OAA2C9d,EAC/C,IACE,IAEMuV,EAAiBf,GAAyCtO,EAAOgB,EAFlD,gBAEuElH,GAAW,GAAO,GACxG+d,EAAoBlD,GAA4CtF,EAAgBuF,GACtF+C,EAAwBnX,KAAK8E,UAAUuS,OAAmB/d,EAAW,GACrE8d,EAAuB3H,IAAIC,gBACzB,IAAIJ,KAAK,CAAC6H,GAAwB,CAAE5b,KAAM,sBAE5C,MAAM2E,IAGR,IAAMoX,EACQ,KAAZ7S,GAA6B,KAAX4R,QAA0C/c,IAAzB8d,EAErC,OACE,uBACEzd,SAAQ,uCAAE,WAAOC,GAAP,qCAAAC,EAAA,sDACRD,EAAEE,iBACFod,EAAqB,IAFb,SAKN,IACE,UAAAR,OAAOC,oBAAP,SAAqBjM,QAAQgK,GAAwCN,GACrE,UAAAsC,OAAOC,oBAAP,SAAqBjM,QAAQiK,GAA8BlQ,GAC3D,UAAAiS,OAAOC,oBAAP,SAAqBjM,QAAQkK,GAA0ByB,GACvD,MAAMnW,GACN3G,QAAQC,MAAM,qEAAsE0G,GAVhF,MAYe,WAEf2O,EAAiBf,GAAyCtO,EAAOgB,EAFlD,gBAEuElH,GAAW,GAAO,GACxG+d,EAAoBlD,GAA4CtF,EAAgBuF,GAfhF,SAgBe+B,GAA4B1R,EAAS4R,EAAQgB,GAhB5D,OAgBAnB,EAhBA,OAiBAqB,EAA0BrB,EAAO3b,KACjCid,EAAgBD,EAAgBE,MAAM,KAAKC,OAAO,GAAG,GACrDT,EAnBA,+DAmB4EZ,EAnB5E,2BAmBqGmB,EAnBrG,oBAmB8H/S,GACpIyS,EAAqBD,GACrBpK,EAAS,IArBH,kDAuBNtT,QAAQC,MAAR,MACAqT,EAAQ,gDAAC,KAAKqJ,cAAN,iBAAC,EAAa1c,aAAd,aAAC,EAAoBmR,eAArB,QAAgC,SAxBlC,0DAAF,sDADV,UA6BE,gCACE,uBAAOgN,QAAQ,UAAf,uBACA,uBACE5a,GAAG,UACHtB,UAAQ,EACRF,KAAK,OACLqc,KAAK,WACLhd,YAAY,kBACZD,MAAO8J,EACP9I,SAAU,SAAC/B,GAAD,OAAOkd,EAAWld,EAAEgC,OAAOjB,UAEvC,0BAAUoC,GAAG,WAAb,SACG6Z,EAASpc,KAAI,SAACqd,GAAD,OACZ,wBAAwBld,MAAOkd,GAAlBA,QAGjB,wBACEtc,KAAK,SACLO,QAAO,uCAAE,WAAOlC,GAAP,yBAAAC,EAAA,+EAEgBkc,KAFhB,OAECG,EAFD,OAGC4B,EAAc5B,EAAOU,SAAmBpc,KAC5C,SAACud,GAAD,OAAiBA,EAAYF,aAE/BhB,EAAYiB,GACZjL,EAAS,IACT,IACE,UAAA6J,OAAOC,oBAAP,SAAqBjM,QAAQmK,GAA+B7U,KAAK8E,UAAUgT,IAC3E,MAAM5X,GACN3G,QAAQC,MAAM,qEAAsE0G,GAXjF,kDAcL2M,EAAQ,gDAAC,KAAKqJ,cAAN,iBAAC,EAAa1c,aAAd,aAAC,EAAoBmR,eAArB,QAAgC,SAdnC,0DAAF,sDAFT,uBAuBF,gCACE,uBAAOgN,QAAQ,SAAf,sBACA,uBACE5a,GAAG,SACHtB,UAAQ,EACRF,KAAK,OACLqc,KAAK,UACLjd,MAAO0b,EACP1a,SAAU,SAAC/B,GAAD,OAAOmd,EAAUnd,EAAEgC,OAAOjB,UAEtC,0BAAUoC,GAAG,UAAb,SACGiY,GAA4Bxa,KAAI,SAAC6b,GAAD,OAC/B,wBAAqB1b,MAAO0b,GAAfA,WAInB,gCACE,uBAAOsB,QAAQ,SAAf,uBACA,uBACE5a,GAAG,qBACHtB,UAAQ,EACRF,KAAK,OACLZ,MAAOyZ,EACPzY,SAAU,SAAC/B,GAAD,OAAOod,EAAsBpd,EAAEgC,OAAOjB,aAGpD,uBACEY,KAAK,SACLQ,UAAWub,EACX3c,MAAM,wBAEe,KAAtBsc,GAA4B,8BAAK,mBAAGzH,KAAMyH,EAAmBrb,OAAO,SAASoc,IAAI,aAAhD,wBACR1e,IAAzB8d,GACC,4CACW,mBACP5H,KAAM4H,EACNzH,SAAU,2BAFH,yCAQF,KAAVnW,GAAgB,0CAAaA,SC9MrBye,GAlCU,SAAC,GAA6C,IAAD,EAA3CjJ,EAA2C,EAA3CA,aACnBxP,EAAQyP,aAAc,SAACC,GAAD,OAAWA,EAAM1P,SACvCgB,EAAQyO,aAAc,SAACC,GAAD,OAAWA,EAAM1O,SAE7CwO,EAAY,UAAGA,SAAH,QAAmB,WAE/B,IAAIkJ,EAAyB,GAC7B,IACE,IAAMrJ,EAAiBf,GAAyCtO,EAAOgB,EAAOwO,OAAc1V,GAAW,GAAO,GACxG6e,EAAqBjF,GAAuCrE,GAClEqJ,EAAyBlY,KAAK8E,UAAUqT,OAAoB7e,EAAW,GACvE,MAAM4G,GACNgY,EAAyBjb,OAAOiD,GAGlC,IAAMkY,EAA6B,IAAI9I,KAAK,CAAC4I,GAAyB,CAAE3c,KAAM,qBAExE8c,EAAgC5I,IAAIC,gBAAgB0I,GAE1D,OACE,0BAASvR,MAAI,EAAb,UACE,gDACW,mBACP2I,KAAM6I,EACN1I,SAAU,4BAFH,0CAOX,qBAAK5V,MAAO,CAAE6V,SAAU,QAAxB,SAAmCsI,QC5BnCrM,GAAc,SAACpI,EAAkBS,GACrCT,EAAMC,aAAaoI,QAAQ,wBAAyB9L,KAAK8E,UAAUZ,IACnET,EAAMC,aAAaoI,QACjB,mBACA9L,KAAK8E,UAAU,CACbP,QAASd,EAAMsI,YAAYxH,QAC3BC,QAASf,EAAMsI,YAAYvH,WAG/Bf,EAAMC,aAAasI,cAAgB,QAG/BsM,GAAoB,CACxB,CACEjM,SAAU,cACVC,cAAe,CAEb,qJACA,uIACA,2IAGJ,CACED,SAAU,WAAYC,cAAe,CAEnC,uJAGJ,CACED,SAAU,oBACVC,cAAe,CACb,oKAGJ,CACED,SAAU,kBACVC,cAAe,CACf,sIACA,uJACA,mKACA,uKAGF,CACED,SAAU,UACVC,cAAe,CACb,uIACA,2IAGJ,CACED,SAAU,UACVC,cAAe,CACb,gKACA,8JACA,kLAyCSiM,GA/BC,WACd,OACE,wBAAO9a,UAAU,WAAjB,UACE,0BAAS1D,MAAO,CAAEK,OAAQ,iBAAkBC,aAAc,MAAOC,QAAS,OAA1E,UACE,yBAASP,MAAO,CAAEwS,YAAa,MAAOjS,QAAS,MAAOke,WAAY,QAAlE,oCACA,cAACC,GAAD,OAEF,gEACA,0BAAS1e,MAAO,CAAEK,OAAQ,iBAAkBC,aAAc,MAAOC,QAAS,OAA1E,UACE,kCAAS,+CACT,qBAAKmD,UAAU,0CAA0CoO,YAAa,SAACpI,GAAD,OAAsBoI,GAAYpI,EAAO,CAAEiV,MAAO,CAAE1a,MAAO,YAAc4N,WAAS,EAAxJ,mBAGA,qBAAKnO,UAAU,2CAA2CoO,YAAa,SAACpI,GAAD,OAAsBoI,GAAYpI,EAAO,CAAEkV,OAAQ,CAAE3a,MAAO,aAAe4N,WAAS,EAA3J,uBAIF,cAAC,EAAD,CAAkBM,gBAAiBoM,KACnC,0BAASzR,MAAI,EAAC9M,MAAO,CAAEK,OAAQ,iBAAkBC,aAAc,MAAOC,QAAS,OAA/E,UACE,yBAASP,MAAO,CAAEwS,YAAa,MAAOjS,QAAS,MAAOke,WAAY,QAAlE,8BACA,cAACI,EAAD,OAEF,oCACE,4CACA,cAAC,GAAD,IACA,cAAC,GAAD,WC/FJC,GAAmC,CACrCte,KAAM,uCACNb,OAAQ,GACR4E,QAAS,GACTS,eAAgB,CACdC,MAAO,CACLC,MAAO,CACL6Z,QAAS,CACP1f,aAAc,CACZqP,IAAK,sJAEP5I,YAAa,CACX,kBAAmB,6CAErB7G,UAAW,CACT+f,OAAQ,yGACRC,MAAO,iFAGXC,MAAO,CACL7f,aAAc,CACZqP,IAAK,wIAEP5I,YAAa,CACX,kBAAmB,6CAErB7G,UAAW,CACTkgB,cAAe,CACbne,WAAY,CACVC,OAAQ,UACRC,WAAY,YAKpBke,QAAS,CACP/f,aAAc,CACZqP,IAAK,0IAEP5I,YAAa,CACX,kBAAmB,6CAErB7G,UAAW,CACT6E,KAAM,CACJ9C,WAAY,CACVC,OAAQ,UACRC,WAAY,UAGhBme,MAAO,CACLre,WAAY,CACVC,OAAQ,QACRC,WAAY,UAGhBoe,aAAc,UAQpBC,GAA0B,uCAAG,WACjCngB,EACAogB,GAFiC,uBAAA1f,EAAA,8DAKZP,IAAjBigB,IACFA,EAAe,IAAIzO,OAEjB,UAAW3R,EAAc4F,gBARI,uBASRU,OAAOqS,OAC5B3Y,EAAc4F,eAAeC,MAAMC,OAVN,4CASpBrG,EAToB,KAYvB6S,EAAe7S,EAASQ,aAAaqP,SAEVnP,IAA/BV,EAASQ,aAAaC,WACLC,IAAjBmS,EAf2B,yBAkBDnS,KADtBkgB,EAAoBD,EAAapO,IAAIM,IAjBd,kCAmBC1C,EACxB0C,GApBuB,QAmBzB+N,EAnByB,OAsBzBD,EAAarO,IAAIO,EAAc+N,GAtBN,eAwB3B5gB,EAASQ,aAAaC,KAAOmgB,EAxBF,UAyBrBF,GAA2BE,EAAmBD,GAzBzB,4DA6B1BpgB,GA7B0B,4CAAH,wDChBjBsgB,I,MAjCC,WACd,MAA0C1gB,qBAA1C,mBAAOI,EAAP,KAAsBmG,EAAtB,KAMA,YAJsBhG,IAAlBH,GACFmgB,GAA2BT,IAAkClN,KAAKrM,QAG9ChG,IAAlBH,EACM,6BAIR,qBAAKsE,UAAU,UAAf,SACE,eAAC,IAAD,WACE,qBAAKA,UAAU,oBAAf,SACE,eAAC,EAAD,CACEqB,qBAAsB3F,EACtBugB,cAAc,SACdC,sBAAsB,UACtBC,YAAY,EACZC,SAAU,CAtBJ,OAiBR,UAOE,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,CAAYC,IA1BN,UA6BV,cAAC,GAAD,WCjCOC,OARf,WACE,OACE,qBAAKtc,UAAU,MAAM1D,MAAO,CAAC0T,MAAO,OAAQC,OAAQ,QAApD,SACE,cAAC,GAAD,OCMAsM,GAAcC,QACW,cAA7BvD,OAAOwD,SAASC,UAEe,UAA7BzD,OAAOwD,SAASC,UAEhBzD,OAAOwD,SAASC,SAASpT,MAAM,2DAyCnC,SAASqT,GAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACT1O,MAAK,SAAC+O,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BzhB,QAAQyJ,IACN,+GAKEsX,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlBnhB,QAAQyJ,IAAI,sCAGRsX,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,WAO5BS,OAAM,SAAC3hB,GACND,QAAQC,MAAM,4CAA6CA,MChGjE,IAYe4hB,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB3P,MAAK,YAAkD,IAA/C4P,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SFcnB,SAAkB1B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI9K,IAAIwM,mBAAwBvF,OAAOwD,SAAS1K,MACpD0M,SAAWxF,OAAOwD,SAASgC,OAIvC,OAGFxF,OAAOyF,iBAAiB,QAAQ,WAC9B,IAAM9B,EAAK,UAAM4B,mBAAN,sBACPjC,KAgEV,SAAiCK,EAAeC,GAE9C8B,MAAM/B,EAAO,CACXgC,QAAS,CAAE,iBAAkB,YAE5B1Q,MAAK,SAAC3E,GAEL,IAAMsV,EAActV,EAASqV,QAAQlR,IAAI,gBAEnB,MAApBnE,EAASuV,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM9Q,MAAK,SAAC+O,GAClCA,EAAagC,aAAa/Q,MAAK,WAC7B+K,OAAOwD,SAASyC,eAKpBvC,GAAgBC,EAAOC,MAG1Ba,OAAM,WACL5hB,QAAQyJ,IAAI,oEAtFV4Z,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM9Q,MAAK,WACjCpS,QAAQyJ,IACN,+GAMJoX,GAAgBC,EAAOC,OEnC/BuC,GAKAzB,O","file":"static/js/main.bafc9ca6.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport { ArgumentType, TaskSpec, TypeSpecType } from \"../componentSpec\";\r\n\r\ninterface ArgumentsEditorProps {\r\n  taskSpec: TaskSpec;\r\n  closeEditor?: () => void;\r\n  setArguments?: (args: Record<string, ArgumentType>) => void;\r\n}\r\n\r\nconst getPatternForTypeSpec = (typeSpec?: TypeSpecType) => {\r\n  // TODO: Implement\r\n  return undefined;\r\n};\r\n\r\nconst ArgumentsEditor = ({\r\n  taskSpec,\r\n  closeEditor,\r\n  setArguments,\r\n}: ArgumentsEditorProps) => {\r\n  const [currentArguments, setCurrentArguments] = useState<\r\n    Record<string, ArgumentType>\r\n  >({ ...taskSpec.arguments });\r\n\r\n  const componentSpec = taskSpec.componentRef.spec;\r\n  if (componentSpec === undefined) {\r\n    console.error(\r\n      \"ArgumentsEditor called with missing taskSpec.componentRef.spec\",\r\n      taskSpec\r\n    );\r\n    return <></>;\r\n  }\r\n\r\n  const inputSpecs = componentSpec.inputs ?? [];\r\n\r\n  return (\r\n    <form\r\n      onSubmit={async (e) => {\r\n        e.preventDefault();\r\n      }}\r\n      // Does not work\r\n      // draggable={false}\r\n      style={{\r\n        position: \"fixed\",\r\n        display: \"table\",\r\n        borderSpacing: \"5px\",\r\n        background: \"white\",\r\n        border: \"1px solid black\",\r\n        borderRadius: \"4px\",\r\n        padding: \"15px\",\r\n        // Does not work\r\n        // zIndex: 11,\r\n      }}\r\n    >\r\n      <legend>Input arguments for {componentSpec.name}</legend>\r\n      <div>\r\n        {inputSpecs.map((inputSpec) => {\r\n          const inputName = inputSpec.name;\r\n          let value: string | undefined = undefined;\r\n          let placeholder: string | undefined = undefined;\r\n          const argument = currentArguments[inputName];\r\n          if (argument === undefined) {\r\n            value = inputSpec.default;\r\n          } else {\r\n            if (typeof argument === \"string\") {\r\n              value = argument;\r\n            } else if (\"taskOutput\" in argument) {\r\n              placeholder = `<from task ${argument.taskOutput.taskId} / ${argument.taskOutput.outputName}>`;\r\n            } else if (\"graphInput\" in argument) {\r\n              placeholder = `<from graph input ${argument.graphInput.inputName}>`;\r\n            } else {\r\n              placeholder = \"<reference>\";\r\n            }\r\n          }\r\n\r\n          const argumentIsRequiredButMissing =\r\n            !(inputName in currentArguments) &&\r\n            inputSpec.optional !== true &&\r\n            inputSpec.default === undefined;\r\n\r\n          return (\r\n            <div\r\n              key={inputName}\r\n              style={{\r\n                display: \"table-row\",\r\n              }}\r\n            >\r\n              <label\r\n                style={{\r\n                  textAlign: \"right\",\r\n                  display: \"table-cell\",\r\n                  whiteSpace: \"nowrap\",\r\n                }}\r\n              >\r\n                <span>\r\n                  {inputName} ({inputSpec.type?.toString() ?? \"Any\"}):{\" \"}\r\n                </span>\r\n              </label>\r\n              <input\r\n                style={{\r\n                  display: \"table-cell\",\r\n                }}\r\n                placeholder={placeholder}\r\n                required={argumentIsRequiredButMissing}\r\n                value={value ?? \"\"}\r\n                pattern={getPatternForTypeSpec(inputSpec.type)}\r\n                onChange={(e) => {\r\n                  currentArguments[inputName] = e.target.value;\r\n                  setCurrentArguments({ ...currentArguments });\r\n                }}\r\n              />\r\n              <div\r\n                style={{\r\n                  display: \"table-cell\",\r\n                }}\r\n              >\r\n                <button\r\n                  type=\"button\"\r\n                  title=\"Reset to default\"\r\n                  onClick={(e) => {\r\n                    delete currentArguments[inputName];\r\n                    setCurrentArguments({ ...currentArguments });\r\n                  }}\r\n                  disabled={!(inputName in currentArguments)}\r\n                >\r\n                  ⌧\r\n                </button>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <button type=\"button\" onClick={closeEditor}>\r\n        Close\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        onClick={(e) => {\r\n          setArguments?.(currentArguments);\r\n          closeEditor?.();\r\n        }}\r\n      >\r\n        Apply\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\n//export default memo(ArgumentsEditor);\r\nexport default ArgumentsEditor;\r\n","import { memo, useState } from 'react';\r\nimport {\r\n  ArgumentType,\r\n  InputSpec,\r\n  OutputSpec,\r\n  TaskSpec,\r\n} from '../componentSpec';\r\n\r\nimport { Handle, Position, NodeProps, HandleType } from 'react-flow-renderer';\r\n\r\nimport ArgumentsEditor from './ArgumentsEditor';\r\n\r\nconst inputHandlePosition = Position.Top;\r\nconst outputHandlePosition = Position.Bottom;\r\n\r\ntype InputOrOutputSpec = InputSpec | OutputSpec;\r\n\r\nconst MISSING_ARGUMENT_CLASS_NAME = \"missing-argument\";\r\n\r\nfunction generateHandles(\r\n  ioSpecs: InputOrOutputSpec[],\r\n  handleType: HandleType,\r\n  position: Position,\r\n  idPrefix: string,\r\n  inputsWithMissingArguments?: string[],\r\n): JSX.Element[] {\r\n  let handleComponents = [];\r\n  const numHandles = ioSpecs.length;\r\n  for (let i = 0; i < numHandles; i++) {\r\n    const ioSpec = ioSpecs[i];\r\n    const id = idPrefix + ioSpec.name;\r\n    const relativePosition = (i + 1) / (numHandles + 1);\r\n    const positionPercentString = String(100 * relativePosition) + \"%\";\r\n    const style =\r\n      position === Position.Top || position === Position.Bottom\r\n        ? { left: positionPercentString }\r\n        : { top: positionPercentString };\r\n    // TODO: Handle complex type specs\r\n    const ioTypeName = ioSpec.type?.toString() ?? \"Any\";\r\n    let classNames = [`handle_${idPrefix}${ioTypeName}`.replace(\" \", \"_\")];\r\n    const isInvalid = (inputsWithMissingArguments ?? []).includes(ioSpec.name);\r\n    if (isInvalid) {\r\n      classNames.push(MISSING_ARGUMENT_CLASS_NAME);\r\n    }\r\n    classNames = classNames.map((className) => className.replace(\" \", \"_\"));\r\n    handleComponents.push(\r\n      <Handle\r\n        key={id}\r\n        type={handleType}\r\n        position={position}\r\n        id={id}\r\n        style={style}\r\n        isConnectable={true}\r\n        title={ioSpec.name + \" : \" + ioTypeName}\r\n        className={classNames.join(\" \")}\r\n      />\r\n    );\r\n  }\r\n  return handleComponents;\r\n}\r\n\r\nfunction generateInputHandles(inputSpecs: InputSpec[], inputsWithInvalidArguments?: string[]): JSX.Element[] {\r\n  return generateHandles(inputSpecs, \"target\", inputHandlePosition, \"input_\", inputsWithInvalidArguments);\r\n}\r\n\r\nfunction generateOutputHandles(outputSpecs: OutputSpec[]): JSX.Element[] {\r\n  return generateHandles(outputSpecs, \"source\", outputHandlePosition, \"output_\");\r\n}\r\n\r\nexport interface ComponentTaskNodeProps {\r\n  taskSpec: TaskSpec,\r\n  taskId?: string,\r\n  setArguments?: (args: Record<string, ArgumentType>) => void;\r\n};\r\n\r\nconst ComponentTaskNode = ({ data }: NodeProps<ComponentTaskNodeProps>) => {\r\n  const [isArgumentsEditorOpen, setIsArgumentsEditorOpen] = useState(false);\r\n\r\n  const taskSpec = data.taskSpec;\r\n  const componentSpec = taskSpec.componentRef.spec;\r\n  if (componentSpec === undefined) {\r\n    return (<></>);\r\n  }\r\n\r\n  const label = componentSpec.name ?? \"<component>\";\r\n  const inputsWithInvalidArguments = (componentSpec.inputs ?? [])\r\n    .filter(\r\n      (inputSpec) =>\r\n        inputSpec.optional !== true &&\r\n        inputSpec.default === undefined &&\r\n        !(inputSpec.name in (taskSpec.arguments ?? {}))\r\n    )\r\n    .map((inputSpec) => inputSpec.name);\r\n  const inputHandles = generateInputHandles(componentSpec.inputs ?? [], inputsWithInvalidArguments);\r\n  const outputHandles = generateOutputHandles(componentSpec.outputs ?? []);\r\n  const handleComponents = inputHandles.concat(outputHandles);\r\n\r\n  const closeArgumentsEditor = () => {\r\n    setIsArgumentsEditorOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      onDoubleClick={() => {\r\n        setIsArgumentsEditorOpen(!isArgumentsEditorOpen);\r\n      }}\r\n      title={data.taskId}\r\n    >\r\n      {label}\r\n      {handleComponents}\r\n      {isArgumentsEditorOpen && (\r\n        <ArgumentsEditor\r\n          taskSpec={taskSpec}\r\n          closeEditor={closeArgumentsEditor}\r\n          setArguments={data.setArguments}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(ComponentTaskNode);\r\n","import React, { DragEvent, useState } from \"react\";\r\nimport ReactFlow, {\r\n  ArrowHeadType,\r\n  Connection,\r\n  Edge,\r\n  ElementId,\r\n  Elements,\r\n  isEdge,\r\n  isNode,\r\n  Node,\r\n  OnLoadParams,\r\n  ReactFlowProps,\r\n  XYPosition,\r\n} from \"react-flow-renderer\";\r\n\r\nimport {\r\n  ArgumentType,\r\n  ComponentSpec,\r\n  GraphInputArgument,\r\n  GraphSpec,\r\n  InputSpec,\r\n  OutputSpec,\r\n  TaskOutputArgument,\r\n  TaskSpec,\r\n} from \"../componentSpec\";\r\nimport ComponentTaskNode, { ComponentTaskNodeProps } from \"./ComponentTaskNode\";\r\n\r\nexport interface GraphComponentSpecFlowProps\r\n  extends Omit<ReactFlowProps, \"elements\"> {\r\n  initialComponentSpec?: ComponentSpec\r\n}\r\n\r\nconst nodeTypes = {\r\n  task: ComponentTaskNode,\r\n};\r\n\r\nconst GraphComponentSpecFlow = ({\r\n  children,\r\n  initialComponentSpec = { implementation: { graph: { tasks: {} } } },\r\n  ...rest\r\n}: GraphComponentSpecFlowProps) => {\r\n  const [reactFlowInstance, setReactFlowInstance] = useState<OnLoadParams>();\r\n  const [originalComponentSpec, setComponentSpec] =\r\n    useState<ComponentSpec>(initialComponentSpec);\r\n  let componentSpec = originalComponentSpec;\r\n\r\n  if (! ('graph' in componentSpec.implementation)) {\r\n    // Only graph components are supported\r\n    return <></>;\r\n  }\r\n  let graphSpec = componentSpec.implementation.graph;\r\n\r\n  const nodes = Object.entries(graphSpec.tasks).map<Node<ComponentTaskNodeProps>>(\r\n    ([taskId, taskSpec]) => {\r\n      let position: XYPosition = { x: 0, y: 0 };\r\n      if (taskSpec.annotations !== undefined) {\r\n        try {\r\n          const layoutAnnotation = taskSpec.annotations[\r\n            \"editor.position\"\r\n          ] as string;\r\n          const decodedPosition = JSON.parse(layoutAnnotation);\r\n          position = { x: decodedPosition[\"x\"], y: decodedPosition[\"y\"] };\r\n        } catch (err) {}\r\n      }\r\n\r\n      return {\r\n        id: taskId,\r\n        data: {\r\n          taskSpec: taskSpec,\r\n          taskId: taskId,\r\n          setArguments: (args) => setTaskArguments(taskId, args),\r\n        },\r\n        position: position,\r\n        type: \"task\",\r\n      };\r\n    }\r\n  );\r\n\r\n  const inputNodes = (componentSpec.inputs ?? []).map<Node>(\r\n    (inputSpec) => {\r\n      let position: XYPosition = { x: 0, y: 0 };\r\n      if (inputSpec.annotations !== undefined) {\r\n        try {\r\n          const layoutAnnotation = inputSpec.annotations[\r\n            \"editor.position\"\r\n          ] as string;\r\n          const decodedPosition = JSON.parse(layoutAnnotation);\r\n          position = { x: decodedPosition[\"x\"], y: decodedPosition[\"y\"] };\r\n        } catch (err) {}\r\n      }\r\n      return {\r\n        id: inputSpec.name,\r\n        data: { label: inputSpec.name },\r\n        position: position,\r\n        type: \"input\",\r\n      };\r\n    }\r\n  );\r\n\r\n  const outputNodes = (componentSpec.outputs ?? []).map<Node>(\r\n    (outputSpec) => {\r\n      let position: XYPosition = { x: 0, y: 0 };\r\n      if (outputSpec.annotations !== undefined) {\r\n        try {\r\n          const layoutAnnotation = outputSpec.annotations[\r\n            \"editor.position\"\r\n          ] as string;\r\n          const decodedPosition = JSON.parse(layoutAnnotation);\r\n          position = { x: decodedPosition[\"x\"], y: decodedPosition[\"y\"] };\r\n        } catch (err) {}\r\n      }\r\n      return {\r\n        id: outputSpec.name,\r\n        data: { label: outputSpec.name },\r\n        position: position,\r\n        type: \"output\",\r\n      };\r\n    }\r\n  );\r\n\r\n  const edges: Edge[] = Object.entries(graphSpec.tasks).flatMap(\r\n    ([taskId, taskSpec]) => {\r\n      return Object.entries(taskSpec.arguments ?? {}).flatMap(\r\n        ([inputName, argument]) => {\r\n          if (typeof argument === \"string\") {\r\n            return [];\r\n          }\r\n          if (\"taskOutput\" in argument) {\r\n            const taskOutput = argument.taskOutput;\r\n            const edge: Edge = {\r\n              id: `${taskOutput.taskId}_${taskOutput.outputName}-${taskId}_${inputName}`,\r\n              source: taskOutput.taskId,\r\n              sourceHandle: `output_${taskOutput.outputName}`,\r\n              target: taskId,\r\n              targetHandle: `input_${inputName}`,\r\n              arrowHeadType: ArrowHeadType.ArrowClosed,\r\n            };\r\n            return [edge];\r\n          } else if (\"graphInput\" in argument) {\r\n            const graphInput = argument.graphInput;\r\n            const edge: Edge = {\r\n              id: `Input_${graphInput.inputName}-${taskId}_${inputName}`,\r\n              source: graphInput.inputName,\r\n              //sourceHandle: undefined,\r\n              //sourceHandle: \"Input\",\r\n              sourceHandle: null,\r\n              target: taskId,\r\n              targetHandle: `input_${inputName}`,\r\n              arrowHeadType: ArrowHeadType.ArrowClosed,\r\n            };\r\n            return [edge];\r\n          } else {\r\n            console.error(\"Impossible task input argument kind: \", argument);\r\n            return [];\r\n          }\r\n        }\r\n      );\r\n    }\r\n  );\r\n\r\n  const outputEdges: Edge[] = Object.entries(graphSpec.outputValues ?? {}).map(\r\n    ([outputName, argument]) => {\r\n      const taskOutput = argument.taskOutput;\r\n      const edge: Edge = {\r\n        id: `${taskOutput.taskId}_${taskOutput.outputName}-Output_${outputName}`,\r\n        source: taskOutput.taskId,\r\n        sourceHandle: `output_${taskOutput.outputName}`,\r\n        target: outputName,\r\n        //targetHandle: undefined,\r\n        //targetHandle: \"Output\",\r\n        targetHandle: null,\r\n        arrowHeadType: ArrowHeadType.ArrowClosed,\r\n      };\r\n      return edge;\r\n    }\r\n  );\r\n\r\n  const elements = (nodes as Elements).concat(inputNodes).concat(outputNodes).concat(edges).concat(outputEdges);\r\n  \r\n  const replaceComponentSpec = (newComponentSpec: ComponentSpec) => {\r\n    componentSpec = newComponentSpec;\r\n    setComponentSpec(newComponentSpec);\r\n  };\r\n\r\n  const replaceGraphSpec = (newGraphSpec: GraphSpec) => {\r\n    graphSpec = newGraphSpec;\r\n    replaceComponentSpec({ ...componentSpec, implementation: { graph: graphSpec } });\r\n  };\r\n\r\n  const setTaskArguments = (\r\n    taskId: string,\r\n    taskArguments?: Record<string, ArgumentType>,\r\n  ) => {\r\n    let newGraphSpec: GraphSpec = {\r\n      ...graphSpec,\r\n      tasks: { ...graphSpec.tasks },\r\n    };\r\n    newGraphSpec.tasks[taskId] = {\r\n      ...graphSpec.tasks[taskId],\r\n      arguments: taskArguments,\r\n    };\r\n    replaceGraphSpec(newGraphSpec);\r\n  };\r\n\r\n  const setTaskArgument = (\r\n    taskId: string,\r\n    inputName: string,\r\n    argument?: ArgumentType\r\n  ) => {\r\n    const oldTaskSpec = graphSpec.tasks[taskId];\r\n    const oldTaskSpecArguments = oldTaskSpec.arguments;\r\n    let newTaskSpecArguments: Record<string, ArgumentType> = {\r\n      ...oldTaskSpecArguments,\r\n    };\r\n    if (argument === undefined) {\r\n      delete newTaskSpecArguments[inputName];\r\n    } else {\r\n      newTaskSpecArguments[inputName] = argument;\r\n    }\r\n    setTaskArguments(taskId, newTaskSpecArguments);\r\n  };\r\n\r\n  const removeTaskArgument = (taskId: string, inputName: string) =>\r\n    setTaskArgument(taskId, inputName, undefined);\r\n\r\n  const setGraphOutputValue = (\r\n    outputName: string,\r\n    outputValue?: TaskOutputArgument\r\n  ) => {\r\n    let newGraphOutputValues = { ...graphSpec.outputValues };\r\n    if (outputValue === undefined) {\r\n      delete newGraphOutputValues[outputName];\r\n    } else {\r\n      newGraphOutputValues[outputName] = outputValue;\r\n    }\r\n    graphSpec = { ...graphSpec, outputValues: newGraphOutputValues };\r\n    replaceGraphSpec(graphSpec);\r\n  };\r\n\r\n  const removeGraphOutputValue = (outputName: string) =>\r\n    setGraphOutputValue(outputName);\r\n\r\n  const addConnection = (connection: Connection | Edge) => {\r\n    if (connection.source === null || connection.target === null) {\r\n      console.error(\r\n        \"addConnection called with missing source or target: \",\r\n        connection\r\n      );\r\n      return;\r\n    }\r\n\r\n    const targetTaskInputName = connection.targetHandle?.replace(/^input_/, \"\");\r\n    const sourceTaskOutputName = connection.sourceHandle?.replace(/^output_/, \"\");\r\n\r\n    if (sourceTaskOutputName !== undefined) {\r\n      // Source is task output\r\n      const taskOutputArgument: TaskOutputArgument = {\r\n        taskOutput: {\r\n          taskId: connection.source,\r\n          outputName: sourceTaskOutputName,\r\n        },\r\n      };\r\n\r\n      if (targetTaskInputName !== undefined) {\r\n        // Target is task input\r\n        setTaskArgument(\r\n          connection.target,\r\n          targetTaskInputName,\r\n          taskOutputArgument\r\n        );\r\n      } else {\r\n        // Target is graph output\r\n        setGraphOutputValue(connection.target, taskOutputArgument);\r\n        // TODO: Perhaps propagate type information\r\n      }\r\n    } else {\r\n      // Source is graph input\r\n      const graphInputName = connection.source;\r\n      const graphInputArgument: GraphInputArgument = {\r\n        graphInput: {\r\n          inputName: graphInputName,\r\n        },\r\n      };\r\n      if (targetTaskInputName !== undefined) {\r\n        // Target is task input\r\n        setTaskArgument(\r\n          connection.target,\r\n          targetTaskInputName,\r\n          graphInputArgument\r\n        );\r\n        // TODO: Perhaps propagate type information\r\n      } else {\r\n        // Target is graph output\r\n        console.error(\r\n          \"addConnection: Cannot directly connect graph input to graph output: \",\r\n          connection\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const onConnect = (params: Connection | Edge) => {\r\n    addConnection(params);\r\n  };\r\n\r\n  const removeEdge = (edge: Edge) => {\r\n    const inputName = edge.targetHandle?.replace(/^input_/, \"\");\r\n\r\n    if (inputName !== undefined) {\r\n      removeTaskArgument(edge.target, inputName);\r\n    } else {\r\n      removeGraphOutputValue(edge.target);\r\n    }\r\n  };\r\n\r\n  const removeComponentInput = (inputName: string) => {\r\n    // Removing the outcoming edges\r\n    for (const [taskId, taskSpec] of Object.entries(graphSpec.tasks)) {\r\n      for (const [inputName, argument] of Object.entries(\r\n        taskSpec.arguments ?? {}\r\n      )) {\r\n        if (typeof argument !== \"string\" && \"graphInput\" in argument) {\r\n          if (argument.graphInput.inputName === inputName) {\r\n            removeTaskArgument(taskId, inputName);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // Not checking the sources of graph outputs, since they cannot be directly connected to the graph inputs\r\n\r\n    // Removing the input itself\r\n    const newInputs = (componentSpec.inputs ?? []).filter(\r\n      (inputSpec) => inputSpec.name !== inputName\r\n    );\r\n    componentSpec = { ...componentSpec, inputs: newInputs };\r\n    replaceComponentSpec(componentSpec);\r\n  };\r\n\r\n  const removeComponentOutput = (outputName: string) => {\r\n    removeGraphOutputValue(outputName);\r\n    // Removing the output itself\r\n    const newOutputs = (componentSpec.outputs ?? []).filter(\r\n      (outputSpec) => outputSpec.name !== outputName\r\n    );\r\n    componentSpec = { ...componentSpec, outputs: newOutputs };\r\n    replaceComponentSpec(componentSpec);\r\n  };\r\n\r\n  const removeTask = (taskId: string) => {\r\n    // Removing the outcoming edges\r\n    for (const [taskId, taskSpec] of Object.entries(graphSpec.tasks)) {\r\n      for (const [inputName, argument] of Object.entries(\r\n        taskSpec.arguments ?? {}\r\n      )) {\r\n        if (typeof argument !== \"string\" && \"taskOutput\" in argument) {\r\n          if (argument.taskOutput.taskId === taskId) {\r\n            removeTaskArgument(taskId, inputName);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Removing outcoming edges that go to graph outputs.\r\n    // ? Should we delete the outputs themselves\r\n    const newGraphOutputValues = Object.fromEntries(\r\n      Object.entries(graphSpec.outputValues ?? {}).filter(\r\n        ([_, argument]) => argument.taskOutput.taskId !== taskId\r\n      )\r\n    );\r\n    graphSpec = { ...graphSpec, outputValues: newGraphOutputValues };\r\n\r\n    // Removing the task\r\n    let newGraphSpec: GraphSpec = {\r\n      ...graphSpec,\r\n      tasks: { ...graphSpec.tasks },\r\n    };\r\n    delete newGraphSpec.tasks[taskId];\r\n    replaceGraphSpec(newGraphSpec);\r\n  };\r\n\r\n  const removeNode = (node: Node) => {\r\n    // TODO: Use global constants for node types\r\n    if (node.type === \"input\") {\r\n      const inputName = node.id;\r\n      removeComponentInput(inputName);\r\n    } else if (node.type === \"output\") {\r\n      const outputName = node.id;\r\n      removeComponentOutput(outputName);\r\n    } else if (node.type === \"task\") {\r\n      const taskId = node.id;\r\n      removeTask(taskId);\r\n    } else {\r\n      console.log(\"removeNode: Unexpected note type: \", node);\r\n    }\r\n  };\r\n\r\n  const onElementsRemove = (elementsToRemove: Elements) => {\r\n    for (const element of elementsToRemove) {\r\n      if (isEdge(element)) {\r\n        removeEdge(element);\r\n      }\r\n    }\r\n    for (const element of elementsToRemove) {\r\n      if (isNode(element)) {\r\n        removeNode(element);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onEdgeUpdate = (oldEdge: Edge, newConnection: Connection) => {\r\n    removeEdge(oldEdge);\r\n    addConnection(newConnection);\r\n  };\r\n\r\n  const onLoad = (_reactFlowInstance: OnLoadParams) =>\r\n    setReactFlowInstance(_reactFlowInstance);\r\n\r\n  const onDragOver = (event: DragEvent) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = \"move\";\r\n  };\r\n\r\n  const makeNameUniqueByAddingIndex = (name: string, existingNames: Set<string>): ElementId => {\r\n    let finalName = name;\r\n    let index = 1;\r\n    while (existingNames.has(finalName)) {\r\n      index++;\r\n      finalName = name + \" \" + index.toString();\r\n    }\r\n    return finalName;\r\n  };\r\n\r\n  const getUniqueInputName = (name: string = \"Input\") => {\r\n    return makeNameUniqueByAddingIndex(\r\n      name,\r\n      new Set(componentSpec.inputs?.map((inputSpec) => inputSpec.name))\r\n    );\r\n  };\r\n\r\n  const getUniqueOutputName = (name: string = \"Output\") => {\r\n    return makeNameUniqueByAddingIndex(\r\n      name,\r\n      new Set(componentSpec.outputs?.map((outputSpec) => outputSpec.name))\r\n    );\r\n  };\r\n\r\n  const getUniqueTaskName = (name: string = \"Task\") => {\r\n    return makeNameUniqueByAddingIndex(\r\n      name,\r\n      new Set(Object.keys(graphSpec.tasks))\r\n    );\r\n  };\r\n\r\n  const onDrop = (event: DragEvent) => {\r\n    event.preventDefault();\r\n\r\n    if (reactFlowInstance) {\r\n      const droppedData = event.dataTransfer.getData(\"application/reactflow\");\r\n      if (droppedData === \"\") {\r\n        return;\r\n      }\r\n      const droppedDataObject = JSON.parse(droppedData);\r\n      const nodeType = Object.keys(droppedDataObject)[0];\r\n      const nodeData = droppedDataObject[nodeType];\r\n      \r\n      // Correcting the position using the drag point location information\r\n      let dragOffsetX = 0;\r\n      let dragOffsetY = 0;\r\n      const dragStartOffsetData = event.dataTransfer.getData(\"DragStart.offset\");\r\n      if (dragStartOffsetData !== \"\") {\r\n        const dragStartOffset = JSON.parse(dragStartOffsetData);\r\n        // Hack to work around Chrome's draggable anchor bug. TODO: Remove once Chrome is fixed\r\n        dragOffsetX = dragStartOffset.offsetX * 0.68 ?? 0;\r\n        dragOffsetY = dragStartOffset.offsetY * 0.64 ?? 0;\r\n      }\r\n\r\n      // Node position. Offsets should be included in projection, so that they snap to the grid.\r\n      // Otherwise the dropped nodes will be out of phase with the rest of the nodes even when snapping.\r\n      let position = reactFlowInstance.project({\r\n        x: event.clientX - dragOffsetX,\r\n        y: event.clientY - dragOffsetY,\r\n      });\r\n\r\n      const nodePosition = { x: position.x, y: position.y };\r\n      const positionAnnotations = {\r\n        \"editor.position\": JSON.stringify(nodePosition),\r\n      }\r\n      if (nodeType === \"task\") {\r\n        const taskSpec = nodeData as TaskSpec;\r\n        const mergedAnnotations = {\r\n          ...taskSpec.annotations,\r\n          ...positionAnnotations,\r\n        };\r\n        taskSpec.annotations = mergedAnnotations;\r\n        const taskSpecWithAnnotation: TaskSpec = {\r\n          ...taskSpec,\r\n          annotations: mergedAnnotations,\r\n        };\r\n        const taskId = getUniqueTaskName(taskSpec.componentRef.spec?.name ?? \"Task\");\r\n        graphSpec = { ...graphSpec, tasks: { ...graphSpec.tasks } };\r\n        graphSpec.tasks[taskId] = taskSpecWithAnnotation;\r\n        replaceGraphSpec(graphSpec);\r\n      } else if (nodeType === \"input\") {\r\n        const inputId = getUniqueInputName();\r\n        const inputSpec: InputSpec = {\r\n          name: inputId,\r\n          annotations: positionAnnotations,\r\n        };\r\n        const inputs = (componentSpec.inputs ?? []).concat([inputSpec]);\r\n        componentSpec = { ...componentSpec, inputs: inputs };\r\n        replaceComponentSpec(componentSpec);\r\n      } else if (nodeType === \"output\") {\r\n        const outputId = getUniqueOutputName();\r\n        const outputSpec: OutputSpec = {\r\n          name: outputId,\r\n          annotations: positionAnnotations,\r\n        };\r\n        const outputs = (componentSpec.outputs ?? []).concat([outputSpec]);\r\n        componentSpec = { ...componentSpec, outputs: outputs };\r\n        replaceComponentSpec(componentSpec);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ReactFlow\r\n      {...rest}\r\n      elements={elements}\r\n      nodeTypes={nodeTypes}\r\n      onConnect={onConnect}\r\n      onDragOver={onDragOver}\r\n      onDrop={onDrop}\r\n      onEdgeUpdate={onEdgeUpdate}\r\n      onElementsRemove={onElementsRemove}\r\n      onLoad={onLoad}\r\n    >\r\n      {children}\r\n    </ReactFlow>\r\n  );\r\n};\r\n\r\nexport default GraphComponentSpecFlow;\r\n","import yaml from \"js-yaml\";\r\nimport localForage from \"localforage\";\r\nimport { ComponentSpec, ComponentReference } from \"./componentSpec\";\r\n\r\n// const COMPONENT_FILE_NAME_SUFFIX = \"component.yaml\";\r\n// const COMPONENT_FILE_MAX_SIZE = 100000;\r\nconst SEARCH_CACHE_NAME = \"https://api.github.com/search\";\r\nconst BLOB_CACHE_NAME = \"raw.githubusercontent.com/.../component.yaml\";\r\n\r\n// IndexedDB: DB and table names\r\nconst DB_NAME = \"components\";\r\nconst HASH_TO_CONTENT_DB_TABLE_NAME = \"hash_to_data\";\r\nconst HASH_TO_COMPONENT_NAME_DB_TABLE_NAME = \"hash_to_component_name\";\r\nconst URL_TO_HASH_DB_TABLE_NAME = \"url_to_hash\";\r\nconst HASH_TO_URL_DB_TABLE_NAME = \"hash_to_url\";\r\nconst URL_PROCESSING_VERSION_TABLE_NAME = \"url_version\";\r\nconst CURRENT_URL_PROCESSING_VERSION = 1;\r\nconst BAD_HASHES_TABLE_NAME = \"bad_hashes\";\r\n\r\n\r\nexport const httpGetWithCache = async (\r\n  urlOrRequest: string | RequestInfo,\r\n  cacheName: string,\r\n  updateIfInCache: boolean = false\r\n): Promise<Response> => {\r\n  const cache = await caches.open(cacheName);\r\n  const response = await cache.match(urlOrRequest);\r\n  if (response !== undefined) {\r\n    if (updateIfInCache) {\r\n      cache.add(urlOrRequest);\r\n    }\r\n    return response;\r\n  }\r\n  await cache.add(urlOrRequest);\r\n  const response2 = await cache.match(urlOrRequest);\r\n  if (response2 === undefined) {\r\n    return Promise.reject(\"Added object to cache, but counld not find it\");\r\n  }\r\n  return response2;\r\n};\r\n\r\n\r\nexport const searchGitHubCodeWithCache = async (\r\n  query: string,\r\n  page = 1,\r\n  sort = \"indexed\",\r\n  order = \"desc\",\r\n): Promise<any> => {\r\n  // TODO: Paging\r\n  const encodedQuery = encodeURIComponent(query);\r\n  const encodedSort = encodeURIComponent(sort);\r\n  const encodedOrder = encodeURIComponent(order);\r\n  const searchUrl = `https://api.github.com/search/code?q=${encodedQuery}&sort=${encodedSort}&order=${encodedOrder}&per_page=100&page=${page}`;\r\n  const response = await httpGetWithCache(searchUrl, SEARCH_CACHE_NAME, true);\r\n  return response.json();\r\n};\r\n\r\n\r\nconst githubHtmlUrlToDownloadUrl = (htmlUrl: string): string => {\r\n  // https://github.com/               kubeflow/pipelines/blob/24bc9162a56c2fe3c50947d655ef280f71ba058f/components/gcp/dataflow/launch_flex_template/component.yaml\r\n  // https://raw.githubusercontent.com/kubeflow/pipelines     /24bc9162a56c2fe3c50947d655ef280f71ba058f/components/gcp/dataflow/launch_flex_template/component.yaml\r\n  return htmlUrl\r\n    .replace(\"https://github.com/\", \"https://raw.githubusercontent.com/\")\r\n    .replace(\"/blob/\", \"/\");\r\n};\r\n\r\n\r\ntype UrlAndHash = {\r\n  url: string;\r\n  hash: string;\r\n};\r\n\r\n\r\nexport async function * getComponentUrlsAndHashes(\r\n  users = [\"kubeflow\", \"Ark-kun\"]\r\n) {\r\n  let urlsAndHashes: UrlAndHash[] = [];\r\n  const query =\r\n    \"filename:component.yaml \" + users.map((user) => \"user:\" + user).join(\" \");\r\n  for (let page = 1; page < 100; page++) {\r\n    const searchResults = await searchGitHubCodeWithCache(query, page);\r\n    // \"total_count\": 512,\r\n    // \"incomplete_results\": false,\r\n    // \"items\": [\r\n    const items: any[] = searchResults.items;\r\n    if (items.length === 0) {\r\n      break;\r\n    }\r\n    for (let item of items) {\r\n      yield { url: githubHtmlUrlToDownloadUrl(item.html_url), hash: item.sha as string };\r\n    }\r\n    await new Promise( resolve => setTimeout(resolve, (60 * 1000 / 10) * (1 + 0.1)));\r\n  }\r\n  return urlsAndHashes;\r\n};\r\n\r\n\r\nexport const cacheComponentCandidateBlobs = async (\r\n  users = [\"kubeflow\", \"Ark-kun\"]\r\n): Promise<any[]> => {\r\n  let urlsAndHashes: UrlAndHash[] = [];\r\n  let urls = [];\r\n  for await (const urlAndHash of getComponentUrlsAndHashes(users)) {\r\n    urlsAndHashes.push(urlAndHash);\r\n    urls.push(urlAndHash.url);\r\n  }\r\n  const cache = await caches.open(BLOB_CACHE_NAME);\r\n  await cache.addAll(urls);\r\n  return urlsAndHashes;\r\n};\r\n\r\nexport const downloadComponentDataWithCache = async (url: string) => {\r\n  const response = await httpGetWithCache(url, BLOB_CACHE_NAME)\r\n  const data = await response.blob();\r\n  const componentText = await data.text();\r\n  const componentSpec = yaml.load(componentText) as ComponentSpec;\r\n  return componentSpec;\r\n}\r\n\r\nexport const cacheAllComponents = async (users = [\"kubeflow\", \"Ark-kun\"]) => {\r\n  console.debug(\"Starting cacheAllComponents\");\r\n  const urlsAndHashesIterator = getComponentUrlsAndHashes(users);\r\n\r\n  // const cache = await caches.open(BLOB_CACHE_NAME);\r\n  const urlToHashDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_TO_HASH_DB_TABLE_NAME,\r\n  });\r\n  const hashToUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_URL_DB_TABLE_NAME,\r\n  });\r\n  const hashToContentDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_CONTENT_DB_TABLE_NAME,\r\n  });\r\n  const hashToComponentNameDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_COMPONENT_NAME_DB_TABLE_NAME,\r\n  });\r\n  const urlProcessingVersionDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_PROCESSING_VERSION_TABLE_NAME,\r\n  });\r\n  const badHashesDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: BAD_HASHES_TABLE_NAME,\r\n  });\r\n  for await (const item of urlsAndHashesIterator) {\r\n    const hash = item.hash.toLowerCase();\r\n    const htmlUrl = item.url;\r\n    const badHashReason = await badHashesDb.getItem<string>(hash);\r\n    if (badHashReason !== null) {\r\n      console.debug(`Skipping url ${htmlUrl} with hash ${hash} due to error: \"${badHashReason}\"`);\r\n      continue;\r\n    }\r\n    try {\r\n      const downloadUrl: string = githubHtmlUrlToDownloadUrl(htmlUrl);\r\n      if (!downloadUrl.endsWith(\"component.yaml\")) {\r\n        console.debug(`Skipping url ${downloadUrl} since it does not end with \"component.yaml\"`);\r\n        continue;\r\n      }\r\n      // Sanity check\r\n      const cachedHash = await urlToHashDb.getItem<string>(downloadUrl);\r\n      if (cachedHash !== null && cachedHash !== hash) {\r\n        console.error(\r\n          `Component cache is broken. Stored hash for ${downloadUrl}: ${cachedHash} != ${hash}.`\r\n        );\r\n      }\r\n      // Check whether the processing is complete\r\n      const urlVersion = await urlProcessingVersionDb.getItem<string>(\r\n        downloadUrl\r\n      );\r\n\r\n      if (\r\n        cachedHash !== null && // Not sure we should check this, but it improves the sanity\r\n        urlVersion !== null &&\r\n        Number.parseInt(urlVersion) >= CURRENT_URL_PROCESSING_VERSION\r\n      ) {\r\n        continue;\r\n      }\r\n\r\n      console.debug(`Processing new component candidate: ${downloadUrl}.`);\r\n      const response = await httpGetWithCache(downloadUrl, BLOB_CACHE_NAME);\r\n      let componentSpec: ComponentSpec;\r\n      let componentText: string;\r\n      try {\r\n        const data = await response.blob();\r\n        componentText = await data.text();\r\n        componentSpec = yaml.load(componentText) as ComponentSpec;\r\n      } catch(err) {\r\n        badHashesDb.setItem(hash, err.name + \": \" + err.message);\r\n        continue;\r\n      }\r\n      if (componentSpec.implementation === undefined) {\r\n        badHashesDb.setItem(hash, 'Component lacks the \"impelmentation\" section.');\r\n        continue;\r\n      }\r\n\r\n      // Blobs are cumbersome (need await to get text) - store text instead\r\n      // await hashToContentDb.setItem(hash, data);\r\n      await hashToContentDb.setItem(hash, componentText);\r\n\r\n      // Only adding hash -> URL once\r\n      const urlForHash = await hashToUrlDb.getItem<string>(hash);\r\n      if (urlForHash === null) {\r\n        await hashToUrlDb.setItem(hash, downloadUrl);\r\n      }\r\n\r\n      // Only storing names when they exist\r\n      if (componentSpec.name) {\r\n        await hashToComponentNameDb.setItem(hash, componentSpec.name);\r\n      }\r\n\r\n      await urlToHashDb.setItem(downloadUrl, hash);\r\n\r\n      // Marking the processing as completed\r\n      await urlProcessingVersionDb.setItem(\r\n        downloadUrl,\r\n        CURRENT_URL_PROCESSING_VERSION\r\n      );\r\n    } catch (err) {\r\n      console.error(\r\n        `Error when processing component candidate ${htmlUrl} Error: ${err}.`\r\n      );\r\n    }\r\n  }\r\n  console.debug(\"Finished cacheAllComponents\");\r\n};\r\n\r\n\r\nexport const getAllComponentsAsRefs = async (users = [\"kubeflow\", \"Ark-kun\"]) => {\r\n  // Perhaps use urlProcessingVersionDb as source of truth. Hmm. It is URL-based\r\n  const hashToUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_URL_DB_TABLE_NAME,\r\n  });\r\n  const hashToContentDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_CONTENT_DB_TABLE_NAME,\r\n  });\r\n  let hashToComponentRef = new Map<string, ComponentReference>();\r\n\r\n  const cachePromise = cacheAllComponents(users);\r\n  if ((await hashToContentDb.length()) === 0) {\r\n    await cachePromise;\r\n  }\r\n\r\n  // !!! Iterating using hashToContentDb.iterate<string, void> causes all values to be `[object Blob]`\r\n  //await hashToContentDb.iterate<Blob, void>(\r\n  await hashToContentDb.iterate<string, void>(\r\n    // !!! async processor causes only 1 item to be processed since it returns Promise instead of undefined.\r\n    //async (componentData, hash, iterationNumber) => {\r\n    (componentText, hash, iterationNumber) => {\r\n      //const componentText = await componentData.text();\r\n      try {\r\n        const componentSpec = yaml.load(componentText) as ComponentSpec;\r\n        hashToComponentRef.set(hash, {\r\n          spec: componentSpec,\r\n        });\r\n      } catch (err) {\r\n        console.error(\r\n          `Error when parsing cached component. Hash: ${hash}. Error: ${err}. Component text: ${componentText}`\r\n        );\r\n      }\r\n    }\r\n  );\r\n  await hashToUrlDb.iterate<string, void>((url, hash, iterationNumber) => {\r\n    let componentRef = hashToComponentRef.get(hash);\r\n    if (componentRef === undefined) {\r\n      console.error(\r\n        `Component db corrupted: Component with url ${url} and hash ${hash} has no content in the DB.`\r\n      );\r\n    } else {\r\n      componentRef.url = url;\r\n    }\r\n  });\r\n  let componentRefs: ComponentReference[] = [];\r\n  // TODO: Improve the iteration onve TypeScript propertly supports it\r\n  hashToComponentRef.forEach((componentRef, hash) => {\r\n    if (componentRef.url === undefined) {\r\n      console.error(\r\n        `Component db corrupted: Component with hash ${hash} has content, but no URL in the DB.`\r\n      );\r\n    } else {\r\n      componentRefs.push(componentRef);\r\n    }\r\n  });\r\n  return componentRefs;\r\n};\r\n\r\n\r\nexport const searchComponentsByName = async (name: string, users = [\"kubeflow\", \"Ark-kun\"]) => {\r\n  const componentRefs = await getAllComponentsAsRefs(users);\r\n  return componentRefs.filter((ref) => ref.spec?.name?.toLowerCase().includes(name.toLowerCase()) ?? false);\r\n};\r\n","import { DragEvent, useEffect, useState } from 'react';\r\n\r\nimport {downloadComponentDataWithCache} from '../github'\r\nimport {ComponentSpec, TaskSpec} from '../componentSpec'\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  event.dataTransfer.setData('application/reactflow', JSON.stringify(nodeData));\r\n  event.dataTransfer.setData(\r\n    \"DragStart.offset\",\r\n    JSON.stringify({\r\n      offsetX: event.nativeEvent.offsetX,\r\n      offsetY: event.nativeEvent.offsetY,\r\n    })\r\n  );\r\n  event.dataTransfer.effectAllowed = 'move';\r\n};\r\n\r\ntype ComponentGroup = {\r\n  category: string;\r\n  componentUrls: string[];\r\n};\r\n\r\nconst DraggableComponentRow = ({componentUrl}: {componentUrl: string}) => {\r\n  const [componentSpec, setComponentSpec] = useState<ComponentSpec | undefined>(undefined);\r\n  useEffect(() => {\r\n    downloadComponentDataWithCache(componentUrl).then(setComponentSpec);\r\n  }, [componentUrl]);\r\n\r\n  if (componentSpec === undefined) {\r\n    return <span>Loading...</span>\r\n  } else {\r\n    return (\r\n      <div\r\n        className=\"react-flow__node react-flow__node-task\"\r\n        draggable\r\n        onDragStart={(event: DragEvent) => {\r\n          const taskSpec: TaskSpec = {\r\n            componentRef: {\r\n              url: componentUrl,\r\n              spec: componentSpec,\r\n            },\r\n          };\r\n          return onDragStart(event, { task: taskSpec });\r\n        }}\r\n      >\r\n        {componentSpec.name}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst ComponentGroupList = ({ componentGroups }: { componentGroups: ComponentGroup[] }) => {\r\n  return (\r\n    <>\r\n      {Array.from(componentGroups).map(\r\n        ({ category, componentUrls }, index) => (\r\n          <details key={category} open={index === 0} style={{ border: \"1px solid #aaa\", borderRadius: \"4px\" }}>\r\n            <summary style={{ borderWidth: \"1px\", padding: \"8px\" }}>\r\n              <strong>{category}</strong>\r\n            </summary>\r\n            {componentUrls.map((componentUrl) => (\r\n              <DraggableComponentRow key={componentUrl} componentUrl={componentUrl} />\r\n            ))}\r\n          </details>\r\n        )\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst ComponentLibrary = ({ componentGroups }: { componentGroups: ComponentGroup[] }) => {\r\n  return (\r\n    <details open>\r\n      <summary style={{ border: \"1px solid #aaa\", padding: \"4px\", borderRadius: \"4px\" }}>\r\n        <strong>Component library</strong>\r\n      </summary>\r\n      <div style={{ paddingLeft: \"10px\" }}>\r\n        <ComponentGroupList componentGroups={componentGroups}/>\r\n      </div>\r\n    </details>\r\n  );\r\n};\r\n\r\nexport default ComponentLibrary;\r\n","import React, { DragEvent } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { ComponentReference, TaskSpec } from \"../componentSpec\";\r\nimport { searchComponentsByName } from \"../github\";\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  event.dataTransfer.setData(\"application/reactflow\", JSON.stringify(nodeData));\r\n  event.dataTransfer.effectAllowed = \"move\";\r\n};\r\n\r\nconst COMPONENT_ORGS = [\"kubeflow\", \"Ark-kun\"];\r\n\r\nconst SearchPanel = (props: any) => {\r\n  const [error, setError] = useState<string | undefined>(undefined);\r\n  const [firstTime, setFirstTime] = useState(true);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [items, setItems] = useState<ComponentReference[]>([]);\r\n\r\n  const onQueryChange = (e: any) => {\r\n    setQuery(e.target.value);\r\n  };\r\n\r\n  async function fetchData(query: string) {\r\n    searchComponentsByName(query, COMPONENT_ORGS).then(\r\n      (componentRefs) => {\r\n        setIsLoaded(true);\r\n        setItems(componentRefs);\r\n      },\r\n      (error) => {\r\n        setIsLoaded(true);\r\n        setError(error.message);\r\n      }\r\n    );\r\n  }\r\n\r\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (query !== \"\") {\r\n      setFirstTime(false);\r\n      fetchData(query);\r\n    }\r\n  };\r\n\r\n  let results = <span></span>;\r\n  if (firstTime) {\r\n    results = <div>Enter search query</div>;\r\n  } else if (error !== undefined) {\r\n    results = <div>Error: {error}</div>;\r\n  } else if (!firstTime && !isLoaded) {\r\n    results = <div>Searching...</div>;\r\n  } else if (items !== undefined) {\r\n    const componentElements = items.map((item) => (\r\n      <div\r\n        key={item.url}\r\n        title={item.url}\r\n        className=\"react-flow__node react-flow__node-multihandle\"\r\n        draggable\r\n        onDragStart={(event: DragEvent) => {\r\n          const taskSpec: TaskSpec = {\r\n            componentRef: item,\r\n          };\r\n          return onDragStart(event, { task: taskSpec });\r\n        }}\r\n      >\r\n        {item.spec?.name}\r\n      </div>\r\n    ));\r\n    results = <>{componentElements}</>;\r\n  }\r\n  return (\r\n    <div className=\"nodeList\">\r\n      <form onSubmit={onSubmit}>\r\n        <input type=\"search\" placeholder=\"XGBoost\" onChange={onQueryChange} />\r\n        <input type=\"submit\" />\r\n      </form>\r\n      <div>{results}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPanel;\r\n","import {\r\n  Node,\r\n  Edge,\r\n} from \"react-flow-renderer\";\r\n\r\nimport {\r\n  ComponentSpec,\r\n  TaskSpec,\r\n  InputSpec,\r\n  OutputSpec,\r\n  ArgumentType,\r\n  GraphInputArgument,\r\n  TaskOutputArgument,\r\n  GraphImplementation,\r\n} from \"../componentSpec\";\r\nimport { ComponentTaskNodeProps } from \"./ComponentTaskNode\";\r\n\r\nconst getNodePositionAnnotations = (node: Node): { [k: string]: string } => ({\r\n  \"editor.position\": JSON.stringify({\r\n    // node.position cannot be used since set at 1st drop and never updated\r\n    x: node.__rf.position.x,\r\n    y: node.__rf.position.y,\r\n    width: node.__rf.width,\r\n    height: node.__rf.height,\r\n  }),\r\n});\r\n\r\nconst nodeOrderComparer = (n1: Node, n2: Node) =>\r\n  n1.__rf.position.x - n2.__rf.position.x;\r\n\r\nconst createGraphComponentSpecFromFlowElements = (\r\n  nodes: Node[],\r\n  edges: Edge[],\r\n  name = \"Component\",\r\n  annotations: Record<string, string> = {},\r\n  includePositions: boolean = true,\r\n  includeSpecs: boolean = false\r\n): ComponentSpec => {\r\n  // Input and output nodes\r\n  // Sorting them by horisontal position to make reordering inputs and outputs easy.\r\n  const inputNodes = nodes.filter((node) => node.type === \"input\").sort(nodeOrderComparer);\r\n  const outputNodes = nodes.filter((node) => node.type === \"output\").sort(nodeOrderComparer);\r\n  // Task nodes. They should all be ComponentTaskNode components\r\n  const taskNodes = nodes\r\n    .filter((node) => node.type === \"task\")\r\n    .map((node) => node as Node<ComponentTaskNodeProps>);\r\n  \r\n  const inputSpecs = inputNodes.map<InputSpec>((node) => {\r\n    let spec: InputSpec = { name: node.id };\r\n    if (includePositions) {\r\n      spec.annotations = getNodePositionAnnotations(node);\r\n    }\r\n    return spec;\r\n  });\r\n\r\n  const outputSpecs = outputNodes.map<OutputSpec>((node) => {\r\n    let spec: OutputSpec = { name: node.id };\r\n    if (includePositions) {\r\n      spec.annotations = spec.annotations = getNodePositionAnnotations(node);\r\n    }\r\n    return spec;\r\n  });\r\n\r\n  // const originalTaskMap = taskNodes.reduce((map, node) => {\r\n  //   const taskSpec = node.data;\r\n  //   if (taskSpec !== undefined) {\r\n  //     map.set(node.id, taskSpec);\r\n  //   }\r\n  //   return map;\r\n  // }, new Map<string, TaskSpec>());\r\n\r\n  const taskMap = taskNodes.reduce((accumulator, node) => {\r\n    let taskSpec = node.data?.taskSpec;\r\n    if (taskSpec !== undefined) {\r\n      // Cloning the spec to modify it\r\n      taskSpec = Object.assign({}, taskSpec);\r\n      if (!includeSpecs) {\r\n        taskSpec.componentRef = Object.assign({}, taskSpec.componentRef);\r\n        delete taskSpec.componentRef.spec;\r\n      }\r\n      if (includePositions) {\r\n        taskSpec.annotations = getNodePositionAnnotations(node);\r\n      }\r\n      accumulator[node.id] = taskSpec;\r\n    }\r\n    return accumulator;\r\n  }, {} as Record<string, TaskSpec>);\r\n\r\n  let graphOutputValues: Record<string, TaskOutputArgument> = {};\r\n\r\n  for (const edge of edges) {\r\n    const sourceTaskId = edge.source;\r\n    const sourceOutputName = edge.sourceHandle?.replace(/^output_/, '');\r\n    const targetTaskId = edge.target;\r\n    const targetInputName = edge.targetHandle?.replace(/^input_/, '');\r\n\r\n    // if (!sourceOutputName || !targetInputName) {\r\n    //   console.error(\"Enexpected edge without a source or target handle:\", edge);\r\n    //   continue;\r\n    // }\r\n\r\n    // Checking the source task for sanity\r\n    if (!!sourceOutputName && taskMap[sourceTaskId] === undefined) {\r\n      console.error(\"Task node is connected to unknown node type:\", edge);\r\n      continue;\r\n    }\r\n\r\n    // FIX: For now, detecting the graph inputs and outputs by sourceOutputName or targetInputName being null\r\n    const argument: ArgumentType =\r\n      !!sourceOutputName\r\n        ? ({\r\n            taskOutput: { taskId: sourceTaskId, outputName: sourceOutputName },\r\n          } as TaskOutputArgument)\r\n        : ({\r\n            // Using input node ID as graph input name\r\n            graphInput: { inputName: sourceTaskId },\r\n          } as GraphInputArgument);\r\n    if (!!targetInputName) {\r\n      let targetTask = taskMap[targetTaskId];\r\n      if (targetTask === undefined) {\r\n        console.error(\"Task node is connected to unknown node type:\", edge);\r\n        continue;\r\n      }\r\n      if (targetTask.arguments === undefined) {\r\n        targetTask.arguments = {};\r\n      }\r\n      targetTask.arguments[targetInputName] = argument;\r\n    } else {\r\n      // graph output\r\n      // Using output node ID as graph output name\r\n      const taskOutputArgument = argument as TaskOutputArgument;\r\n      // FIX BUG This check does not work to guard against incompatible arguments\r\n      if (!!taskOutputArgument) {\r\n        graphOutputValues[targetTaskId] = taskOutputArgument;\r\n      } else {\r\n        console.error(\"Graph outputs can only come from task outputs.\")\r\n      }\r\n    }\r\n  }\r\n\r\n  // // Verify arguments\r\n  // // TODO: Also sort them\r\n  // for (const [taskId, taskSpec] of Object.entries(taskMap)) {\r\n    \r\n  // }\r\n\r\n  const graphComponent: ComponentSpec = {\r\n    name: name,\r\n    inputs: inputSpecs,\r\n    outputs: outputSpecs,\r\n    metadata: {\r\n      annotations: annotations\r\n    },\r\n    implementation: {\r\n      graph: {\r\n        tasks: taskMap,\r\n        outputValues: graphOutputValues,\r\n      },\r\n    },\r\n  };\r\n\r\n  // Cleanup.\r\n  // I could have prevented these attributes from being added, but then the attribute serialization ordering will be ugly\r\n  // (the first attribute would be \"implementation\" since it's required).\r\n  if (inputSpecs.length === 0) {\r\n    delete graphComponent.inputs;\r\n  }\r\n  if (outputSpecs.length === 0) {\r\n    delete graphComponent.outputs;\r\n  }\r\n  if (Object.keys(annotations).length === 0) {\r\n    delete graphComponent.metadata;\r\n  }\r\n  if (Object.keys(graphOutputValues).length === 0) {\r\n    delete (graphComponent.implementation as GraphImplementation).graph.outputValues;\r\n  }\r\n  return graphComponent;\r\n};\r\n\r\nexport { createGraphComponentSpecFromFlowElements };\r\n","import {\r\n  useStoreState,\r\n} from \"react-flow-renderer\";\r\nimport yaml from \"js-yaml\";\r\n\r\nimport {createGraphComponentSpecFromFlowElements} from './graphComponentFromFlow'\r\n\r\nconst GraphComponentExporter = ({pipelineName}: {pipelineName?: string}) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n  const edges = useStoreState((store) => store.edges);\r\n\r\n  pipelineName = pipelineName ?? \"Pipeline\";\r\n\r\n  let componentText = \"\";\r\n  try {\r\n    const graphComponent = createGraphComponentSpecFromFlowElements(nodes, edges, pipelineName);\r\n    componentText = yaml.dump(graphComponent, { lineWidth: 10000 });\r\n  } catch(err) {\r\n    componentText = String(err);\r\n  }\r\n\r\n  const componentTextBlob = new Blob([componentText], { type: \"text/yaml\" }); // Or application/x-yaml (which leads to downloading)\r\n  const downloadLink = <a href={URL.createObjectURL(componentTextBlob)} download={\"component.yaml\"}>component.yaml</a>\r\n\r\n  return (\r\n    <details>\r\n      <summary>Graph {downloadLink}</summary>\r\n      <pre style={{overflow: \"auto\"}}>{componentText}</pre>\r\n    </details>\r\n  );\r\n};\r\n\r\nexport default GraphComponentExporter;\r\n","import { ComponentSpec, ContainerImplementation, ImplementationType, StringOrPlaceholder, ArgumentType, TypeSpecType } from \"../componentSpec\";\r\n\r\n// # How to handle I/O:\r\n// output = output artifact\r\n// inputValue => input parameter\r\n// inputPath => input artifact\r\n// [ ] downstream input parameter => spread \"parameterness\" upstream - add output parameters when needed (AFAIK, the paths are the same - required)\r\n// [ ] const argument or pipeline parameter + artifact input => need to insert uploader task\r\n\r\nconst sanitizePipelineInfoName = (componentName: string) => {\r\n    return componentName.toLowerCase().replace(/\\W/, '-')\r\n}\r\n\r\ntype ResolvedCommandLineAndArgs = {\r\n    command?: string[],\r\n    args?: string[],\r\n    inputsConsumedAsValue: Set<string>,\r\n    inputsConsumedAsPath: Set<string>,\r\n};\r\n\r\nconst resolveCommandLine = (componentSpec: ComponentSpec, taskArguments: Record<string, ArgumentType>): ResolvedCommandLineAndArgs => {\r\n    if (! ('container' in componentSpec.implementation)) {\r\n      throw Error(\"resolveCommandLine only supports container components\");\r\n    }\r\n    const containerSpec = componentSpec.implementation.container;\r\n\r\n    const inputsConsumedAsValue = new Set<string>();\r\n    const inputsConsumedAsPath = new Set<string>();\r\n    const convertArg = (arg: StringOrPlaceholder): string[] => {\r\n        if (typeof arg == \"string\") {\r\n            return [arg];\r\n        } else if ('inputValue' in arg) {\r\n            const inputName = arg.inputValue;\r\n            inputsConsumedAsValue.add(inputName);\r\n            return [`{{$.inputs.parameters['${inputName}']}}`];\r\n        } else if ('inputPath' in arg) {\r\n            const inputName = arg.inputPath;\r\n            inputsConsumedAsPath.add(inputName);\r\n            return [`{{$.inputs.artifacts['${inputName}'].path}}`];\r\n        } else if ('outputPath' in arg) {\r\n            const outputName = arg.outputPath;\r\n            return [`{{$.outputs.artifacts['${outputName}'].path}}`];\r\n        } else if ('if' in arg) {\r\n            const [ifCond, ifThen, ifElse] = [arg.if.cond, arg.if.then, arg.if.else];\r\n            // TODO: Check false values, not just check for true\r\n            let condEvaluatesToTrue = false;\r\n            if (typeof ifCond === \"string\") {\r\n              condEvaluatesToTrue = ifCond.toLowerCase() === \"true\";\r\n            } else if (typeof ifCond === \"boolean\") {\r\n              condEvaluatesToTrue = ifCond;\r\n            } else if (\"isPresent\" in ifCond) {\r\n              const inputName = ifCond.isPresent;\r\n              condEvaluatesToTrue = inputName in taskArguments;\r\n            } else if (\"inputValue\" in ifCond) {\r\n              const inputName = ifCond.inputValue;\r\n              if (! (inputName in taskArguments)) {\r\n                condEvaluatesToTrue = false;\r\n              } else {\r\n                const taskArgument = taskArguments[inputName];\r\n                if (typeof taskArgument === \"string\") {\r\n                    condEvaluatesToTrue = taskArgument.toLowerCase() === \"true\";\r\n                } else {\r\n                    throw Error(\"Using runtime conditions in component command line placeholders is not supported yet.\")\r\n                }\r\n              }\r\n            } else {\r\n                throw Error(\"Unexpected contition kind: \" + ifCond);\r\n            }\r\n            const unresolvedArgs = condEvaluatesToTrue ? ifThen : ifElse;\r\n            if (unresolvedArgs === undefined) {\r\n                return [];\r\n            }\r\n            return unresolvedArgs.flatMap(convertArg);\r\n        } else if ('concat' in arg) {\r\n            const concatArgs = arg.concat;\r\n            return concatArgs.flatMap(convertArg);\r\n        } else {\r\n            throw Error(`Unknown kind of command-line argument: ${arg}`);\r\n        }\r\n    };\r\n\r\n    const result = {\r\n        command: containerSpec.command?.flatMap(convertArg),\r\n        args: containerSpec.args?.flatMap(convertArg),\r\n        inputsConsumedAsValue: inputsConsumedAsValue,\r\n        inputsConsumedAsPath: inputsConsumedAsPath,\r\n    };\r\n    return result;\r\n}\r\n\r\nfunction isContainerImplementation(implementationType: ImplementationType): implementationType is ContainerImplementation {\r\n    return 'container' in implementationType;\r\n}\r\n\r\nconst typeSpecToVertexPrimitiveTypeEnum = (typeSpec: TypeSpecType | undefined) => {\r\n    if (typeof typeSpec === \"string\") {\r\n        if ([\"integer\"].includes(typeSpec.toLowerCase())) {\r\n            return \"INT\";\r\n        }\r\n        if ([\"float\", \"double\"].includes(typeSpec.toLowerCase())) {\r\n            return \"DOUBLE\";\r\n        }\r\n    }\r\n    return \"STRING\";\r\n}\r\n\r\nconst typeSpecToVertexParameterSpec = (typeSpec: TypeSpecType | undefined) => {\r\n    return {\r\n        type: typeSpecToVertexPrimitiveTypeEnum(typeSpec)\r\n    }\r\n}\r\n\r\nconst typeSpecToVertexArtifactTypeSchema = (typeSpec: TypeSpecType | undefined) => {\r\n    // TODO: Implement better mapping\r\n    const artifactTypeSchema = {\r\n        schemaTitle: \"system.Artifact\"\r\n    }\r\n    return artifactTypeSchema\r\n}\r\n\r\nconst typeSpecToVertexArtifactSpec = (typeSpec: TypeSpecType | undefined) => {\r\n    return {\r\n        artifactType: typeSpecToVertexArtifactTypeSchema(typeSpec)\r\n    }\r\n}\r\n// const typeSpecToVertexArtifactType(typeSpec: TypeSpecType) => {\r\n//     return typeof typeSpec === \"string\" && [\"String\", \"Integer\", \"Float\", \"Double\", \"Boolean\", ]\r\n// }\r\n\r\n\r\nconst taskSpecToVertexTaskSpecComponentSpecAndExecutorSpec = (\r\n    componentSpec: ComponentSpec,\r\n    //passedArgumentNames: string[],\r\n    taskArguments: Record<string, ArgumentType>\r\n) => {\r\n    // TODO: Investigate how to properly narrow the ImplementationTyppe union type\r\n    // Type guard!\r\n\r\n    if (!isContainerImplementation(componentSpec.implementation)) {\r\n        throw Error(\"Nested graph components are not supported yet\");\r\n    }\r\n    // Also works\r\n    // if ('container' in componentSpec.implementation) {\r\n    //     componentSpec.implementation\r\n    // }\r\n\r\n    const containerSpec = componentSpec.implementation.container;\r\n\r\n\r\n    const resolvedCommandLine = resolveCommandLine(componentSpec, taskArguments);\r\n\r\n    const vertexExecutorSpec = {\r\n        container: {\r\n            image: containerSpec.image,\r\n            command: resolvedCommandLine.command,\r\n            args: resolvedCommandLine.args,\r\n        }\r\n    };\r\n\r\n    // resolvedCommandLine.inputsConsumedAsPath\r\n\r\n    const inputMap = new Map((componentSpec.inputs ?? []).map(inputSpec => [inputSpec.name, inputSpec]));\r\n\r\n    // Array.from(inputMap.keys()).filter(resolvedCommandLine.inputsConsumedAsValue.has)\r\n\r\n    const vertexComponentInputsSpec = {\r\n      parameters: Object.fromEntries(\r\n        Array.from(resolvedCommandLine.inputsConsumedAsValue.values()).map(\r\n          (inputName) => [\r\n            inputName,\r\n            typeSpecToVertexParameterSpec(inputMap.get(inputName)?.type),\r\n          ]\r\n        )\r\n      ),\r\n      artifacts: Object.fromEntries(\r\n        Array.from(resolvedCommandLine.inputsConsumedAsPath.values()).map(\r\n          (inputName) => [\r\n            inputName,\r\n            typeSpecToVertexArtifactSpec(inputMap.get(inputName)?.type)\r\n          ]\r\n        )\r\n      ),\r\n    };\r\n\r\n    const vertexComponentOutputsSpec = {\r\n      parameters: {}, // Parameters will be added later as needed\r\n      artifacts: Object.fromEntries(\r\n        (componentSpec.outputs ?? []).map((outputSpec) => [\r\n          outputSpec.name,\r\n          typeSpecToVertexArtifactSpec(outputSpec.type)\r\n        ])\r\n      ),\r\n    };\r\n\r\n    const vertexComponentSpec = {\r\n        inputDefinitions: vertexComponentInputsSpec,\r\n        outputDefinitions: vertexComponentOutputsSpec,\r\n        // dag\r\n        executorLabel: \"<set later>\",\r\n    };\r\n\r\n    const vertexTaskParameterArguments = Object.fromEntries(Array.from(resolvedCommandLine.inputsConsumedAsValue.values()).map(inputName => [inputName, (inputName => {\r\n        // TODO: Check that this works\r\n        let taskArgument = taskArguments[inputName];\r\n        //if (! (inputName in taskArguments)) {\r\n        if (taskArgument === undefined) {\r\n            // Checking for default value\r\n            const inputSpec = inputMap.get(inputName);\r\n            if (inputSpec === undefined) {\r\n                throw Error(`Cannot happen: vertexTaskParameterArguments - inputMap.get(${inputName}) === undefined`)\r\n            }\r\n            if (inputSpec.default !== undefined) {\r\n                taskArgument = inputSpec.default;\r\n            } else {\r\n                if (inputSpec.optional === true) {\r\n                    // TODO: Decide what the behavior should be\r\n                    // throw Error(`Input \"${inputName}\" is optional, but command-line still uses it when when it's not present.`);\r\n                    console.error(`Input \"${inputName}\" is optional, but command-line still uses it when when it's not present.`);\r\n                    taskArgument = \"\";\r\n                } else {\r\n                    throw Error(`Argument was not provided for required input \"${inputName}\"`);\r\n                }\r\n            }\r\n        }\r\n        if (typeof taskArgument === \"string\" ) {\r\n            return {\r\n                runtimeValue: {\r\n                    constantValue: {\r\n                        // TODO: Fix constant arguments for non-string inputs\r\n                        stringValue: taskArgument,\r\n                    }\r\n                }\r\n            }\r\n        } else if ('graphInput' in taskArgument) {\r\n            return {\r\n                componentInputParameter: taskArgument.graphInput.inputName,\r\n            }\r\n        } else if ('taskOutput' in taskArgument) {\r\n            return {\r\n                taskOutputParameter: {\r\n                    producerTask: taskArgument.taskOutput.taskId,\r\n                    outputParameterKey: taskArgument.taskOutput.outputName,\r\n                }\r\n            };\r\n        } else {\r\n            throw Error(`Unknown kind of task argument: \"${taskArgument}\"`);\r\n        }\r\n    })(inputName)]));\r\n\r\n    const vertexTaskArtifactArguments = Object.fromEntries(Array.from(resolvedCommandLine.inputsConsumedAsPath.values()).map(inputName => [inputName, (inputName => {\r\n        // TODO: Check that this works\r\n        let taskArgument = taskArguments[inputName];\r\n        //if (! (inputName in taskArguments)) {\r\n        if (taskArgument === undefined) {\r\n            // Checking for default value\r\n            const inputSpec = inputMap.get(inputName);\r\n            if (inputSpec === undefined) {\r\n                throw Error(`Cannot happen: vertexTaskParameterArguments - inputMap.get(${inputName}) === undefined`)\r\n            }\r\n            if (inputSpec.default !== undefined) {\r\n                taskArgument = inputSpec.default;\r\n            } else {\r\n                if (inputSpec.optional === true) {\r\n                    // TODO: Decide what the behavior should be\r\n                    // throw Error(`Input \"${inputName}\" is optional, but command-line still uses it when when it's not present.`);\r\n                    console.error(`Input \"${inputName}\" is optional, but command-line still uses it when when it's not present.`);\r\n                    taskArgument = \"\";\r\n                } else {\r\n                    throw Error(`Argument was not provided for required input \"${inputName}\"`);\r\n                }\r\n            }\r\n        }\r\n        if (typeof taskArgument === \"string\" ) {\r\n            // TODO: Work around and make this possible\r\n            throw Error(\"Constant arguments for artifact inputs are not supported yet.\");\r\n        } else if ('graphInput' in taskArgument) {\r\n            return {\r\n                componentInputArtifact: taskArgument.graphInput.inputName,\r\n            }\r\n        } else if ('taskOutput' in taskArgument) {\r\n            return {\r\n                taskOutputArtifact: {\r\n                    producerTask: taskArgument.taskOutput.taskId,\r\n                    outputArtifactKey: taskArgument.taskOutput.outputName,\r\n                }\r\n            };\r\n        } else {\r\n            throw Error(`Unknown kind of task argument: \"${taskArgument}\"`);\r\n        }\r\n    })(inputName)]));\r\n    \r\n    const vertexTaskSpec = {\r\n        taskInfo: {\r\n            name: \"<set later>\",\r\n        },\r\n        inputs: {\r\n            parameters: vertexTaskParameterArguments,\r\n            artifacts: vertexTaskArtifactArguments,\r\n        },\r\n        // dependent_tasks: [],\r\n        cachingOptions: {\r\n            enableCache: true,\r\n        },\r\n        componentRef: {\r\n          name: \"<set later>\"\r\n        },\r\n        // triggerPolicy: {\r\n        //     condition: \"...\",\r\n        //     strategy: \"ALL_UPSTREAM_TASKS_SUCCEEDED\",\r\n        // },\r\n        // iterator: {\r\n        //     artifactIterator: {...},\r\n        //     parameterIterator: {...},\r\n        // },\r\n    }\r\n    \r\n    return { vertexTaskSpec, vertexComponentSpec, vertexExecutorSpec };\r\n}\r\n\r\nconst graphComponentSpecToVertexPipelineSpec = (componentSpec: ComponentSpec) => {\r\n    if (! ('graph' in componentSpec.implementation)) {\r\n        throw Error(\"Only graph components are supported for now\")\r\n    }\r\n\r\n    // TODO: Fix case when these inputs are passed to tasks as artifacts\r\n    const vertexComponentInputsSpec = {\r\n        parameters: Object.fromEntries(\r\n          (componentSpec.inputs ?? []).map(\r\n            (inputSpec) => [inputSpec.name, typeSpecToVertexParameterSpec(inputSpec.type)]\r\n          )\r\n        ),\r\n        // Pipeline does not support artifact inputs\r\n        // artifacts: {},\r\n    };\r\n\r\n    const graphSpec = componentSpec.implementation.graph;\r\n\r\n    let vertexExecutors: Record<string, any> = {};\r\n    let vertexComponents: Record<string, any> = {};\r\n    let vertexTasks: Record<string, any> = {};\r\n\r\n    for (const [taskId, taskSpec] of Object.entries(graphSpec.tasks)) {\r\n        if (taskSpec.componentRef.spec === undefined) {\r\n            throw Error(`Task \"${taskId}\" does not have taskSpec.componentRef.spec.`)\r\n        }\r\n        const {vertexTaskSpec, vertexComponentSpec, vertexExecutorSpec} = taskSpecToVertexTaskSpecComponentSpecAndExecutorSpec(taskSpec.componentRef.spec, taskSpec.arguments ?? {});\r\n        // task IDs are expected to be unique\r\n        // TODO: Fix  this to work for multi-dag pipelines where task IDs are not globally unique\r\n        const vertexExecutorId = taskId + \"_executor\";\r\n        const vertexComponentId = taskId + \"_component\";\r\n        const vertexTaskId = taskId; // + \"_task\";\r\n        vertexExecutors[vertexExecutorId] = vertexExecutorSpec;\r\n        vertexComponentSpec.executorLabel = vertexExecutorId;\r\n        vertexComponents[vertexComponentId] = vertexComponentSpec;\r\n        vertexTaskSpec.componentRef.name = vertexComponentId;\r\n        vertexTaskSpec.taskInfo.name = vertexTaskId;\r\n        vertexTasks[vertexTaskId] = vertexTaskSpec;\r\n    }\r\n\r\n    const pipelineName = componentSpec.name ?? \"pipeline\";\r\n\r\n    const vertexPipelineSpec = {\r\n        pipelineInfo: {\r\n            name: sanitizePipelineInfoName(pipelineName)\r\n        },\r\n        sdkVersion: \"Cloud-Pipelines\",\r\n        schemaVersion: \"2.0.0\",\r\n        deploymentSpec: {\r\n            executors: vertexExecutors,\r\n        },\r\n        components: vertexComponents,\r\n        root: {\r\n          inputDefinitions: vertexComponentInputsSpec,\r\n          dag: {\r\n            tasks: vertexTasks,\r\n          }\r\n        },\r\n    };\r\n    return vertexPipelineSpec;\r\n};\r\n\r\nconst generateVertexPipelineJobFromGraphComponent = (\r\n  componentSpec: ComponentSpec,\r\n  gcsOutputDirectory: string,\r\n  pipelineArguments?: Map<string, string>\r\n) => {\r\n  // TODO: FIX: Do proper conversion of integers\r\n  //let convertedPipelineArguments = new Map<String, object>(Array.from(pipelineArguments.entries()).map((key, value) => [key, value]));\r\n  let convertedPipelineArguments: Record<string, any> = {};\r\n  if (pipelineArguments !== undefined) {\r\n    for (const [key, value] of Array.from(pipelineArguments.entries())) {\r\n      convertedPipelineArguments[key] = {\r\n        stringValue: value,\r\n        //intValue\r\n        //doubleValue\r\n      };\r\n    }\r\n  }\r\n\r\n  const pipelineSpec = graphComponentSpecToVertexPipelineSpec(componentSpec);\r\n\r\n  const pipelineJob = {\r\n    // name: \"<>\",\r\n    // displayName: \"<>\",\r\n    // labels: {},\r\n    runtimeConfig: {\r\n      parameters: convertedPipelineArguments,\r\n      gcsOutputDirectory: gcsOutputDirectory,\r\n    },\r\n    pipelineSpec: pipelineSpec,\r\n    // encryptionSpec: {},\r\n    // serviceAccount: \"<>\",\r\n    // network: {},\r\n  };\r\n  return pipelineJob;\r\n};\r\n\r\nexport { graphComponentSpecToVertexPipelineSpec, generateVertexPipelineJobFromGraphComponent };\r\n","/* global gapi */\r\n\r\nimport { useState } from 'react';\r\n\r\nimport {\r\n  useStoreState,\r\n} from \"react-flow-renderer\";\r\n\r\nimport {createGraphComponentSpecFromFlowElements} from './graphComponentFromFlow'\r\nimport {generateVertexPipelineJobFromGraphComponent} from './vertexAiCompiler'\r\n\r\nconst LOCAL_STORAGE_GCS_OUTPUT_DIRECTORY_KEY = \"GoogleCloudSubmitter/gcsOutputDirectory\";\r\nconst LOCAL_STORAGE_PROJECT_ID_KEY = \"GoogleCloudSubmitter/projectId\";\r\nconst LOCAL_STORAGE_REGION_KEY = \"GoogleCloudSubmitter/region\";\r\nconst LOCAL_STORAGE_PROJECT_IDS_KEY = \"GoogleCloudSubmitter/projectIds\";\r\n\r\nvar CLIENT_ID = '640001104961-2m8hs192tmd9f9nssbr5thr5o3uhmita.apps.googleusercontent.com';\r\nvar API_KEY = 'AIzaSyCDPTffgYGXoit-jKsj1_1WWbSxvU7aEdQ';\r\n     \r\nconst VERTEX_AI_PIPELINES_REGIONS = [\r\n  'us-central1',\r\n  'europe-west4',\r\n  'asia-east1',\r\n];\r\n\r\nconst VERTEX_AI_PIPELINES_DEFAULT_REGION = 'us-central1';\r\n\r\nconst authorizeGoogleCloudClient = async (\r\n  scopes: string[],\r\n  immediate = false, // Setting immediate to true prevents auth window showing every time. But it needs to be false the first time (when cookies are not set).\r\n  apiKey: string = API_KEY,\r\n  clientId: string = CLIENT_ID,\r\n) => {\r\n  return new Promise<GoogleApiOAuth2TokenObject>(\r\n    (resolve, reject) => {\r\n      gapi.client.setApiKey(apiKey);\r\n      gapi.auth.authorize(\r\n        {\r\n          client_id: clientId,\r\n          scope: scopes,\r\n          immediate: immediate,\r\n        },\r\n        (authResult) => {\r\n          // console.debug(\"authorizeGoogleCloudClient: called back\");\r\n          if (authResult === undefined) {\r\n            console.error(\"authorizeGoogleCloudClient failed\");\r\n            reject(\"gapi.auth.authorize result is undefined\");\r\n          } else if (authResult.error) {\r\n            console.error(\r\n              \"authorizeGoogleCloudClient failed\",\r\n              authResult.error\r\n            );\r\n            reject(authResult.error);\r\n          } else {\r\n            resolve(authResult);\r\n            // console.debug(\"authorizeGoogleCloudClient: Success\");\r\n          }\r\n        }\r\n      );\r\n    }\r\n  );\r\n};\r\n\r\nconst ensureGoogleCloudAuthorizesScopes = async (scopes: string[]) => {\r\n  try {\r\n    // console.debug('Before ensureGoogleCloudAuthorizesScopes(immediate=true)');\r\n    await authorizeGoogleCloudClient(scopes, true);\r\n    // console.debug('After ensureGoogleCloudAuthorizesScopes(immediate=true)');\r\n  } catch (err) {\r\n    // console.error('ensureGoogleCloudAuthorizesScopes(immediate=true)', err);\r\n    try {\r\n      await authorizeGoogleCloudClient(scopes, false);\r\n    } catch (err) {\r\n      // console.error('ensureGoogleCloudAuthorizesScopes(immediate=false)', err);\r\n    }\r\n  }\r\n};\r\n\r\nconst cloudresourcemanagerListProjects = async (isAuthenticated = false) => {\r\n  await ensureGoogleCloudAuthorizesScopes(\r\n    [\"https://www.googleapis.com/auth/cloud-platform\"]\r\n  );\r\n  const response = await gapi.client.request({\r\n    path: \"https://cloudresourcemanager.googleapis.com/v1/projects/\",\r\n  });\r\n  return response.result;\r\n}\r\n\r\nconst aiplatformCreatePipelineJob = async (projetId: string, region='us-central1', pipelineJob: Record<string, any>) => {\r\n  await ensureGoogleCloudAuthorizesScopes(\r\n    [\"https://www.googleapis.com/auth/cloud-platform\"]\r\n  );\r\n  const response = await gapi.client.request({\r\n    path: `https://${region}-aiplatform.googleapis.com/v1beta1/projects/${projetId}/locations/${region}/pipelineJobs`,\r\n    method: \"POST\",\r\n    body: JSON.stringify(pipelineJob),\r\n  });\r\n  return response.result;\r\n}\r\n\r\nconst GoogleCloudSubmitter = () => {\r\n  const [projects, setProjects] = useState<string[]>(\r\n    () => JSON.parse(window.localStorage?.getItem(LOCAL_STORAGE_PROJECT_IDS_KEY) ?? \"[]\")\r\n  );\r\n  const [project, setProject] = useState<string>(\r\n    () => window.localStorage?.getItem(LOCAL_STORAGE_PROJECT_ID_KEY) ?? \"\"\r\n  ); // undefined causes error: https://reactjs.org/docs/forms.html#controlled-components https://stackoverflow.com/a/47012342\r\n  const [region, setRegion] = useState(\r\n    () => window.localStorage?.getItem(LOCAL_STORAGE_REGION_KEY) ?? VERTEX_AI_PIPELINES_DEFAULT_REGION\r\n  );\r\n  const [error, setError] = useState(\"\");\r\n  const [gcsOutputDirectory, setGcsOutputDirectory] = useState(\r\n    () => window.localStorage?.getItem(LOCAL_STORAGE_GCS_OUTPUT_DIRECTORY_KEY) ?? \"\"\r\n  );\r\n  const [pipelineJobWebUrl, setPipelineJobWebUrl] = useState(\"\");\r\n\r\n  const nodes = useStoreState((store) => store.nodes);\r\n  const edges = useStoreState((store) => store.edges);\r\n\r\n  let vertexPipelineJobJson: string | undefined = undefined;\r\n  let vertexPipelineJobUrl: string | undefined = undefined;\r\n  try {\r\n    const pipelineName = \"Pipeline\";\r\n  \r\n    const graphComponent = createGraphComponentSpecFromFlowElements(nodes, edges, pipelineName, undefined, false, true);\r\n    const vertexPipelineJob = generateVertexPipelineJobFromGraphComponent(graphComponent, gcsOutputDirectory);\r\n    vertexPipelineJobJson = JSON.stringify(vertexPipelineJob, undefined, 4);\r\n    vertexPipelineJobUrl = URL.createObjectURL(\r\n      new Blob([vertexPipelineJobJson], { type: \"application/json\" })\r\n    );\r\n  } catch(err) {\r\n  }\r\n\r\n  const readyToSubmit =\r\n    project !== \"\" && region !== \"\" && vertexPipelineJobUrl !== undefined;\r\n\r\n  return (\r\n    <form\r\n      onSubmit={async (e) => {\r\n        e.preventDefault();\r\n        setPipelineJobWebUrl(\"\");\r\n        try {\r\n          // setItem might throw exception on iOS in incognito mode\r\n          try {\r\n            window.localStorage?.setItem(LOCAL_STORAGE_GCS_OUTPUT_DIRECTORY_KEY, gcsOutputDirectory);\r\n            window.localStorage?.setItem(LOCAL_STORAGE_PROJECT_ID_KEY, project);\r\n            window.localStorage?.setItem(LOCAL_STORAGE_REGION_KEY, region);\r\n          } catch(err) {\r\n            console.error(\"GoogleCloudSubmitter: Error writing properties to the localStorage\", err);\r\n          }\r\n          const pipelineName = \"Pipeline\";\r\n\r\n          const graphComponent = createGraphComponentSpecFromFlowElements(nodes, edges, pipelineName, undefined, false, true);\r\n          const vertexPipelineJob = generateVertexPipelineJobFromGraphComponent(graphComponent, gcsOutputDirectory);\r\n          const result = await aiplatformCreatePipelineJob(project, region, vertexPipelineJob);\r\n          const pipelineJobName: string = result.name;\r\n          const pipelineJobId = pipelineJobName.split('/').slice(-1)[0];\r\n          const pipelineJobWebUrl = `https://console.cloud.google.com/vertex-ai/locations/${region}/pipelines/runs/${pipelineJobId}?project=${project}`;\r\n          setPipelineJobWebUrl(pipelineJobWebUrl);\r\n          setError(\"\");\r\n        } catch (err) {\r\n          console.error(err);\r\n          setError(err?.result?.error?.message ?? \"Error\");\r\n        }\r\n      }}\r\n    >\r\n      <div>\r\n        <label htmlFor=\"project\">Project: </label>\r\n        <input\r\n          id=\"project\"\r\n          required\r\n          type=\"text\"\r\n          list=\"projects\"\r\n          placeholder=\"<my-project-id>\"\r\n          value={project}\r\n          onChange={(e) => setProject(e.target.value)}\r\n        />\r\n        <datalist id=\"projects\">\r\n          {projects.map((projectId) => (\r\n            <option key={projectId} value={projectId} />\r\n          ))}\r\n        </datalist>\r\n        <button\r\n          type=\"button\" // The default button type is \"submit\", not \"button\". WTF!?\r\n          onClick={async (e) => {\r\n            try {\r\n              const result = await cloudresourcemanagerListProjects();\r\n              const projectIds = (result.projects as any[]).map<string>(\r\n                (projectInfo) => projectInfo.projectId\r\n              );\r\n              setProjects(projectIds);\r\n              setError(\"\");\r\n              try {\r\n                window.localStorage?.setItem(LOCAL_STORAGE_PROJECT_IDS_KEY, JSON.stringify(projectIds));\r\n              } catch(err) {\r\n                console.error(\"GoogleCloudSubmitter: Error writing properties to the localStorage\", err);\r\n              }\r\n            } catch (err) {\r\n              setError(err?.result?.error?.message ?? \"Error\");\r\n            }\r\n          }}\r\n        >\r\n          ⟳{/* 🗘⭯ ⭮ ↺ ↻ ⟲ ⟳ 🔃🔄 */}\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"region\">Region: </label>\r\n        <input\r\n          id=\"region\"\r\n          required\r\n          type=\"text\"\r\n          list=\"regions\"\r\n          value={region}\r\n          onChange={(e) => setRegion(e.target.value)}\r\n        />\r\n        <datalist id=\"regions\">\r\n          {VERTEX_AI_PIPELINES_REGIONS.map((region) => (\r\n            <option key={region} value={region} />\r\n          ))}\r\n        </datalist>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"region\">GCS dir: </label>\r\n        <input\r\n          id=\"gcsOutputDirectory\"\r\n          required\r\n          type=\"text\"\r\n          value={gcsOutputDirectory}\r\n          onChange={(e) => setGcsOutputDirectory(e.target.value)}\r\n        />\r\n      </div>\r\n      <input\r\n        type=\"submit\"\r\n        disabled={!readyToSubmit}\r\n        value=\"Submit pipeline job\"\r\n      />\r\n      {pipelineJobWebUrl !== \"\" && <div><a href={pipelineJobWebUrl} target=\"_blank\" rel=\"noreferrer\">Job</a></div>}\r\n      {vertexPipelineJobUrl !== undefined && (\r\n        <div>\r\n          Download <a\r\n            href={vertexPipelineJobUrl}\r\n            download={\"vertex_pipeline_job.json\"}\r\n          >\r\n            vertex_pipeline_job.json\r\n          </a>\r\n        </div>\r\n      )}\r\n      {error !== \"\" && <div>Error: {error}</div>}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default GoogleCloudSubmitter;\r\n","import {\r\n  useStoreState,\r\n} from \"react-flow-renderer\";\r\n\r\nimport {createGraphComponentSpecFromFlowElements} from './graphComponentFromFlow'\r\nimport {graphComponentSpecToVertexPipelineSpec} from './vertexAiCompiler'\r\n\r\nconst VertexAiExporter = ({pipelineName}: {pipelineName?: string}) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n  const edges = useStoreState((store) => store.edges);\r\n\r\n  pipelineName = pipelineName ?? \"Pipeline\";\r\n\r\n  let vertexPipelineSpecText = \"\";\r\n  try {\r\n    const graphComponent = createGraphComponentSpecFromFlowElements(nodes, edges, pipelineName, undefined, false, true);\r\n    const vertexPipelineSpec = graphComponentSpecToVertexPipelineSpec(graphComponent);\r\n    vertexPipelineSpecText = JSON.stringify(vertexPipelineSpec, undefined, 2);\r\n  } catch(err) {\r\n    vertexPipelineSpecText = String(err);\r\n  }\r\n\r\n  const vertexPipelineSpecTextBlob = new Blob([vertexPipelineSpecText], { type: \"application/json\" }); // Or application/x-yaml (which leads to downloading)\r\n  // TODO: Call vertexPipelineSpecTextBlobUrl.revokeObjectURL in the future\r\n  const vertexPipelineSpecTextBlobUrl = URL.createObjectURL(vertexPipelineSpecTextBlob);\r\n\r\n  return (\r\n    <details open>\r\n      <summary>\r\n        Cloud IR <a\r\n          href={vertexPipelineSpecTextBlobUrl}\r\n          download={\"vertex_pipeline_spec.json\"}\r\n        >\r\n          vertex_pipeline_spec.json\r\n        </a>\r\n      </summary>\r\n      <pre style={{ overflow: \"auto\" }}>{vertexPipelineSpecText}</pre>\r\n    </details>\r\n  );\r\n};\r\n\r\nexport default VertexAiExporter;\r\n","import { DragEvent } from 'react';\r\n\r\nimport ComponentLibrary from './ComponentLibrary'\r\nimport ComponentSearch from './ComponentSearch'\r\nimport GraphComponentExporter from './GraphComponentExporter'\r\nimport GoogleCloudSubmitter from './GoogleCloud'\r\nimport VertexAiExporter from './VertexAiExporter'\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  event.dataTransfer.setData('application/reactflow', JSON.stringify(nodeData));\r\n  event.dataTransfer.setData(\r\n    \"DragStart.offset\",\r\n    JSON.stringify({\r\n      offsetX: event.nativeEvent.offsetX,\r\n      offsetY: event.nativeEvent.offsetY,\r\n    })\r\n  );\r\n  event.dataTransfer.effectAllowed = 'move';\r\n};\r\n\r\nconst COMPONENT_LIBRARY = [\r\n  {\r\n    category: \"Quick start\",\r\n    componentUrls: [\r\n      // 'https://raw.githubusercontent.com/Ark-kun/pipelines/60a2612541ec08c6a85c237d2ec7525b12543a43/components/datasets/Chicago_Taxi_Trips/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/2463ecda532517462590d75e6e14a8af6b55869a/components/datasets/Chicago_Taxi_Trips/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/567c04c51ff00a1ee525b3458425b17adbe3df61/components/XGBoost/Train/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/567c04c51ff00a1ee525b3458425b17adbe3df61/components/XGBoost/Predict/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"Datasets\", componentUrls: [\r\n      // 'https://raw.githubusercontent.com/Ark-kun/pipelines/60a2612541ec08c6a85c237d2ec7525b12543a43/components/datasets/Chicago_Taxi_Trips/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/2463ecda532517462590d75e6e14a8af6b55869a/components/datasets/Chicago_Taxi_Trips/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"Data manipulation\",\r\n    componentUrls: [\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/6162d55998b176b50267d351241100bb0ee715bc/components/pandas/Transform_DataFrame/in_CSV_format/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"Upload/Download\",\r\n    componentUrls: [\r\n    'https://raw.githubusercontent.com/Ark-kun/pipelines/54ac9a6a7173aecbbb30a043b2077e790cac6953/components/web/Download/component.yaml',\r\n    'https://raw.githubusercontent.com/Ark-kun/pipelines/2dac60c400ad8767b452649d08f328dfaf230f96/components/google-cloud/storage/download/component.yaml',\r\n    'https://raw.githubusercontent.com/Ark-kun/pipelines/2dac60c400ad8767b452649d08f328dfaf230f96/components/google-cloud/storage/upload_to_unique_uri/component.yaml',\r\n    'https://raw.githubusercontent.com/Ark-kun/pipelines/2dac60c400ad8767b452649d08f328dfaf230f96/components/google-cloud/storage/upload_to_explicit_uri/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"XGBoost\",\r\n    componentUrls: [\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/567c04c51ff00a1ee525b3458425b17adbe3df61/components/XGBoost/Train/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/567c04c51ff00a1ee525b3458425b17adbe3df61/components/XGBoost/Predict/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"PyTorch\",\r\n    componentUrls: [\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/4e1facea1a270535b515a9e8cc59422d1ad76a9e/components/PyTorch/Create_fully_connected_network/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/603342c4b88fe2d69ff07682f702cd3601e883bb/components/PyTorch/Train_PyTorch_model/from_CSV/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/e011e4affa85542ef2b24d63fdac27f8d939bbee/components/PyTorch/Convert_to_OnnxModel_from_PyTorchScriptModule/component.yaml',\r\n    ]\r\n  },\r\n  // {\r\n  //   category: \"TFX\",\r\n  //   componentUrls: [\r\n  //   ]\r\n  // },\r\n];\r\n\r\nconst Sidebar = () => {\r\n  return (\r\n    <aside className=\"nodeList\">\r\n      <details style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary style={{ borderWidth: \"1px\", padding: \"4px\", fontWeight: \"bold\" }}>Submit to Google Cloud</summary>\r\n        <GoogleCloudSubmitter/>\r\n      </details>\r\n      <h3>Drag components to the canvas:</h3>\r\n      <details style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary><strong>Special</strong></summary>\r\n        <div className=\"react-flow__node react-flow__node-input\" onDragStart={(event: DragEvent) => onDragStart(event, { input: { label: \"Input\" } })} draggable>\r\n          Input\r\n        </div>\r\n        <div className=\"react-flow__node react-flow__node-output\" onDragStart={(event: DragEvent) => onDragStart(event, { output: { label: \"Output\" } })} draggable>\r\n          Output\r\n        </div>\r\n      </details>\r\n      <ComponentLibrary componentGroups={COMPONENT_LIBRARY}/>\r\n      <details open style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary style={{ borderWidth: \"1px\", padding: \"4px\", fontWeight: \"bold\" }}>Component search</summary>\r\n        <ComponentSearch />\r\n      </details>\r\n      <details>\r\n        <summary>Debug</summary>\r\n        <GraphComponentExporter/>\r\n        <VertexAiExporter/>\r\n      </details>\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import { ComponentSpec } from \"../componentSpec\";\r\nimport { downloadComponentDataWithCache } from \"../github\";\r\n\r\nlet xgBoostQueryTrainPredictPipeline = {\r\n  name: \"XGBoost query train predict pipeline\",\r\n  inputs: [],\r\n  outputs: [],\r\n  implementation: {\r\n    graph: {\r\n      tasks: {\r\n        dataset: {\r\n          componentRef: {\r\n            url: \"https://raw.githubusercontent.com/Ark-kun/pipelines/60a2612541ec08c6a85c237d2ec7525b12543a43/components/datasets/Chicago_Taxi_Trips/component.yaml\",\r\n          },\r\n          annotations: {\r\n            \"editor.position\": '{\"x\":100,\"y\":100,\"width\":180,\"height\":40}',\r\n          },\r\n          arguments: {\r\n            Select: 'tips,trip_seconds,trip_miles,pickup_community_area,dropoff_community_area,fare,tolls,extras,trip_total',\r\n            Where: 'trip_start_timestamp >= \"2019-01-01\" AND trip_start_timestamp < \"2019-02-01\"'\r\n          }\r\n        },\r\n        train: {\r\n          componentRef: {\r\n            url: \"https://raw.githubusercontent.com/Ark-kun/pipelines/567c04c51ff00a1ee525b3458425b17adbe3df61/components/XGBoost/Train/component.yaml\",\r\n          },\r\n          annotations: {\r\n            \"editor.position\": '{\"x\":100,\"y\":200,\"width\":180,\"height\":40}',\r\n          },\r\n          arguments: {\r\n            training_data: {\r\n              taskOutput: {\r\n                taskId: \"dataset\",\r\n                outputName: \"Table\",\r\n              },\r\n            },\r\n          },\r\n        },\r\n        predict: {\r\n          componentRef: {\r\n            url: \"https://raw.githubusercontent.com/Ark-kun/pipelines/567c04c51ff00a1ee525b3458425b17adbe3df61/components/XGBoost/Predict/component.yaml\",\r\n          },\r\n          annotations: {\r\n            \"editor.position\": '{\"x\":100,\"y\":300,\"width\":180,\"height\":40}',\r\n          },\r\n          arguments: {\r\n            data: {\r\n              taskOutput: {\r\n                taskId: \"dataset\",\r\n                outputName: \"Table\",\r\n              },\r\n            },\r\n            model: {\r\n              taskOutput: {\r\n                taskId: \"train\",\r\n                outputName: \"model\",\r\n              },\r\n            },\r\n            label_column: \"0\",\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst preloadComponentReferences = async (\r\n  componentSpec: ComponentSpec,\r\n  componentMap?: Map<string, ComponentSpec>\r\n) => {\r\n  // This map is needed to improve efficiency and handle recursive components.\r\n  if (componentMap === undefined) {\r\n    componentMap = new Map<string, ComponentSpec>();\r\n  }\r\n  if (\"graph\" in componentSpec.implementation) {\r\n    for (const taskSpec of Object.values(\r\n      componentSpec.implementation.graph.tasks\r\n    )) {\r\n      const componentUrl = taskSpec.componentRef.url;\r\n      if (\r\n        taskSpec.componentRef.spec === undefined &&\r\n        componentUrl !== undefined\r\n      ) {\r\n        let taskComponentSpec = componentMap.get(componentUrl);\r\n        if (taskComponentSpec === undefined) {\r\n          taskComponentSpec = await downloadComponentDataWithCache(\r\n            componentUrl\r\n          );\r\n          componentMap.set(componentUrl, taskComponentSpec);\r\n        }\r\n        taskSpec.componentRef.spec = taskComponentSpec;\r\n        await preloadComponentReferences(taskComponentSpec, componentMap);\r\n      }\r\n    }\r\n  }\r\n  return componentSpec;\r\n};\r\n\r\nexport { preloadComponentReferences, xgBoostQueryTrainPredictPipeline };\r\n","import { useState } from 'react';\r\nimport {\r\n  ReactFlowProvider,\r\n  Controls,\r\n  Background,\r\n  MiniMap,\r\n} from 'react-flow-renderer';\r\n\r\nimport { ComponentSpec } from '../componentSpec';\r\nimport GraphComponentSpecFlow from './GraphComponentSpecFlow';\r\nimport Sidebar from './Sidebar';\r\nimport { preloadComponentReferences, xgBoostQueryTrainPredictPipeline } from \"./samplePipelines\";\r\n\r\nimport './dnd.css';\r\n\r\nconst GRID_SIZE = 10;\r\n\r\nconst DnDFlow = () => {\r\n  const [componentSpec, setComponentSpec] = useState<ComponentSpec | undefined>();\r\n\r\n  if (componentSpec === undefined) {\r\n    preloadComponentReferences(xgBoostQueryTrainPredictPipeline).then(setComponentSpec);\r\n  };\r\n\r\n  if (componentSpec === undefined) {\r\n    return (<></>);\r\n  }\r\n\r\n  return (\r\n    <div className=\"dndflow\">\r\n      <ReactFlowProvider>\r\n        <div className=\"reactflow-wrapper\">\r\n          <GraphComponentSpecFlow\r\n            initialComponentSpec={componentSpec}\r\n            deleteKeyCode='Delete'\r\n            multiSelectionKeyCode='Control'\r\n            snapToGrid={true}\r\n            snapGrid={[GRID_SIZE, GRID_SIZE]}\r\n          >\r\n            <MiniMap/>\r\n            <Controls />\r\n            <Background gap={GRID_SIZE}/>\r\n          </GraphComponentSpecFlow>\r\n        </div>\r\n        <Sidebar />\r\n      </ReactFlowProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DnDFlow;\r\n","import './App.css';\r\nimport DnDFlow from './DragNDrop/index';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" style={{width: \"100%\", height: \"100%\"}}>\r\n      <DnDFlow/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}