{"version":3,"sources":["github.ts","DragNDrop/ComponentLibrary.tsx","DragNDrop/graphComponentFromFlow.ts","DragNDrop/GraphComponentExporter.tsx","DragNDrop/GoogleCloud.tsx","DragNDrop/Sidebar.tsx","DragNDrop/ComponentSearch.tsx","DragNDrop/MultiHandleNode.tsx","DragNDrop/ComponentTaskNode.tsx","DragNDrop/index.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["SEARCH_CACHE_NAME","BLOB_CACHE_NAME","DB_NAME","HASH_TO_CONTENT_DB_TABLE_NAME","HASH_TO_COMPONENT_NAME_DB_TABLE_NAME","URL_TO_HASH_DB_TABLE_NAME","HASH_TO_URL_DB_TABLE_NAME","URL_PROCESSING_VERSION_TABLE_NAME","BAD_HASHES_TABLE_NAME","httpGetWithCache","urlOrRequest","cacheName","a","updateIfInCache","caches","open","cache","match","undefined","response","add","response2","Promise","reject","searchGitHubCodeWithCache","query","page","sort","order","encodedQuery","encodeURIComponent","encodedSort","encodedOrder","searchUrl","json","githubHtmlUrlToDownloadUrl","htmlUrl","replace","getComponentUrlsAndHashes","users","urlsAndHashes","map","user","join","searchResults","items","length","item","url","html_url","hash","sha","resolve","setTimeout","downloadComponentDataWithCache","blob","data","text","componentText","componentSpec","yaml","load","cacheAllComponents","console","debug","urlsAndHashesIterator","urlToHashDb","localForage","createInstance","name","storeName","hashToUrlDb","hashToContentDb","hashToComponentNameDb","urlProcessingVersionDb","badHashesDb","toLowerCase","getItem","badHashReason","downloadUrl","endsWith","cachedHash","error","urlVersion","Number","parseInt","setItem","message","implementation","getAllComponentsAsRefs","hashToComponentRef","Map","cachePromise","iterate","iterationNumber","set","spec","err","componentRef","get","componentRefs","forEach","push","searchComponentsByName","filter","ref","includes","DraggableComponentRow","componentUrl","useState","setComponentSpec","useEffect","then","className","draggable","onDragStart","event","nodeData","dataTransfer","setData","JSON","stringify","effectAllowed","task","ComponentGroupList","componentGroups","Array","from","index","category","componentUrls","style","border","borderRadius","borderWidth","padding","ComponentLibrary","paddingLeft","getNodePositionAnnotations","node","x","__rf","position","y","width","height","nodeOrderComparer","n1","n2","GraphComponentExporter","pipelineName","graphComponent","nodes","edges","annotations","includePositions","includeSpecs","inputNodes","type","outputNodes","taskNodes","inputSpecs","id","outputSpecs","taskMap","reduce","accumulator","taskSpec","Object","assign","graphOutputValues","edge","sourceTaskId","source","sourceOutputName","sourceHandle","targetTaskId","target","targetInputName","targetHandle","argument","taskOutput","taskId","outputName","graphInput","inputName","targetTask","arguments","taskOutputArgument","inputs","outputs","metadata","graph","tasks","outputValues","keys","createGraphComponentSpecFromFlowElements","useStoreState","store","dump","lineWidth","componentTextBlob","Blob","downloadLink","href","URL","createObjectURL","download","overflow","CLIENT_ID","API_KEY","VERTEX_AI_PIPELINES_REGIONS","authorizeGoogleCloudClient","scopes","immediate","apiKey","clientId","gapi","client","setApiKey","auth","authorize","client_id","scope","authResult","ensureGoogleCloudAuthorizesScopes","cloudresourcemanagerListProjects","request","path","result","aiplatformListPipelineJobs","projetId","region","GoogleCloudSubmitter","projects","setProjects","project","setProject","setRegion","setError","onSubmit","e","preventDefault","log","htmlFor","required","list","placeholder","value","onChange","projectId","onClick","projectIds","projectInfo","COMPONENT_LIBRARY","Sidebar","fontWeight","GoogleCloud","input","label","output","default","multihandle","handles","top","ids","bottom","left","right","inputNames","inputSpec","outputNames","outputSpec","componentName","COMPONENT_ORGS","SearchPanel","props","firstTime","setFirstTime","isLoaded","setIsLoaded","setQuery","setItems","results","componentElements","title","fetchData","MultiHandleNode","handleComponents","sideHandles","numHandles","i","positionPercentString","String","Position","Top","Bottom","isConnectable","memo","inputHandlePosition","outputHandlePosition","generateHandles","ioSpecs","handleType","idPrefix","ioSpec","ioTypeName","toString","ComponentTaskNode","inputHandles","outputHandles","concat","nodeTypes","initialElements","onDragOver","dropEffect","DnDFlow","reactFlowInstance","setReactFlowInstance","elements","setElements","onConnect","params","els","addEdge","onElementsRemove","elementsToRemove","removeElements","onEdgeUpdateStart","_","onEdgeUpdateEnd","onEdgeUpdate","oldEdge","newConnection","updateEdge","onLoad","_reactFlowInstance","onDrop","droppedData","getData","droppedDataObject","parse","nodeType","clientX","clientY","newNode","es","deleteKeyCode","multiSelectionKeyCode","snapToGrid","snapGrid","gap","ComponentSearch","App","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","process","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.a055138d.chunk.js","sourcesContent":["import yaml from \"js-yaml\";\r\nimport localForage from \"localforage\";\r\nimport { ComponentSpec, ComponentReference } from \"./componentSpec\";\r\n\r\n// const COMPONENT_FILE_NAME_SUFFIX = \"component.yaml\";\r\n// const COMPONENT_FILE_MAX_SIZE = 100000;\r\nconst SEARCH_CACHE_NAME = \"https://api.github.com/search\";\r\nconst BLOB_CACHE_NAME = \"raw.githubusercontent.com/.../component.yaml\";\r\n\r\n// IndexedDB: DB and table names\r\nconst DB_NAME = \"components\";\r\nconst HASH_TO_CONTENT_DB_TABLE_NAME = \"hash_to_data\";\r\nconst HASH_TO_COMPONENT_NAME_DB_TABLE_NAME = \"hash_to_component_name\";\r\nconst URL_TO_HASH_DB_TABLE_NAME = \"url_to_hash\";\r\nconst HASH_TO_URL_DB_TABLE_NAME = \"hash_to_url\";\r\nconst URL_PROCESSING_VERSION_TABLE_NAME = \"url_version\";\r\nconst CURRENT_URL_PROCESSING_VERSION = 1;\r\nconst BAD_HASHES_TABLE_NAME = \"bad_hashes\";\r\n\r\n\r\nexport const httpGetWithCache = async (\r\n  urlOrRequest: string | RequestInfo,\r\n  cacheName: string,\r\n  updateIfInCache: boolean = false\r\n): Promise<Response> => {\r\n  const cache = await caches.open(cacheName);\r\n  const response = await cache.match(urlOrRequest);\r\n  if (response !== undefined) {\r\n    if (updateIfInCache) {\r\n      cache.add(urlOrRequest);\r\n    }\r\n    return response;\r\n  }\r\n  await cache.add(urlOrRequest);\r\n  const response2 = await cache.match(urlOrRequest);\r\n  if (response2 === undefined) {\r\n    return Promise.reject(\"Added object to cache, but counld not find it\");\r\n  }\r\n  return response2;\r\n};\r\n\r\n\r\nexport const searchGitHubCodeWithCache = async (\r\n  query: string,\r\n  page = 1,\r\n  sort = \"indexed\",\r\n  order = \"desc\",\r\n): Promise<any> => {\r\n  // TODO: Paging\r\n  const encodedQuery = encodeURIComponent(query);\r\n  const encodedSort = encodeURIComponent(sort);\r\n  const encodedOrder = encodeURIComponent(order);\r\n  const searchUrl = `https://api.github.com/search/code?q=${encodedQuery}&sort=${encodedSort}&order=${encodedOrder}&per_page=100&page=${page}`;\r\n  const response = await httpGetWithCache(searchUrl, SEARCH_CACHE_NAME, true);\r\n  return response.json();\r\n};\r\n\r\n\r\nconst githubHtmlUrlToDownloadUrl = (htmlUrl: string): string => {\r\n  // https://github.com/               kubeflow/pipelines/blob/24bc9162a56c2fe3c50947d655ef280f71ba058f/components/gcp/dataflow/launch_flex_template/component.yaml\r\n  // https://raw.githubusercontent.com/kubeflow/pipelines     /24bc9162a56c2fe3c50947d655ef280f71ba058f/components/gcp/dataflow/launch_flex_template/component.yaml\r\n  return htmlUrl\r\n    .replace(\"https://github.com/\", \"https://raw.githubusercontent.com/\")\r\n    .replace(\"/blob/\", \"/\");\r\n};\r\n\r\n\r\ntype UrlAndHash = {\r\n  url: string;\r\n  hash: string;\r\n};\r\n\r\n\r\nexport async function * getComponentUrlsAndHashes(\r\n  users = [\"kubeflow\", \"Ark-kun\"]\r\n) {\r\n  let urlsAndHashes: UrlAndHash[] = [];\r\n  const query =\r\n    \"filename:component.yaml \" + users.map((user) => \"user:\" + user).join(\" \");\r\n  for (let page = 1; page < 100; page++) {\r\n    const searchResults = await searchGitHubCodeWithCache(query, page);\r\n    // \"total_count\": 512,\r\n    // \"incomplete_results\": false,\r\n    // \"items\": [\r\n    const items: any[] = searchResults.items;\r\n    if (items.length === 0) {\r\n      break;\r\n    }\r\n    for (let item of items) {\r\n      yield { url: githubHtmlUrlToDownloadUrl(item.html_url), hash: item.sha as string };\r\n    }\r\n    await new Promise( resolve => setTimeout(resolve, (60 * 1000 / 10) * (1 + 0.1)));\r\n  }\r\n  return urlsAndHashes;\r\n};\r\n\r\n\r\nexport const cacheComponentCandidateBlobs = async (\r\n  users = [\"kubeflow\", \"Ark-kun\"]\r\n): Promise<any[]> => {\r\n  let urlsAndHashes: UrlAndHash[] = [];\r\n  let urls = [];\r\n  for await (const urlAndHash of getComponentUrlsAndHashes(users)) {\r\n    urlsAndHashes.push(urlAndHash);\r\n    urls.push(urlAndHash.url);\r\n  }\r\n  const cache = await caches.open(BLOB_CACHE_NAME);\r\n  await cache.addAll(urls);\r\n  return urlsAndHashes;\r\n};\r\n\r\nexport const downloadComponentDataWithCache = async (url: string) => {\r\n  const response = await httpGetWithCache(url, BLOB_CACHE_NAME)\r\n  const data = await response.blob();\r\n  const componentText = await data.text();\r\n  const componentSpec = yaml.load(componentText) as ComponentSpec;\r\n  return componentSpec;\r\n}\r\n\r\nexport const cacheAllComponents = async (users = [\"kubeflow\", \"Ark-kun\"]) => {\r\n  console.debug(\"Starting cacheAllComponents\");\r\n  const urlsAndHashesIterator = getComponentUrlsAndHashes(users);\r\n\r\n  // const cache = await caches.open(BLOB_CACHE_NAME);\r\n  const urlToHashDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_TO_HASH_DB_TABLE_NAME,\r\n  });\r\n  const hashToUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_URL_DB_TABLE_NAME,\r\n  });\r\n  const hashToContentDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_CONTENT_DB_TABLE_NAME,\r\n  });\r\n  const hashToComponentNameDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_COMPONENT_NAME_DB_TABLE_NAME,\r\n  });\r\n  const urlProcessingVersionDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: URL_PROCESSING_VERSION_TABLE_NAME,\r\n  });\r\n  const badHashesDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: BAD_HASHES_TABLE_NAME,\r\n  });\r\n  for await (const item of urlsAndHashesIterator) {\r\n    const hash = item.hash.toLowerCase();\r\n    const htmlUrl = item.url;\r\n    const badHashReason = await badHashesDb.getItem<string>(hash);\r\n    if (badHashReason !== null) {\r\n      console.debug(`Skipping url ${htmlUrl} with hash ${hash} due to error: \"${badHashReason}\"`);\r\n      continue;\r\n    }\r\n    try {\r\n      const downloadUrl: string = githubHtmlUrlToDownloadUrl(htmlUrl);\r\n      if (!downloadUrl.endsWith(\"component.yaml\")) {\r\n        console.debug(`Skipping url ${downloadUrl} since it does not end with \"component.yaml\"`);\r\n        continue;\r\n      }\r\n      // Sanity check\r\n      const cachedHash = await urlToHashDb.getItem<string>(downloadUrl);\r\n      if (cachedHash !== null && cachedHash !== hash) {\r\n        console.error(\r\n          `Component cache is broken. Stored hash for ${downloadUrl}: ${cachedHash} != ${hash}.`\r\n        );\r\n      }\r\n      // Check whether the processing is complete\r\n      const urlVersion = await urlProcessingVersionDb.getItem<string>(\r\n        downloadUrl\r\n      );\r\n\r\n      if (\r\n        cachedHash !== null && // Not sure we should check this, but it improves the sanity\r\n        urlVersion !== null &&\r\n        Number.parseInt(urlVersion) >= CURRENT_URL_PROCESSING_VERSION\r\n      ) {\r\n        continue;\r\n      }\r\n\r\n      console.debug(`Processing new component candidate: ${downloadUrl}.`);\r\n      const response = await httpGetWithCache(downloadUrl, BLOB_CACHE_NAME);\r\n      let componentSpec: ComponentSpec;\r\n      let componentText: string;\r\n      try {\r\n        const data = await response.blob();\r\n        componentText = await data.text();\r\n        componentSpec = yaml.load(componentText) as ComponentSpec;\r\n      } catch(err) {\r\n        badHashesDb.setItem(hash, err.name + \": \" + err.message);\r\n        continue;\r\n      }\r\n      if (componentSpec.implementation === undefined) {\r\n        badHashesDb.setItem(hash, 'Component lacks the \"impelmentation\" section.');\r\n        continue;\r\n      }\r\n\r\n      // Blobs are cumbersome (need await to get text) - store text instead\r\n      // await hashToContentDb.setItem(hash, data);\r\n      await hashToContentDb.setItem(hash, componentText);\r\n\r\n      // Only adding hash -> URL once\r\n      const urlForHash = await hashToUrlDb.getItem<string>(hash);\r\n      if (urlForHash === null) {\r\n        await hashToUrlDb.setItem(hash, downloadUrl);\r\n      }\r\n\r\n      // Only storing names when they exist\r\n      if (componentSpec.name) {\r\n        await hashToComponentNameDb.setItem(hash, componentSpec.name);\r\n      }\r\n\r\n      await urlToHashDb.setItem(downloadUrl, hash);\r\n\r\n      // Marking the processing as completed\r\n      await urlProcessingVersionDb.setItem(\r\n        downloadUrl,\r\n        CURRENT_URL_PROCESSING_VERSION\r\n      );\r\n    } catch (err) {\r\n      console.error(\r\n        `Error when processing component candidate ${htmlUrl} Error: ${err}.`\r\n      );\r\n    }\r\n  }\r\n  console.debug(\"Finished cacheAllComponents\");\r\n};\r\n\r\n\r\nexport const getAllComponentsAsRefs = async (users = [\"kubeflow\", \"Ark-kun\"]) => {\r\n  // Perhaps use urlProcessingVersionDb as source of truth. Hmm. It is URL-based\r\n  const hashToUrlDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_URL_DB_TABLE_NAME,\r\n  });\r\n  const hashToContentDb = localForage.createInstance({\r\n    name: DB_NAME,\r\n    storeName: HASH_TO_CONTENT_DB_TABLE_NAME,\r\n  });\r\n  let hashToComponentRef = new Map<string, ComponentReference>();\r\n\r\n  const cachePromise = cacheAllComponents(users);\r\n  if ((await hashToContentDb.length()) === 0) {\r\n    await cachePromise;\r\n  }\r\n\r\n  // !!! Iterating using hashToContentDb.iterate<string, void> causes all values to be `[object Blob]`\r\n  //await hashToContentDb.iterate<Blob, void>(\r\n  await hashToContentDb.iterate<string, void>(\r\n    // !!! async processor causes only 1 item to be processed since it returns Promise instead of undefined.\r\n    //async (componentData, hash, iterationNumber) => {\r\n    (componentText, hash, iterationNumber) => {\r\n      //const componentText = await componentData.text();\r\n      try {\r\n        const componentSpec = yaml.load(componentText) as ComponentSpec;\r\n        hashToComponentRef.set(hash, {\r\n          spec: componentSpec,\r\n        });\r\n      } catch (err) {\r\n        console.error(\r\n          `Error when parsing cached component. Hash: ${hash}. Error: ${err}. Component text: ${componentText}`\r\n        );\r\n      }\r\n    }\r\n  );\r\n  await hashToUrlDb.iterate<string, void>((url, hash, iterationNumber) => {\r\n    let componentRef = hashToComponentRef.get(hash);\r\n    if (componentRef === undefined) {\r\n      console.error(\r\n        `Component db corrupted: Component with url ${url} and hash ${hash} has no content in the DB.`\r\n      );\r\n    } else {\r\n      componentRef.url = url;\r\n    }\r\n  });\r\n  let componentRefs: ComponentReference[] = [];\r\n  // TODO: Improve the iteration onve TypeScript propertly supports it\r\n  hashToComponentRef.forEach((componentRef, hash) => {\r\n    if (componentRef.url === undefined) {\r\n      console.error(\r\n        `Component db corrupted: Component with hash ${hash} has content, but no URL in the DB.`\r\n      );\r\n    } else {\r\n      componentRefs.push(componentRef);\r\n    }\r\n  });\r\n  return componentRefs;\r\n};\r\n\r\n\r\nexport const searchComponentsByName = async (name: string, users = [\"kubeflow\", \"Ark-kun\"]) => {\r\n  const componentRefs = await getAllComponentsAsRefs(users);\r\n  return componentRefs.filter((ref) => ref.spec?.name?.toLowerCase().includes(name.toLowerCase()) ?? false);\r\n};\r\n","import { DragEvent, useEffect, useState } from 'react';\r\n\r\nimport {downloadComponentDataWithCache} from '../github'\r\nimport {ComponentSpec, TaskSpec} from '../componentSpec'\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  event.dataTransfer.setData('application/reactflow', JSON.stringify(nodeData));\r\n  event.dataTransfer.effectAllowed = 'move';\r\n};\r\n\r\ntype ComponentGroup = {\r\n  category: string;\r\n  componentUrls: string[];\r\n};\r\n\r\nconst DraggableComponentRow = ({componentUrl}: {componentUrl: string}) => {\r\n  const [componentSpec, setComponentSpec] = useState<ComponentSpec | undefined>(undefined);\r\n  useEffect(() => {\r\n    downloadComponentDataWithCache(componentUrl).then(setComponentSpec);\r\n  }, [componentUrl]);\r\n\r\n  if (componentSpec === undefined) {\r\n    return <span>Loading...</span>\r\n  } else {\r\n    return (\r\n      <div\r\n        className=\"react-flow__node react-flow__node-task\"\r\n        draggable\r\n        onDragStart={(event: DragEvent) => {\r\n          const taskSpec: TaskSpec = {\r\n            componentRef: {\r\n              url: componentUrl,\r\n              spec: componentSpec,\r\n            },\r\n          };\r\n          return onDragStart(event, { task: taskSpec });\r\n        }}\r\n      >\r\n        {componentSpec.name}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst ComponentGroupList = ({ componentGroups }: { componentGroups: ComponentGroup[] }) => {\r\n  return (\r\n    <>\r\n      {Array.from(componentGroups).map(\r\n        ({ category, componentUrls }, index) => (\r\n          <details key={category} open={index === 0} style={{ border: \"1px solid #aaa\", borderRadius: \"4px\" }}>\r\n            <summary style={{ borderWidth: \"1px\", padding: \"8px\" }}>\r\n              <strong>{category}</strong>\r\n            </summary>\r\n            {componentUrls.map((componentUrl) => (\r\n              <DraggableComponentRow key={componentUrl} componentUrl={componentUrl} />\r\n            ))}\r\n          </details>\r\n        )\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst ComponentLibrary = ({ componentGroups }: { componentGroups: ComponentGroup[] }) => {\r\n  return (\r\n    <details open>\r\n      <summary style={{ border: \"1px solid #aaa\", padding: \"5px\", borderRadius: \"8px\" }}>\r\n        <strong>Component library</strong>\r\n      </summary>\r\n      <div style={{ paddingLeft: \"10px\" }}>\r\n        <ComponentGroupList componentGroups={componentGroups}/>\r\n      </div>\r\n    </details>\r\n  );\r\n};\r\n\r\nexport default ComponentLibrary;\r\n","import {\r\n  Node,\r\n  Edge,\r\n} from \"react-flow-renderer\";\r\n\r\nimport {\r\n  ComponentSpec,\r\n  TaskSpec,\r\n  InputSpec,\r\n  OutputSpec,\r\n  ArgumentType,\r\n  GraphInputArgument,\r\n  TaskOutputArgument,\r\n  GraphImplementation,\r\n} from \"../componentSpec\";\r\n\r\nconst getNodePositionAnnotations = (node: Node): { [k: string]: string } => ({\r\n  \"editor.position\": JSON.stringify({\r\n    // node.position cannot be used since set at 1st drop and never updated\r\n    x: node.__rf.position.x,\r\n    y: node.__rf.position.y,\r\n    width: node.__rf.width,\r\n    height: node.__rf.height,\r\n  }),\r\n});\r\n\r\nconst nodeOrderComparer = (n1: Node, n2: Node) =>\r\n  n1.__rf.position.x - n2.__rf.position.x;\r\n\r\nconst createGraphComponentSpecFromFlowElements = (\r\n  nodes: Node[],\r\n  edges: Edge[],\r\n  name = \"Component\",\r\n  annotations: Record<string, string> = {},\r\n  includePositions: boolean = true,\r\n  includeSpecs: boolean = false\r\n): ComponentSpec => {\r\n  // Input and output nodes\r\n  // Sorting them by horisontal position to make reordering inputs and outputs easy.\r\n  const inputNodes = nodes.filter((node) => node.type === \"input\").sort(nodeOrderComparer);\r\n  const outputNodes = nodes.filter((node) => node.type === \"output\").sort(nodeOrderComparer);\r\n  // Task nodes. They should all be ComponentTaskNode components\r\n  const taskNodes = nodes\r\n    .filter((node) => node.type === \"task\")\r\n    .map((node) => node as Node<TaskSpec>);\r\n  \r\n  const inputSpecs = inputNodes.map<InputSpec>((node) => {\r\n    let spec: InputSpec = { name: node.id };\r\n    if (includePositions) {\r\n      spec.annotations = getNodePositionAnnotations(node);\r\n    }\r\n    return spec;\r\n  });\r\n\r\n  const outputSpecs = outputNodes.map<OutputSpec>((node) => {\r\n    let spec: OutputSpec = { name: node.id };\r\n    if (includePositions) {\r\n      spec.annotations = spec.annotations = getNodePositionAnnotations(node);\r\n    }\r\n    return spec;\r\n  });\r\n\r\n  // const originalTaskMap = taskNodes.reduce((map, node) => {\r\n  //   const taskSpec = node.data;\r\n  //   if (taskSpec !== undefined) {\r\n  //     map.set(node.id, taskSpec);\r\n  //   }\r\n  //   return map;\r\n  // }, new Map<string, TaskSpec>());\r\n\r\n  const taskMap = taskNodes.reduce((accumulator, node) => {\r\n    let taskSpec = node.data;\r\n    if (taskSpec !== undefined) {\r\n      // Cloning the spec to modify it\r\n      taskSpec = Object.assign({}, taskSpec);\r\n      if (!includeSpecs) {\r\n        taskSpec.componentRef = Object.assign({}, taskSpec.componentRef);\r\n        delete taskSpec.componentRef.spec;\r\n      }\r\n      if (includePositions) {\r\n        taskSpec.annotations = getNodePositionAnnotations(node);\r\n      }\r\n      accumulator[node.id] = taskSpec;\r\n    }\r\n    return accumulator;\r\n  }, {} as Record<string, TaskSpec>);\r\n\r\n  let graphOutputValues: Record<string, TaskOutputArgument> = {};\r\n\r\n  for (const edge of edges) {\r\n    const sourceTaskId = edge.source;\r\n    const sourceOutputName = edge.sourceHandle?.replace(/^output_/, '');\r\n    const targetTaskId = edge.target;\r\n    const targetInputName = edge.targetHandle?.replace(/^input_/, '');\r\n\r\n    // if (!sourceOutputName || !targetInputName) {\r\n    //   console.error(\"Enexpected edge without a source or target handle:\", edge);\r\n    //   continue;\r\n    // }\r\n\r\n    // Checking the source task for sanity\r\n    if (!!sourceOutputName && taskMap[sourceTaskId] === undefined) {\r\n      console.error(\"Task node is connected to unknown node type:\", edge);\r\n      continue;\r\n    }\r\n\r\n    // FIX: For now, detecting the graph inputs and outputs by sourceOutputName or targetInputName being null\r\n    const argument: ArgumentType =\r\n      !!sourceOutputName\r\n        ? ({\r\n            taskOutput: { taskId: sourceTaskId, outputName: sourceOutputName },\r\n          } as TaskOutputArgument)\r\n        : ({\r\n            // Using input node ID as graph input name\r\n            graphInput: { inputName: sourceTaskId },\r\n          } as GraphInputArgument);\r\n    if (!!targetInputName) {\r\n      let targetTask = taskMap[targetTaskId];\r\n      if (targetTask === undefined) {\r\n        console.error(\"Task node is connected to unknown node type:\", edge);\r\n        continue;\r\n      }\r\n      if (targetTask.arguments === undefined) {\r\n        targetTask.arguments = {};\r\n      }\r\n      targetTask.arguments[targetInputName] = argument;\r\n    } else {\r\n      // graph output\r\n      // Using output node ID as graph output name\r\n      const taskOutputArgument = argument as TaskOutputArgument;\r\n      // FIX BUG This check does not work to guard against incompatible arguments\r\n      if (!!taskOutputArgument) {\r\n        graphOutputValues[targetTaskId] = taskOutputArgument;\r\n      } else {\r\n        console.error(\"Graph outputs can only come from task outputs.\")\r\n      }\r\n    }\r\n  }\r\n\r\n  // // Verify arguments\r\n  // // TODO: Also sort them\r\n  // for (const [taskId, taskSpec] of Object.entries(taskMap)) {\r\n    \r\n  // }\r\n\r\n  const graphComponent: ComponentSpec = {\r\n    name: name,\r\n    inputs: inputSpecs,\r\n    outputs: outputSpecs,\r\n    metadata: {\r\n      annotations: annotations\r\n    },\r\n    implementation: {\r\n      graph: {\r\n        tasks: taskMap,\r\n        outputValues: graphOutputValues,\r\n      },\r\n    },\r\n  };\r\n\r\n  // Cleanup.\r\n  // I could have prevented these attributes from being added, but then the attribute serialization ordering will be ugly\r\n  // (the first attribute would be \"implementation\" since it's required).\r\n  if (inputSpecs.length === 0) {\r\n    delete graphComponent.inputs;\r\n  }\r\n  if (outputSpecs.length === 0) {\r\n    delete graphComponent.outputs;\r\n  }\r\n  if (Object.keys(annotations).length === 0) {\r\n    delete graphComponent.metadata;\r\n  }\r\n  if (Object.keys(graphOutputValues).length === 0) {\r\n    delete (graphComponent.implementation as GraphImplementation).graph.outputValues;\r\n  }\r\n  return graphComponent;\r\n};\r\n\r\nexport { createGraphComponentSpecFromFlowElements };\r\n","import {\r\n  useStoreState,\r\n} from \"react-flow-renderer\";\r\nimport yaml from \"js-yaml\";\r\n\r\nimport {createGraphComponentSpecFromFlowElements} from './graphComponentFromFlow'\r\n\r\nconst GraphComponentExporter = ({pipelineName}: {pipelineName?: string}) => {\r\n  const nodes = useStoreState((store) => store.nodes);\r\n  const edges = useStoreState((store) => store.edges);\r\n\r\n  pipelineName = pipelineName ?? \"Pipeline\";\r\n\r\n  const graphComponent = createGraphComponentSpecFromFlowElements(nodes, edges, pipelineName);\r\n  const componentText = yaml.dump(graphComponent, { lineWidth: 10000 });\r\n\r\n  const componentTextBlob = new Blob([componentText], { type: \"text/yaml\" }); // Or application/x-yaml (which leads to downloading)\r\n  const downloadLink = <a href={URL.createObjectURL(componentTextBlob)} download={\"component.yaml\"}>component.yaml</a>\r\n\r\n  return (\r\n    <details open>\r\n      <summary>Graph {downloadLink}</summary>\r\n      <pre style={{overflow: \"auto\"}}>{componentText}</pre>\r\n    </details>\r\n  );\r\n};\r\n\r\nexport default GraphComponentExporter;\r\n","/* global gapi */\r\n\r\nimport { useState } from 'react';\r\n\r\nvar CLIENT_ID = '640001104961-2m8hs192tmd9f9nssbr5thr5o3uhmita.apps.googleusercontent.com';\r\nvar API_KEY = 'AIzaSyCDPTffgYGXoit-jKsj1_1WWbSxvU7aEdQ';\r\n     \r\nconst VERTEX_AI_PIPELINES_REGIONS = [\r\n  'us-central1',\r\n  'europe-west4',\r\n  'asia-east1',\r\n];\r\n\r\nconst VERTEX_AI_PIPELINES_DEFAULT_REGION = 'us-central1';\r\n\r\nconst authorizeGoogleCloudClient = async (\r\n  scopes: string[],\r\n  immediate = false, // Setting immediate to true prevents auth window showing every time. But it needs to be false the first time (when cookies are not set).\r\n  apiKey: string = API_KEY,\r\n  clientId: string = CLIENT_ID,\r\n) => {\r\n  return new Promise<gapi.auth.GoogleApiOAuth2TokenObject>(\r\n    (resolve, reject) => {\r\n      gapi.client.setApiKey(apiKey);\r\n      gapi.auth.authorize(\r\n        {\r\n          client_id: clientId,\r\n          scope: scopes,\r\n          immediate: immediate,\r\n        },\r\n        (authResult) => {\r\n          // console.debug(\"authorizeGoogleCloudClient: called back\");\r\n          if (authResult === undefined) {\r\n            console.error(\"authorizeGoogleCloudClient failed\");\r\n            reject(\"gapi.auth.authorize result is undefined\");\r\n          } else if (authResult.error) {\r\n            console.error(\r\n              \"authorizeGoogleCloudClient failed\",\r\n              authResult.error\r\n            );\r\n            reject(authResult.error);\r\n          } else {\r\n            resolve(authResult);\r\n            // console.debug(\"authorizeGoogleCloudClient: Success\");\r\n          }\r\n        }\r\n      );\r\n    }\r\n  );\r\n};\r\n\r\nconst ensureGoogleCloudAuthorizesScopes = async (scopes: string[]) => {\r\n  try {\r\n    // console.debug('Before ensureGoogleCloudAuthorizesScopes(immediate=true)');\r\n    await authorizeGoogleCloudClient(scopes, true);\r\n    // console.debug('After ensureGoogleCloudAuthorizesScopes(immediate=true)');\r\n  } catch (err) {\r\n    // console.error('ensureGoogleCloudAuthorizesScopes(immediate=true)', err);\r\n    try {\r\n      await authorizeGoogleCloudClient(scopes, false);\r\n    } catch (err) {\r\n      // console.error('ensureGoogleCloudAuthorizesScopes(immediate=false)', err);\r\n    }\r\n  }\r\n};\r\n\r\nconst cloudresourcemanagerListProjects = async (isAuthenticated = false) => {\r\n  await ensureGoogleCloudAuthorizesScopes(\r\n    [\"https://www.googleapis.com/auth/cloud-platform\"]\r\n  );\r\n  const response = await gapi.client.request({\r\n    path: \"https://cloudresourcemanager.googleapis.com/v1/projects/\",\r\n  });\r\n  return response.result;\r\n}\r\n\r\nconst aiplatformListPipelineJobs = async (projetId: string, region='us-central1', isAuthenticated = false) => {\r\n  await ensureGoogleCloudAuthorizesScopes(\r\n    [\"https://www.googleapis.com/auth/cloud-platform\"]\r\n  );\r\n  const response = await gapi.client.request({\r\n    path: `https://us-central1-aiplatform.googleapis.com/v1beta1/projects/${projetId}/locations/${region}/pipelineJobs`,\r\n  });\r\n  return response.result;\r\n}\r\n\r\nconst GoogleCloudSubmitter = () => {\r\n  const [projects, setProjects] = useState<string[]>([]);\r\n  const [project, setProject] = useState<string>(\"\"); // undefined causes error: https://reactjs.org/docs/forms.html#controlled-components https://stackoverflow.com/a/47012342\r\n  const [region, setRegion] = useState(VERTEX_AI_PIPELINES_DEFAULT_REGION);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  return (\r\n    <form\r\n      onSubmit={async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n          const result = await aiplatformListPipelineJobs(project, region);\r\n          console.log(\"aiplatformListPipelineJobs result:\", result);\r\n          setError(\"\");\r\n        } catch (err) {\r\n          setError(err?.result?.error?.message ?? \"Error\");\r\n        }\r\n      }}\r\n    >\r\n      <div>\r\n        <label htmlFor=\"project\">Project: </label>\r\n        <input\r\n          id=\"project\"\r\n          required\r\n          type=\"text\"\r\n          list=\"projects\"\r\n          placeholder=\"<my-project-id>\"\r\n          value={project}\r\n          onChange={(e) => setProject(e.target.value)}\r\n        />\r\n        <datalist id=\"projects\">\r\n          {projects.map((projectId) => (\r\n            <option key={projectId} value={projectId} />\r\n          ))}\r\n        </datalist>\r\n        <button\r\n          onClick={async (e) => {\r\n            try {\r\n              const result = await cloudresourcemanagerListProjects();\r\n              const projectIds = (result.projects as any[]).map<string>(\r\n                (projectInfo) => projectInfo.projectId\r\n              );\r\n              setProjects(projectIds);\r\n              setError(\"\");\r\n            } catch (err) {\r\n              setError(err);\r\n            }\r\n          }}\r\n        >\r\n          ⟳{/* 🗘⭯ ⭮ ↺ ↻ ⟲ ⟳ 🔃🔄 */}\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"region\">Region: </label>\r\n        <input\r\n          id=\"region\"\r\n          required\r\n          type=\"text\"\r\n          list=\"regions\"\r\n          value={region}\r\n          onChange={(e) => setRegion(e.target.value)}\r\n        />\r\n        <datalist id=\"regions\">\r\n          {VERTEX_AI_PIPELINES_REGIONS.map((region) => (\r\n            <option key={region} value={region} />\r\n          ))}\r\n        </datalist>\r\n      </div>\r\n      <input type=\"submit\" value=\"List Pipelines\" />\r\n      {error !== \"\" && <div>Error: {error}</div>}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default GoogleCloudSubmitter;\r\n","import React, { DragEvent, useEffect, useState } from 'react';\r\n\r\nimport {downloadComponentDataWithCache} from '../github'\r\nimport {ComponentSpec, TaskSpec} from '../componentSpec'\r\nimport ComponentLibrary from './ComponentLibrary'\r\nimport GraphComponentExporter from './GraphComponentExporter'\r\nimport GoogleCloudSubmitter from './GoogleCloud'\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  event.dataTransfer.setData('application/reactflow', JSON.stringify(nodeData));\r\n  event.dataTransfer.effectAllowed = 'move';\r\n};\r\n\r\nconst COMPONENT_LIBRARY = [\r\n  {\r\n    category: \"Quick start\",\r\n    componentUrls: [\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/e3337b8bdcd63636934954e592d4b32c95b49129/components/datasets/Chicago%20Taxi/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/567c04c51ff00a1ee525b3458425b17adbe3df61/components/XGBoost/Train/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/567c04c51ff00a1ee525b3458425b17adbe3df61/components/XGBoost/Predict/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"Datasets\", componentUrls: [\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/e3337b8bdcd63636934954e592d4b32c95b49129/components/datasets/Chicago%20Taxi/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"Data manipulation\",\r\n    componentUrls: [\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/6162d55998b176b50267d351241100bb0ee715bc/components/pandas/Transform_DataFrame/in_CSV_format/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"Upload/Download\",\r\n    componentUrls: [\r\n    'https://raw.githubusercontent.com/Ark-kun/pipelines/54ac9a6a7173aecbbb30a043b2077e790cac6953/components/web/Download/component.yaml',\r\n    'https://raw.githubusercontent.com/Ark-kun/pipelines/2dac60c400ad8767b452649d08f328dfaf230f96/components/google-cloud/storage/download/component.yaml',\r\n    'https://raw.githubusercontent.com/Ark-kun/pipelines/2dac60c400ad8767b452649d08f328dfaf230f96/components/google-cloud/storage/upload_to_unique_uri/component.yaml',\r\n    'https://raw.githubusercontent.com/Ark-kun/pipelines/2dac60c400ad8767b452649d08f328dfaf230f96/components/google-cloud/storage/upload_to_explicit_uri/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"XGBoost\",\r\n    componentUrls: [\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/567c04c51ff00a1ee525b3458425b17adbe3df61/components/XGBoost/Train/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/567c04c51ff00a1ee525b3458425b17adbe3df61/components/XGBoost/Predict/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"PyTorch\",\r\n    componentUrls: [\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/4e1facea1a270535b515a9e8cc59422d1ad76a9e/components/PyTorch/Create_fully_connected_network/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/603342c4b88fe2d69ff07682f702cd3601e883bb/components/PyTorch/Train_PyTorch_model/from_CSV/component.yaml',\r\n      'https://raw.githubusercontent.com/Ark-kun/pipelines/e011e4affa85542ef2b24d63fdac27f8d939bbee/components/PyTorch/Convert_to_OnnxModel_from_PyTorchScriptModule/component.yaml',\r\n    ]\r\n  },\r\n  {\r\n    category: \"TFX\",\r\n    componentUrls: [\r\n    ]\r\n  },\r\n];\r\n\r\nconst Sidebar = () => {\r\n  const [componentSpec, setComponentSpec] = useState<ComponentSpec | undefined>(undefined);\r\n\r\n  const componentUrl = \"https://raw.githubusercontent.com/kubeflow/pipelines/603342c4b88fe2d69ff07682f702cd3601e883bb/components/PyTorch/Train_PyTorch_model/from_CSV/component.yaml\";\r\n  useEffect(() => {\r\n    downloadComponentDataWithCache(componentUrl).then(setComponentSpec);\r\n  }, []);\r\n\r\n  return (\r\n    <aside className=\"nodeList\">\r\n      <details open style={{ border: \"1px solid #aaa\", borderRadius: \"4px\", padding: \"4px\" }}>\r\n        <summary style={{ borderWidth: \"1px\", padding: \"8px\", fontWeight: \"bold\" }}>Submit to Google Cloud</summary>\r\n        <GoogleCloudSubmitter/>\r\n      </details>\r\n      <div className=\"description\">You can drag these nodes to the pane on the right.</div>\r\n      <div className=\"react-flow__node-input\" onDragStart={(event: DragEvent) => onDragStart(event, { input: { label: \"Input Node\" } })} draggable>\r\n        Input Node\r\n      </div>\r\n      <div className=\"react-flow__node-output\" onDragStart={(event: DragEvent) => onDragStart(event, { output: { label: \"Output Node\" } })} draggable>\r\n        Output Node\r\n      </div>\r\n      <ComponentLibrary componentGroups={COMPONENT_LIBRARY}/>\r\n      <GraphComponentExporter/>\r\n      <details>\r\n        <summary>Legacy nodes</summary>\r\n          <div className=\"react-flow__node-default\" onDragStart={(event: DragEvent) => onDragStart(event, { default: { label: \"Default Node\" } })} draggable>\r\n            Default Node\r\n          </div>\r\n          <div className=\"react-flow__node react-flow__node-multihandle\" draggable\r\n          onDragStart={(event: DragEvent) =>\r\n            onDragStart(event, { multihandle: {\r\n              handles: {\r\n                top: { type: \"target\", ids: [\"top_1\", \"top_2\", \"top_3\"] },\r\n                bottom: { type: \"source\", ids: [\"bottom_1\", \"bottom_2\"] },\r\n                left: { type: \"target\", ids: [\"left_1\"] },\r\n                right: { type: \"source\", ids: [\"right_1\"] },\r\n              },\r\n              label: \"Multi-handle node (3-2-1-1)\",\r\n            }})\r\n          }\r\n        >\r\n          Multi-port Node 3-2-1-1\r\n        </div>\r\n        <div className=\"react-flow__node react-flow__node-multihandle\" draggable\r\n          onDragStart={(event: DragEvent) => {\r\n            // Using await inside onDragStart breaks event.dataTransfer.setData! \r\n            //const componentSpec = await loadComponentFromUrl(\"https://raw.githubusercontent.com/kubeflow/pipelines/603342c4b88fe2d69ff07682f702cd3601e883bb/components/PyTorch/Train_PyTorch_model/from_CSV/component.yaml\");\r\n            if (componentSpec === undefined) {\r\n              return;\r\n            }\r\n            const inputs = componentSpec.inputs ?? []\r\n            const inputNames = inputs.map(inputSpec => inputSpec.name);\r\n            const outputs = componentSpec.outputs ?? []\r\n            const outputNames = outputs.map(outputSpec => outputSpec.name);\r\n            const componentName = componentSpec.name ?? \"Component\"\r\n            return onDragStart(event, { multihandle: {\r\n              handles: {\r\n                top: { type: \"target\", ids: inputNames },\r\n                bottom: { type: \"source\", ids: outputNames },\r\n              },\r\n              label: componentName,\r\n            }});\r\n          }}\r\n        >\r\n          PyTorch/Train_PyTorch_model/from_CSV\r\n        </div>\r\n        {\r\n          componentSpec !== undefined && <div className=\"react-flow__node react-flow__node-multihandle\" draggable\r\n            onDragStart={(event: DragEvent) => {\r\n              const taskSpec: TaskSpec = {\r\n                componentRef: {\r\n                  url: componentUrl,\r\n                  spec: componentSpec,\r\n                },\r\n              };\r\n              return onDragStart(event, { task: taskSpec});\r\n            }}\r\n          >\r\n            {componentSpec.name}\r\n          </div>\r\n        }\r\n      </details>\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React, { DragEvent } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { ComponentReference, TaskSpec } from \"../componentSpec\";\r\nimport { searchComponentsByName } from \"../github\";\r\n\r\nconst onDragStart = (event: DragEvent, nodeData: object) => {\r\n  event.dataTransfer.setData(\"application/reactflow\", JSON.stringify(nodeData));\r\n  event.dataTransfer.effectAllowed = \"move\";\r\n};\r\n\r\nconst COMPONENT_ORGS = [\"kubeflow\", \"Ark-kun\"];\r\n\r\nconst SearchPanel = (props: any) => {\r\n  const [error, setError] = useState<string | undefined>(undefined);\r\n  const [firstTime, setFirstTime] = useState(true);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [items, setItems] = useState<ComponentReference[]>([]);\r\n\r\n  const onQueryChange = (e: any) => {\r\n    setQuery(e.target.value);\r\n  };\r\n\r\n  async function fetchData(query: string) {\r\n    searchComponentsByName(query, COMPONENT_ORGS).then(\r\n      (componentRefs) => {\r\n        setIsLoaded(true);\r\n        setItems(componentRefs);\r\n      },\r\n      (error) => {\r\n        setIsLoaded(true);\r\n        setError(error.message);\r\n      }\r\n    );\r\n  }\r\n\r\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (query !== \"\") {\r\n      setFirstTime(false);\r\n      fetchData(query);\r\n    }\r\n  };\r\n\r\n  let results = <span></span>;\r\n  if (firstTime) {\r\n    results = <div>Enter search query</div>;\r\n  } else if (error !== undefined) {\r\n    results = <div>Error: {error}</div>;\r\n  } else if (!firstTime && !isLoaded) {\r\n    results = <div>Searching...</div>;\r\n  } else if (items !== undefined) {\r\n    const componentElements = items.map((item) => (\r\n      <div\r\n        key={item.url}\r\n        title={item.url}\r\n        className=\"react-flow__node react-flow__node-multihandle\"\r\n        draggable\r\n        onDragStart={(event: DragEvent) => {\r\n          const taskSpec: TaskSpec = {\r\n            componentRef: item,\r\n          };\r\n          return onDragStart(event, { task: taskSpec });\r\n        }}\r\n      >\r\n        {item.spec?.name}\r\n      </div>\r\n    ));\r\n    results = <>{componentElements}</>;\r\n  }\r\n  return (\r\n    <div className=\"nodeList\">\r\n      <form onSubmit={onSubmit}>\r\n        <input type=\"search\" placeholder=\"XGBoost\" onChange={onQueryChange} />\r\n        <input type=\"submit\" />\r\n      </form>\r\n      <div>{results}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchPanel;\r\n","import React, { memo, FC } from 'react';\r\n\r\nimport { Handle, Position, NodeProps, HandleType } from 'react-flow-renderer';\r\n\r\ntype NodeData = {\r\n  label: string\r\n  handles: NodeHandles\r\n}\r\n\r\ntype NodeHandles = {\r\n  [key: string]: SideHandles // key is Position\r\n}\r\n\r\ntype SideHandles = {\r\n  type: HandleType\r\n  ids: string[]\r\n}\r\n\r\nconst MultiHandleNode: FC<NodeProps<NodeData>> = ({data}) => {\r\n  let handleComponents = [];\r\n  for (const position in data.handles) {\r\n    const sideHandles = data.handles[position];\r\n    const numHandles = sideHandles.ids.length;\r\n    for (let i = 0; i < numHandles; i++) {\r\n      const id = sideHandles.ids[i];\r\n      const relativePosition = (i + 1) / (numHandles + 1);\r\n      const positionPercentString = String(100 * relativePosition) + \"%\";\r\n      const style =\r\n        (position === Position.Top || position === Position.Bottom)\r\n          ? { left: positionPercentString }\r\n          : { top: positionPercentString };\r\n      handleComponents.push(\r\n        <Handle\r\n          key={id}\r\n          type={sideHandles.type}\r\n          position={position as Position}\r\n          id={id}\r\n          style={style}\r\n          isConnectable={true}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {data.label}\r\n      {handleComponents}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(MultiHandleNode);\r\n","import { memo } from 'react';\r\nimport {TaskSpec, InputSpec, OutputSpec} from '../componentSpec';\r\n\r\nimport { Handle, Position, NodeProps, HandleType } from 'react-flow-renderer';\r\n\r\nconst inputHandlePosition = Position.Top;\r\nconst outputHandlePosition = Position.Bottom;\r\n\r\ntype InputOrOutputSpec = InputSpec | OutputSpec;\r\n\r\nfunction generateHandles(\r\n  ioSpecs: InputOrOutputSpec[],\r\n  handleType: HandleType,\r\n  position: Position,\r\n  idPrefix: string,\r\n): JSX.Element[] {\r\n  let handleComponents = [];\r\n  const numHandles = ioSpecs.length;\r\n  for (let i = 0; i < numHandles; i++) {\r\n    const ioSpec = ioSpecs[i];\r\n    const id = idPrefix + ioSpec.name;\r\n    const relativePosition = (i + 1) / (numHandles + 1);\r\n    const positionPercentString = String(100 * relativePosition) + \"%\";\r\n    const style =\r\n      position === Position.Top || position === Position.Bottom\r\n        ? { left: positionPercentString }\r\n        : { top: positionPercentString };\r\n    const ioTypeName = ioSpec.type?.toString() ?? \"Any\";\r\n    const className = ioTypeName; // Need to be sanitized\r\n    handleComponents.push(\r\n      <Handle\r\n        key={id}\r\n        type={handleType}\r\n        position={position}\r\n        id={id}\r\n        style={style}\r\n        isConnectable={true}\r\n        title={ioSpec.name + \" : \" + ioTypeName}\r\n        className={\"handle_\" + className}\r\n      />\r\n    );\r\n  }\r\n  return handleComponents;\r\n}\r\n\r\nfunction generateInputHandles(inputSpecs: InputSpec[]): JSX.Element[] {\r\n  return generateHandles(inputSpecs, \"target\", inputHandlePosition, \"input_\");\r\n}\r\n\r\nfunction generateOutputHandles(outputSpecs: OutputSpec[]): JSX.Element[] {\r\n  return generateHandles(outputSpecs, \"source\", outputHandlePosition, \"output_\");\r\n}\r\n\r\nconst ComponentTaskNode = ({data}: NodeProps<TaskSpec>) => {\r\n  const taskSpec = data;\r\n  const componentSpec = taskSpec.componentRef.spec;\r\n  if (componentSpec === undefined) {\r\n    return (<></>);\r\n  }\r\n\r\n  const label = componentSpec.name ?? \"<component>\";\r\n  const inputHandles = generateInputHandles(componentSpec.inputs ?? []);\r\n  const outputHandles = generateOutputHandles(componentSpec.outputs ?? []);\r\n  const handleComponents = inputHandles.concat(outputHandles);\r\n\r\n  return (\r\n    <>\r\n      {label}\r\n      {handleComponents}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(ComponentTaskNode);\r\n","import React, { useState, DragEvent } from 'react';\r\nimport ReactFlow, {\r\n  ReactFlowProvider,\r\n  addEdge,\r\n  updateEdge,\r\n  removeElements,\r\n  Controls,\r\n  OnLoadParams,\r\n  Elements,\r\n  Connection,\r\n  Edge,\r\n  ElementId,\r\n  Node,\r\n  Background,\r\n  MiniMap,\r\n} from 'react-flow-renderer';\r\n\r\nimport Sidebar from './Sidebar';\r\nimport ComponentSearch from './ComponentSearch'\r\n\r\nimport MultiHandleNode from './MultiHandleNode';\r\nimport ComponentTaskNode from './ComponentTaskNode';\r\n\r\nimport './dnd.css';\r\n\r\nconst GRID_SIZE = 10;\r\n\r\nconst nodeTypes = {\r\n  multihandle: MultiHandleNode,\r\n  task: ComponentTaskNode,\r\n};\r\n\r\nconst initialElements = [{ id: '1', type: 'input', data: { label: 'input node' }, position: { x: 250, y: 10 } }];\r\n\r\nconst onDragOver = (event: DragEvent) => {\r\n  event.preventDefault();\r\n  event.dataTransfer.dropEffect = 'move';\r\n};\r\n\r\nlet id = 0;\r\nconst getId = (): ElementId => `dndnode_${id++}`;\r\n\r\nconst DnDFlow = () => {\r\n  const [reactFlowInstance, setReactFlowInstance] = useState<OnLoadParams>();\r\n  const [elements, setElements] = useState<Elements>(initialElements);\r\n\r\n  // gets called after end of edge gets dragged to another source or target\r\n  const onEdgeUpdate = (oldEdge: Edge, newConnection: Connection) =>\r\n    setElements((els) => updateEdge(oldEdge, newConnection, els));\r\n  const onConnect = (params: Connection | Edge) => setElements((els) => addEdge(params, els));\r\n  const onElementsRemove = (elementsToRemove: Elements) => setElements((els) => removeElements(elementsToRemove, els));\r\n  const onLoad = (_reactFlowInstance: OnLoadParams) => setReactFlowInstance(_reactFlowInstance);\r\n\r\n  const onEdgeUpdateStart = (_: React.MouseEvent, edge: Edge) => console.log('start update', edge);\r\n  const onEdgeUpdateEnd = (_: MouseEvent, edge: Edge) => console.log('end update', edge);\r\n\r\n  const onDrop = (event: DragEvent) => {\r\n    event.preventDefault();\r\n\r\n    if (reactFlowInstance) {\r\n      const droppedData = event.dataTransfer.getData('application/reactflow');\r\n      if (droppedData === \"\") {\r\n        return;\r\n      }\r\n      const droppedDataObject = JSON.parse(droppedData);\r\n      const nodeType = Object.keys(droppedDataObject)[0];\r\n      const nodeData = droppedDataObject[nodeType];\r\n      const position = reactFlowInstance.project({ x: event.clientX, y: event.clientY - 40 });\r\n      const newNode: Node = {\r\n        id: getId(),\r\n        type: nodeType,\r\n        position,\r\n        data: nodeData,\r\n      };\r\n\r\n      setElements((es) => es.concat(newNode));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"dndflow\">\r\n      <ReactFlowProvider>\r\n        <div className=\"reactflow-wrapper\">\r\n          <ReactFlow\r\n            elements={elements}\r\n            onConnect={onConnect}\r\n            onElementsRemove={onElementsRemove}\r\n            onEdgeUpdateStart={onEdgeUpdateStart}\r\n            onEdgeUpdateEnd={onEdgeUpdateEnd}\r\n            onEdgeUpdate={onEdgeUpdate}\r\n            onLoad={onLoad}\r\n            onDrop={onDrop}\r\n            onDragOver={onDragOver}\r\n            nodeTypes={nodeTypes}\r\n            deleteKeyCode='Delete'\r\n            multiSelectionKeyCode='Control'\r\n            snapToGrid={true}\r\n            snapGrid={[GRID_SIZE, GRID_SIZE]}\r\n          >\r\n            <MiniMap/>\r\n            <Controls />\r\n            <Background gap={GRID_SIZE}/>\r\n          </ReactFlow>\r\n        </div>\r\n        <Sidebar />\r\n        <ComponentSearch />\r\n      </ReactFlowProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DnDFlow;\r\n","import './App.css';\r\nimport DnDFlow from './DragNDrop/index';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" style={{width: \"100%\", height: \"100%\"}}>\r\n      <DnDFlow/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}