name: data_passing_pipeline
inputs:
  - name: anything_param
    default: anything_param
    optional: true
    annotations:
      editor.position: '{"x":160,"y":390,"width":180,"height":40}'
  - name: something_param
    type: Something
    default: something_param
    optional: true
    annotations:
      editor.position: '{"x":620,"y":390,"width":180,"height":40}'
  - name: string_param
    type: String
    default: string_param
    optional: true
    annotations:
      editor.position: '{"x":1090,"y":390,"width":180,"height":40}'
implementation:
  graph:
    tasks:
      Produce anything:
        componentRef:
          spec:
            name: Produce anything
            outputs:
              - name: data
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def _make_parent_dirs_and_return_path(file_path: str):
                        import os
                        os.makedirs(os.path.dirname(file_path), exist_ok=True)
                        return file_path

                    def produce_anything(data_path):
                        with open(data_path, "w") as f:
                            f.write("produce_anything")

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Produce anything', description='')
                    _parser.add_argument("--data", dest="data_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = produce_anything(**_parsed_args)
                args:
                  - '--data'
                  - outputPath: data
        arguments: {}
        annotations:
          editor.position: '{"x":160,"y":40,"width":180,"height":40}'
      Produce something:
        componentRef:
          spec:
            name: Produce something
            outputs:
              - name: data
                type: Something
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def _make_parent_dirs_and_return_path(file_path: str):
                        import os
                        os.makedirs(os.path.dirname(file_path), exist_ok=True)
                        return file_path

                    def produce_something(data_path):
                        with open(data_path, "w") as f:
                            f.write("produce_something")

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Produce something', description='')
                    _parser.add_argument("--data", dest="data_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = produce_something(**_parsed_args)
                args:
                  - '--data'
                  - outputPath: data
        arguments: {}
        annotations:
          editor.position: '{"x":620,"y":40,"width":180,"height":40}'
      Produce string:
        componentRef:
          spec:
            name: Produce string
            outputs:
              - name: Output
                type: String
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def produce_string():
                        return "produce_string"

                    def _serialize_str(str_value: str) -> str:
                        if not isinstance(str_value, str):
                            raise TypeError('Value "{}" has type "{}" instead of str.'.format(str(str_value), str(type(str_value))))
                        return str_value

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Produce string', description='')
                    _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
                    _parsed_args = vars(_parser.parse_args())
                    _output_files = _parsed_args.pop("_output_paths", [])

                    _outputs = produce_string(**_parsed_args)

                    _outputs = [_outputs]

                    _output_serializers = [
                        _serialize_str,

                    ]

                    import os
                    for idx, output_file in enumerate(_output_files):
                        try:
                            os.makedirs(os.path.dirname(output_file))
                        except OSError:
                            pass
                        with open(output_file, 'w') as f:
                            f.write(_output_serializers[idx](_outputs[idx]))
                args:
                  - '----output-paths'
                  - outputPath: Output
        arguments: {}
        annotations:
          editor.position: '{"x":1080,"y":40,"width":180,"height":40}'
      Consume anything as value 5:
        componentRef:
          spec:
            name: Consume anything as value
            inputs:
              - name: data
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_anything_as_value(data):
                        print("consume_anything_as_value: " + data)

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume anything as value', description='')
                    _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_anything_as_value(**_parsed_args)
                args:
                  - '--data'
                  - inputValue: data
        arguments:
          data:
            taskOutput:
              taskId: Produce anything
              outputName: data
        annotations:
          editor.position: '{"x":50,"y":150,"width":180,"height":40}'
      Consume anything as file 5:
        componentRef:
          spec:
            name: Consume anything as file
            inputs:
              - name: data
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_anything_as_file(data_path):
                        with open(data_path) as f:
                            print("consume_anything_as_file: " + f.read())

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume anything as file', description='')
                    _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_anything_as_file(**_parsed_args)
                args:
                  - '--data'
                  - inputPath: data
        arguments:
          data:
            taskOutput:
              taskId: Produce anything
              outputName: data
        annotations:
          editor.position: '{"x":270,"y":150,"width":180,"height":40}'
      Consume anything as value 6:
        componentRef:
          spec:
            name: Consume anything as value
            inputs:
              - name: data
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_anything_as_value(data):
                        print("consume_anything_as_value: " + data)

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume anything as value', description='')
                    _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_anything_as_value(**_parsed_args)
                args:
                  - '--data'
                  - inputValue: data
        arguments:
          data:
            taskOutput:
              taskId: Produce something
              outputName: data
        annotations:
          editor.position: '{"x":510,"y":150,"width":180,"height":40}'
      Consume anything as file 6:
        componentRef:
          spec:
            name: Consume anything as file
            inputs:
              - name: data
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_anything_as_file(data_path):
                        with open(data_path) as f:
                            print("consume_anything_as_file: " + f.read())

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume anything as file', description='')
                    _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_anything_as_file(**_parsed_args)
                args:
                  - '--data'
                  - inputPath: data
        arguments:
          data:
            taskOutput:
              taskId: Produce something
              outputName: data
        annotations:
          editor.position: '{"x":730,"y":150,"width":180,"height":40}'
      Consume anything as value 7:
        componentRef:
          spec:
            name: Consume anything as value
            inputs:
              - name: data
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_anything_as_value(data):
                        print("consume_anything_as_value: " + data)

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume anything as value', description='')
                    _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_anything_as_value(**_parsed_args)
                args:
                  - '--data'
                  - inputValue: data
        arguments:
          data:
            taskOutput:
              taskId: Produce string
              outputName: Output
        annotations:
          editor.position: '{"x":970,"y":150,"width":180,"height":40}'
      Consume anything as file 7:
        componentRef:
          spec:
            name: Consume anything as file
            inputs:
              - name: data
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_anything_as_file(data_path):
                        with open(data_path) as f:
                            print("consume_anything_as_file: " + f.read())

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume anything as file', description='')
                    _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_anything_as_file(**_parsed_args)
                args:
                  - '--data'
                  - inputPath: data
        arguments:
          data:
            taskOutput:
              taskId: Produce string
              outputName: Output
        annotations:
          editor.position: '{"x":1190,"y":150,"width":180,"height":40}'
      Consume something as value 4:
        componentRef:
          spec:
            name: Consume something as value
            inputs:
              - name: data
                type: Something
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_something_as_value(data):
                        print("consume_something_as_value: " + data)

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume something as value', description='')
                    _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_something_as_value(**_parsed_args)
                args:
                  - '--data'
                  - inputValue: data
        arguments:
          data:
            taskOutput:
              taskId: Produce anything
              outputName: data
        annotations:
          editor.position: '{"x":50,"y":220,"width":180,"height":40}'
      Consume something as file 4:
        componentRef:
          spec:
            name: Consume something as file
            inputs:
              - name: data
                type: Something
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_something_as_file(data_path):
                        with open(data_path) as f:
                            print("consume_something_as_file: " + f.read())

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume something as file', description='')
                    _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_something_as_file(**_parsed_args)
                args:
                  - '--data'
                  - inputPath: data
        arguments:
          data:
            taskOutput:
              taskId: Produce anything
              outputName: data
        annotations:
          editor.position: '{"x":270,"y":220,"width":180,"height":40}'
      Consume something as value 5:
        componentRef:
          spec:
            name: Consume something as value
            inputs:
              - name: data
                type: Something
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_something_as_value(data):
                        print("consume_something_as_value: " + data)

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume something as value', description='')
                    _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_something_as_value(**_parsed_args)
                args:
                  - '--data'
                  - inputValue: data
        arguments:
          data:
            taskOutput:
              taskId: Produce something
              outputName: data
        annotations:
          editor.position: '{"x":510,"y":220,"width":180,"height":40}'
      Consume something as file 5:
        componentRef:
          spec:
            name: Consume something as file
            inputs:
              - name: data
                type: Something
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_something_as_file(data_path):
                        with open(data_path) as f:
                            print("consume_something_as_file: " + f.read())

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume something as file', description='')
                    _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_something_as_file(**_parsed_args)
                args:
                  - '--data'
                  - inputPath: data
        arguments:
          data:
            taskOutput:
              taskId: Produce something
              outputName: data
        annotations:
          editor.position: '{"x":730,"y":220,"width":180,"height":40}'
      Consume string as value 5:
        componentRef:
          spec:
            name: Consume string as value
            inputs:
              - name: data
                type: String
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_string_as_value(data):
                        print("consume_string_as_value: " + data)

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume string as value', description='')
                    _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_string_as_value(**_parsed_args)
                args:
                  - '--data'
                  - inputValue: data
        arguments:
          data:
            taskOutput:
              taskId: Produce string
              outputName: Output
        annotations:
          editor.position: '{"x":970,"y":220,"width":180,"height":40}'
      Consume string as file 5:
        componentRef:
          spec:
            name: Consume string as file
            inputs:
              - name: data
                type: String
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_string_as_file(data_path):
                        with open(data_path) as f:
                            print("consume_string_as_file: " + f.read())

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume string as file', description='')
                    _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_string_as_file(**_parsed_args)
                args:
                  - '--data'
                  - inputPath: data
        arguments:
          data:
            taskOutput:
              taskId: Produce string
              outputName: Output
        annotations:
          editor.position: '{"x":1190,"y":220,"width":180,"height":40}'
      Consume string as value 4:
        componentRef:
          spec:
            name: Consume string as value
            inputs:
              - name: data
                type: String
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_string_as_value(data):
                        print("consume_string_as_value: " + data)

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume string as value', description='')
                    _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_string_as_value(**_parsed_args)
                args:
                  - '--data'
                  - inputValue: data
        arguments:
          data:
            taskOutput:
              taskId: Produce anything
              outputName: data
        annotations:
          editor.position: '{"x":50,"y":290,"width":180,"height":40}'
      Consume string as file 4:
        componentRef:
          spec:
            name: Consume string as file
            inputs:
              - name: data
                type: String
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_string_as_file(data_path):
                        with open(data_path) as f:
                            print("consume_string_as_file: " + f.read())

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume string as file', description='')
                    _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_string_as_file(**_parsed_args)
                args:
                  - '--data'
                  - inputPath: data
        arguments:
          data:
            taskOutput:
              taskId: Produce anything
              outputName: data
        annotations:
          editor.position: '{"x":270,"y":290,"width":180,"height":40}'
      Consume anything as value 2:
        componentRef:
          spec:
            name: Consume anything as value
            inputs:
              - name: data
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_anything_as_value(data):
                        print("consume_anything_as_value: " + data)

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume anything as value', description='')
                    _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_anything_as_value(**_parsed_args)
                args:
                  - '--data'
                  - inputValue: data
        arguments:
          data:
            graphInput:
              inputName: anything_param
        annotations:
          editor.position: '{"x":50,"y":500,"width":180,"height":40}'
      Consume anything as file 2:
        componentRef:
          spec:
            name: Consume anything as file
            inputs:
              - name: data
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_anything_as_file(data_path):
                        with open(data_path) as f:
                            print("consume_anything_as_file: " + f.read())

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume anything as file', description='')
                    _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_anything_as_file(**_parsed_args)
                args:
                  - '--data'
                  - inputPath: data
        arguments:
          data:
            graphInput:
              inputName: anything_param
        annotations:
          editor.position: '{"x":270,"y":500,"width":180,"height":40}'
      Consume anything as value 3:
        componentRef:
          spec:
            name: Consume anything as value
            inputs:
              - name: data
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_anything_as_value(data):
                        print("consume_anything_as_value: " + data)

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume anything as value', description='')
                    _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_anything_as_value(**_parsed_args)
                args:
                  - '--data'
                  - inputValue: data
        arguments:
          data:
            graphInput:
              inputName: something_param
        annotations:
          editor.position: '{"x":510,"y":500,"width":180,"height":40}'
      Consume anything as file 3:
        componentRef:
          spec:
            name: Consume anything as file
            inputs:
              - name: data
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_anything_as_file(data_path):
                        with open(data_path) as f:
                            print("consume_anything_as_file: " + f.read())

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume anything as file', description='')
                    _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_anything_as_file(**_parsed_args)
                args:
                  - '--data'
                  - inputPath: data
        arguments:
          data:
            graphInput:
              inputName: something_param
        annotations:
          editor.position: '{"x":730,"y":500,"width":180,"height":40}'
      Consume anything as value 4:
        componentRef:
          spec:
            name: Consume anything as value
            inputs:
              - name: data
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_anything_as_value(data):
                        print("consume_anything_as_value: " + data)

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume anything as value', description='')
                    _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_anything_as_value(**_parsed_args)
                args:
                  - '--data'
                  - inputValue: data
        arguments:
          data:
            graphInput:
              inputName: string_param
        annotations:
          editor.position: '{"x":970,"y":500,"width":180,"height":40}'
      Consume anything as file 4:
        componentRef:
          spec:
            name: Consume anything as file
            inputs:
              - name: data
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_anything_as_file(data_path):
                        with open(data_path) as f:
                            print("consume_anything_as_file: " + f.read())

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume anything as file', description='')
                    _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_anything_as_file(**_parsed_args)
                args:
                  - '--data'
                  - inputPath: data
        arguments:
          data:
            graphInput:
              inputName: string_param
        annotations:
          editor.position: '{"x":1190,"y":500,"width":180,"height":40}'
      Consume something as value 2:
        componentRef:
          spec:
            name: Consume something as value
            inputs:
              - name: data
                type: Something
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_something_as_value(data):
                        print("consume_something_as_value: " + data)

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume something as value', description='')
                    _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_something_as_value(**_parsed_args)
                args:
                  - '--data'
                  - inputValue: data
        arguments:
          data:
            graphInput:
              inputName: anything_param
        annotations:
          editor.position: '{"x":50,"y":570,"width":180,"height":40}'
      Consume something as file 2:
        componentRef:
          spec:
            name: Consume something as file
            inputs:
              - name: data
                type: Something
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_something_as_file(data_path):
                        with open(data_path) as f:
                            print("consume_something_as_file: " + f.read())

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume something as file', description='')
                    _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_something_as_file(**_parsed_args)
                args:
                  - '--data'
                  - inputPath: data
        arguments:
          data:
            graphInput:
              inputName: anything_param
        annotations:
          editor.position: '{"x":270,"y":570,"width":180,"height":40}'
      Consume something as value 3:
        componentRef:
          spec:
            name: Consume something as value
            inputs:
              - name: data
                type: Something
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_something_as_value(data):
                        print("consume_something_as_value: " + data)

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume something as value', description='')
                    _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_something_as_value(**_parsed_args)
                args:
                  - '--data'
                  - inputValue: data
        arguments:
          data:
            graphInput:
              inputName: something_param
        annotations:
          editor.position: '{"x":510,"y":570,"width":180,"height":40}'
      Consume something as file 3:
        componentRef:
          spec:
            name: Consume something as file
            inputs:
              - name: data
                type: Something
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_something_as_file(data_path):
                        with open(data_path) as f:
                            print("consume_something_as_file: " + f.read())

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume something as file', description='')
                    _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_something_as_file(**_parsed_args)
                args:
                  - '--data'
                  - inputPath: data
        arguments:
          data:
            graphInput:
              inputName: something_param
        annotations:
          editor.position: '{"x":730,"y":570,"width":180,"height":40}'
      Consume string as value 3:
        componentRef:
          spec:
            name: Consume string as value
            inputs:
              - name: data
                type: String
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_string_as_value(data):
                        print("consume_string_as_value: " + data)

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume string as value', description='')
                    _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_string_as_value(**_parsed_args)
                args:
                  - '--data'
                  - inputValue: data
        arguments:
          data:
            graphInput:
              inputName: string_param
        annotations:
          editor.position: '{"x":970,"y":570,"width":180,"height":40}'
      Consume string as file 3:
        componentRef:
          spec:
            name: Consume string as file
            inputs:
              - name: data
                type: String
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_string_as_file(data_path):
                        with open(data_path) as f:
                            print("consume_string_as_file: " + f.read())

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume string as file', description='')
                    _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_string_as_file(**_parsed_args)
                args:
                  - '--data'
                  - inputPath: data
        arguments:
          data:
            graphInput:
              inputName: string_param
        annotations:
          editor.position: '{"x":1190,"y":570,"width":180,"height":40}'
      Consume string as value 2:
        componentRef:
          spec:
            name: Consume string as value
            inputs:
              - name: data
                type: String
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_string_as_value(data):
                        print("consume_string_as_value: " + data)

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume string as value', description='')
                    _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_string_as_value(**_parsed_args)
                args:
                  - '--data'
                  - inputValue: data
        arguments:
          data:
            graphInput:
              inputName: anything_param
        annotations:
          editor.position: '{"x":50,"y":640,"width":180,"height":40}'
      Consume string as file 2:
        componentRef:
          spec:
            name: Consume string as file
            inputs:
              - name: data
                type: String
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_string_as_file(data_path):
                        with open(data_path) as f:
                            print("consume_string_as_file: " + f.read())

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume string as file', description='')
                    _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_string_as_file(**_parsed_args)
                args:
                  - '--data'
                  - inputPath: data
        arguments:
          data:
            graphInput:
              inputName: anything_param
        annotations:
          editor.position: '{"x":270,"y":640,"width":180,"height":40}'
      Consume anything as value:
        componentRef:
          spec:
            name: Consume anything as value
            inputs:
              - name: data
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_anything_as_value(data):
                        print("consume_anything_as_value: " + data)

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume anything as value', description='')
                    _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_anything_as_value(**_parsed_args)
                args:
                  - '--data'
                  - inputValue: data
        arguments:
          data: constant
        annotations:
          editor.position: '{"x":50,"y":740,"width":180,"height":40}'
      Consume anything as file:
        componentRef:
          spec:
            name: Consume anything as file
            inputs:
              - name: data
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_anything_as_file(data_path):
                        with open(data_path) as f:
                            print("consume_anything_as_file: " + f.read())

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume anything as file', description='')
                    _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_anything_as_file(**_parsed_args)
                args:
                  - '--data'
                  - inputPath: data
        arguments:
          data: constant
        annotations:
          editor.position: '{"x":270,"y":740,"width":180,"height":40}'
      Consume something as value:
        componentRef:
          spec:
            name: Consume something as value
            inputs:
              - name: data
                type: Something
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_something_as_value(data):
                        print("consume_something_as_value: " + data)

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume something as value', description='')
                    _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_something_as_value(**_parsed_args)
                args:
                  - '--data'
                  - inputValue: data
        arguments:
          data: constant
        annotations:
          editor.position: '{"x":50,"y":810,"width":180,"height":40}'
      Consume something as file:
        componentRef:
          spec:
            name: Consume something as file
            inputs:
              - name: data
                type: Something
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_something_as_file(data_path):
                        with open(data_path) as f:
                            print("consume_something_as_file: " + f.read())

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume something as file', description='')
                    _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_something_as_file(**_parsed_args)
                args:
                  - '--data'
                  - inputPath: data
        arguments:
          data: constant
        annotations:
          editor.position: '{"x":270,"y":810,"width":180,"height":40}'
      Consume string as value:
        componentRef:
          spec:
            name: Consume string as value
            inputs:
              - name: data
                type: String
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_string_as_value(data):
                        print("consume_string_as_value: " + data)

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume string as value', description='')
                    _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_string_as_value(**_parsed_args)
                args:
                  - '--data'
                  - inputValue: data
        arguments:
          data: constant
        annotations:
          editor.position: '{"x":50,"y":880,"width":180,"height":40}'
      Consume string as file:
        componentRef:
          spec:
            name: Consume string as file
            inputs:
              - name: data
                type: String
            implementation:
              container:
                image: 'python:3.7'
                command:
                  - sh
                  - '-ec'
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume_string_as_file(data_path):
                        with open(data_path) as f:
                            print("consume_string_as_file: " + f.read())

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume string as file', description='')
                    _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume_string_as_file(**_parsed_args)
                args:
                  - '--data'
                  - inputPath: data
        arguments:
          data: constant
        annotations:
          editor.position: '{"x":270,"y":880,"width":180,"height":40}'
    outputValues: {}
